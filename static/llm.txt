Below is all the contents of our docs: 



 This is the content for the doc .github/PULL_REQUEST_TEMPLATE.md 

 <!--
Hello üëã Thank you for submitting a pull request.

To help us merge your PR, make sure to follow the instructions below:

- Create or update the documentation. (Should be made against the `main` branch)
- Create or update the tests.
- Refer to the issue you are closing in the PR description - fix #issue
- Specify if the PR is in WIP (work in progress) state or ready to be merged

Please ensure you read through the Contributing Guide: 
https://github.com/strapi/documentation/blob/main/CONTRIBUTING.md
-->

### What does it do?

Describe the technical changes you did.

### Why is it needed?

Describe the issue you are solving.

### Related issue(s)/PR(s)

Let us know if this is related to any issue/pull request


 This is the content for the doc CODE_OF_CONDUCT.md 

 # Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our community include:

- Demonstrating empathy and kindness toward other people
- Being respectful of differing opinions, viewpoints, and experiences
- Giving and gracefully accepting constructive feedback
- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience
- Focusing on what is best not just for us as individuals, but for the overall community

Examples of unacceptable behavior include:

- The use of sexualized language or imagery, and sexual attention or advances of any kind
- Trolling, insulting or derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or email address, without their explicit permission
- Other conduct which could reasonably be considered inappropriate in a professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.

Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at hi@strapi.io. All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series of actions.

**Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.1, available at [https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].

Community Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder][Mozilla CoC].

For answers to common questions about this code of conduct, see the FAQ at [https://www.contributor-covenant.org/faq][FAQ]. Translations are available at [https://www.contributor-covenant.org/translations][translations].

[homepage]: https://www.contributor-covenant.org
[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html
[Mozilla CoC]: https://github.com/mozilla/diversity
[FAQ]: https://www.contributor-covenant.org/faq
[translations]: https://www.contributor-covenant.org/translations


 This is the content for the doc CONTRIBUTING.md 

 # Contribute to the Strapi documentation

Strapi‚Äôs documentation is open-source, hosted on GitHub in the present `strapi/documentation` repository. The [Strapi Documentation team](https://strapi.io/company) maintains the repository and the corresponding official website hosted at [docs.strapi.io](https://docs.strapi.io).

The Strapi Documentation team does not maintain blog articles hosted at [strapi.io/blog](https://strapi.io/blog) or any other educational or informational content not hosted on the [official documentation website](docs.strapi.io); these should not be subject to GitHub pull requests or issues on the present repository.

We appreciate your interest and efforts to contribute to Strapi! Though all contributions are highly appreciated, we recommend you talk to a maintainer (`@pwizla` or `@meganelacheny`) prior to investing a lot of time in a pull request that may not align with the project roadmap or would modify the UI, UX, or any other part of the Strapi Documentation product experience. Please note that contributions, pull requests, and issues should be written in English.

The Strapi Documentation team reviews pull requests and either merges, requests changes, or comments and closes the pull request. You can open a documentation pull request by:

- forking the `documentation` repository and working locally,
- or, for smaller updates, clicking the `Improve this page` link at the bottom of any documentation page to directly edit in GitHub.

Contributing to the Strapi documentation implies 2 steps:

1. Learn how to use [Docusaurus](#-docusaurus), the tool used to write and generate Strapi's documentation.

2. [Submit a pull request](#-pull-requests) for review.

## ü¶ñ Docusaurus

Strapi‚Äôs documentation is built with the React- and Markdown-based [Docusaurus](https://docusaurus.io) framework.

To start contributing to Strapi‚Äôs documentation using Docusaurus, you need to understand the [files and branches architecture](#use-the-files-architecture-and-branch-names-conventions-appropriately), and use the proper [syntax to format content](#use-the-proper-formatting-and-syntax). Additionally, if you want to work locally from a repository fork, you should [set up the Docusaurus project](#working-locally-set-up-the-project) on your machine.

### Use the files architecture and branch names conventions appropriately

Strapi‚Äôs documentation includes 3 big sections, 2 for the CMS and 1 for Strapi Cloud, each section living in a different folder. You should prefix the name of your contribution‚Äôs branch with the corresponding section name:

| Section name      | Target content                                                    | Folder                        | Branch name prefix |
| ------------------| ----------------------------------------------------------------- | ----------------------------- | ------------------ |
| [CMS Docs](https://docs.strapi.io/cms) | For all things related to Strapi CMS | `/docusaurus/docs/cms/` | `cms/`            |
| [Cloud Docs](https://docs.strapi.io/cloud) | For all things related to Strapi Cloud                            | `/docusaurus/docs/cloud/`     | `cloud/`           |

‚ÑπÔ∏è In the rare case of a pull request that impacts multiple parts of the repository (for instance user guide + dev docs), please prefix your branch with `repo/`.

### Use the proper formatting and syntax

Docusaurus is MDX-based, meaning the content you write is [Markdown](https://daringfireball.net/projects/markdown/syntax) that accepts [React](https://reactjs.org/) components.

The Strapi Documentation team has created a complete style guide for you to make the best out of the various options available:

üëâ [Strapi Documentation Style Guide](STYLE_GUIDE.pdf) 

üíÅ While writing, please consider the [12 Rules of Technical Writing](https://strapi.notion.site/12-Rules-of-Technical-Writing-c75e080e6b19432287b3dd61c2c9fa04) that the Strapi Documentation team will use to assess the quality and consistency of the contribution. üòä

‚ö†Ô∏è **Important: Please disable any linter or automatic formatting tool(s)** before saving and submitting your files. Not doing so could, at best, add unnecessary formatting changes to the submitted PR or, at worst, prevent Docusaurus from properly rendering some pages.

### Working locally: Set up the project

To set up the Docusaurus project on your machine, perform the following steps from a terminal instance:

1. Clone the repository: `git clone [access-path-to-your-forked-repository]`<br/>(for instance, `git clone git@github.com:my-github-handle/documentation.git`<br/>‚Äî see GitHub documentation for [more information about forks](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/about-forks)).
2. Enter the `documentation` folder (which is the name of the repository) and then the `docusaurus` folder: `cd documentation/docusaurus`
3. _(optional, if the repository already exists on your machine)_<br/>Get the latest updates from the `main` branch: `git checkout main && git pull`
4. Install dependencies and start the server: `yarn && yarn dev`
    
    ‚ö†Ô∏è Docusaurus requires node 16.14+. You may use [nvm](https://github.com/nvm-sh/nvm) to install and run the correct node version.
    
5. Once the terminal reads ‚Äú`client (webpack [version number] compiled successfully`,‚Äù open [localhost:8080](http://localhost:8080) in your browser to view the website.

You can now start changing content and see the website updated live each time you save a new file. ü§ì

## üëÄ Pull requests

***
‚ö†Ô∏è **Important prerequisite: Build the content locally before submitting a pull request üëá**

The documentation repository uses a continuous integration/continuous delivery workflow. If the pages are not built and rendered properly, the auto-deployment process on [docs.strapi.io](http://docs.strapi.io) triggered when the pull request is merged with `main` will fail.

To prevent building issues upstream, before submitting your pull request, please stop the development server and build the page locally: in the terminal instance, press `Ctrl-C` to stop the server, then run `yarn build`.

- If no issues are reported (‚Äùclient‚Äù and ‚Äúserver compiled successfully‚Äù), go ahead and submit the pull request. 
- If some issues are reported (e.g., broken links), please use information reported by the terminal to fix issues, then try another `yarn build`, and repeat until no issues are reported.

***

Your pull request should usually target the `main` branch, though the Strapi Documentation team might sometimes ask you to target another branch.

To submit your contribution for review:

1. Create a new [pull request on GitHub](https://github.com/strapi/documentation/compare).
2. Give it a proper title and description.
3. Click the ‚ÄúCreate pull request‚Äù button to create the pull request effectively.
    
    ‚úèÔ∏è If your pull request is not ready for review yet, choose the ‚Äú[Create draft pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)‚Äù in the dropdown. The Strapi documentation team will review your pull request only when you will mark it as ‚Äú[Ready for review](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request)‚Äù. 
   ‚ö†Ô∏è Please use Draft PRs to work incrementally. A PR that is not marked as draft is considered ready for review and merge once approved, unless it documents a feature that is not merged yet. There is no need to write "ready to merge" in the PR description or comments.
   
4. _(optional ‚Äî if not set, the Strapi Documentation team will set or update this for you)_:<br/>Add GitHub labels for:
   - the section of the documentation targeted by the pull request: `source: CMS` or `source: Strapi Cloud`
   - the type of updates introduced by the pull request: 
     - `pr: new content` for new features,
     - `pr: updated content` for significant (20+ lines) updates to existing features,
     - or `pr: chore` for smaller improvements (fixes, typos, chore tasks‚Ä¶).
    
**‚ö†Ô∏è Important: Add the `flag: merge pending release` if the Strapi Documentation team should wait before merging the pull request.** Approved pull requests are usually merged immediately into the `main` branch, automatically triggering a deployment on docs.strapi.io. Please use the `flag: merge pending release` label if the pull request content should only be released publicly in sync with a product release (e.g., if you submit a pull request to document a contribution to the `strapi/strapi` repository).


That‚Äôs it! ü•≥ Once the pull request is [reviewed and approved](#review-and-management-of-pull-requests), the Strapi Documentation team will merge it, and the content will be live on [docs.strapi.io](http://docs.strapi.io) a few minutes later. üöÄ


## Review and management of pull requests

The pull request review process and timeline are based on the availability of the Strapi Documentation team to handle community contributions. The workflow is as follows:

1. The pull request is assigned to a member of the Documentation team.
2. At least 1 member of the Documentation team will review the pull request for:

   - accuracy,
   - quality,
   - alignment with the documentation scope and roadmap.

3. Reviewers will either approve, ask for changes, or reject the pull request.
4. Accepted pull requests will be merged and automatically deployed on [docs.strapi.io](https://docs.strapi.io) a few minutes later. 


 This is the content for the doc README.md 

 <p align="center">
  <a href="https://strapi.io">
    <img src="./docusaurus/static/img/logo.png" width="314px" alt="Strapi logo" />
  </a>
</p>
<h3 align="center">API creation made simple, secure and fast.</h3>
<p align="center">The most advanced open-source headless CMS to build powerful APIs with no effort.</p>
<br />

---

If you are looking for the Strapi code, please see the [Strapi Monorepo](https://github.com/strapi/strapi). The present repository is only for the official Strapi documentation hosted at [docs.strapi.io](https://docs.strapi.io). Blog articles hosted at [strapi.io/blog](https://strapi.io/blog) and [community content](https://github.com/strapi/community-content) are not covered by the present repository either.

---

Strapi is a free and open-source headless CMS that delivers your content anywhere you need.

- **Keep control over your data**. With Strapi, you know where your data is stored, and you keep full control at all times.
- **Self-hosted**. You can host and scale Strapi projects the way you want. You can choose any hosting platform you want: AWS, Netlify, Heroku, a VPS, or a dedicated server. You can scale as you grow, 100% independent.
- **Database agnostic**. You can choose the database you prefer. Strapi works with SQL databases: PostgreSQL, MySQL, MariaDB, and SQLite.
- **Customizable**. You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.

## Documentation websites

The main official Strapi documentation website is hosted at [docs.strapi.io](https://docs.strapi.io).

Additional official Strapi documentation websites cover different content:

- Documentation for the older version 4 of Strapi is hosted at [docs-v4.strapi.io](https://docs-v4.strapi.io) and featured in the `v4` branch. This branch is not actively maintained by the Strapi Documentation team, but community contributions are most welcome!
<!-- - Upcoming, experimental documentation is hosted at [docs-next.strapi.io](https://docs-next.strapi.io). Starting autumn/winter 2024, this website will include an all-new documentation ‚Äî more info soon! -->
- Documentation for the older, unsupported version 3 of Strapi is hosted at [docs-v3.strapi.io](https://docs-v3.strapi.io).
- Documentation for contributors, which include more in-depth and experimental content for developers who actively maintain and contribute to Strapi, is hosted at [contributor.strapi.io](https://contributor.strapi.io). This experimental documentation is maintained by Strapi engineers and any issue should be reported to the [`strapi/strapi`](https://github.com/strapi/strapi/issues/new/choose) repository.
- Documentation for the Strapi Design System is hosted at [design-system.strapi.io](https://design-system.strapi.io/) and maintained by Strapi front-end engineers in its [dedicated repository](https://github.com/strapi/design-system/).


## Contribution requirements

The following are required if you are submitting pull requests to the documentation:

- NodeJS >=18.15.0 <=22.x.x
- NPM >= 6.x
- Yarn >= 1.22.x

üëâ For more information on how to contribute, please read our [contribution guide](./CONTRIBUTING.md).

## Issues

Submitting issues help to improve the documentation. If you find incorrect screenshot(s), instructions, or code examples, or if you discover UX/UI bugs on the website, please use our [documentation issue](https://github.com/strapi/documentation/issues/new?template=BUG_REPORT.yml) template to report them. To submit an issue:

1. Verify the issue is only with one of the Strapi documentation websites. Product-related issues, missing Strapi features, and any issues not directly related to the documentation should be directed at the main [strapi/strapi](https://github.com/strapi/strapi) repository. Updates to blog posts found at [strapi.io/blog](https://strapi.io/blog) are also outside the scope of the present documentation repository; you can either reach the author of the blog post directly or use the [contact form](https://strapi.io/contact) on Strapi's corporate website if you have questions about blog posts.
2. Follow the issue template and fill out as much information as you can.
  
Technical questions should be asked using the following resources:

- Open a Q&A thread on our [official forum](https://forum.strapi.io).
- Engage with other community members on our [community Discord server](https://discord.strapi.io).

## Requests

Requests for new documentation are highly encouraged. This is not limited to new additions but also changes or more information requested on existing documentation. Please use our [request documentation](https://github.com/strapi/documentation/issues/new?template=DOC_REQUEST.md&title%5B%5D=REQUEST) issue template. These requests will be checked by the Strapi Documentation team then transferred to another internal tool outside GitHub for priorization and subsequent actions.

## Releases

Thanks to a continuous integration/continuous delivery workflow, the Strapi documentation can be updated up to several times a day, depending on the number and frequency of contributions. Weekly snapshot [releases](https://github.com/strapi/documentation/releases) happen on Wednesdays and include a list of changes since the latest release.

## Community support

For general help using Strapi, please refer to [the official Strapi documentation](https://strapi.io/documentation/). For additional help, you can use one of these channels to ask a question:

- [Discord](http://discord.strapi.io) (For live discussion with the Community and Strapi team)
- [Primary GitHub](https://github.com/strapi/strapi) (Bug reports, Contributions)
- [Community Forum](https://forum.strapi.io) (Questions and Discussions)
- [Canny](https://strapi.canny.io/) (Roadmap, Feature requests)
- [Twitter](https://twitter.com/strapijs) (Get the news fast)
- [Facebook](https://www.facebook.com/Strapi-616063331867161)
- [YouTube Channel](https://www.youtube.com/strapi) (Learn from Video Tutorials)

## License

See the [LICENSE](./LICENSE) file for licensing information.

## Code of Conduct

This project and everyone participating in it are governed by the [Strapi Code of Conduct](CODE_OF_CONDUCT.md). By participating, you are expected to uphold the code.

## Package version

Please note that, starting with Strapi 5, strapi/documentation and strapi/strapi package version numbers are not synchronized any more. Strapi Docs are treated as their own product and will follow their own numbering system.


 This is the content for the doc SECURITY.md 

 # Security Policy

## Supported Versions

As of September 2024 (and until this document is updated), only the v4.x.x and v5.x.x _GA_ or _STABLE_ releases of Strapi are supported for updates and bug fixes. Any previous versions are currently not supported and users are advised to use them "at their own risk".

**Note**: The v4.x.x LTS version will only receive high/critical severity fixes until April 2026. Any Medium/Low severity issues will not be fixed unless specific exceptions are made.

| Version | Release Tag | Support Starts | Support Ends   | Security Updates Until | Notes                          |
| ------- | ----------- | -------------- | -------------- | ---------------------- | ------------------------------ |
| 5.x.x   | GA / Stable | September 2024 | Further Notice | Further Notice         | LTS                            |
| 5.x.x   | RC          | N/A            | September 2024 | N/A                    | Not Supported                  |
| 5.x.x   | Beta        | N/A            | N/A            | N/A                    | Not Supported                  |
| 5.x.x   | Alpha       | N/A            | N/A            | N/A                    | Not Supported                  |
| 4.x.x   | GA / Stable | November 2021  | October 2025   | April 2026             | LTS (High/Critical fixes only) |
| 4.x.x   | Beta        | N/A            | N/A            | N/A                    | Not Supported                  |
| 4.x.x   | Alpha       | N/A            | N/A            | N/A                    | Not Supported                  |
| 3.x.x   | N/A         | N/A            | N/A            | N/A                    | End Of Life                    |

## Reporting a Vulnerability

Please report (suspected) security vulnerabilities via GitHub's security advisory reporting system:
Submit your vulnerability via [this link](https://github.com/strapi/strapi/security/advisories/new)

**Strapi does not currently and has no plans to offer any bug bounties, swag, or any other reward for reporting vulnerabilities.**

During our public disclosure, we can give credit to the reporter and link to any social accounts you wish to have us add, including linking to your own blog post detailing the vulnerability.

Please note the following requirements (all are required):

- Summary of the suspected vulnerability
- Detailed information as to what the suspected vulnerability does and what it has access to
- Proof of Concept (Code samples at minimum, reproduction video optional)
  - POC must include how the vulnerability can actually access sensitive data, simply triggering an alert popup in a browser is not a security vulnerability
- Impact summary (who does this impact and how)

Optionally you may also add your estimated CVSS 3.1 score, though we may adjust. There is no need to submit a CVE request as we will do that as part of the advisory process.

You will receive a response from us within 72 hours. If the issue is confirmed, we will release a patch as soon as possible depending on complexity but historically within a few days.

Please note that we follow a very strict internal and public disclosure policy, typically a patch will be issued and included in a release. We then will place a warning that a security vulnerability has been patched and delay detailed disclosure from 2 to 8 weeks depending on the severity of the issue. If you have any resources such as blog posts that you intend to publish on and would like us to include these in our disclosure please advise us ASAP.

Before doing any public disclosure we do ask that you speak to us first to ensure we are not releasing too much information before a patch is available and time has been given to users to upgrade their projects.

## Security Process Summary

Below is a breakdown of our security process in order to set expectations:

1. Initial submission of vulnerability via GitHub's Advisory system
2. Begin internal tracking and communication to reporter
3. Internal validation of vulnerability
4. Internal notification and scheduling for patch development
5. Begin development of patch
6. Validation of patch (Internal and with the reporter)
7. GitHub advisory cleanup
8. Requesting of CVE via GitHub
9. Disclosure and communication draft
10. Patch released with initial warning via patch notes
11. Email communication to Strapi Enterprise customers
12. Mandatory waiting period (between 2 to 8 weeks)
13. Publishing GitHub Advisory & CVE
14. Public disclosure (via blog post)
15. Email communication to Strapi Enterprise customers

## Other reporting platforms and bounties

Strapi does not support other reporting platforms, all security vulnerabilities must be made via GitHub Advisory system. If you are unable to report via this method you may open a security ticket with us by emailing security@strapi.io and we will create one on your behalf but if you do not have a GitHub user account we will not be able to share the private fork, pull request, or any other information with you during the process.

List of some (though not all) platforms **we do not support**:

- huntr.dev
- Direct email or communication to Strapi employees (Discord, Slack, or Email)
- Stack Overflow


 This is the content for the doc docusaurus/docs/cloud/account/account-billing.md 

 ---
title: Account billing details
displayed_sidebar: cloudSidebar
description: Manage billing details for Strapi Cloud account.
canonicalUrl: https://docs.strapi.io/cloud/account/account-billing.html
tags:
- billing details
- cancel subscription
- edit subscription
- manage subscription
- Strapi Cloud
- Strapi Cloud project
---

import InvoiceStatus from '/docs/snippets/invoices-statuses.md'

# Account billing & invoices 

Through the *Profile* page, accessible by clicking on your profile picture on the top right hand corner of the interface then clicking on **Profile**, you can access the [<Icon name="credit-card" /> *Billing*](#account-billing) and [<Icon name="invoice" /> *Invoices*](#account-invoices) tabs.

## Account billing

The <Icon name="credit-card" /> *Billing* tab displays and enables you to modify the billing details and payment method set for the account.

<ThemedImage
  alt="Billing tab of Profile page"
  sources={{
      light: '/img/assets/cloud/account-billing2.png',
      dark: '/img/assets/cloud/account-billing2_DARK.png',
    }}
/>

The *Payment method* section of the <Icon name="credit-card" /> *Billing* tab allows you to manage the credit cards that can be used for the Strapi Cloud projects. The *Billing details* section requires to be filled in, at least for the mandatory fields, as this information will be the default billing details for all Strapi Cloud projects related to your account.

### Adding a new credit card

1. In the *Payment method* section of the <Icon name="credit-card" /> *Billing* tab, click on the **Add card** button.
2. Fill in the following fields:

| Field name | Description |
| --- | --- |
| Card Number | Write the number of the credit card to add as payment method. |
| Expires | Write the expiration date of the credit card. |
| CVC | Write the 3-numbers code displayed at the back of the credit card. |

3. Click on the **Save** button.

:::tip
The first credit card to be added as payment method for the account will by default be the primary one. It is however possible to define another credit card as primary by clicking on the <Icon name="dots-three-outline" /> icon, then **Switch as primary**.
:::

### Deleting a credit card

To remove a credit card from the list of payment methods for the account:

1. Click on the <Icon name="dots-three-outline" /> icon of the credit card you wish to delete.
2. Click **Remove card**. The card is immediately deleted.

:::note
You cannot delete the primary card as at least one credit card must be available as payment method, and the primary card is by default that one. If the credit card you wish to delete is currently the primary card, you must first define another credit card as primary, then delete it.
:::

## Account invoices

The <Icon name="invoice" /> *Invoices* tab displays the complete list of invoices for all your Strapi Cloud projects.

<ThemedImage
  alt="Invoices tab of Profile page"
  sources={{
      light: '/img/assets/cloud/account-invoices.png',
      dark: '/img/assets/cloud/account-invoices_DARK.png',
    }}
/>

<InvoiceStatus components={props.components} />

:::strapi Invoices are also available per project.
In the *Settings > Invoices* tab of any project, you will find the invoices for that project only. Feel free to check the [dedicated documentation](/cloud/projects/settings#invoices).
:::


 This is the content for the doc docusaurus/docs/cloud/account/account-settings.md 

 ---
title: Profile settings
displayed_sidebar: cloudSidebar
description: Manage Strapi Cloud account settings.
canonicalUrl: https://docs.strapi.io/cloud/account/account-settings.html
tags:
- connect account
- delete account
- profile setting
- project settings
- Strapi Cloud
- Strapi Cloud project
pagination_next: cloud/account/account-billing
---

# Profile settings

The *Profile* page enables you to manage your account details and preferences. It is accessible by clicking on your profile picture, on the top right hand corner of the interface, and **Profile**.

There are 3 tabs available in the *Profile* interface: <Icon name="faders" /> [*General*](#general), <Icon name="credit-card" /> *Billing* and <Icon name="invoice" /> Invoices (the last 2 are documented in the [Account billing details](/cloud/account/account-billing) section of this documentation).

## General

The <Icon name="faders" /> *General* tab enables you to edit the following details for your account profile:

- Details: to see the name associated with your account.
- Connected accounts: to manage Google, GitHub and GitLab accounts connected with your Strapi Cloud account (see [Managing connected accounts](#managing-connected-accounts)).
- Delete account: to permanently delete your Strapi Cloud account (see [Deleting Strapi Cloud account](#deleting-strapi-cloud-account)).

<ThemedImage
  alt="General tab of Profile page"
  sources={{
    light: '/img/assets/cloud/settings-general.png',
    dark: '/img/assets/cloud/settings-general_DARK.png',
  }}
/>

### Managing connected accounts

You can connect a Google, GitLab and GitHub account to your Strapi Cloud account. The _Connected accounts_ section lists accounts that are currently connected to your Strapi Cloud account. From there you can also connect a new Google, GitLab and GitHub account if one is not already connected.

To connect a new Google, GitLab or GitHub account to your Strapi Cloud account, click on the **Connect account** button and follow the next steps on the corresponding website.

You can also click on the three dots button of a connected account and click on the "Manage on" button to manage your GitHub, GitLab or Google account directly on the corresponding website.

### Deleting Strapi Cloud account

You can delete your Strapi Cloud account, but it will be permanent and irreversible. All associated projects and their data will be deleted as well and the subscriptions for the projects will automatically be canceled.

1. In the *Delete account* section of the <Icon name="faders" /> *General* tab, click on the **Delete account** button.
2. In the dialog, type `DELETE` in the textbox.
3. Confirm the deletion of your account by clicking on the **Delete** button.


 This is the content for the doc docusaurus/docs/cloud/advanced/database.md 

 ---
title: Database
displayed_sidebar: cloudSidebar
description: Configure your own database on Strapi Cloud.
canonicalUrl: https://docs.strapi.io/cloud/advanced/database.html
tags:
- configuration
- database
- deployment
- PostgreSQL
- Strapi Cloud
- Strapi Cloud project
pagination_next: cloud/advanced/email
---

# Database

Strapi Cloud provides a pre-configured PostgreSQL database by default. However, you can also configure it to utilize an external SQL database, if needed.

:::prerequisites
- A local Strapi project running on `v4.8.2+`.
- Credentials for an external database.
- If using an existing database, the schema must match the Strapi project schema.
:::

:::caution
While it's possible to use an external database with Strapi Cloud, you should do it while keeping in mind the following considerations:
- Strapi Cloud already provides a managed database that is optimized for Strapi.
- Using an external database may result in unexpected behavior and/or performance issues (e.g., network latency may impact performance). For performance reasons, it's recommended to host your external database close to the region where your Strapi Cloud project is hosted. You can find where your Strapi Cloud project is hosted in your Project Settings (see [Project Settings > General > Selected Region](/cloud/projects/settings#general)).
- Strapi can't provide security or support with external databases used with Strapi Cloud.
:::


## Configuration

The project `./config/database.js` or `./config/database.ts` file must match the configuration found in the [environment variables in database configurations](https://docs.strapi.io/cms/configurations/database#environment-variables-in-database-configurations) section.

Before pushing changes, add environment variables to the Strapi Cloud project:

1. Log into Strapi Cloud and click on the corresponding project on the Projects page.
2. Click on the **Settings** tab and choose **Variables** in the left menu.
3. Add the following environment variables:

    | Variable                           | Value            | Details  |
    | ---------------------------------- | ---------------- |----------|
    | `DATABASE_CLIENT`                  | your_db          | Should be one of `mysql`, `postgres`, or `sqlite`. |
    | `DATABASE_HOST`                    | your_db_host     | The URL or IP address of your database host |
    | `DATABASE_PORT`                    | your_db_port     | The port to access your database |
    | `DATABASE_NAME`                    | your_db_name     | The name of your database |
    | `DATABASE_USERNAME`                | your_db_username | The username to access your database |
    | `DATABASE_PASSWORD`                | your_db_password | The password associated to this username |
    | `DATABASE_SSL_REJECT_UNAUTHORIZED` | false            | Whether unauthorized connections should be rejected |
    | `DATABASE_SCHEMA`                  | public           | - |

4.  Click **Save**.

:::caution
To ensure a smooth deployment, it is recommended to not change the names of the environment variables.
:::

## Deployment

To deploy the project and utilize the external database, push the changes from earlier. This will trigger a rebuild and new deployment of the Strapi Cloud project.

Once the application finishes building, the project will use the external database.

## Reverting to the default database

To revert back to the default database, remove the previously added environment variables related to the external database from the Strapi Cloud project dashboard, and save. For the changes to take effect, you must redeploy the Strapi Cloud project.


 This is the content for the doc docusaurus/docs/cloud/advanced/email.md 

 ---
title: Email Provider
displayed_sidebar: cloudSidebar
description: Configure Strapi Cloud to use a third-party email provider.
canonicalUrl: https://docs.strapi.io/cloud/advanced/email.html
tags:
- configuration
- email provider
- provider
- plugins
- Strapi Cloud
- Strapi Cloud project
---

# Email Provider

Strapi Cloud comes with a basic email provider out of the box. However, it can also be configured to utilize another email provider, if needed.

:::caution
Please be advised that Strapi is unable to provide support for third-party email providers.

:::

:::prerequisites

- A local Strapi project running on `v4.8.2+`.
- Credentials for another email provider (see <ExternalLink to="https://market.strapi.io/providers" text="Strapi Market"/>).

:::

## Configuration

Configuring another email provider for use with Strapi Cloud requires 3 steps:

1. Install the provider plugin in your local Strapi project.
2. Configure the provider in your local Strapi project.
3. Add environment variables to the Strapi Cloud project.

### Install the Provider Plugin

Using either `npm` or `yarn`, install the provider plugin in your local Strapi project as a package dependency by following the instructions in the respective entry for that provider in the <ExternalLink to="https://market.strapi.io/providers" text="Marketplace"/>.

### Configure the Provider

In your Strapi project, create a `./config/env/production/plugins.js` or `./config/env/production/plugins.ts` file with the following content:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title=./config/env/production/plugins.js

module.exports = ({ env }) => ({
  // ‚Ä¶ some unrelated plugins configuration options
  // highlight-start
  email: {
    config: {
        // ‚Ä¶ provider-specific upload configuration options go here
    }
  // highlight-end
  // ‚Ä¶ some other unrelated plugins configuration options
  }
});
```

</TabItem>
<TabItem value="ts" label="TypeScript">

```ts title=./config/env/production/plugins.ts

export default ({ env }) => ({
  // ‚Ä¶ some unrelated plugins configuration options
  // highlight-start
  email: {
    config: {
        // ‚Ä¶ provider-specific upload configuration options go here
    }
  // highlight-end
  // ‚Ä¶ some other unrelated plugins configuration options
  }
});
```

</TabItem>

</Tabs>

:::caution
The file structure must match the above path exactly, or the configuration will not be applied to Strapi Cloud.
:::

Each provider will have different configuration settings available. Review the respective entry for that provider in the <ExternalLink to="https://market.strapi.io/providers" text="Marketplace"/>.

**Example:**
<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">
<Tabs groupId="email-examples" >
<TabItem value="sendgrid" label="Sendgrid">

```js title=./config/env/production/plugins.js
module.exports = ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'sendgrid',
      providerOptions: {
        apiKey: env('SENDGRID_API_KEY'),
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
  // ...
});
```

</TabItem >
<TabItem value="amazon-ses" label="Amazon SES">

```js title=./config/env/production/plugins.js
module.exports = ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'amazon-ses',
      providerOptions: {
        key: env('AWS_SES_KEY'),
        secret: env('AWS_SES_SECRET'),
        amazon: 'https://email.us-east-1.amazonaws.com',
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
  // ...
});
```

</TabItem>
<TabItem value="mailgun" label="Mailgun">

```js title=./config/env/production/plugins.js
module.exports = ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'mailgun',
      providerOptions: {
        key: env('MAILGUN_API_KEY'), // Required
        domain: env('MAILGUN_DOMAIN'), // Required
        url: env('MAILGUN_URL', 'https://api.mailgun.net'), //Optional. If domain region is Europe use 'https://api.eu.mailgun.net'
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
  // ...
});
```

</TabItem>
</Tabs>
</TabItem>
<TabItem value="ts" label="TypeScript">
<Tabs groupId="email-examples" >
<TabItem value="sendgrid" label="Sendgrid">

```ts title=./config/env/production/plugins.ts
export default ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'sendgrid',
      providerOptions: {
        apiKey: env('SENDGRID_API_KEY'),
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
  // ...
});
```

</TabItem >
<TabItem value="amazon-ses" label="Amazon SES">

```ts title=./config/env/production/plugins.ts
export default ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'amazon-ses',
      providerOptions: {
        key: env('AWS_SES_KEY'),
        secret: env('AWS_SES_SECRET'),
        amazon: 'https://email.us-east-1.amazonaws.com',
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
  // ...
});
```

</TabItem>
<TabItem value="mailgun" label="Mailgun">

```ts title=./config/env/production/plugins.ts
export default ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'mailgun',
      providerOptions: {
        key: env('MAILGUN_API_KEY'), // Required
        domain: env('MAILGUN_DOMAIN'), // Required
        url: env('MAILGUN_URL', 'https://api.mailgun.net'), //Optional. If domain region is Europe use 'https://api.eu.mailgun.net'
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
  // ...
});
```

</TabItem>
</Tabs>
</TabItem>
</Tabs>

:::tip
Before pushing the above changes to GitHub, add environment variables to the Strapi Cloud project to prevent triggering a rebuild and new deployment of the project before the changes are complete.
:::

### Strapi Cloud Configuration

1. Log into Strapi Cloud and click on the corresponding project on the Projects page.
2. Click on the **Settings** tab and choose **Variables** in the left menu.
3. Add the required environment variables specific to the email provider.
4. Click **Save**.

**Example:**

<Tabs groupId="env-var">
<TabItem value="sendgrid" label="SendGrid">

| Variable           | Value                 |
|--------------------|-----------------------|
| `SENDGRID_API_KEY` | your_sendgrid_api_key |

</TabItem>
<TabItem value="amazon-ses" label="Amazon SES">

| Variable         | Value               |
|------------------|---------------------|
| `AWS_SES_KEY`    | your_aws_ses_key    |
| `AWS_SES_SECRET` | your_aws_ses_secret |

</TabItem>
<TabItem value="mailgun" label="Mailgun">

| Variable          | Value                |
|-------------------|----------------------|
| `MAILGUN_API_KEY` | your_mailgun_api_key |
| `MAILGUN_DOMAIN`  | your_mailgun_domain  |
| `MAILGUN_URL`     | your_mailgun_url     |

</TabItem>

</Tabs>

## Deployment

To deploy the project and utilize another party email provider, push the changes from earlier. This will trigger a rebuild and new deployment of the Strapi Cloud project.

Once the application finishes building, the project will use the new email provider.

:::strapi Custom Provider
If you want to create a custom email provider, please refer to the [Email providers](/cms/features/email#providers) documentation in the CMS Documentation.
:::


 This is the content for the doc docusaurus/docs/cloud/advanced/upload.md 

 ---
title: Upload Provider
displayed_sidebar: cloudSidebar
description: Configure Strapi Cloud to use a third-party upload provider.
canonicalUrl: https://docs.strapi.io/cloud/advanced/upload.html
tags:
- configuration
- upload provider
- provider
- plugins
- middlewares
- Strapi Cloud
- Strapi Cloud configuration
- Strapi Cloud project
---

# Upload Provider

Strapi Cloud comes with a local upload provider out of the box. However, it can also be configured to utilize a third-party upload provider, if needed.

:::caution
Please be advised that Strapi is unable to provide support for third-party upload providers.
:::

:::prerequisites

- A local Strapi project running on `v4.8.2+`.
- Credentials for a third-party upload provider (see <ExternalLink to="https://market.strapi.io/providers" text="Strapi Market"/>).

:::

## Configuration

Configuring a third-party upload provider for use with Strapi Cloud requires 4 steps:

1. Install the provider plugin in your local Strapi project.
2. Configure the provider in your local Strapi project.
3. Configure the Security Middleware in your local Strapi project.
4. Add environment variables to the Strapi Cloud project.

### Install the Provider Plugin

Using either `npm` or `yarn`, install the provider plugin in your local Strapi project as a package dependency by following the instructions in the respective entry for that provider in the <ExternalLink to="https://market.strapi.io/providers" text="Marketplace"/>.

### Configure the Provider

To configure a 3rd-party upload provider in your Strapi project, create or edit the plugins configuration file for your production environment `./config/env/production/plugins.js|ts` by adding upload configuration options as follows:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title=./config/env/production/plugins.js

module.exports = ({ env }) => ({
// ‚Ä¶ some unrelated plugins configuration options
// highlight-start
upload: {
   config: {
      // ‚Ä¶ provider-specific upload configuration options go here
   }
// highlight-end
// ‚Ä¶ some other unrelated plugins configuration options
}
});
```

</TabItem>
<TabItem value="ts" label="TypeScript">

```ts title=./config/env/production/plugins.ts

export default ({ env }) => ({
// ‚Ä¶ some unrelated plugins configuration options
// highlight-start
upload: {
   config: {
      // ‚Ä¶ provider-specific upload configuration options go here
   }
// highlight-end
// ‚Ä¶ some other unrelated plugins configuration options
}
});
```

</TabItem>
</Tabs>

:::caution
The file structure must match the above path exactly, or the configuration will not be applied to Strapi Cloud.
:::

Each provider will have different configuration settings available. Review the respective entry for that provider in the <ExternalLink to="https://market.strapi.io/providers" text="Marketplace"/>.

**Example:**
<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">
<Tabs groupId="upload-examples" >
<TabItem value="cloudinary" label="Cloudinary">

```js title=./config/env/production/plugins.js
module.exports = ({ env }) => ({
  // ...
  upload: {
    config: {
      provider: 'cloudinary',
      providerOptions: {
        cloud_name: env('CLOUDINARY_NAME'),
        api_key: env('CLOUDINARY_KEY'),
        api_secret: env('CLOUDINARY_SECRET'),
      },
      actionOptions: {
        upload: {},
        uploadStream: {},
        delete: {},
      },
    },
  },
  // ...
});
```

</TabItem >
<TabItem value="amazon-s3" label="Amazon S3">

```js title=./config/env/production/plugins.js
module.exports = ({ env }) => ({
  // ...
  upload: {
    config: {
      provider: 'aws-s3',
      providerOptions: {
        baseUrl: env('CDN_URL'),
        rootPath: env('CDN_ROOT_PATH'),
        s3Options: {
          accessKeyId: env('AWS_ACCESS_KEY_ID'),
          secretAccessKey: env('AWS_ACCESS_SECRET'),
          region: env('AWS_REGION'),
          params: {
            ACL: env('AWS_ACL', 'public-read'),
            signedUrlExpires: env('AWS_SIGNED_URL_EXPIRES', 15 * 60),
            Bucket: env('AWS_BUCKET'),
          },
        },
      },
      actionOptions: {
        upload: {},
        uploadStream: {},
        delete: {},
      },
    },
  },
  // ...
});
```

</TabItem>
</Tabs>
</TabItem>
<TabItem value="ts" label="TypeScript">
<Tabs groupId="upload-examples" >
<TabItem value="cloudinary" label="Cloudinary">

```ts title=./config/env/production/plugins.ts
export default ({ env }) => ({
  // ...
  upload: {
    config: {
      provider: 'cloudinary',
      providerOptions: {
        cloud_name: env('CLOUDINARY_NAME'),
        api_key: env('CLOUDINARY_KEY'),
        api_secret: env('CLOUDINARY_SECRET'),
      },
      actionOptions: {
        upload: {},
        uploadStream: {},
        delete: {},
      },
    },
  },
  // ...
});
```

</TabItem >
<TabItem value="amazon-s3" label="Amazon S3">

```ts title=./config/env/production/plugins.ts
export default ({ env }) => ({
  // ...
  upload: {
    config: {
      provider: 'aws-s3',
      providerOptions: {
        baseUrl: env('CDN_URL'),
        rootPath: env('CDN_ROOT_PATH'),
        s3Options: {
          accessKeyId: env('AWS_ACCESS_KEY_ID'),
          secretAccessKey: env('AWS_ACCESS_SECRET'),
          region: env('AWS_REGION'),
          params: {
            ACL: env('AWS_ACL', 'public-read'),
            signedUrlExpires: env('AWS_SIGNED_URL_EXPIRES', 15 * 60),
            Bucket: env('AWS_BUCKET'),
          },
        },
      },
      actionOptions: {
        upload: {},
        uploadStream: {},
        delete: {},
      },
    },
  },
  // ...
});
```

</TabItem>
</Tabs>
</TabItem>
</Tabs>

### Configure the Security Middleware

Due to the default settings in the Strapi Security Middleware you will need to modify the `contentSecurityPolicy` settings to properly see thumbnail previews in the Media Library.

To do this in your Strapi project:

1. Navigate to `./config/middleware.js` or `./config/middleware.ts` in your Strapi project.
2. Replace the default `strapi::security` string with the object provided by the upload provider.

**Example:**
<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">
<Tabs groupId="upload-examples" >
<TabItem value="cloudinary" label="Cloudinary">

```js title=./config/middleware.js
module.exports = [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'", 
            'data:', 
            'blob:', 
            'market-assets.strapi.io', 
            'res.cloudinary.com'
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'res.cloudinary.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
];
```

</TabItem>
<TabItem value="amazon-s3" label="Amazon S3">

```js title=./config/middleware.js
module.exports = [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
];
```

</TabItem>
</Tabs>
</TabItem>
<TabItem value="ts" label="TypeScript">
<Tabs groupId="upload-examples" >
<TabItem value="cloudinary" label="Cloudinary">

```ts title=./config/middleware.ts
export default [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'", 
            'data:', 
            'blob:', 
            'market-assets.strapi.io', 
            'res.cloudinary.com'
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'res.cloudinary.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
];
```

</TabItem>
<TabItem value="amazon-s3" label="Amazon S3">

```ts title=./config/middleware.ts
export default [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
];
```

</TabItem>
</Tabs>
</TabItem>
</Tabs>

:::tip
Before pushing the above changes to GitHub, add environment variables to the Strapi Cloud project to prevent triggering a rebuild and new deployment of the project before the changes are complete.
:::

### Strapi Cloud Configuration

1. Log into Strapi Cloud and click on the corresponding project on the Projects page.
2. Click on the **Settings** tab and choose **Variables** in the left menu.
3. Add the required environment variables specific to the upload provider.
4. Click **Save**.

**Example:**

<Tabs groupId="env-var">
<TabItem value="cloudinary" label="Cloudinary">

| Variable            | Value                   |
|---------------------|-------------------------|
| `CLOUDINARY_NAME`   | your_cloudinary_name    |
| `CLOUDINARY_KEY`    | your_cloudinary_api_key |
| `CLOUDINARY_SECRET` | your_cloudinary_secret  |

</TabItem>
<TabItem value="amazon-s3" label="Amazon S3">

| Variable            | Value                  |
|---------------------|------------------------|
| `AWS_ACCESS_KEY_ID` | your_aws_access_key_id |
| `AWS_ACCESS_SECRET` | your_aws_access_secret |
| `AWS_REGION`        | your_aws_region        |
| `AWS_BUCKET`        | your_aws_bucket        |
| `CDN_URL`           | your_cdn_url           |
| `CDN_ROOT_PATH`     | your_cdn_root_path     |

</TabItem>
</Tabs>

## Deployment

To deploy the project and utilize the third-party upload provider, push the changes from earlier. This will trigger a rebuild and new deployment of the Strapi Cloud project.

Once the application finishes building, the project will use the new upload provider.

:::strapi Custom Provider
If you want to create a custom upload provider, please refer to the [Providers](/cms/features/media-library#providers) documentation in the CMS Documentation.
:::


 This is the content for the doc docusaurus/docs/cloud/cli/cloud-cli.md 

 ---
sidebar_label: 'Cloud CLI'
displayed_sidebar: cloudSidebar
sidebar_position: 3
tags:
- Strapi Cloud
- CLI
- deployment
pagination_next: cloud/advanced/database
---

# Command Line Interface (CLI) <NewBadge />

Strapi Cloud comes with a Command Line Interface (CLI) which allows you to log in and out, and to deploy a local project without it having to be hosted on a remote git repository. The CLI works with both the `yarn` and `npm` package managers.

:::note
It is recommended to install Strapi locally only, which requires prefixing all of the following `strapi` commands with the package manager used for the project setup (e.g `npm run strapi help` or `yarn strapi help`) or a dedicated node package executor (e.g. `npx strapi help`).
:::

## strapi login

**Alias:** `strapi cloud:login`

Log in Strapi Cloud.

```bash
strapi login
```

This command automatically opens a browser window to first ask you to confirm that the codes displayed in both the browser window and the terminal are the same. Then you will be able to log into Strapi Cloud via Google, GitHub or GitLab. Once the browser window confirms successful login, it can be safely closed.

If the browser window doesn't automatically open, the terminal will display a clickable link as well as the code to enter manually.

## strapi deploy

**Alias:** `strapi cloud:deploy`

Deploy a new local project (< 100MB) in Strapi Cloud.

```bash
strapi deploy
```

This command must be used after the `login` one. It deploys a local Strapi project on Strapi Cloud, without having to host it on a remote git repository beforehand. The terminal will inform you when the project is successfully deployed on Strapi Cloud.

Deploying a Strapi project through the CLI creates a project on the Free plan.

Once the project is first deployed on Strapi Cloud with the CLI, the `deploy` command can be reused to trigger a new deployment of the same project.

:::note
Once you deployed your project, if you visit the Strapi Cloud dashboard, you may see some limitations as well as impacts due to creating a Strapi Cloud project that is not in a remote repository and which was deployed with the CLI.

- Some areas in the dashboard that are usually reserved to display information about the git provider will be blank.
- Some buttons, such as the **Trigger deploy** button, will be greyed out and unclickable since, unless you have [connected a git repository to your Strapi Cloud project](/cloud/getting-started/deployment-cli#automatically-deploying-subsequent-changes).
:::

## strapi link <NewBadge />

**Alias:** `strapi cloud:link`

Links project in the current folder to an existing project in Strapi Cloud.

```bash
strapi link
```

This command connects your local project in the current directory with an existing project on your Strapi Cloud account. You will be prompted to select the project you wish to link from a list of available projects hosted on Strapi Cloud.

## strapi projects <NewBadge />

**Alias:** `strapi cloud:projects`

Lists all Strapi Cloud projects associated with your account.

```bash
strapi projects
```

This command retrieves and displays a list of all projects hosted on your Strapi Cloud account.

## strapi logout

**Alias:** `strapi cloud:logout`

Log out of Strapi Cloud.

```bash
strapi logout
```

This command logs you out of Strapi Cloud. Once the `logout` command is run, a browser page will open and the terminal will display a confirmation message that you were successfully logged out. You will not be able to use the `deploy` command anymore.


 This is the content for the doc docusaurus/docs/cloud/getting-started/caching.md 

 ---
sidebar_label: 'Caching for app performance'
displayed_sidebar: cloudSidebar
sidebar_position: 4
tags:
- caching
- Content Delivery Network (CDN)
- Strapi Cloud
---

# Caching & Performance

For Strapi Cloud applications with large amounts of cacheable content, such as images, videos, and other static assets, enabling CDN (Content Delivery Network) caching via the <ExternalLink to="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control" text="`Cache-control` header"/> can help improve application performance.

CDN caching can help improve application performance in a few ways:

* **Reducing Latency**: Caching frequently accessed content on edge servers located closer to the end-users can reduce the time it takes to load content.
* **Offloading Origin Server**: By caching content on edge servers it can offload the origin server, reducing the load and allowing it to focus on delivering more dynamic content.
* **Handling Traffic Spikes**: Help handle traffic spikes by distributing the load across multiple edge servers. This can prevent the origin server from becoming overwhelmed during peak traffic times and ensures a consistent user experience.

## Cache-Control Header in Strapi Cloud

Static sites deployed on Strapi Cloud include, by default, a `Cache-Control` header set to cache for 24 hours on CDN edge servers and 10 seconds in web browsers. This is done to ensure that the latest version of the site is always served to users.

Responses from dynamic apps served by Strapi Cloud are not cached by default. To enable caching, you must set the `Cache-Control` header in the app‚Äôs `HTTP` response functions.

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js
function myHandler(req, res) {
  // Set the Cache-Control header to cache responses for 1 day
  res.setHeader('Cache-Control', 'max-age=86400');
  
  // Add your logic to generate the response here
}
```
</TabItem>

<TabItem value="ts" label="TypeScript">

```ts
import { Request, Response } from 'express';

function myHandler(req: Request, res: Response) {
  // Set the Cache-Control header to cache responses for 1 day
  res.setHeader('Cache-Control', 'max-age=86400');
  
  // Add your logic to generate the response here
}
```
</TabItem>
</Tabs>


 This is the content for the doc docusaurus/docs/cloud/getting-started/cloud-fundamentals.md 

 ---
sidebar_label: 'Cloud fundamentals'
displayed_sidebar: cloudSidebar
slug: /cloud/cloud-fundamentals
sidebar_position: 1
tags:
- Strapi Cloud
- concepts
---

# Strapi Cloud fundamentals <UpdatedBadge />

Before going any further into this Strapi Cloud documentation, we recommend you to acknowledge the main concepts below. They will help you to understand how Strapi Cloud works, and ensure a smooth Strapi Cloud experience.

- **Hosting Platform** <br/> Strapi Cloud is a hosting platform that allows to deploy already existing Strapi projects created with Strapi CMS (Content Management System). Strapi Cloud is *not* the SaaS (Software as a Service) version of Strapi CMS. Feel free to refer to the [CMS documentation](https://docs.strapi.io/cms/intro) to learn more about Strapi CMS.

- **Strapi Cloud Pricing Plans** <br/> As a Strapi Cloud user you have the choice between 4 plans: Free, Essential, Pro and Scale. Depending on the plan, you have access to different functionalities, support and customization options (see [Pricing page](https://strapi.io/pricing-cloud) for more details). In this Strapi Cloud documentation, the <CloudEssentialBadge />, <CloudProBadge />, and <CloudScaleBadge /> badges can be displayed below a section's title to indicate that the feature is only available starting from the corresponding paid plan. If no badge is shown, the feature is available on the Free plan.

- **Types of Strapi Cloud users** <br/> There can be 2 types of users on a Strapi Cloud project: owners and maintainers. The owner is the one who has created the project and has therefore access to all features and options for the project. Maintainers are users who have been invited to contribute to an already created project by its owner. Maintainers, as documented in the [Collaboration](/cloud/projects/collaboration) page, cannot view and access all features and options from the Strapi Cloud dashboard.

- **Support** <br/> The level of support provided by the Strapi Support team depends on the Strapi Cloud plan you subscribed for. The Free plan does not include access to support. The Essential and Pro plans include Basic support while the Scale plan includes Standard support. Please refer to the [dedicated support article](https://support.strapi.io/support/solutions/articles/67000680833-what-is-supported-by-the-strapi-team#Not-Supported) for all details regarding support levels.


 This is the content for the doc docusaurus/docs/cloud/getting-started/deployment-cli.md 

 ---
title: with Cloud CLI
displayed_sidebar: cloudSidebar
description: Learn how to deploy your Strapi application via the CLI.
canonicalUrl: https://docs.strapi.io/cloud/getting-started/deployment-cli.html
sidebar_position: 2
tags:
- Strapi Cloud
- deployment
- CLI
---

# Project deployment with the Command Line Interface (CLI)

This is a step-by-step guide for deploying your project on Strapi Cloud for the first time, using the Command Line Interface.

:::prerequisites
Before you can deploy your Strapi application on Strapi Cloud using the Command Line Interface, you need to have the following prerequisites:

- Have a Google, GitHub or GitLab account.
- Have an already created Strapi project (see [Installing from CLI in the CMS Documentation](/cms/installation/cli)), stored locally. The project must be less than 100MB.
- Have available storage in your hard drive where the temporary folder of your operating system is stored.
:::

## Logging in to Strapi Cloud

1. Open your terminal.

2. Navigate to the folder of your Strapi project, stored locally on your computer.

3. Enter the following command to log into Strapi Cloud:

  <Tabs groupId="yarn-npm">
  <TabItem value="yarn" label="Yarn">

  ```bash
  yarn strapi login
  ```

  </TabItem>
  <TabItem value="npm" label="NPM">

  ```bash
  npx run strapi login
  ```

  </TabItem>
  </Tabs>

4. In the browser window that opens automatically, confirm that the code displayed is the same as the one written in the terminal message.

5. Still in the browser window, choose whether to login via Google, GitHub or GitLab. The window should confirm the successful login soon after.

## Deploying your project

1. From your terminal, still from the folder of your Strapi project, enter the following command to deploy the project:

  <Tabs groupId="yarn-npm">
  <TabItem value="yarn" label="Yarn">

  ```bash
  yarn strapi deploy
  ```

  </TabItem>
  <TabItem value="npm" label="NPM">

  ```bash
  npx run strapi deploy
  ```

  </TabItem>
  </Tabs>

2. Follow the progression bar in the terminal until confirmation that the project was successfully deployed with Strapi Cloud.
Deploying the project will create a new Strapi Cloud project on the Free plan.

### Automatically deploying subsequent changes

By default, when creating and deploying a project with the Cloud CLI, you need to manually deploy again all subsequent changes by running the corresponding `deploy` command everytime you make a change.

Another option is to enable automatic deployment through a git repository. To do so:

1. Host your code on a git repository, such as <ExternalLink to="https://www.github.com" text="GitHub"/> or <ExternalLink to="https://www.gitlab.com" text="GitLab"/>.
2. Connect your Strapi Cloud project to the repository (see the _Connected repository_ setting in [Projects Settings > General](/cloud/projects/settings#general)).
3. Still in _Projects Settings > General_ tab, tick the box for the "Deploy the project on every commit pushed to this branch" setting. From now on, a new deployment to Strapi Cloud will be triggered any time a commit is pushed to the connected git repository.

:::note
Automatic deployment is compatible with all other deployment methods, so once a git repository is connected, you can trigger a new deployment to Strapi Cloud [from the Cloud dashboard](/cloud/projects/deploys), [from the CLI](/cloud/cli/cloud-cli#strapi-deploy), or by pushing new commits to your connected repository.
:::

## ‚è© What to do next?

Now that you have deployed your project via the Command Line Interface, we encourage you to explore the following ideas to have an even more complete Strapi Cloud experience:

- Visit the Cloud dashboard to follow [insightful metrics and information](/cloud/projects/overview) on your Strapi project.
- Check out the full [Command Line Interface documentation](/cloud/cli/cloud-cli) to learn about the other commands available.


 This is the content for the doc docusaurus/docs/cloud/getting-started/deployment-options.md 

 ---
title: Project deployment
displayed_sidebar: cloudSidebar
description: Learn how to deploy your Strapi application on Strapi Cloud, via the Cloud dashboard or the CLI.
canonicalUrl: https://docs.strapi.io/cloud/getting-started/deployment-options.html
sidebar_position: 2
tags:
- Strapi Cloud
- deployment
---

# Project deployment with Strapi Cloud

You have 2 options to deploy your project with Strapi Cloud:

- either with the user interface (UI), meaning that you will perform all the actions directly on the Strapi Cloud dashboard,
- or using the Cloud Comment Line Interface (CLI), meaning that you will only interact with a terminal.

The guides below will guide you through all the steps for each of the deployment options. 

<CustomDocCardsWrapper>
  <CustomDocCard emoji="üñºÔ∏è" title="Via the Cloud dashboard" description="Step-by-step guide to create and deploy a project via the user interface." link="/cloud/getting-started/deployment" />
  <CustomDocCard emoji="üíª" title="Via the CLI" description="Step-by-step guide to create and deploy a project with the Cloud Command Line Interface." link="/cloud/getting-started/deployment-cli" />
</CustomDocCardsWrapper>


 This is the content for the doc docusaurus/docs/cloud/getting-started/deployment.md 

 ---
title: with Cloud dashboard
displayed_sidebar: cloudSidebar
description: Learn how to deploy your Strapi application on Strapi Cloud.
canonicalUrl: https://docs.strapi.io/cloud/getting-started/deployment.html
sidebar_position: 2
tags:
- billing details
- deployment
- project creation
- environment 
- general deployment guidelines
- Strapi Cloud
- Strapi Cloud plan
---

# Project deployment with the Cloud dashboard

This is a step-by-step guide for deploying your project on Strapi Cloud for the first time, using the Cloud dashboard.

:::prerequisites
Before you can deploy your Strapi application on Strapi Cloud using the Cloud dashboard, you need to have the following prerequisites:

* Strapi version `4.8.2` or higher
* Project database must be compatible with PostgreSQL. Strapi does not support and does not recommend using any external databases, though it's possible to configure one (see [advanced database configuration](/cloud/advanced/database)).
* Project(s) source code hosted on <ExternalLink to="https://github.com" text="GitHub"/> or <ExternalLink to="https://about.gitlab.com/" text="GitLab"/>. The connected repository can contain multiple Strapi applications. Each Strapi app must be in a separate directory.
* Specifically for GitLab: at least have "<ExternalLink to="https://docs.gitlab.com/ee/user/permissions.html" text="Maintainer"/>" permissions for the project to import on Strapi Cloud.
:::

## Logging in to Strapi Cloud

1. Navigate to the <ExternalLink to="https://cloud.strapi.io" text="Strapi Cloud"/> login page.

2. You have the options to **Log in with GitHub**, **Log in with Google** or **Log in with GitLab**. Choose your provider and log in. This initial login will create your Strapi Cloud account. Once logged in, you will be redirected to the Strapi Cloud *Projects* page where you can create your first Strapi Cloud project.

    <ThemedImage
    alt="Strapi Cloud login page"
    sources={{
        light: '/img/assets/cloud/login.png',
        dark: '/img/assets/cloud/login_DARK.png',
    }}
    />

## Deploying a project

1. From the *Projects* page, click the **Create project** button.

    <ThemedImage
    alt="Strapi Cloud Projects page"
    sources={{
        light: '/img/assets/cloud/projects-empty.png',
        dark: '/img/assets/cloud/projects-empty_DARK.png',
    }}
    />

2. You will be redirected to the first project deployment interface. This interface contains 3 steps: choosing a plan, connecting a remote git repository, and setting up the project.

    <ThemedImage
    alt="Strapi Cloud project creation, step 1"
    sources={{
        light: '/img/assets/cloud/project-creation-1-2.png',
        dark: '/img/assets/cloud/project-creation-1-2_DARK.png',
    }}
    />

3. Choose a plan for your Strapi Cloud project: either Free, Essential, Pro, or Scale. Feel free to refer to [Pricing](https://strapi.io/pricing-cloud) for more information.

4. Connect a git repository to your new Strapi Cloud project.

    :::strapi Choose your path for your new Strapi Cloud project!
    Select one of the tabs below depending on how you wish to proceed:
    - by using a prebuilt template and creating a new repository on GitHub to discover Strapi Cloud easily and quickly *(recommended for new users and beginners ‚Äî not available on another provider than GitHub)*,
    - or by using your own, already existing GitHub or GitLab repository and Strapi project.
    :::

    <Tabs groupId="REPO-OPTIONS">

    <TabItem value="TEMPLATE" label="New repo & prebuilt template ‚ú®">

    4.a. Click on the **Use template** button. If you are deploying a project for the first time, you may first have to select GitHub as git provider and then you will see the option to use a template. 

    4.b. In the *Create repository with template* modal, choose:
    
    - the GitHub account where the repository will be created
    - the template to use for the new project (e.g. Blog)

    <ThemedImage
    alt="Create repo with template modal"
    width="60%"
    sources={{
        light: '/img/assets/cloud/template-modal.png',
        dark: '/img/assets/cloud/template-modal_DARK.png',
    }}
    />
    
    4.c. Click on the **Create repository** button. A modal will confirm the creation of the repository.

    4.d. If you have already given Strapi Cloud access to all repositories of your GitHub account, go directly to the next step. If not, you will be redirected to a GitHub modal where you will have to allow Strapi Cloud access to the newly created repository (more information in the <ExternalLink to="https://docs.github.com/en/apps/overview" text="GitHub documentation"/>).

    4.e. Back in the project deployment interface, select your *Account* and the *Repository* you just created.

    <ThemedImage
    alt="Selecting GitHub account and repository"
    sources={{
        light: '/img/assets/cloud/account-repo-selection.png',
        dark: '/img/assets/cloud/account-repo-selection_DARK.png',
    }}
    />

    </TabItem>

    <TabItem value="OWN-REPO" label="Own existing repo & Strapi project">


    4.a. (optional) If you are deploying a project for the first time, you may first have to select a git provider: either GitHub or GitLab. If you already deployed a project with one git provider, you can afterward deploy another project using another provider by clicking on the **Switch git provider** button and selecting either GitHub or GitLab.

    :::tip
    Connect the GitHub or GitLab account and/or organizations that own the repository or repositories you want to deploy. This can be different from the account that owns the Strapi Cloud account.
    :::
    :::note

    You can only connect a Github organization's repositories with Strapi Cloud paid plans. With the free plan, you can only connect a personal repository.
    :::

    4.b. If you have already given Strapi Cloud access to all repositories of your GitHub or GitLab account, go directly to the next step. If not, you will be redirected to a modal where you will have to allow Strapi Cloud permission to access some or all your repositories on GitHub/GitLab (more information in the <ExternalLink to="https://docs.github.com/en/apps/overview" text="GitHub"/> and <ExternalLink to="https://docs.gitlab.com/ee/integration/oauth_provider.html#view-all-authorized-applications" text="GitLab"/> documentations).

    4.c. Back in the project deployment interface, select your *Account* and a *Repository*. 

    <ThemedImage
    alt="Selecting git account and repository"
    sources={{
        light: '/img/assets/cloud/account-repo-selection.png',
        dark: '/img/assets/cloud/account-repo-selection_DARK.png',
    }}
    />

    </TabItem>

    </Tabs>

5. Set up your Strapi Cloud project.

    5.a. Fill in the following information:

    | Setting name | Instructions                                                                                            |
    |--------------|---------------------------------------------------------------------------------------------------------|
    | Display name | Write the name of your Strapi app, this is fetched from the repository name but can be edited. It is automatically converted to slug format (`my-strapi-app`). |
    | Git branch   | Choose from the drop-down the default branch to use for this deployment. This uses the default branch of the repository. |
    | Deploy on push | Check the box to automatically deploy the latest changes from the selected branch. When disabled, you will need to manually deploy the latest changes. |
    | Region       | Choose the geographic location of the servers where your Strapi application is hosted. Selected region can either be US (East), Europe (West), Asia (Southeast) or Oceania. |

    :::note
    The Git branch and "Deploy on push" settings can be modified afterwards through the project's setting, however the hosting region can only be chosen during the creation of the project (see [Project Settings](/cloud/projects/settings)).
    :::

    5.b. (optional) Click on **Show advanced settings** to fill in the following options:

    <ThemedImage
    alt="Project creation advanced settings"
    sources={{
        light: '/img/assets/cloud/advanced-settings.png',
        dark: '/img/assets/cloud/advanced-settings_DARK.png',
    }}
    />

    | Setting name | Instructions                                                                                            |
    |--------------|---------------------------------------------------------------------------------------------------------|
    | Base directory | Write the name of the directory where your Strapi app is located in the repository. This is useful if you have multiple Strapi apps in the same repository or if you have a monorepo. |
    | Environment variables | Click on **Add variable** to add environment variables used to configure your Strapi app (see [Environment variables](/cms/configurations/environment/) for more information). You can also add environment variables to your Strapi application by adding a `.env` file to the root of your Strapi app directory. The environment variables defined in the `.env` file will be used by Strapi Cloud. |
    | Node version | Choose a Node version from the drop-down. Default Node version will automatically be chosen to best match the version of your Strapi project. If you manually choose a version that doesn't match with your Strapi project, the build will fail but the explanation will be displayed in the build logs. |

    :::strapi Using Environment Variables
    You can use environment variable to connect your project to an external database rather than the default one used by Strapi Cloud (see [database configuration](/cms/configurations/database#environment-variables-in-database-configurations) for more details). If you would like to revert and use Strapi's default database again, you have to remove your `DATABASE_` environment variables (no automatic migration implied).

    You can also set up here a custom email provider. Sendgrid is set as the default one for the Strapi applications hosted on Strapi Cloud (see [providers configuration](/cms/features/email#providers) for more details).
    :::

## Setting up billing details

:::strapi No billing step for the Free plan
If you chose the free plan, this billing step will be skipped as you will not be asked to share your credit card details at the creation of the project.

To upgrade your project to a paid plan, you will need to fill in your billing information in the **Billing** section of your Profile.

<Icon name="fast-forward" /> Skip to step 5 of the section below to finalise the creation of your project.
:::

1. Click on the **Continue to billing** button. You will directly be redirected to the second and final project deployment interface. There you can review all your new project setup information, enter payment & billing details and receive your invoice.

    <ThemedImage
    alt="Payment & Billing"
    sources={{
        light: '/img/assets/cloud/project-creation-2.png',
        dark: '/img/assets/cloud/project-creation-2_DARK.png',
    }}
    />

2. Review your project: make sure the plan and setup information are correct. If needed, click the <Icon name="pencil-simple" /> **Edit** button to be redirected to the first interface of the project creation and fix any mistake.

3. In the Payment section, fill in at least all mandatory elements for *Payment method* and *Billing information*.

4. Check your invoice which informs you of what should be paid now and the following month. Optionally, you can enter a *Discount code* if you have one.

5. Click on the **Create project** button to finalize the deployment of your new Strapi Cloud project. An initial deployment will automatically be triggered and you will be redirected to the *Projects* page.

:::caution
Create your Admin user after the initial deployment is complete. Do not share your application URL with anyone until you have created your Admin user.
:::

## <Icon name="fast-forward" /> What to do next?

Now that you have deployed your project via the Cloud dashboard, we encourage you to explore the following ideas to have an even more complete Strapi Cloud experience:

- Invite other users to [collaborate on your project](/cloud/projects/collaboration).
- Check out the [deployments management documentation](/cloud/projects/deploys) to learn how to trigger new deployments for your project.


 This is the content for the doc docusaurus/docs/cloud/getting-started/intro.md 

 ---
sidebar_label: 'Introduction'
displayed_sidebar: cloudSidebar
description: The Strapi Cloud documentation contains all technical documentation related to the setup, deployment, update and customization of your Strapi Cloud account and applications.
slug: /cloud/intro
sidebar_position: 1
tags:
- introduction
- deployment
- Strapi Cloud
pagination_next: cloud/getting-started/cloud-fundamentals
---

# Welcome to the Strapi Cloud Documentation!

<!--
<SubtleCallout title="Strapi Cloud & Strapi CMS docs" emoji="üìç">

There are 2 Strapi documentations, one for each Strapi product:

- <Icon name="cloud" /> The **Cloud documentation**, that you're currently reading, which is about deploying your Strapi application to Strapi Cloud and managing your Strapi Cloud projects and settings.
- <Icon name="feather" /> The **[CMS documentation](/cms/intro)** contains all the information related to the admin panel as well as all the technical information related to the setup, advanced usage, customization and update of your Strapi 5 application.

</SubtleCallout>
-->

The Strapi Cloud documentation contains all information related to the setup, deployment, update and customization of your Strapi Cloud account and applications. 

:::strapi What is Strapi Cloud?
<ExternalLink to="https://strapi.io/cloud" text="Strapi Cloud"/> is a hosting platform that allows you to deploy your Strapi applications. It is a fully managed content platform <Annotation>**ü§ù Why Strapi Cloud?**<br />Strapi Cloud enables you to increase your content velocity without having to compromise on customization needs and requirements. <br /> Development teams can rely on Strapi Cloud to abstract away the complexity of infrastructure management while keeping your development workflow and extending the core capabilities of Strapi. <br /> Content managers can use Strapi Cloud to autonomously manage all types of content and benefit from a complete set of content collaboration, security, and compliance features.</Annotation> built on top of Strapi, the open-source headless CMS.
:::

:::prerequisites
The typical workflow, which is recommended by the Strapi team, is:
1. Create your Strapi application locally (v4.8.2 or later).
2. Optionally, extend the application with plugins or custom code.
3. Version the application's codebase through your git provider (GitHub or GitLab).
4. Deploy the application with Strapi Cloud.
:::

The Strapi Cloud documentation is organised in topics in a order that should correspond to your journey with the product. The following cards, on which you can click, will redirect you to the main topics and steps.

<CustomDocCardsWrapper>
  <CustomDocCard emoji="‚òÅÔ∏è" title="Project creation" description="Step-by-step guide to guide you through the creation and deployment of a Strapi Cloud project." link="/cloud/getting-started/deployment" />
  <CustomDocCard emoji="üí∏" title="Information on billing & usage" description="All details on Strapi Cloud plans & billing, including overages and project suspension." link="/cloud/getting-started/usage-billing" />
  <CustomDocCard emoji="üóÉÔ∏è" title="Projects overview" description="Information on how to access Strapi Cloud projects to view their details & usage, and manage them." link="/cloud/projects/overview" />
  <CustomDocCard emoji="‚öôÔ∏è" title="Projects settings" description="Details on all the available settings for Strapi Cloud projects and how to configure them." link="/cloud/projects/settings"/>
  <CustomDocCard emoji="ü§ù" title="Collaboration" description="Documentation for the Collaboration feature to invite other users to access and manage a project." link="/cloud/projects/collaboration"/>
  <CustomDocCard emoji="üöÄ" title="Deployments management" description="All details on the deployment of a Strapi Cloud project, including triggering or cancelling a deployment." link="/cloud/projects/deploys" />
  <CustomDocCard emoji="üßæ" title="Account billing & details" description="Information on Strapi Cloud subscriptions and how to manage, edit and cancel them." link="/cloud/account/account-billing" />
</CustomDocCardsWrapper>

:::strapi Welcome to the Strapi community!
Strapi Cloud is built on top of Strapi, an open-source, community-oriented project. The Strapi team has at heart to share their vision and build the future of Strapi with the Strapi community. This is why the <ExternalLink to="https://feedback.strapi.io" text="roadmap"/> is open: as all insights are very important and will help steer the project in the right direction. Any community member is most welcome to share ideas and opinions there.

You can also join <ExternalLink to="https://github.com/strapi/strapi" text="GitHub"/>, the <ExternalLink to="https://forum.strapi.io/" text="Forum"/>, and the <ExternalLink to="https://discord.strapi.io" text="Discord"/> and benefit from the years of experience, knowledge, and contributions by the Strapi community as a whole.
:::


 This is the content for the doc docusaurus/docs/cloud/getting-started/usage-billing.md 

 ---
sidebar_label: 'Usage & Billing'
displayed_sidebar: cloudSidebar
sidebar_position: 3
tags:
- audit logs
- billing details
- overages
- project suspension
- seats management
- Strapi Cloud
---

# Information on billing & usage

This page contains general information related to the usage and billing of your Strapi Cloud account and projects.

<UpdatedBadge /> Strapi Cloud offers 1 Free plan and 3 paid plans: Essential, Pro and Scale (see [Pricing page](https://strapi.io/pricing-cloud)). The table below summarizes Strapi Cloud usage-based pricing plans, for general features and usage:

| Feature                          | Free  | Essential | Pro | Scale |
| -------------------------------- | ----- | --------- | --- | ----- |
| **Database Entries**             | 500   | Unlimited* | Unlimited* | Unlimited* |
| **Asset Storage**               | 10GB  | 50GB      | 250GB | 1,000GB |
| **Asset Bandwidth (per month)** | 10GB  | 50GB      | 500GB | 1,000GB |
| **API Requests (per month)**     | 10,000 | 100,000 | 1,000,000 | 10,000,000 |
|  |  |  |  |  |
| **Backups**                      | N/A | N/A | Weekly | Daily |
| **Custom domains**               | N/A | Included | Included | Included | 
| **Environments**                 | N/A | N/A | 0 included (up to 99 extra) | 1 included (up to 99 extra) |
| **Emails (per month)**           | 100 | Unlimited* | Unlimited* | Unlimited* |

:::strapi Additional information on usage and features
- General features & usage:
  - Database entries are the number of entries in your database.
  - Asset storage is the amount of storage used by your assets.
  - Asset bandwidth is the amount of bandwidth used by your assets.
  - API requests are the number of requests made to your APIs. This includes requests to the GraphQL and REST APIs, excluding requests for file and media assets counted towards CDN bandwidth and storage.
- Cloud specific feature:
  - Backups refers to the automatic backups of Strapi Cloud projects (see [Backups documentation](/cloud/projects/settings#backups) for more information on the feature).
  - Custom domains refer to the ability to define a custom domain for your Strapi Cloud (see [Custom domains](/cloud/projects/settings#connecting-a-custom-domain)).
  - Environments refers to the number of environments included in the plan on top of the default production environment (see [Environments](/cloud/projects/settings#environments) documentation for more information on the feature).
:::

:::info Scale-to-zero and cold start on the Free plan
On the Free plan, projects automatically scale down to zero after a short period of inactivity. When the application is accessed again‚Äîeither through the frontend or via an API request‚Äîit may take a few seconds (up to a minute) before a response is returned.
Upgrading to a paid plan disables scaling to zero and cold starts, resulting in instant response times at all times.
:::

## Environments management

Environments are isolated instances of your Strapi Cloud project. All projects have a default production environment, but other additional environments can be configured for projects on a Pro or Scale plan, from the *Environments* tab of a project's settings (see [Environments](/cloud/projects/settings#environments)). There is no limit to the number of additional environments that can be configured for a Strapi Cloud project.

The usage limits of additional environments are the same as for the project's production environment (e.g. an additional environment on the Pro plan will be limited at 250GB for asset storage, and overages will be charged the same way as for the production environment). Note however that the asset bandwidth and API calls are project-based, not environment-based, so these usage limits do not change even with additional environments.
 
## Billing

Billing is based on the usage of your Strapi Cloud account and projects. You will be billed monthly for the usage of your account and applications. You can view your usage and billing information in the <ExternalLink to="https://cloud.strapi.io/profile/billing" text="Billing"/> section of your Strapi Cloud account.

### Overages

:::caution
Overages are not allowed on the Free plan.
:::

If you exceed the limits of your plan for API Requests, Asset Bandwidth, or Asset Storage, you will be charged for the corresponding overages. 

For example, if you exceed the 500GB limit in asset bandwidth of the Pro plan, you will be charged for the excess bandwidth at the end of the current billing period or on project deletion. Overages are not prorated and are charged in full.

Overages are charged according to the following rates:

| Feature | Rate |
| --- | --- |
| **API Requests** | $1.50 / 25k requests |
| **Asset Bandwidth** | $30.00 / 100GB |
| **Asset Storage** | $0.60 / GB per month |

### Project suspension

Projects may end up in a **Suspended** state for various reasons, including: not paying the invoice, exceeding the limits of your free plan, or violating the <ExternalLink to="https://strapi.io/cloud-legal" text="terms of service"/>. 

If your project is suspended, you will no longer be able to access the application or trigger new deployments. You will also be unable to access the Strapi admin panel.

You can view the status of your project in the <ExternalLink to="https://cloud.strapi.io/projects" text="Projects"/> section of your Strapi Cloud account and you will be notified by email.

:::warning
If you do not resolve the issue within 30 days, your suspended project will be deleted and all data will be permanently lost. To avoid this situation, you will be sent a first email when your project becomes suspended, then another email every 5 days until one week left, to remind you to solve the issue. The last week before the deletion of the project, you will be sent 3 more emails: 6 days, 3 days and 1 day before your project is finally deleted.
:::

#### Project suspension for exceeding the Free plan limits

When a project hosted with the Free plan exceeds either the API requests or the Asset Bandwidth limits, it will be suspended until the monthly allowance resets at the beginning of the following month.

While the project is suspended:

- Users cannot trigger new deployments
- Access to the application is blocked
- Users cannot make changes to the project‚Äôs settings

To reactivate the project immediately, users can upgrade to a paid plan.

#### Project suspension after subscription cancellation

If you don't pay the invoice, the subscription of your project will automatically be canceled and the project will be suspended. You can reactivate the subscription through the billing modal (see [Edit subscription](/cloud/account/account-billing#account-billing)).

1. Log into the billing modal and go to the *Subscription details* of the subscription associated with the suspended project. You should see a warning message confirming that the subscription was canceled for the following reason: "Not Paid".
2. Go back to the homepage of the billing modal, listing subscriptions and billing options.
3. Go to *Payment methods* and add a new, working card to pay the invoice. As soon as the invoice is paid, your project will automatically be reactivated.

#### Project suspension for other reasons

If your project was suspended for reasons other than unpaid invoice leading to subscription cancellation, you may not have the possibility to reactivate your project yourself. You should receive an email with instructions on how to resolve the issue. If you do not receive the email notification, please contact [Strapi Support](mailto:support@strapi.io).


 This is the content for the doc docusaurus/docs/cloud/projects/collaboration.md 

 ---
title: Collaboration
displayed_sidebar: cloudSidebar
description: Share your projects on Strapi Cloud to collaborate with others.
canonicalUrl: https://docs.strapi.io/cloud/projects/collaboration.md
sidebar_position: 1
tags:
- maintainers
- Strapi Cloud
- Strapi Cloud project
---

# Collaboration on projects


Projects are created by a user via their Strapi Cloud account. Strapi Cloud users can share their projects to anyone else, so these new users can have access to the project dashboard and collaborate on that project, without the project owner to ever have to share their credentials.

Users invited to collaborate on a project, called maintainers, do not have the same permissions as the project owner. Contrary to the project owner, maintainers:

- Cannot share the project themselves to someone else
- Cannot delete the project from the project settings
- Cannot access the *Billing* section of project settings

## Sharing a project

<ThemedImage
  alt="Share button and avatar"
  sources={{
    light: '/img/assets/cloud/collaboration-projectview.png',
    dark: '/img/assets/cloud/collaboration-projectview_DARK.png',
  }}
/>

To invite a new maintainer to collaborate on a project:

1. From the *Projects* page, click on the project of your choice to be redirected to its dashboard.
2. Click on the **Share** button located in the dashboard's header.
3. In the *Share [project name]* dialog, type the email address of the person to invite in the textbox. A dropdown indicating "Invite [email address]" should appear.
4. Click on the dropdown: the email address should be displayed in a purple box right below the textbox.
5. (optional) Repeat steps 3 and 4 to invite more people. Email addresses can only entered one by one but invites can be sent to several email addresses at the same time.
6. Click on the **Send** button.

New maintainers will be sent an email containing a link to click on to join the project. Once a project is shared, avatars representing the maintainers will be displayed in the project dashboard's header, next to the **Share** button, to see how many maintainers collaborate on that project and who they are.

:::tip
Avatars use GitHub, Google or GitLab profile pictures, but for pending users only initials will be displayed until the activation of the maintainer account. You can hover over an avatar to display the full name of the maintainer.
:::

## Managing maintainers

From the *Share [project name]* dialog accessible by clicking on the **Share** button of a project dashboard, projects owners can view the full list of maintainers who have been invited to collaborate on the project. From there, it is possible to see the current status of each maintainer and to manage them.

<ThemedImage
  alt="Share button and avatar"
  sources={{
    light: '/img/assets/cloud/collaboration-dialog2.png',
    dark: '/img/assets/cloud/collaboration-dialog2_DARK.png',
  }}
/>

Maintainers whose full name is displayed are users who did activate their account following the invitation email. If however there are maintainers in the list whose email address is displayed, it means they haven't activated their accounts and can't access the project dashboard yet. In that case, a status should be indicated right next to the email address to explain the issue:

- Pending: the invitation email has been sent but the maintainer hasn't acted on it yet.
- Expired: the email has been sent over 72 hours ago and the invitation expired.

For Expired statuses, it is possible to send another invitation email by clicking on the **Manage** button, then **Resend invite**. 

### Revoking maintainers

To revoke a maintainer's access to the project dashboard:

1. Click on the **Share** button in the project dashboard's header.
2. In the list of *People with access*, find the maintainer whose access to revoke and click on the **Manage** button.
3. Click on the **Revoke** button.
4. In the confirmation dialog, click again on the **Revoke** button.

The revoked maintainer will completely stop having access to the project dashboard.

:::note
Maintainers whose access to the project has been revoked do not receive any email or notification.
::: 


 This is the content for the doc docusaurus/docs/cloud/projects/deploys-history.md 

 ---
title: Deployment history & logs
displayed_sidebar: cloudSidebar
description: View projects' deployment history and logs.
canonicalUrl: https://docs.strapi.io/cloud/deploys-history.html
sidebar_position: 1
tags:
- deployment
- project settings
- deploy, history and logs
- Strapi Cloud
- Strapi Cloud project
---

# Deployment history and logs {#deploy-history-and-logs}

For each Strapi Cloud project, you can access the history of all deployments that occurred and their details including build and deployment logs. This information is available in the *Deployments* tab.

## Viewing the deployment history {#viewing-deploy-history}

In the *Deployments* tab is displayed a chronological list of cards with the details of all historical deployments for your project.

<ThemedImage
  alt="Project deploys"
  sources={{
    light: '/img/assets/cloud/overview.png',
    dark: '/img/assets/cloud/overview_DARK.png',
  }}
/>

Each card displays the following information:
- Commit SHA <Annotation>üí° The commit SHA (or hash) is the unique ID of your commit, which refers to a specific change that was made at a specific time.</Annotation>, with a direct link to your git provider, and commit message
- Deployment status:
    - *Deploying*
    - *Done*
    - *Canceled*
    - *Build failed*
    - *Deployment failed*
- Last deployment time (when the deployment was triggered and the duration)
- Branch

## Accessing deployment details & logs

From the *Deployments* tab, you can hover a deployment card to make the ![See logs button](/img/assets/icons/Eye.svg) **Show details** button appear. Clicking on this button will redirect you to the *Deployment details* page which contains the deployment's detailed logs.

<ThemedImage
  alt="Deployment details"
  sources={{
    light: '/img/assets/cloud/deploy_logs.png',
    dark: '/img/assets/cloud/deploy_logs_DARK.png',
  }}
/>

In the *Build logs* and *Deployment logs* sections of the page you can click on the arrow buttons ![Down arrow](/img/assets/icons/ONHOLDCarretDown.svg) ![Up arrow](/img/assets/icons/ONHOLDCarretUp.svg) to show or hide the build and deployment logs of the deployment.

:::tip
Click the ![Copy button](/img/assets/icons/duplicate.svg) **Copy to clipboard** button to copy the log contents.
:::

In the right side of the *Deployment details* page is also displayed the following information:
- *Commit*: the commit SHA <Annotation>üí° The commit SHA (or hash) is the unique ID of your commit, which refers to a specific change that was made at a specific time.</Annotation>, with a direct link to your git provider, and commit message used for this deployment
- *Status*, which can be *Building*, *Deploying*, *Done*, *Canceled*, *Build failed*, or *Deployment failed*
- *Source*: the branch and commit message for this deployment
- *Duration*: the amount of time the deployment took and when it occurred


 This is the content for the doc docusaurus/docs/cloud/projects/deploys.md 

 ---
title: Deployments management
displayed_sidebar: cloudSidebar
description: Manage your projects's deployments.
canonicalUrl: https://docs.strapi.io/cloud/projects/deploys.html
sidebar_position: 1
tags:
- deployment
- project settings
- deploy, history and logs
- Strapi Cloud
- Strapi Cloud project
pagination_next: cloud/projects/deploys-history
---

# Deployments management

The creation of a new Strapi Cloud project automatically trigger the deployment of that project. After that, deployments can be:

- manually triggered whenever needed, [from the Cloud dashboard](#triggering-a-new-deployment) or [from the CLI](/cloud/cli/cloud-cli#strapi-deploy),
- or automatically triggered everytime a new commit is pushed to the branch, if the Strapi Cloud project is connected to a git repository and the "deploy on push" option is enabled (see [Project settings](/cloud/projects/settings#modifying-git-repository--branch)).

Ongoing deployments can also be [manually canceled](#cancelling-a-deployment) if needed.

## Triggering a new deployment

To manually trigger a new deployment for your project, click on the **Trigger deployment** button always displayed in the right corner of a project dashboard's header. This action will add a new card in the *Deployments* tab, where you can monitor the status and view the deployment logs live (see [Deploy history and logs](/cloud/projects/deploys-history)).

<ThemedImage
  alt="Triggering new deploy"
  sources={{
    light: '/img/assets/cloud/trigger-deploy.png',
    dark: '/img/assets/cloud/trigger-deploy_DARK.png',
  }}
/>

## Cancelling a deployment

If for any reason you want to cancel an ongoing and unfinished deployment:

1. Go to the *Deployment details* page of the latest triggered deployment (see [Accessing log details](/cloud/projects/deploys-history#accessing-deployment-details--logs)).
2. Click on the **Cancel deployment** button in the top right corner. The status of the deployment will automatically change to *Canceled*.

:::tip
You can also cancel a deployment from the *Deployments* tab which lists the deployments history. The card of ongoing deployment with the *Building* status will display a ![Cancel button](/img/assets/icons/clear.svg) button for cancelling the deployment.
:::

<ThemedImage
  alt="Cancelling deploy"
  sources={{
    light: '/img/assets/cloud/cancel-deploy.png',
    dark: '/img/assets/cloud/cancel-deploy_DARK.png',
  }}
/>


 This is the content for the doc docusaurus/docs/cloud/projects/notifications.md 

 ---
title: Notifications
displayed_sidebar: cloudSidebar
description: View your notifications on Strapi Cloud.
canonicalUrl: https://docs.strapi.io/cloud/projects/notifications
sidebar_position: 3
tags:
- notifications
- Strapi Cloud
- Strapi Cloud project
---

# Notifications

The Notification center can be opened by clicking the bell icon <Icon name="bell" /> in the top navigation of the Cloud dashboard.

It displays a list of the latest notifications for all your existing projects. Clicking on a notification card from the list will redirect you to the *Log details* page of the corresponding deployment (more information in [Deploy history & logs](/cloud/projects/deploys-history#accessing-deployment-details--logs)).

<ThemedImage
  alt="Notification center"
  sources={{
    light: '/img/assets/cloud/notification-center.png',
    dark: '/img/assets/cloud/notification-center_DARK.png',
  }}
/>

The following notifications can be listed in the Notifications center:

- *deployment completed*: when a deployment is successfully done.
- *Build failed*: when a deployment fails during the build stage.
- *deployment failed*: when a deployment fails during the deployment stage.
- *deployment triggered*: when a deployment is triggered by a new push to the connected repository. This notification is however not sent when the deployment is triggered manually.

:::note
All notifications older than 30 days are automatically removed from the Notification center.
:::


 This is the content for the doc docusaurus/docs/cloud/projects/overview.md 

 ---
title: Projects overview
displayed_sidebar: cloudSidebar
description: View and manage your projects on Strapi Cloud.
canonicalUrl: https://docs.strapi.io/cloud/projects/overview.html
sidebar_position: 1
tags:
- project status
pagination_next: cloud/projects/settings
---

import ScreenshotNumberReference from '/src/components/ScreenshotNumberReference.jsx';

# Projects overview

The *Projects* page displays a list of all your Strapi Cloud projects. From here you can manage your projects and access the corresponding applications.

<ThemedImage
  alt="Projects page - List"
  sources={{
    light: '/img/assets/cloud/project_list.png',
    dark: '/img/assets/cloud/project_list_DARK.png',
  }}
/>

Each project card displays the following information:

* the project name
* the last successful deployment‚Äôs date of the Production environment
* the current status of the project:
    * *Disconnected*, if the project repository is not connected to Strapi Cloud
    * *Suspended*, if the project has been suspended (refer to [Project suspension](/cloud/getting-started/usage-billing#project-suspension) to reactivate the project)
    * *Incompatible version*, if the project is using a Strapi version that is not compatible with Strapi Cloud

Each project card also displays a <Icon name="dots-three-outline" /> menu icon to access the following options:
* **Visit App**: to be redirected to the application
* **Go to Deployments**: to be redirected to the [*Deployment*](/cloud/projects/deploys) page
* **Go to Settings**: to be redirected to the [*Settings*](/cloud/projects/settings) page

## Accessing a project's dashboard

From the *Projects* page, click on any project card to access its dashboard. It displays the project and environment details and gives access to the deployment history and all available settings.

<ThemedImage
  alt="Project overview"
  sources={{
    light: '/img/assets/cloud/overview2.png',
    dark: '/img/assets/cloud/overview2_DARK.png',
  }}
/>

From the dashboard's header of a chosen project, you can:
- use the **Share** button to invite users to collaborate on the project (see [Collaboration](/cloud/projects/collaboration)) and see the icons of those who have already been invited <ScreenshotNumberReference number="1" />,
- use the <Icon name="gear-six" /> **Settings** button to access the settings of the project and its existing environments <ScreenshotNumberReference number="2" />,
- choose which environment to visualise for the project or add a new environment <ScreenshotNumberReference number="3" />,
- trigger a new deployment (see [Deployments management](/cloud/projects/deploys)) and visit your application <ScreenshotNumberReference number="4" />.

Your project's dashboard also displays:
- the *Deployments* and *Runtime logs* tabs, to see the deployments history (more details in [Deploy history and logs](/cloud/projects/deploys-history)) and the runtime logs of the project (see [dedicated documentation page](/cloud/projects/runtime-logs)) <ScreenshotNumberReference number="5" />
- the project and environment details in a box on the right of the interface <ScreenshotNumberReference number="6" />, including:
  - the number of API calls,
  - the current usage for asset bandwidth and storage,
  - the name of the branch and a **Manage** button to be redirect to the branch settings (see [Modifying git repository & branch](/cloud/projects/settings#modifying-git-repository--branch)),
  - the name of the base directory,
  - the Strapi version number,
  - the Strapi app's url.



 This is the content for the doc docusaurus/docs/cloud/projects/runtime-logs.md 

 ---
title: Runtime logs
displayed_sidebar: cloudSidebar
description: View runtime logs of Strapi Cloud project.
canonicalUrl: https://docs.strapi.io/cloud/projects/runtime-logs.html
sidebar_position: 1
tags:
- runtime logs
- Strapi Cloud
---

# Runtime logs

From a chosen project's dashboard, the *Runtime logs* tab displays the live logs of the project.

:::note

- The *Runtime logs* are only accessible once the project is successfully deployed.
- Runtime logs are not live for projects on the Free plan and are reset each time the application is scaled to zero due to inactivity.
:::

<ThemedImage
  alt="Runtime logs"
  sources={{
    light: '/img/assets/cloud/runtime-logs.png',
    dark: '/img/assets/cloud/runtime-logs_DARK.png',
  }}
/>


 This is the content for the doc docusaurus/docs/cloud/projects/settings.md 

 ---
title: Project settings
displayed_sidebar: cloudSidebar
description: View and manage your projects settings on Strapi Cloud.
canonicalUrl: https://docs.strapi.io/cloud/projects/settings.html
sidebar_position: 2
toc_max_heading_level: 4
tags:
- project settings
- project  subscription
- Strapi Cloud
- Strapi Cloud project
---

import InvoiceStatus from '/docs/snippets/invoices-statuses.md'

# Project settings

From a chosen project's dashboard, the <Icon name="gear-six" /> **Settings** button, located in the header, enables you to manage the configurations and settings for your Strapi Cloud project and its environments.

The settings' menu on the left side of the interface is separated into 2 categories: the settings for the entire project and the settings specific to any configured environment for the project.

## Project-level settings

There are 5 tabs available for the project's settings:
- <Icon name="faders" /> [*General*](#general),
- <Icon name="stack" /> [*Environments*](#environments),
- <Icon name="credit-card" /> [*Billing & Usage*](#billing--usage),
- <Icon name="map-trifold" /> [Plans](#plans),
- and <Icon name="invoice" /> [Invoices](#invoices).

### General

The <Icon name="faders" /> *General* tab for the project-level settings enables you to check and update the following options for the project:

- *Basic information*, to see:
  - the name of your Strapi Cloud project ‚Äî used to identify the project on the Cloud Dashboard, Strapi CLI, and deployment URLs ‚Äî and change it (see [Renaming project](#renaming-project)).
  - the chosen hosting region for your Strapi Cloud project, meaning the geographical location of the servers where the project and its data and resources are stored. The hosting region is set at project creation (see [Project creation](/cloud/getting-started/deployment)) and cannot be modified afterwards.
  - the app's internal name for the project, which can be useful for debug & support purposes.
- *Strapi CMS license key*: to enable and use some CMS features directly on your Cloud project (see [Pricing page](https://strapi.io/pricing-self-hosted) to purchase a license).

- *Connected Git repository*: to change the repository and branch used for your project (see [Modifying git repository & branch](#modifying-git-repository--branch)). Also allows to enable/disable the "deploy on push" option.
- *Delete project*: to permanently delete your Strapi Cloud project (see [Deleting Strapi Cloud project](#deleting-strapi-cloud-project)).

<ThemedImage
  alt="Project settings page"
  sources={{
    light: '/img/assets/cloud/settings.png',
    dark: '/img/assets/cloud/settings_DARK.png',
  }}
/>

#### Renaming project

The project name is set at project creation (see [Project creation](/cloud/getting-started/deployment)) and can be modified afterwards via the project's settings.

1. In the *Basic information* section of the <Icon name="faders" /> *General* tab, click on the edit <Icon name="pencil-simple" /> button.
2. In the dialog, write the new project name of your choice in the *Project name* textbox.
3. Click on the **Rename** button to confirm the project name modification.

#### Adding a CMS license key {#adding-cms-license-key}

A CMS license key can be added and connected to a Strapi Cloud project to be able to use some features of Strapi CMS. The CMS features that will be accessible via the license key depend on the type of license that was purchased: please refer to the <ExternalLink text="Strapi Pricing page" to="https://strapi.io/pricing-self-hosted"/> for more information and/or to purchase a license.

:::note
If you don't see the *Strapi CMS license key* section, it probably means that your subscription is a legacy one and does not support custom CMS licenses. It means that you already have one that is automatically included on your project.
:::

1. In the *Strapi CMS license key* section, click on the **Add license** button.
2. In the dialog, paste your license key in the field.
3. Click on **Save**.

To remove the Strapi CMS license from your Strapi Cloud project, you can click on the **Unlink license** button. This will also remove access and usage to the CMS features included in the previously added license.

#### Modifying git repository & branch

The GitHub or GitLab repository, branch and base directory for a Strapi Cloud project are by default chosen at the creation of the project (see [Creating a project](/cloud/getting-started/deployment)). After the project's creation, via the project's settings, it is possible to update the project's repository or switch to another git provider.

:::caution
Updating the git repository could result in the loss of the project and its data, for instance if the wrong repository is selected or if the data schema between the old and new repository doesn't match.
:::

1. In the *Connected git repository* section of the <Icon name="faders" /> *General* tab, click on the **Update repository** button. You will be redirected to another interface.
2. (optional) If you wish to not only update the repository but switch to another git provider, click on the **Switch Git provider** button at the top right corner of the interface. You will be redirected to the chosen git provider's authorization settings before getting back to the *Update repository* interface.
3. In the *Update repository* section, fill in the 2 available settings:

    | Setting name    | Instructions                                                             |
    | --------------- | ------------------------------------------------------------------------ |
    | Account         | Choose an account from the drop-down list.                               |
    | Repository      | Choose a repository from the drop-down list.                             |

4. In the *Select Git branches* section, fill in the available settings for any of your environments. Note that the branch can be edited per environment via its own settings, see [General (environment)](#environments).

    | Setting name    | Instructions                                                             |
    | --------------- | ------------------------------------------------------------------------ |
    | Branch          | Choose a branch from the drop-down list.                                 |
    | Base directory  | Write the path of the base directory in the textbox.                     |
    | Auto-deploy     | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |

5. Click on the **Update repository** button at the bottom of the *Update repository* interface.
6. In the *Update repository* dialog, confirm your changes by clicking on the **Confirm** button.

#### Deleting Strapi Cloud project

You can delete any Strapi Cloud project, but it will be permanent and irreversible. Associated domains, deployments and data will be deleted as well and the subscription for the project will automatically be canceled.

1. In the *Delete project* section of the <Icon name="faders" /> *General* tab, click on the **Delete project** button.
2. In the dialog, select the reason why you are deleting your project. If selecting "Other" or "Missing feature", a textbox will appear to let you write additional information.
3. Confirm the deletion of your project by clicking on the **Delete project** button at the bottom of the dialog.

### Environments {#environments}
<CloudProBadge /> <CloudScaleBadge />

The <Icon name="stack" /> *Environments* tab allows to see all configured environments for the Strapi Cloud project, as well as to create new ones. Production is the default environment, which cannot be deleted. Other environments can be created (depending on the subscription plan for your project) to work more safely on isolated instances of your Strapi Cloud project (e.g. a staging environment where tests can be made before being available on production).

:::tip
Clicking on the **Manage** button for any environment will redirect you to the environment's own general settings, where it is possible to change the Node version, edit the git branches and delete or reset the environment. Please [refer to the dedicated documentation](#environments) for more information.
:::

<ThemedImage
  alt="Project overview"
  sources={{
    light: '/img/assets/cloud/environments.png',
    dark: '/img/assets/cloud/environments_DARK.png',
  }}
/>

:::tip
A new environment can also be added from the [project dashboard](/cloud/projects/overview#accessing-a-projects-dashboard).
:::

To create a new environment:


1. Click on the **Add a new environment** button.
2. In the dialog that opens, you can see the price for the new environment and the date of the next invoice.
3. Fill in the available settings:

  <UpdatedBadge />
    | Setting name     | Instructions                                                             |
    | ---------------- | ------------------------------------------------------------------------ |
    | Environment name | (mandatory) Write a name for your project's new environment.             |
    | Git branch       | (mandatory) Select the right branch for your new environment.            |
    | Base directory   | Write the name of the base directory of your new environment.            |
    | Import variables | Tick the box to import variable names from an existing environment. Values will not be imported, and all variables will remain blank. |
    | Auto-deploy      | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |

4. Click on the **Add environment** button to create your project's new environment. A new deployment will automatically be triggered.

:::caution
If the creation of a new environment fails but you are still charged, try creating the environment again. This time, the environment creation should be successful and you will not be charged a second time. This behaviour is an known issue that should be fixed in the upcoming weeks.
:::

### Billing & Usage

The <Icon name="credit-card" /> *Billing & Usage* displays your next estimated payment, all information on the current subscription plan and a detailed summary of the project's and its environments' usage. It also allows you to add new environments (please [refer to the documentation in the Environments section](#environments)) for your project.

Through this tab, you also have the possibility to:
- click the **Change** button to be redirected to the <Icon name="map-trifold" /> *Plans* tab, where you can change you subscription plan ([see related documentation](#plans)),
- click the **Edit** button in order to set a new payment method (see [related documentation](/cloud/account/account-billing)).

:::note
You can attach a dedicated card to your project by choosing the payment method directly from this page. In that way, you can manage your subscriptions with different cards.
:::

:::tip
In the Usage section of the <Icon name="credit-card" /> *Billing & Usage* tab, you can see the current monthly usage of your project compared to the maximum usage allowed by your project's subscription. Use the arrows in the top right corner to see the project's usage for any chosen month.

Note also that if your usage indicates that another subscription plan would fit better for your project, a message will be displayed in the <Icon name="credit-card" /> *Billing & Usage* tab to advise which plan you could switch to.
:::

<ThemedImage
  alt="Project billing"
  sources={{
    light: '/img/assets/cloud/settings_billing.png',
    dark: '/img/assets/cloud/settings_billing_DARK.png',
  }}
/>

### Plans

The <Icon name="map-trifold" /> *Plans* tab displays an overview of the available Strapi Cloud plans and allows you to upgrade or downgrade from your current plan to another.

:::info
Strapi recently launched [new Cloud plans](https://strapi.io/pricing-cloud). For now, you can [downgrade](#downgrading-to-another-plan) or [upgrade](#upgrading-to-another-plan) to another plan directly from the Cloud dashboard, under the <Icon name="gear-six"/> **Settings** > <Icon name="map-trifold" /> **Plans** section.

If your project was created before the new plans were released, it may be on a *legacy* plan‚Äîdeprecated but still supported. You can sidegrade to a new plan if desired (see [downgrade section](#downgrading-to-another-plan)).
:::

<ThemedImage
  alt="Project plans"
  sources={{
    light: '/img/assets/cloud/settings_plans.png',
    dark: '/img/assets/cloud/settings_plans_DARK.png',
  }}
/>

#### Upgrading to another plan

Strapi Cloud plan upgrades to another, higher plan are immediate and can be managed for each project via the project settings.

:::note
When using the Free plan, the buttons to upgrade to another plan are greyed out and unusable until you have filled in your billing information. Please refer to [Account billing details](/cloud/account/account-billing) for more information.
:::

To upgrade your current plan to a higher one:

1. In the <Icon name="map-trifold" /> *Plans* tab of your project's settings, click on the **Upgrade** button of the plan you want to upgrade to.
2. In the window that opens, check the payment details that indicate how much you will have to pay immediately after confirming the upgrade, and the available options.

   a. (optional) Click the **Edit** button to select another payment method.
   b. (optional) Click **I have a discount code**, enter your discount code in the field, and click on the **Apply** button.

3. Click on the **Upgrade to [plan name]** button to confirm the upgrade of your Strapi project to another plan.

#### Downgrading to another plan

Strapi Cloud plan downgrades can be managed for each project via the project settings. Downgrades are however not immediately effective: the higher plan will still remain active until the end of the current month (e.g. if you downgrade from the Scale plan to the Pro plan on June 18th, your project will remain on the Scale plan until the end of the month: on July 1st, the Pro plan will be effective for the project).

:::caution
Make sure to check the usage of your Strapi Cloud project before downgrading: if your current usage exceeds the limits of the lower plan, you are taking the risk of getting charged for the overages. You may also lose access to some features: for example, downgrading to the Essential plan which doesn't include the Backups feature, would make you lose all your project's backups. Please refer to [Information on billing & usage](/cloud/getting-started/usage-billing) for more information.

Note also that you cannot downgrade if you have additional environments (i.e. extra environments that have been purchased, not the default or included environments). For instance, if you wish to downgrade from the Pro plan to the Essential plan, you first need to delete all additional environments that have been configured (see [Resetting & Deleting environment](#resetting--deleting-environment)), for the **Downgrade** button to be displayed and available again.
:::

To downgrade your current plan to a lower one:

1. In the <Icon name="map-trifold" /> *Plans* tab of your project's settings, click on the **Downgrade** button of the plan you want to downgrade to.
2. In the window that opens, check the information related to downgrading.
3. Click on the **Downgrade** button to confirm the downgrade of your Strapi project's plan. 

:::tip
Downgrades are effective from the 1st of the following month. Before that date, you can click on the **Cancel downgrade** button to remain on the current plan.
:::

### Invoices

The <Icon name="invoice" /> *Invoices* tab displays the full list of invoices for your Strapi Cloud project as well as their status.

<ThemedImage
  alt="Project invoices"
  sources={{
    light: '/img/assets/cloud/settings_invoices.png',
    dark: '/img/assets/cloud/settings_invoices_DARK.png',
  }}
/>

<InvoiceStatus components={props.components} />

:::strapi Invoices are also available in your profile settings.
In the *Profile > Invoices* tab, you will find the complete list of invoices for all your projects. Feel free to check the [dedicated documentation](/cloud/account/account-billing#account-invoices).
:::

No invoice is issued for the Free plan.

## Environment-level settings

In the project's environments' settings, you first need to select the environment whose settings you would like to configure, using the dropdown. Depending on the chosen environment, there are 3 to 4 tabs available:

- <Icon name="faders" /> [*Configuration*](#configuration),
- <Icon name="arrow-clockwise" /> [*Backups*](#backups), which are only available for the production environment,
- <Icon name="browsers" /> [*Domains*](#domains),
- and <Icon name="code" classes="ph-bold" /> [*Variables*](#variables).

### Configuration

The <Icon name="faders" /> *Configuration* tab for the environment-level settings enables you to check and update the following options for the project:

- *Basic information*, to see:
  - the name of your Strapi Cloud project's environment. The environment name is set when it is created and cannot be modified afterwards.
  - the Node version of the environment: to change the Node version of the project (see [Modifying Node version](#modifying-node-version)).
  - the app's internal name for the environment, which can be useful for debug & support purposes.
- *Connected branch*: to change the branch of the GitHub repository used for your environment (see [Editing Git branch](#editing-git-branch)). Also allows to enable/disable the "deploy on push" option.
- *Danger zone*: to reset or permanently delete your Strapi Cloud project's environment (see [Resetting & Deleting environment](#resetting--deleting-environment)).

<ThemedImage
  alt="Project invoices"
  sources={{
    light: '/img/assets/cloud/settings_env.png',
    dark: '/img/assets/cloud/settings_env_DARK.png',
  }}
/>

#### Modifying Node version

The environment's Node version is based on the one chosen at the creation of the project (see [Creating a project](/cloud/getting-started/deployment)), through the advanced settings. It is possible to switch to another Node version afterwards, for any environment.

1. In the *Basic information* section of the <Icon name="faders" /> *Configuration* tab, click on the *Node version*'s edit <Icon name="pencil-simple" /> button.
2. Using the *Node version* drop-down in the dialog, click on the version of your choice.
3. Click on the **Save** button.
4. Trigger a new deployment in the environment for which you changed the Node version. If the deployment fails, it is because the Node version doesn't match the version of your Strapi project. You will have to switch to the other Node version and re-deploy your project again.

#### Editing Git branch


2. In the *Edit branch* dialog, edit the available settings. Note that the branch can be edited for all environments at the same time via the project's settings, see [General](#general).

    | Setting name    | Instructions                                                             |
    | --------------- | ------------------------------------------------------------------------ |
    | Selected branch | (mandatory) Choose a branch from the drop-down list.                     |
    | Base directory  | Write the path of the base directory in the textbox.                     |
    | Deploy the project on every commit pushed to this branch | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |

3. Click on the **Save** button.

#### Resetting & Deleting environment

You can reset or delete any additional environment of your Strapi Cloud project, but it will be permanent and irreversible. The default, production environment, can however not be neither reset nor deleted.

##### Resetting an environment

Resetting an environment deletes all environments data and resets the variables to their default. To do so:

1. In the *Danger zone* section of the <Icon name="faders" /> *Configuration* tab, click on the **Reset environment** button.
2. In the dialog that opens, click on the **Continue** button to confirm the environment reset.
3. Fill in the available fields to reset the environment:

  <UpdatedBadge />
    | Setting name    | Instructions                                                             |
    | --------------- | ------------------------------------------------------------------------ |
    | Environment name | (mandatory) Write a name for your project's new environment.            |
    | Git branch      | (mandatory) Choose a branch from the drop-down list.                     |
    | Base directory  | Write the path of the base directory in the textbox.                     |
    | Import variables | Tick the box to import variable names from an existing environment. Values will not be imported, and all variables will remain blank. |
    | Auto-deploy     | Deploy the project on every commit pushed to this branch | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |

4. Click on the **Reset** button.

##### Deleting an environment

1. In the *Danger zone* section of the <Icon name="faders" /> *Configuration* tab, click on the **Delete environment** button.
2. Write in the textbox your *Environment name*.
3. Click on the **Delete environment** button to confirm the deletion.

### Backups {#backups}
<CloudProBadge /> <CloudScaleBadge /> <UpdatedBadge />

The <Icon name="arrow-clockwise" /> *Backups* tab informs you of the status and date of the latest backup of your Strapi Cloud projects. The databases associated with all existing Strapi Cloud projects are indeed automatically backed up (weekly for Pro plans and daily for Scale plans). Backups are retained for a 28-day period. Additionally, you can create a single manual backup.

:::note Notes

- The backup feature is not available for Strapi Cloud projects using the Free or Essential plans. You will need to upgrade to either the Pro or Scale plan to have your project automatically backed up and to have access to manual backups.

<!-- - Only project owners can restore a backup. Maintainers have access to the <Icon name="arrow-clockwise" /> *Backups* tab but the **Restore backup** button won't be displayed for them. Refer to [Collaboration](/cloud/projects/collaboration) for more information. -->

- The manual backup option should become available shortly after project's first succesful deployment.

- The backup feature is only available for the default, production environment. Other additional environment's settings will not show the <Icon name="arrow-clockwise" /> *Backups* tab.
:::

:::tip
For projects created before the release of the Backup feature in October 2023, the first backup will automatically be triggered with the next deployment of the project.
:::

<ThemedImage
  alt="Backups"
  sources={{
    light: '/img/assets/cloud/settings_backups.png',
    dark: '/img/assets/cloud/settings_backups_DARK.png',
  }}
/>

#### Creating a manual backup

To create a manual backup, in the <Icon name="arrow-clockwise" /> *Backups* section, click on the **Create backup** button.

The manual backup should start immediately, and restoration or creation of other backups will be disabled until backup is complete.

:::caution
When creating a new manual backup, any existing manual backup will be deleted. You can only have one manual backup at a time.
:::

#### Restoring a backup

If you need to restore a backup of your project:

1. In the <Icon name="arrow-clockwise" /> *Backups* section, click on the **Restore backup** button.
2. In the dialog, choose one of the available backups (automatic or manual) of your project in the *Choose backup* drop-down.
3. Click on the **Restore** button of the dialog. Once the restoration is finished, your project will be back to the state it was at the time of the chosen backup. You will be able to see the restoration timestamp and the backup restored in the <Icon name="arrow-clockwise"/> *Backups* tab.
4. The timestamp of the last completed restoration will be displayed to help you track when the project was last restored.

### Domains

The <Icon name="browsers" /> *Domains* tab enables you to manage domains and connect new ones.

<ThemedImage
  alt="Project domains"
  sources={{
    light: '/img/assets/cloud/settings_domains.png',
    dark: '/img/assets/cloud/settings_domains_DARK.png',
  }}
/>

All existing domains for your Strapi Cloud project are listed in the <Icon name="browsers" /> *Domains* tab. For each domain, you can:

- see its current status:
    - <Icon name="check-circle" color="rgb(58,115,66)"/> Active: the domain is currently confirmed and active
    - <Icon name="clock" color="rgb(204,123,49)" /> Pending: the domain transfer is being processed, waiting for DNS changes to propagate
    - <Icon name="x-circle" color="rgb(190,51,33)" /> Failed: the domain change request did not complete as an error occured
- click the <Icon name="pencil-simple" /> edit button to access the settings of the domain
- click the <Icon name="trash-simple" /> delete button to delete the domain

#### Connecting a custom domain

Default domain names are made of 2 randomly generated words followed by a hash. They can be replaced by any custom domain of your choice.

1. Click the **Connect new domain** button.
2. In the window that opens, fill in the following fields:

| Setting name              | Instructions                                                              |
| ------------------------- | ------------------------------------------------------------------------- |
| Domain name               | Type the new domain name (e.g. *custom-domain-name.com*)                  |
| Hostname                  | Type the hostname (i.e. address end-users enter in web browser, or call through APIs). |
| Target                    | Type the target (i.e. actual address where users are redirected when entering hostname). |
| Set as default domain     | Tick the box to make the new domain the default one.                      |

3. Click on the **Save** button.

:::caution Custom domains and assets
When using custom domains, these domains do not apply to the URLs of uploaded assets. Uploaded assets keep the Strapi Cloud project-based URL.

This means that, if your custom domain is hosted at `https://my-custom-domain.com` and your Strapi Cloud project name is `my-strapi-cloud-instance`, API calls will still return URLs such as `https://my-strapi-cloud-instance.media.strapiapp.com/example.png`.
:::

:::note
Custom domains are not available on the Free plan. Downgrading to the Free plan will result in the application domain's being restored to the default one.
:::

### Variables

Environment variables (more information in the [CMS Documentation](/cms/configurations/environment)) are used to configure the environment of your Strapi application, such as the database connection.

<ThemedImage
  alt="Project variables"
  sources={{
    light: '/img/assets/cloud/settings-variables2.png',
    dark: '/img/assets/cloud/settings-variables2_DARK.png',
  }}
/>

In the <Icon name="code" classes="ph-bold" /> *Variables* tab are listed both the default and custom environment variables for your Strapi Cloud project. Each variable is composed of a *Name* and a *Value*.

#### Managing environment variables

Hovering on an environment variable, either default or custom, displays the following available options:

- <Icon name="eye" /> **Show value** to replace the `*` characters with the actual value of a variable.
- <Icon name="copy" /> **Copy to clipboard** to copy the value of a variable.
- <Icon name="dots-three" /> **Actions** to access the <Icon name="pencil-simple" /> Edit and <Icon name="trash-simple" /> Delete buttons.
  - When editing a default variable, the *Name* cannot be modified and the *Value* can only be automatically generated using the <Icon name="magic-wand" /> Generate value button. Don't forget to **Save** at the end.
  - When editing a custom variable, both the *Name* and *Value* can be modified by writing something new or by using the <Icon name="magic-wand" /> Generate value button. Don't forget to **Save** at the end.
  - When deleting a variable, you will be asked to click on a **Confirm** button to confirm the deletion.

:::tip
Use the search bar to find more quickly an environment variable in the list!
:::

#### Creating custom environment variables

Custom environment variables can be created for the Strapi Cloud project. Make sure to redeploy your project after creating or editing an environment variable.

<!-- Future iteration
:::note
Instead of creating a new custom environment variable from scratch, you can also import one by clicking on the **Import variables (.env)** button.
:::
-->

1. In the *Custom environment variables* section, click on the **Add variable** button.
2. Write the *Name* and *Value* of the new environment variable in the same-named fields. Alternatively, you can click on the <Icon name="magic-wand" /> icon to generate automatically the name and value.
3. (optional) Click on **Add another** to directly create one or more other custom environment variables.
4. Click on the **Save** button to confirm the creation of the custom environment variables.

 This is the content for the doc docusaurus/docs/cms/admin-panel-customization.md 

 ---
title: Admin panel customization
description: The administration panel of Strapi can be customized according to your needs, so you can make it reflect your identity.
toc_max_heading_level: 4
tags:
- admin panel 
- admin panel customization
---

import HotReloading from '/docs/snippets/hot-reloading-admin-panel.md'

# Admin panel customization

The **front-end part of Strapi** <Annotation>For a clarification on the distinction between:<ul><li>the Strapi admin panel (front end of Strapi),</li><li>the Strapi server (back end of Strapi),</li><li>and the end-user-facing front end of a Strapi-powered application,</li></ul> refer to the [development introduction](/cms/customization).</Annotation> is called the admin panel. The admin panel presents a graphical user interface to help you structure and manage the content that will be accessible through the Content API. To get an overview of the admin panel, please refer to the [Getting Started > Admin panel](/cms/features/admin-panel) page.

From a developer point of view, Strapi's admin panel is a React-based single-page application that encapsulates all the features and installed plugins of a Strapi application.

Admin panel customization is done by tweaking the code of the `src/admin/app` fileor other files included in the `src/admin` folder (see [project structure](/cms/project-structure)). By doing so, you can:

- Customize some parts of the admin panel to better reflect your brand identity (logos, favicon) or your language,
- Replace some other parts of the admin panel, such as the Rich text editor and the bundler,
- Extend the theme or the admin panel to add new features or customize the existing user interface.

## General considerations

:::prerequisites
Before updating code to customize the admin panel:

- Rename the default `app.example.tsx|js` file into `app.ts|js`.
- Create a new `extensions` folder in `/src/admin/`.
- If you want to see your changes applied live while developing, ensure the admin panel server is running (it's usually done with the `yarn develop` or `npm run develop` command if you have not changed the default [host, port, and path](/cms/configurations/admin-panel#admin-panel-server) of the admin panel).
:::

Most basic admin panel customizations will be done in the `/src/admin/app` file, which includes a `config` object.

Any file used by the `config` object (e.g., a custom logo) should be placed in a `/src/admin/extensions/` folder and imported inside `/src/admin/app.js`.

<HotReloading />

Before deployment, the admin panel needs to be built, by running the following command from the project's root directory:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```sh
yarn build
```

</TabItem>

<TabItem value="npm" label="npm">

```sh
npm run build
```

</TabItem>

</Tabs>

This will replace the folder's content located at `./build`. Visit <ExternalLink to="http://localhost:1337/admin" text="http://localhost:1337/admin"/> to make sure customizations have been taken into account.

:::note Note: Admin panel extensions vs. plugins extensions
By default, Strapi projects already contain another `extensions` folder in `/src` but it is for plugins extensions only (see [Plugins extension](/cms/plugins-development/plugins-extension)).
:::

## Available customizations

The `config` object of `/src/admin/app` accepts the following parameters:

| Parameter                      | Type             | Description                                                                                                           |
| ------------------------------ | ---------------- | --------------------------------------------------------------------------------------------------------------------- |
| `auth`                         | Object           | Accepts a `logo` key to replace the default Strapi logo on login screen                                     |
| `head`                         | Object           | Accepts a `favicon` key to replace the default Strapi favicon                                             |
| `locales`                      | Array of Strings | Defines availables locales |
| `translations`                 | Object           | Extends the translations                                                                   |
| `menu`                         | Object           | Accepts the `logo` key to change the logo in the main navigation                                            |
| `theme.light` and `theme.dark` | Object           | Overwrite theme properties for light and dark modes                                               |
| `tutorials`                    | Boolean          | Toggles displaying the video tutorials
| `notifications`                | Object           | Accepts the `releases` key (Boolean) to toggle displaying notifications about new releases |

Click on any of the following cards to get more details about a specific topic:

<CustomDocCardsWrapper>
<CustomDocCard icon="image" title="Logos" description="Update the logos displayed in the admin panel to match your own brand." link="/cms/admin-panel-customization/logos" />
<CustomDocCard icon="image" title="Favicon" description="Update the favicon to match your own brand." link="/cms/admin-panel-customization/favicon" />
<CustomDocCard icon="globe" title="Locales & translations" description="Define locales and extend translations available in the admin panel." link="/cms/admin-panel-customization/locales-translations" />
<CustomDocCard icon="swap" title="Rich text editor" description="Learn more about the possible strategies to replace the built-in Rich text editor." link="/cms/admin-panel-customization/wysiwyg-editor" />
<CustomDocCard icon="package" title="Bundlers" description="Choose between the Vite and webpack bundlers and configure them." link="/cms/admin-panel-customization/bundlers" />
<CustomDocCard icon="palette" title="Theme extension" description="Learn the basics of extending the built-in theme of the admin panel." link="/cms/admin-panel-customization/theme-extension" />
<CustomDocCard icon="paint-bucket" title="Admin panel extension" description="Learn the basics of extending the admin panel." link="/cms/admin-panel-customization/extension" />
</CustomDocCardsWrapper>

## Basic example

The following is an example of a basic customization of the admin panel:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/src/admin/app.js"
import AuthLogo from "./extensions/my-logo.png";
import MenuLogo from "./extensions/logo.png";
import favicon from "./extensions/favicon.png";

export default {
  config: {
    // Replace the Strapi logo in auth (login) views
    auth: {
      logo: AuthLogo,
    },
    // Replace the favicon
    head: {
      favicon: favicon,
    },
    // Add a new locale, other than 'en'
    locales: ["fr", "de"],
    // Replace the Strapi logo in the main navigation
    menu: {
      logo: MenuLogo,
    },
    // Override or extend the theme
    theme: {
      // overwrite light theme properties
      light: {
        colors: {
          primary100: "#f6ecfc",
          primary200: "#e0c1f4",
          primary500: "#ac73e6",
          primary600: "#9736e8",
          primary700: "#8312d1",
          danger700: "#b72b1a",
        },
      },

      // overwrite dark theme properties
      dark: {
        // ...
      },
    },
    // Extend the translations
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        Users: "Utilisateurs",
        City: "CITY (FRENCH)",
        // Customize the label of the Content Manager table.
        Id: "ID french",
      },
    },
    // Disable video tutorials
    tutorials: false,
    // Disable notifications about new Strapi releases
    notifications: { releases: false },
  },

  bootstrap() {},
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```jsx title="/src/admin/app.ts"
// Note: you may see some ts errors, don't worry about them
import AuthLogo from "./extensions/my-logo.png";
import MenuLogo from "./extensions/logo.png";
import favicon from "./extensions/favicon.png";

export default {
  config: {
    // Replace the Strapi logo in auth (login) views
    auth: {
      logo: AuthLogo,
    },
    // Replace the favicon
    head: {
      // Try to change the origin favicon.png file in the
      // root of strapi project if this config don't work.
      favicon: favicon, 
    },
    // Add a new locale, other than 'en'
    locales: ["fr", "de"],
    // Replace the Strapi logo in the main navigation
    menu: {
      logo: MenuLogo,
    },
    // Override or extend the theme
    theme: {
	    dark:{
	      colors: {
			  alternative100: '#f6ecfc',
			  alternative200: '#e0c1f4',
			  alternative500: '#ac73e6',
			  alternative600: '#9736e8',
			  alternative700: '#8312d1',
			  buttonNeutral0: '#ffffff',
			  buttonPrimary500: '#7b79ff',
			  // you can see other colors in the link below
			  },
		},
		light:{
			// you can see the light color here just like dark colors https://github.com/strapi/design-system/blob/main/packages/design-system/src/themes/lightTheme/light-colors.ts
		},
  },
    },
    // Extend the translations
    // you can see the traslations keys here https://github.com/strapi/strapi/blob/develop/packages/core/admin/admin/src/translations
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        Users: "Utilisateurs",
        City: "CITY (FRENCH)",
        // Customize the label of the Content Manager table.
        Id: "ID french",
      },
    },
    // Disable video tutorials
    tutorials: false,
    // Disable notifications about new Strapi releases
    notifications: { releases: false },
  },

  bootstrap() {},
};
```

</TabItem>
</Tabs>

:::strapi Detailed examples in the codebase

* You can see the full translation keys, for instance to change the welcome message, [on GitHub](https://github.com/strapi/strapi/blob/develop/packages/core/admin/admin/src/translations).
* Light and dark colors are also found [on GitHub](https://github.com/strapi/design-system/tree/main/packages/design-system/src/themes).
:::

 This is the content for the doc docusaurus/docs/cms/admin-panel-customization/bundlers.md 

 ---
title: Admin panel bundlers
description: Learn more about configuring Vite and webpack with Strapi 5.
displayed_sidebar: cmsSidebar
sidebar_label: Bundlers
toc_max_heading_level: 4
tags:
- admin panel 
- admin panel customization
- webpack
- Vite
---

import FeedbackCallout from '/docs/snippets/backend-customization-feedback-cta.md'

Strapi's [admin panel](/cms/admin-panel-customization) is a React-based single-page application that encapsulates all the features and installed plugins of a Strapi application. 2 different bundlers can be used with your Strapi 5 application, [Vite](#vite) (the default one) and [webpack](#webpack). Both bundlers can be configured to suit your needs.

:::info
For simplification, the following documentation mentions the `strapi develop` command, but in practice you will probably use its alias by running either `yarn develop` or `npm run develop` depending on your package manager of choice.
:::

## Vite

In Strapi 5, <ExternalLink to="https://vitejs.dev/" text="Vite"/> is the default bundler that Strapi uses to build the admin panel. Vite will therefore be used by default when you run the `strapi develop` command.

To extend the usage of Vite, define a function that extends its configuration inside `/src/admin/vite.config`:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/src/admin/vite.config.js"
const { mergeConfig } = require("vite");

module.exports = (config) => {
  // Important: always return the modified config
  return mergeConfig(config, {
    resolve: {
      alias: {
        "@": "/src",
      },
    },
  });
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="/src/admin/vite.config.ts"
import { mergeConfig } from "vite";

export default (config) => {
  // Important: always return the modified config
  return mergeConfig(config, {
    resolve: {
      alias: {
        "@": "/src",
      },
    },
  });
};
```

</TabItem>
</Tabs>

## Webpack

In Strapi 5, the default bundler is Vite. To use <ExternalLink to="https://webpack.js.org/" text="webpack"/> as a bundler you will need to pass it as an option to the `strapi develop` command:

```bash
strapi develop --bundler=webpack
```

:::prerequisites
Make sure to rename the default `webpack.config.example.js` file into `webpack.config.` before customizing webpack.
:::

In order to extend the usage of webpack v5, define a function that extends its configuration inside `/src/admin/webpack.config.`:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/src/admin/webpack.config.js"
module.exports = (config, webpack) => {
  // Note: we provide webpack above so you should not `require` it

  // Perform customizations to webpack config
  config.plugins.push(new webpack.IgnorePlugin(/\/__tests__\//));

  // Important: return the modified config
  return config;
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="/src/admin/webpack.config.ts"
export default (config, webpack) => {
  // Note: we provide webpack above so you should not `require` it

  // Perform customizations to webpack config
  config.plugins.push(new webpack.IgnorePlugin(/\/__tests__\//));

  // Important: return the modified config
  return config;
};
```

</TabItem>
</Tabs>



 This is the content for the doc docusaurus/docs/cms/admin-panel-customization/extension.md 

 ---
title: Admin panel extension
description: Learn more about extending Strapi's admin panel.
displayed_sidebar: cmsSidebar
toc_max_heading_level: 4
tags:
- admin panel 
- admin panel customization

---

import HotReloading from '/docs/snippets/hot-reloading-admin-panel.md'

# Admin panel extension

Strapi's [admin panel](/cms/admin-panel-customization) is a React-based single-page application that encapsulates all the features and installed plugins of a Strapi application. If the [customization options](/cms/admin-panel-customization/options) provided by Strapi are not enough for your use case, you will need to extend Strapi's admin panel.

Extending Strapi's admin panel means leveraging its React foundation to adapt and enhance the interface and features according to the specific needs of your project, which might imply creating new components or adding new types of fields.

There are 2 use cases where you might want to extend the admin panel:

- As a Strapi plugin developer, you want to develop a Strapi plugin that extends the admin panel **everytime it's installed in any Strapi application**.

  üëâ This can be done by taking advantage of the [Admin Panel API for plugins](/cms/plugins-development/admin-panel-api).

- As a Strapi developer, you want to develop a unique solution for a Strapi user who only needs to extend a specific instance of a Strapi application.

  üëâ This can be done by directly updating the `/src/admin/app` file, which can import any file located in `/src/admin/extensions`.

:::strapi Additional resources
* If you're searching for ways of replacing the default Rich text editor, please refer to the [corresponding page](/cms/admin-panel-customization/wysiwyg-editor).
* The <ExternalLink to="https://design-system.strapi.io/?path=/docs/getting-started-welcome--docs" text="Strapi Design System documentation"/> also provide extensive additional information on developing for Strapi's admin panel.
:::

<HotReloading />


 This is the content for the doc docusaurus/docs/cms/admin-panel-customization/favicon.md 

 ---
title: Favicon
description: Replace the favicon displayed in Strapi's admin panel.
displayed_sidebar: cmsSidebar
sidebar_label: Favicon
toc_max_heading_level: 4
tags:
- admin panel
- admin panel customization
---

# Favicon

Strapi's [admin panel](/cms/admin-panel-customization) displays its branding on various places, including the [logo](/cms/admin-panel-customization/logos) and the favicon. Replacing these images allows you to match the interface and application to your identity.

To replace the favicon:

1. Create a `/src/admin/extensions/` folder if the folder does not already exist.
2. Upload your favicon into `/src/admin/extensions/`.
3. Replace the existing **favicon.png|ico** file at the Strapi application root with a custom `favicon.png|ico` file.
4. Update `/src/admin/app.[tsx|js]` with the following:

   ```js title="./src/admin/app.js"
   import favicon from "./extensions/favicon.png";

   export default {
     config: {
       // replace favicon with a custom icon
       head: {
         favicon: favicon,
       },
     },
   };
   ```

5. Rebuild, launch and revisit your Strapi app by running `yarn build && yarn develop` in the terminal.

:::tip
This same process may be used to replace the login logo (i.e. `AuthLogo`) and menu logo (i.e. `MenuLogo`) (see [logos customization documentation](/cms/admin-panel-customization/logos)).
:::

:::caution
Make sure that the cached favicon is cleared. It can be cached in your web browser and also with your domain management tool like Cloudflare's CDN.
:::



 This is the content for the doc docusaurus/docs/cms/admin-panel-customization/homepage.md 

 ---
title: Homepage customization
description: Learn about the Strapi admin panel Homepage and how to customize it with widgets.
toc_max_heading_level: 6
tags:
- admin panel
- homepage
- widgets
- features
---

# Homepage customization
<VersionBadge version="5.13.0"/>

The <Icon name="house" /> Homepage is the landing page of the Strapi admin panel. By default, it provides an overview of your content with 2 default widgets:

- _Last edited entries_: Displays recently modified content entries, including their content type, status, and when they were updated.
- _Last published entries_: Shows recently published content entries, allowing you to quickly access and manage your published content.

<ThemedImage
  alt="Homepage with default widgets"
  sources={{
    light: '/img/assets/admin-homepage/admin-panel-homepage.png',
    dark: '/img/assets/admin-homepage/admin-panel-homepage_DARK.png',
  }}
/>

These default widgets cannot currently be removed, but you can customize the Homepage by creating your own widgets.

:::note
If you recently created a Strapi project, the Homepage may also display a quick tour above widgets if you haven't skipped it yet.
:::

## Adding custom widgets

To add a custom widget, you can:

- install a plugin from the [Marketplace](/cms/plugins/installing-plugins-via-marketplace)
- or create and register your own widgets

The present page will describe how to create and register your widgets.

### Registering custom widgets

To register a widget, use `app.widgets.register()`:

- in the plugin‚Äôs [`register` lifecycle method](/cms/plugins-development/server-api#register) of the `index` file if you're building a plugin (recommended way),
- or in the [application's global `register()` lifecycle method](/cms/configurations/functions#register) if you're adding the widget to just one Strapi application without a plugin.

:::info
The examples on the present page will cover registering a widget through a plugin. Most of the code should be reusable if you register the widget in the application's global `register()` lifecycle method, except you should not pass the `pluginId` property.
:::


<Tabs groupId="js-ts">
<TabItem value="javascript" label="JavaScript">

```jsx title="src/plugins/my-plugin/admin/src/index.js"
import pluginId from './pluginId';
import MyWidgetIcon from './components/MyWidgetIcon';

export default {
  register(app) {
    // Register the plugin itself
    app.registerPlugin({
      id: pluginId,
      name: 'My Plugin',
    });
    
    // Register a widget for the Homepage
    app.widgets.register({
      icon: MyWidgetIcon,
      title: {
        id: `${pluginId}.widget.title`,
        defaultMessage: 'My Widget',
      },
      component: async () => {
        const component = await import('./components/MyWidget');
        return component.default;
      },
      /**
       * Use this instead if you used a named export for your component
       */
      // component: async () => {
      //   const { Component } = await import('./components/MyWidget');
      //   return Component;
      // },
      id: 'my-custom-widget',
      pluginId: pluginId,
    });
  },
  
  bootstrap() {},
  // ...
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```tsx title="src/plugins/my-plugin/admin/src/index.ts"
import pluginId from './pluginId';
import MyWidgetIcon from './components/MyWidgetIcon';
import type { StrapiApp } from '@strapi/admin/strapi-admin';

export default {
  register(app: StrapiApp) {
    // Register the plugin itself
    app.registerPlugin({
      id: pluginId,
      name: 'My Plugin',
    });
    
    // Register a widget for the Homepage
    app.widgets.register({
      icon: MyWidgetIcon,
      title: {
        id: `${pluginId}.widget.title`,
        defaultMessage: 'My Widget',
      },
      component: async () => {
        const component = await import('./components/MyWidget');
        return component.default;
      },
      /**
       * Use this instead if you used a named export for your component
       */
      // component: async () => {
      //   const { Component } = await import('./components/MyWidget');
      //   return Component;
      // },
      id: 'my-custom-widget',
      pluginId: pluginId,
    });
  },
  
  bootstrap() {},
  // ...
};
```

</TabItem>
</Tabs>

:::note The API requires Strapi 5.13+
The `app.widgets.register` API only works with Strapi 5.13 and above. Trying to call the API with older versions of Strapi will crash the admin panel.
Plugin developers who want to register widgets should either:

- set `^5.13.0` as their `@strapi/strapi` peerDependency in their plugin `package.json`. This peer dependency powers the Marketplace's compatibility check.
- or check if the API exists before calling it:

  ```js
  if ('widgets' in app) {
    // proceed with the registration
  }
  ```

The peerDependency approach is recommended if the whole purpose of the plugin is to register widgets. The second approach makes more sense if a plugin wants to add a widget but most of its functionality is elsewhere.
:::

#### Widget API reference

The `app.widgets.register()` method can take either a single widget configuration object or an array of configuration objects. Each widget configuration object can accept the following properties:

| Property    | Type                   | Description                                           | Required |
|-------------|------------------------|-------------------------------------------------------|----------|
| `icon`      | `React.ComponentType`  | Icon component to display beside the widget title     | Yes      |
| `title`     | `MessageDescriptor`    | Title for the widget with translation support         | Yes      |
| `component` | `() => Promise<React.ComponentType>` | Async function that returns the widget component | Yes      |
| `id`        | `string`               | Unique identifier for the widget                      | Yes      |
| `link`      | `Object`               | Optional link to add to the widget (see link object properties)| No       |
| `pluginId`  | `string`               | ID of the plugin registering the widget               | No       |
| `permissions` | `Permission[]`       | Permissions required to view the widget               | No       |

**Link object properties:**

If you want to add a link to your widget (e.g., to navigate to a detailed view), you can provide a `link` object with the following properties:

| Property | Type                | Description                                    | Required |
|----------|---------------------|------------------------------------------------|----------|
| `label`  | `MessageDescriptor` | The text to display for the link               | Yes      |
| `href`   | `string`            | The URL where the link should navigate to      | Yes      |

### Creating a widget component

Widget components should be designed to display content in a compact and informative way. 

Here's how to implement a basic widget component:

<Tabs groupId="js-ts">
<TabItem value="javascript" label="JavaScript">

```jsx title="src/plugins/my-plugin/admin/src/components/MyWidget/index.js"
import React, { useState, useEffect } from 'react';
import { Widget } from '@strapi/admin/strapi-admin';

const MyWidget = () => {
  const [loading, setLoading] = useState(true);
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    // Fetch your data here
    const fetchData = async () => {
      try {
        // Replace with your actual API call
        const response = await fetch('/my-plugin/data');
        const result = await response.json();
        
        setData(result);
        setLoading(false);
      } catch (err) {
        setError(err);
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return <Widget.Loading />;
  }

  if (error) {
    return <Widget.Error />;
  }

  if (!data || data.length === 0) {
    return <Widget.NoData />;
  }

  return (
    <div>
      {/* Your widget content here */}
      <ul>
        {data.map((item) => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default MyWidget;
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```tsx title="src/plugins/my-plugin/admin/src/components/MyWidget/index.tsx"
import React, { useState, useEffect } from 'react';
import { Widget } from '@strapi/admin/strapi-admin';

interface DataItem {
  id: number;
  name: string;
}

const MyWidget: React.FC = () => {
  const [loading, setLoading] = useState<boolean>(true);
  const [data, setData] = useState<DataItem[] | null>(null);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    // Fetch your data here
    const fetchData = async () => {
      try {
        // Replace with your actual API call
        const response = await fetch('/my-plugin/data');
        const result = await response.json();
        
        setData(result);
        setLoading(false);
      } catch (err) {
        setError(err instanceof Error ? err : new Error(String(err)));
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return <Widget.Loading />;
  }

  if (error) {
    return <Widget.Error />;
  }

  if (!data || data.length === 0) {
    return <Widget.NoData />;
  }

  return (
    <div>
      {/* Your widget content here */}
      <ul>
        {data.map((item) => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default MyWidget;
```

</TabItem>
</Tabs>

:::tip
For simplicity, the example below uses data fetching directly inside a useEffect hook. While this works for demonstration purposes, it may not reflect best practices in production.

For more robust solutions, consider alternative approaches recommended in the [React documentation](https://react.dev/learn/build-a-react-app-from-scratch#data-fetching). If you're looking to integrate a data fetching library, we recommend using [TanStackQuery](https://tanstack.com/query/v3/).
:::

**Data management**:

![Rendering and Data management](/img/assets/homepage-customization/rendering-data-management.png)

The green box above represents the area where the user‚Äôs React component (from `widget.component` in the [API](#widget-api-reference)) is rendered. You can render whatever you like inside of this box. Everything outside that box is, however, rendered by Strapi. This ensures overall design consistency within the admin panel. The `icon`, `title`, and `link` (optional) properties provided in the API are used to display the widget.

#### Widget helper components reference

Strapi provides several helper components to maintain a consistent user experience across widgets:

| Component        | Description                                         | Usage                                |
|------------------|-----------------------------------------------------|--------------------------------------|
| `Widget.Loading` | Displays a loading spinner and message              | When data is being fetched           |
| `Widget.Error`   | Displays an error state                             | When an error occurs                 |
| `Widget.NoData`  | Displays when no data is available                  | When the widget has no data to show  |
| `Widget.NoPermissions` | Displays when user lacks required permissions | When the user cannot access the widget |

These components help maintain a consistent look and feel across different widgets.
You could render these components without children to get the default wording: `<Widget.Error />`
or you could pass children to override the default copy and specify your own wording: `<Widget.Error>Your custom error message</Widget.Error>`.

## Example: Adding a content metrics widget

The following is a complete example of how to create a content metrics widget that displays the number of entries for each content type in your Strapi application.

The end result will look like the following in your admin panel's <Icon name="house" /> Homepage:

<ThemedImage
  alt="Billing tab of Profile page"
  sources={{
      light: '/img/assets/homepage-customization/content-metrics-widget.png',
      dark: '/img/assets/homepage-customization/content-metrics-widget_DARK.png',
    }}
/>

The widget shows counts for example content-types automatically generated by Strapi when you provide the `--example` flag on installation (see [CLI installation options](/cms/installation/cli#cli-installation-options) for details).

This widget can be added to Strapi by:

1. creating a "content-metrics" plugin (see [plugin creation](/cms/plugins-development/create-a-plugin) documentation for details)
2. re-using the code examples provided below.

:::tip
If you prefer a hands-on approach, you can reuse the following <ExternalLink to="https://codesandbox.io/p/sandbox/github/pwizla/strapi-custom-widget-content-metrics" text="CodeSandbox link" />.
:::

<Tabs groupId="js-ts">
<TabItem value="javascript" label="JavaScript">

The following file registers the plugin and the widget:

```jsx title="src/plugins/content-metrics/admin/src/index.js" {28-42}
import { PLUGIN_ID } from './pluginId';
import { Initializer } from './components/Initializer';
import { PluginIcon } from './components/PluginIcon';
import { Stethoscope } from '@strapi/icons'

export default {
  register(app) {
    app.addMenuLink({
      to: `plugins/${PLUGIN_ID}`,
      icon: PluginIcon,
      intlLabel: {
        id: `${PLUGIN_ID}.plugin.name`,
        defaultMessage: PLUGIN_ID,
      },
      Component: async () => {
        const { App } = await import('./pages/App');
        return App;
      },
    });

    app.registerPlugin({
      id: PLUGIN_ID,
      initializer: Initializer,
      isReady: false,
      name: PLUGIN_ID,
    });

    // Registers the widget
    app.widgets.register({
      icon: Stethoscope,
      title: {
        id: `${PLUGIN_ID}.widget.metrics.title`, 
        defaultMessage: 'Content Metrics',
      },
      component: async () => {
        const component = await import('./components/MetricsWidget');
        return component.default;
      },
      id: 'content-metrics',
      pluginId: PLUGIN_ID, 
    });
  },

  async registerTrads({ locales }) {
    return Promise.all(
      locales.map(async (locale) => {
        try {
          const { default: data } = await import(`./translations/${locale}.json`);
          return { data, locale };
        } catch {
          return { data: {}, locale };
        }
      })
    );
  },

  bootstrap() {},
};
```

The following file defines the widget's component and its logic. It's tapping into a specific controller and route that we'll create for the plugin:

```jsx title="src/plugins/content-metrics/admin/src/components/MetricsWidget/index.js"
import React, { useState, useEffect } from 'react';
import { Table, Tbody, Tr, Td, Typography, Box } from '@strapi/design-system';
import { Widget } from '@strapi/admin/strapi-admin'

const MetricsWidget = () => {
  const [loading, setLoading] = useState(true);
  const [metrics, setMetrics] = useState(null);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchMetrics = async () => {
      try {
        const response = await fetch('/api/content-metrics/count');
        const data = await response.json();

        console.log("data:", data);
        
        const formattedData = {};
        
        if (data && typeof data === 'object') {
          Object.keys(data).forEach(key => {
            const value = data[key];
            formattedData[key] = typeof value === 'number' ? value : String(value);
          });
        }
        
        setMetrics(formattedData);
        setLoading(false);
      } catch (err) {
        console.error(err);
        setError(err.message || 'An error occurred');
        setLoading(false);
      }
    };
    
    fetchMetrics();
  }, []);
  
  if (loading) {
    return (
      <Widget.Loading />
    );
  }
  
  if (error) {
    return (
      <Widget.Error />
    );
  }
  
  if (!metrics || Object.keys(metrics).length === 0) {
    return <Widget.NoData>No content types found</Widget.NoData>;
  }
  
  return (
    <Table>
      <Tbody>
        {Object.entries(metrics).map(([contentType, count], index) => (
          <Tr key={index}>
            <Td>
              <Typography variant="omega">{String(contentType)}</Typography>
            </Td>
            <Td>
              <Typography variant="omega" fontWeight="bold">{String(count)}</Typography>
            </Td>
          </Tr>
        ))}
      </Tbody>
    </Table>
  );
};

export default MetricsWidget;
```

The following file defines a custom controller that counts all content-types:

```js title="src/plugins/content-metrics/server/src/controllers/metrics.js"
'use strict';
module.exports = ({ strapi }) => ({
  async getContentCounts(ctx) {
    try {
      // Get all content types
      const contentTypes = Object.keys(strapi.contentTypes)
        .filter(uid => uid.startsWith('api::'))
        .reduce((acc, uid) => {
          const contentType = strapi.contentTypes[uid];
          acc[contentType.info.displayName || uid] = 0;
          return acc;
        }, {});
      
      // Count entities for each content type
      for (const [name, _] of Object.entries(contentTypes)) {
        const uid = Object.keys(strapi.contentTypes)
          .find(key => 
            strapi.contentTypes[key].info.displayName === name || key === name
          );
          
        if (uid) {
          // Using the count() method from the Document Service API
          const count = await strapi.documents(uid).count();
          contentTypes[name] = count;
        }
      }
      
      ctx.body = contentTypes;
    } catch (err) {
      ctx.throw(500, err);
    }
  }
});
```

The following file ensures that the metrics controller is reachable at a custom `/count` route:

```js title="src/plugins/content-metrics/server/src/routes/index.js"
export default {
  'content-api': {
    type: 'content-api',
    routes: [
      {
        method: 'GET',
        path: '/count',
        handler: 'metrics.getContentCounts',
        config: {
          policies: [],
        },
      },
    ],
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

The following file registers the plugin and the widget:

```tsx title="src/plugins/content-metrics/admin/src/index.ts" {28-42}
import { PLUGIN_ID } from './pluginId';
import { Initializer } from './components/Initializer';
import { PluginIcon } from './components/PluginIcon';
import { Stethoscope } from '@strapi/icons'

export default {
  register(app) {
    app.addMenuLink({
      to: `plugins/${PLUGIN_ID}`,
      icon: PluginIcon,
      intlLabel: {
        id: `${PLUGIN_ID}.plugin.name`,
        defaultMessage: PLUGIN_ID,
      },
      Component: async () => {
        const { App } = await import('./pages/App');
        return App;
      },
    });

    app.registerPlugin({
      id: PLUGIN_ID,
      initializer: Initializer,
      isReady: false,
      name: PLUGIN_ID,
    });

    // Registers the widget
    app.widgets.register({
      icon: Stethoscope,
      title: {
        id: `${PLUGIN_ID}.widget.metrics.title`, 
        defaultMessage: 'Content Metrics',
      },
      component: async () => {
        const component = await import('./components/MetricsWidget');
        return component.default;
      },
      id: 'content-metrics',
      pluginId: PLUGIN_ID, 
    });
  },

  async registerTrads({ locales }) {
    return Promise.all(
      locales.map(async (locale) => {
        try {
          const { default: data } = await import(`./translations/${locale}.json`);
          return { data, locale };
        } catch {
          return { data: {}, locale };
        }
      })
    );
  },

  bootstrap() {},
};
```

The following file defines the widget's component and its logic. It's tapping into a specific controller and route that we'll create for the plugin:

```tsx title="src/plugins/content-metrics/admin/src/components/MetricsWidget/index.ts"
import React, { useState, useEffect } from 'react';
import { Table, Tbody, Tr, Td, Typography, Box } from '@strapi/design-system';
import { Widget } from '@strapi/admin/strapi-admin'

const MetricsWidget = () => {
  const [loading, setLoading] = useState(true);
  const [metrics, setMetrics] = useState(null);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchMetrics = async () => {
      try {
        const response = await fetch('/api/content-metrics/count');
        const data = await response.json();

        console.log("data:", data);
        
        const formattedData = {};
        
        if (data && typeof data === 'object') {
          Object.keys(data).forEach(key => {
            const value = data[key];
            formattedData[key] = typeof value === 'number' ? value : String(value);
          });
        }
        
        setMetrics(formattedData);
        setLoading(false);
      } catch (err) {
        console.error(err);
        setError(err.message || 'An error occurred');
        setLoading(false);
      }
    };
    
    fetchMetrics();
  }, []);
  
  if (loading) {
    return (
      <Widget.Loading />
    );
  }
  
  if (error) {
    return (
      <Widget.Error />
    );
  }
  
  if (!metrics || Object.keys(metrics).length === 0) {
    return <Widget.NoData>No content types found</Widget.NoData>;
  }
  
  return (
    <Table>
      <Tbody>
        {Object.entries(metrics).map(([contentType, count], index) => (
          <Tr key={index}>
            <Td>
              <Typography variant="omega">{String(contentType)}</Typography>
            </Td>
            <Td>
              <Typography variant="omega" fontWeight="bold">{String(count)}</Typography>
            </Td>
          </Tr>
        ))}
      </Tbody>
    </Table>
  );
};

export default MetricsWidget;
```

The following file defines a custom controller that counts all content-types:

```js title="src/plugins/content-metrics/server/src/controllers/metrics.js"
'use strict';
module.exports = ({ strapi }) => ({
  async getContentCounts(ctx) {
    try {
      // Get all content types
      const contentTypes = Object.keys(strapi.contentTypes)
        .filter(uid => uid.startsWith('api::'))
        .reduce((acc, uid) => {
          const contentType = strapi.contentTypes[uid];
          acc[contentType.info.displayName || uid] = 0;
          return acc;
        }, {});
      
      // Count entities for each content type using Document Service
      for (const [name, _] of Object.entries(contentTypes)) {
        const uid = Object.keys(strapi.contentTypes)
          .find(key => 
            strapi.contentTypes[key].info.displayName === name || key === name
          );
          
        if (uid) {
          // Using the count() method from Document Service instead of strapi.db.query
          const count = await strapi.documents(uid).count();
          contentTypes[name] = count;
        }
      }
      
      ctx.body = contentTypes;
    } catch (err) {
      ctx.throw(500, err);
    }
  }
});
```

The following file ensures that the metrics controller is reachable at a custom `/count` route:

```js title="src/plugins/content-metrics/server/src/routes/index.js"
export default {
  'content-api': {
    type: 'content-api',
    routes: [
      {
        method: 'GET',
        path: '/count',
        handler: 'metrics.getContentCounts',
        config: {
          policies: [],
        },
      },
    ],
  },
};
```

</TabItem>
</Tabs>


 This is the content for the doc docusaurus/docs/cms/admin-panel-customization/host-port-path.md 

 ---
title: Admin panel customization - URL, host, and path configuration
description: Learn more about configuring the URL, host, and path to access Strapi's admin panel.
displayed_sidebar: cmsSidebar
sidebar_label: URL, host, and port configuration
toc_max_heading_level: 4
tags:
- admin panel 
- admin panel customization

---

# Admin panel customization: Host, port, and path configuration

By default, Strapi's [admin panel](/cms/admin-panel-customization) is exposed via <ExternalLink to="http://localhost:1337/admin" text="http://localhost:1337/admin"/>. For security reasons, the host, port, and path can be updated.

## Update the admin panel's path only

Unless you chose to deploy Strapi's back-end server and admin panel server on different servers (see [deployment](/cms/configurations/admin-panel#deploy-on-different-servers)), by default:

- The back-end server and the admin panel server of Strapi both run on the same host and port, which is `http://localhost:1337/`.
- The admin panel is accessible at the `/admin` path while the back-end server is accessible at the `/api` path.

To make the admin panel accessible at another path, for instance at `http://localhost:1337/dashboard`, define or update the `url` property in the [admin panel configuration file](/cms/configurations/admin-panel) as follows:

```js title="/config/admin.js"
module.exports = ({ env }) => ({
  // ‚Ä¶ other configuration properties
  url: "/dashboard",
});
```

Since by default the back-end server and the admin panel server run on the same host and port, only updating the `config/admin.[ts|js]` file should work if you left the `host` and `port` property values untouched in the [server configuration](/cms/configurations/server) file, which should be as follows:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/config/server.js"
module.exports = ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
});
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/config/server.ts"
export default ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
});
```

</TabItem>
</Tabs>

## Update the admin panel's host and port

If the admin panel and the back-end server of Strapi are not hosted on the same server (see [deployment](/cms/configurations/admin-panel#deploy-on-different-servers)), you will need to update the host and port of the admin panel.

This is done in the admin panel configuration file, for example to host the admin panel on `my-host.com:3000` properties should be updated follows:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="./config/admin.js"
module.exports = ({ env }) => ({
  host: "my-host.com",
  port: 3000,
  // Additionally you can define another path instead of the default /admin one üëá
  // url: '/dashboard' 
});
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./config/admin.ts"
export default ({ env }) => ({
  host: "my-host.com",
  port: 3000,
  // Additionally you can define another path instead of the default /admin one üëá
  // url: '/dashboard'
});
```

</TabItem>
</Tabs>

<br/>

:::strapi Other admin panel configurations
The `/config/admin.[ts|js]` file can be used to configure many other aspects. Please refer to the [admin panel configuration](/cms/configurations/admin-panel) documentation for details.
:::


 This is the content for the doc docusaurus/docs/cms/admin-panel-customization/locales-translations.md 

 ---
title: Locales & translations
description: Learn how to update locales and extend translations in the Strapi admin panel.
displayed_sidebar: cmsSidebar
sidebar_label: Locales & translations
toc_max_heading_level: 4
tags:
- admin panel
- admin panel customization
---

# Locales & translations

Strapi's [admin panel](/cms/admin-panel-customization) always ships with English translations, but can display additional languages. You can also override any text that appears in the interface.
The present page shows how to define your own locales and extend Strapi or plugin translations from the project codebase.

## Defining locales

To update the list of available locales in the admin panel, use the `config.locales` array:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/src/admin/app.js"
export default {
  config: {
    locales: ["ru", "zh"],
  },
  bootstrap() {},
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```jsx title="/src/admin/app.ts"
export default {
  config: {
    locales: ["ru", "zh"],
  },
  bootstrap() {},
};
```

</TabItem>
</Tabs>

:::note Notes

- The `en` locale cannot be removed from the build as it is both the fallback (i.e. if a translation is not found in a locale, the `en` will be used) and the default locale (i.e. used when a user opens the administration panel for the first time).
- The full list of available locales is accessible on <ExternalLink to="https://github.com/strapi/strapi/blob/v4.0.0/packages/plugins/i18n/server/constants/iso-locales.json" text="Strapi's Github repo"/>.

:::

## Extending translations

Translation key/value pairs are declared in `@strapi/admin/admin/src/translations/[language-name].json` files.

These keys can be extended through the `config.translations` key:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/src/admin/app.js"
export default {
  config: {
    locales: ["fr"],
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        Users: "Utilisateurs",
        City: "CITY (FRENCH)",
        // Customize the label of the Content Manager table.
        Id: "ID french",
      },
    },
  },
  bootstrap() {},
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/admin/app.ts"
export default {
  config: {
    locales: ["fr"],
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        Users: "Utilisateurs",
        City: "CITY (FRENCH)",
        // Customize the label of the Content Manager table.
        Id: "ID french",
      },
    },
  },
  bootstrap() {},
};
```

</TabItem>
</Tabs>

A plugin's key/value pairs are declared independently in the plugin's files at `/admin/src/translations/[language-name].json`. These key/value pairs can similarly be extended in the `config.translations` key by prefixing the key with the plugin's name (i.e. `[plugin name].[key]: 'value'`) as in the following example:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/src/admin/app.js"
export default {
  config: {
    locales: ["fr"],
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        // Translate a plugin's key/value pair by adding the plugin's name as a prefix
        // In this case, we translate the "plugin.name" key of plugin "content-type-builder"
        "content-type-builder.plugin.name": "Constructeur de Type-Contenu",
      },
    },
  },
  bootstrap() {},
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/admin/app.ts"
export default {
  config: {
    locales: ["fr"],
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        // Translate a plugin's key/value pair by adding the plugin's name as a prefix
        // In this case, we translate the "plugin.name" key of plugin "content-type-builder"
        "content-type-builder.plugin.name": "Constructeur de Type-Contenu",
      },
    },
  },
  bootstrap() {},
};
```

</TabItem>
</Tabs>

If more translations files should be added, place them in the `/src/admin/extensions/translations` folder.


 This is the content for the doc docusaurus/docs/cms/admin-panel-customization/logos.md 

 ---
title: Logos
description: Customize the logos displayed in Strapi's admin panel.
displayed_sidebar: cmsSidebar
sidebar_label: Logos
toc_max_heading_level: 4
tags:
- admin panel
- admin panel customization
---

# Logos

Strapi's [admin panel](/cms/admin-panel-customization) displays its branding on both the login screen and in the main navigation. Replacing these images allows you to match the interface to your identity. The present page shows how to override the two logo files via the admin panel configuration. If you prefer uploading them directly in the UI, see [Customizing the logo](/cms/features/admin-panel#customizing-the-logo).

The Strapi admin panel displays a logo in 2 different locations, represented by 2 different keys in the admin panel configuration:

| Location in the UI     | Configuration key to update |
| ---------------------- | --------------------------- |
| On the login page      | `config.auth.logo`          |
| In the main navigation | `config.menu.logo`          |

:::note
Logos uploaded via the admin panel supersede any logo set through the configuration files.
:::

### Logos location in the admin panel

<!--TODO: update screenshot #2 -->

The logo handled by `config.auth.logo` logo is only shown on the login screen:

![Location of the auth logo](/img/assets/development/config-auth-logo.png)

The logo handled by `config.menu.logo` logo is located in the main navigation at the top left corner of the admin panel:

![Location of Menu logo](/img/assets/development/config-menu-logo.png)

### Updating logos

To update the logos, put image files in the `/src/admin/extensions` folder, import these files in `src/admin/app` and update the corresponding keys as in the following example:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/src/admin/app.js"
import AuthLogo from "./extensions/my-auth-logo.png";
import MenuLogo from "./extensions/my-menu-logo.png";

export default {
  config: {
    // ‚Ä¶ other configuration properties 
    auth: { // Replace the Strapi logo in auth (login) views
      logo: AuthLogo,
    },
    menu: { // Replace the Strapi logo in the main navigation
      logo: MenuLogo,
    },
    // ‚Ä¶ other configuration properties 

  bootstrap() {},
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```jsx title="/src/admin/app.ts"
import AuthLogo from "./extensions/my-auth-logo.png";
import MenuLogo from "./extensions/my-menu-logo.png";

export default {
  config: {
    // ‚Ä¶ other configuration properties 
    auth: { // Replace the Strapi logo in auth (login) views
      logo: AuthLogo,
    },
    menu: { // Replace the Strapi logo in the main navigation
      logo: MenuLogo,
    },
    // ‚Ä¶ other configuration properties 

  bootstrap() {},
};
```

</TabItem>
</Tabs>

:::note
There is no size limit for image files set through the configuration files.
:::


 This is the content for the doc docusaurus/docs/cms/admin-panel-customization/options.md 

 ---
title: Admin panel customization options
description: Various options help you configure Strapi's administration panel behavior and look, so you can make it reflect your identity.
displayed_sidebar: cmsSidebar
sidebar_label: Customization options
toc_max_heading_level: 4
tags:
- admin panel 
- admin panel customization

---

import HotReloading from '/docs/snippets/hot-reloading-admin-panel.md'

Many aspects of Strapi's [admin panel](/cms/admin-panel-customization) can be customized through the code using the admin panel's `/src/admin/app.[tsx|js]` entry point file (see [project structure](/cms/project-structure)).

:::prerequisites
Before trying to update code to configure any admin panel customization option:

- Rename the default `app.example.[tsx|js]` file into `app.[ts|js]`.
- Create a new `extensions` folder in `/src/admin/`.
- If you want to see your changes applied live while developing, ensure the admin panel server is running (it's usually done with the `yarn develop` or `npm run develop` command if you have not changed the default [host, port, and path](/cms/admin-panel-customization/host-port-path) of the admin panel).
:::

:::note Note: Admin panel extensions vs. plugins extensions
By default, Strapi projects already contain another `extensions` folder in `/src` but it is for plugins extensions only (see [Plugins extension](/cms/plugins-development/plugins-extension)).
:::

The `config` object found in `/src/admin/app.[ts|js]` stores the admin panel configuration.

Any file used by the `config` object (e.g., a custom logo) should be placed in a `/src/admin/extensions/` folder and imported inside `/src/admin/app.js`.

<HotReloading />

## Available configuration options

The `config` object of `/src/admin/app.[tsx|js]` accepts the following parameters:

| Parameter                      | Type             | Description                                                                                                           |
| ------------------------------ | ---------------- | --------------------------------------------------------------------------------------------------------------------- |
| `auth`                         | Object           | Accepts a `logo` key to replace the default Strapi [logo](/cms/admin-panel-customization/logos) on login screen                                     |
| `head`                         | Object           | Accepts a `favicon` key to replace the default Strapi [favicon](/cms/admin-panel-customization/favicon)                                             |
| `locales`                      | Array of Strings | Defines availables locales (see [updating locales](/cms/admin-panel-customization/locales-translations))                                                         |
| `translations`                 | Object           | [Extends the translations](/cms/admin-panel-customization/locales-translations#extending-translations)                                                                   |
| `menu`                         | Object           | Accepts the `logo` key to change the [logo](/cms/admin-panel-customization/logos) in the main navigation                                            |
| `theme.light` and `theme.dark` | Object           | [Overwrite theme properties](/cms/admin-panel-customization/theme-extension) for Light and Dark modes                                               |
| `tutorials`                    | Boolean          | Toggles [displaying the video tutorials](/cms/configurations/admin-panel)                                                            |
| `notifications`                | Object           | Accepts the `releases` key (Boolean) to toggle [displaying notifications about new releases](/cms/configurations/admin-panel) |

<details>
<summary>Example of a custom configuration for the admin panel:</summary>

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/src/admin/app.js"
import AuthLogo from "./extensions/my-logo.png";
import MenuLogo from "./extensions/logo.png";
import favicon from "./extensions/favicon.png";

export default {
  config: {
    // Replace the Strapi logo in auth (login) views
    auth: {
      logo: AuthLogo,
    },
    // Replace the favicon
    head: {
      favicon: favicon,
    },
    // Add a new locale, other than 'en'
    locales: ["fr", "de"],
    // Replace the Strapi logo in the main navigation
    menu: {
      logo: MenuLogo,
    },
    // Override or extend the theme
    theme: {
      // overwrite light theme properties
      light: {
        colors: {
          primary100: "#f6ecfc",
          primary200: "#e0c1f4",
          primary500: "#ac73e6",
          primary600: "#9736e8",
          primary700: "#8312d1",
          danger700: "#b72b1a",
        },
      },

      // overwrite dark theme properties
      dark: {
        // ...
      },
    },
    // Extend the translations
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        Users: "Utilisateurs",
        City: "CITY (FRENCH)",
        // Customize the label of the Content Manager table.
        Id: "ID french",
      },
    },
    // Disable video tutorials
    tutorials: false,
    // Disable notifications about new Strapi releases
    notifications: { releases: false },
  },

  bootstrap() {},
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```jsx title="/src/admin/app.ts"
// Note: you may see some ts errors, don't worry about them
import AuthLogo from "./extensions/my-logo.png";
import MenuLogo from "./extensions/logo.png";
import favicon from "./extensions/favicon.png";

export default {
  config: {
    // Replace the Strapi logo in auth (login) views
    auth: {
      logo: AuthLogo,
    },
    // Replace the favicon
    head: {
      // Try to change the origin favicon.png file in the
      // root of strapi project if this config don't work.
      favicon: favicon, 
    },
    // Add a new locale, other than 'en'
    locales: ["fr", "de"],
    // Replace the Strapi logo in the main navigation
    menu: {
      logo: MenuLogo,
    },
    // Override or extend the theme
    theme: {
	    dark:{
	      colors: {
			  alternative100: '#f6ecfc',
			  alternative200: '#e0c1f4',
			  alternative500: '#ac73e6',
			  alternative600: '#9736e8',
			  alternative700: '#8312d1',
			  buttonNeutral0: '#ffffff',
			  buttonPrimary500: '#7b79ff',
			  // you can see other colors in the link below
			  },
		},
		light:{
			// you can see the light color here just like dark colors https://github.com/strapi/design-system/blob/main/packages/design-system/src/themes/lightTheme/light-colors.ts
		},
  },
    },
    // Extend the translations
    // you can see the traslations keys here https://github.com/strapi/strapi/blob/develop/packages/core/admin/admin/src/translations
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        Users: "Utilisateurs",
        City: "CITY (FRENCH)",
        // Customize the label of the Content Manager table.
        Id: "ID french",
      },
    },
    // Disable video tutorials
    tutorials: false,
    // Disable notifications about new Strapi releases
    notifications: { releases: false },
  },

  bootstrap() {},
};
```

:::note
You can see the full translation keys, for instance to change the welcome message, [on GitHub](https://github.com/strapi/strapi/blob/develop/packages/core/admin/admin/src/translations).
Light and dark colors are also found [on GitHub](https://github.com/strapi/design-system/tree/main/packages/design-system/src/themes).
:::

</TabItem>
</Tabs>


</details>


 This is the content for the doc docusaurus/docs/cms/admin-panel-customization/theme-extension.md 

 ---
title: Theme extension
description: Extend Strapi's admin panel theme.
displayed_sidebar: cmsSidebar
sidebar_label: Theme extension
toc_max_heading_level: 4
tags:
- admin panel
- admin panel customization
---

# Theme extension

Strapi's [admin panel](/cms/admin-panel-customization) can be displayed either in light or dark mode (see [profile setup](/cms/getting-started/setting-up-admin-panel#setting-up-your-administrator-profile)), and both can be extended through custom theme settings.

To extend the theme, use either:

- the `config.theme.light` key for the Light mode
- the `config.theme.dark` key for the Dark mode

:::strapi Strapi Design System
The default <ExternalLink to="https://github.com/strapi/design-system/tree/main/packages/design-system/src/themes" text="Strapi theme"/> defines various theme-related keys (shadows, colors‚Ä¶) that can be updated through the `config.theme.light` and `config.theme.dark` keys in `./admin/src/app.js`. The <ExternalLink to="https://design-system.strapi.io/" text="Strapi Design System"/> is fully customizable and has a dedicated <ExternalLink to="https://design-system-git-main-strapijs.vercel.app" text="StoryBook"/> documentation.
:::


 This is the content for the doc docusaurus/docs/cms/admin-panel-customization/wysiwyg-editor.md 

 ---
title: Customizing the WYSIWYG editor
description: Learn more about the various strategies available to customize the WYSIWYG editor in Strapi's admin panel.
displayed_sidebar: cmsSidebar
sidebar_label: Rich text editor
tags:
- admin panel 
- admin panel customization
- WYSIWYG editor
---

# Change the default WYSIWYG editor

Strapi's [admin panel](/cms/admin-panel-customization) comes with a built-in rich text editor. To change the default editor, several options are at your disposal:

- You can install a third-party plugin, such as one for CKEditor, by visiting <ExternalLink to="https://market.strapi.io/" text="Strapi's Marketplace"/>.
- You can create your own plugin to create and register a fully custom WYSIWYG field (see [custom fields documentation](/cms/features/custom-fields)).
- You can take advantage of Strapi's admin panel [extensions](/cms/admin-panel-customization/extension) system and leverage the [bootstrap lifecycle function](/cms/plugins-development/admin-panel-api#bootstrap) of the admin panel.

If you choose to use the extensions system, create your WYSIWYG component in the `/src/admin/extensions` folder and import it in the admin panel's `/src/admin/app.[tsx|js]` entry point file, then declare the new field with the `app.addFields()` function as follows:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/src/admin/app.js"
// The following file contains the logic for your new WYSIWYG editorüëá
import MyNewWYSIGWYG from "./extensions/components/MyNewWYSIGWYG";

export default {
  bootstrap(app) {
    app.addFields({ type: "wysiwyg", Component: MyNewWYSIGWYG });
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/admin/app.tsx"
// The following file contains the logic for your new WYSIWYG editorüëá
import MyNewWYSIGWYG from "./extensions/components/MyNewWYSIGWYG";

export default {
  bootstrap(app) {
    app.addFields({ type: "wysiwyg", Component: MyNewWYSIGWYG });
  },
};
```

</TabItem>
</Tabs>


 This is the content for the doc docusaurus/docs/cms/api/client.md 

 ---
title: Strapi Client
description: The Strapi Client library simplifies interactions with your Strapi back end, providing a way to fetch, create, update, and delete content.  
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- documentId
- Strapi Client
---

# Strapi Client

The Strapi Client library simplifies interactions with your Strapi back end, providing a way to fetch, create, update, and delete content. This guide walks you through setting up the Strapi Client, configuring authentication, and using its key features effectively.

## Getting Started
:::prerequisites
- A Strapi project has been created and is running. If you haven't set one up yet, follow the [Quick Start Guide](/cms/quick-start) to create one.
- You know the URL of the Content API of your Strapi instance (e.g., `http://localhost:1337/api`).
:::

### Installation

To use the Strapi Client in your project, install it as a dependency using your preferred package manager:

  <Tabs groupId="yarn-npm">
  <TabItem value="yarn" label="Yarn">

  ```bash
  yarn add @strapi/client
  ```

  </TabItem>
  <TabItem value="npm" label="NPM">

  ```bash
  npm install @strapi/client
  ```

  </TabItem>
  <TabItem value="pnpm" label="pnpm">

  ```bash
    pnpm add @strapi/client
  ```

  </TabItem>
  </Tabs>

### Basic configuration

To start interacting with your Strapi back end, initialize the Strapi Client and set the base API URL:

```js
import { strapi } from '@strapi/client';

const client = strapi({ baseURL: 'http://localhost:1337/api' });
```

If you're using the Strapi Client in a browser environment, you can include it using a `<script>` tag:

```js title="./src/api/[apiName]/routes/[routerName].ts (e.g './src/api/restaurant/routes/restaurant.ts')"
<script src="https://cdn.jsdelivr.net/npm/@strapi/client"></script>

<script>
  const client = strapi.strapi({ baseURL: 'http://localhost:1337/api' });
</script>
```

### Authentication

The Strapi Client supports different authentication strategies to access protected resources in your Strapi back end.

If your Strapi instance uses API tokens, configure the Strapi Client as follows:

```js
const client = strapi({
  baseURL: 'http://localhost:1337/api',
  auth: 'your-api-token-here',
});
```

This allows your requests to include the necessary authentication credentials automatically.

## API Reference

The Strapi Client provides the following key properties and methods for interacting with your Strapi back end:

| Parameter | Description                                                                                  |
| ----------| -------------------------------------------------------------------------------------------- |
| `baseURL`  | The base API URL of your Strapi back end.        |
| `fetch()`    | A utility method for making generic API requests similar to the native fetch API. |
| `collection()`  | Manages collection-type resources (e.g., blog posts, products). |
| `single()`  | Manages single-type resources (e.g., homepage settings, global configurations). |

### General purpose fetch

The Strapi Client provides access to the underlying JavaScript `fetch` function to make direct API requests. The request is always relative to the base URL provided during client initialization:

```js
const result = await client.fetch('articles', { method: 'GET' });
```

### Working with collection types

Collection types in Strapi are entities with multiple entries (e.g., a blog with many posts). The Strapi Client provides a `collection()` method to interact with these resources, with the following methods available:

| Parameter | Description                                                                                  |
| ----------| -------------------------------------------------------------------------------------------- |
| `find(queryParams?)`  | Fetch multiple documents with optional filtering, sorting, or pagination.       |
| `findOne(documentID, queryParams?)`    | Retrieve a single document by its unique ID.        |
| `create(data, queryParams?)`  | Create a new document in the collection. |
| `update(documentID, data, queryParams?)`  | Update an existing document. |
| `delete(documentID, queryParams?)`  | Update an existing document. |

**Usage examples:**
```js
const articles = client.collection('articles');

// Fetch all english articles sorted by title
const allArticles = await articles.find({
  locale: 'en',
  sort: 'title',
});

// Fetch a single article
const singleArticle = await articles.findOne('article-document-id');

// Create a new article
const newArticle = await articles.create({ title: 'New Article', content: '...' });

// Update an existing article
const updatedArticle = await articles.update('article-document-id', { title: 'Updated Title' });

// Delete an article
await articles.delete('article-id');
```

### Working with single types

Single types in Strapi represent unique content entries that exist only once (e.g., the homepage settings or site-wide configurations). The Strapi Client provides a `single()` method to interact with these resources, with the following methods available:
| Parameter | Description                                                                                  |
| ----------| -------------------------------------------------------------------------------------------- |
| `find(queryParams?)`  | Fetch the document.        |
| `update(documentID, data, queryParams?)`  | Update the document. |
| `delete(queryParams?) `  | Remove the document. |

**Usage examples:**
```js
const homepage = client.single('homepage');

// Fetch the default homepage content
const defaultHomepage = await homepage.find();

// Fetch the Spanish version of the homepage
const spanishHomepage = await homepage.find({ locale: 'es' });

// Update the homepage draft content
const updatedHomepage = await homepage.update(
  { title: 'Updated Homepage Title' },
  { status: 'draft' }
);

// Delete the homepage content
await homepage.delete();
```

### Working with files <NewBadge />

The Strapi Client provides access to the [Media Library](/cms/features/media-library) via the `files` property. This allows you to retrieve and manage file metadata without directly interacting with the REST API.

The following methods are available for working with files:

| Method | Description |
|--------|-------------|
| `find(params?)` | Retrieves a list of file metadata based on optional query parameters |
| `findOne(fileId)` | Retrieves the metadata for a single file by its ID |
| `update(fileId, fileInfo)` | Updates metadata for an existing file |
| `delete(fileId)` | Deletes a file by its ID |

**Usage examples:**

```js
// Initialize the client
const client = strapi({
  baseURL: 'http://localhost:1337/api',
  auth: 'your-api-token',
});

// Find all file metadata
const allFiles = await client.files.find();
console.log(allFiles);

// Find file metadata with filtering and sorting
const imageFiles = await client.files.find({
  filters: {
    mime: { $contains: 'image' }, // Only get image files
    name: { $contains: 'avatar' }, // Only get files with 'avatar' in the name
  },
  sort: ['name:asc'], // Sort by name in ascending order
});

// Find file metadata by ID
const file = await client.files.findOne(1);
console.log(file.name); // The file name
console.log(file.url); // The file URL
console.log(file.mime); // The file MIME type

// Update file metadata
const updatedFile = await client.files.update(1, {
  name: 'New file name',
  alternativeText: 'Descriptive alt text for accessibility',
  caption: 'A caption for the file',
});

// Delete a file by ID
const deletedFile = await client.files.delete(1);
console.log('File deleted successfully');
console.log('Deleted file ID:', deletedFile.id);
console.log('Deleted file name:', deletedFile.name);
```

:::strapi Additional information
More details about the Strapi Strapi Client might be found in the <ExternalLink to="https://github.com/strapi/client/blob/main/README.md" text="package's README"/>.
:::

 This is the content for the doc docusaurus/docs/cms/api/content-api.md 

 ---
title: Content API
description: Learn more about Strapi 5's Content API
displayed_sidebar: cmsSidebar
sidebar_label: APIs Introduction
pagination_prev: cms/setup-deployment
pagination_next: cms/api/document
tags:
- concepts
- Document Service API
- GraphQL
- GraphQL API
- introduction
- Query Engine API
- Rest API
---

# Strapi APIs to access your content

Once you've created and configured a Strapi project, created a content structure with the [Content-Type Builder](/cms/features/content-type-builder) and started adding data through the [Content Manager](/cms/features/content-manager), you likely would like to access your content.

From a front-end application, your content can be accessed through Strapi's Content API, which is exposed:
- by default through the [REST API](/cms/api/rest)
- and also through the [GraphQL API](/cms/api/graphql) if you installed the Strapi built-in [GraphQL plugin](/cms/plugins/graphql).

You can also use the [Strapi Client](/cms/api/client) library to interact with the REST API.

REST and GraphQL APIs represent the top-level layers of the Content API exposed to external applications. Strapi also provides 2 lower-level APIs:

- The [Document Service API](/cms/api/document-service) is the recommended API to interact with your application's database within the [backend server](/cms/customization) or through [plugins](/cms/plugins-development/developing-plugins). The Document Service is the layer that handles **documents** <DocumentDefinition /> as well as Strapi's complex content structures like components and dynamic zones.
- The Query Engine API interacts with the database layer at a lower level and is used under the hood to execute database queries. It gives unrestricted internal access to the database layer, but is not aware of any advanced Strapi features that Strapi 5 can handle, like Draft & Publish, Internationalization, Content History, and more.<br/>‚ö†Ô∏è In most, if not all, use cases, you should use the Document Service API instead.

<ThemedImage
alt="Content APIs diagram"
sources={{
  light: '/img/assets/diagrams/apis-v2.png',
  dark: '/img/assets/diagrams/apis-v2_DARK.png'
}}
/>

<br/>

This documentation section includes reference information about the following Strapi APIs and some integration guides with 3rd party technologies:

<CustomDocCardsWrapper>

<CustomDocCard emoji="‚ÜïÔ∏è" title="REST API" description="Query the Content API from a front-end application through REST." link="/cms/api/rest" />

<CustomDocCard emoji="‚ÜïÔ∏è" title="GraphQL API" description="Query the Content API  from a front-end application through GraphQL." link="/cms/api/graphql" />

<CustomDocCard emoji="‚ÜïÔ∏è" title="Strapi Client" description="Interact with the REST API through the Strapi Client library." link="/cms/api/client" />

<CustomDocCard emoji="üîÉ" title="Document Service API" description="Query your data through the backend server or plugins." link="/cms/api/document-service" />

:::strapi Integrations
If you're looking for how to integrate Strapi with other platforms, such as Next.js and more, please refer to Strapi's <ExternalLink to="https://strapi.io/integrations" text="integrations pages"/>.
:::

</CustomDocCardsWrapper>


 This is the content for the doc docusaurus/docs/cms/api/document-service.md 

 ---
title: Document Service API
description: The Document Service API is the recommended way to interact with your content from the back-end server or from plugins.
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- Documents
- documentId
- Document Service API
---

# Document Service API

The Document Service API is built on top of the **Query Engine API** <Annotation>2 different back-end APIs allow you to interact with your content: <ul><li>The [Query Engine API](/cms/api/query-engine) is the lower-level layer that offers unrestricted access to the database, but is not aware of complex Strapi content structures such as components and dynamic zones.</li><li>The Document Service API is built on top of the Query Engine and is the recommended way to interact with your content while you are customizing the back end server or developing plugins.</li></ul>More details can be found in the [Content API](/cms/api/content-api) and [backend customization](/cms/backend-customization) introductions.</Annotation> and used to perform CRUD ([create](#create), [retrieve](#findone), [update](#update), and [delete](#delete)) operations on **documents** <DocumentDefinition />.

With the Document Service API, you can also [count](#count) documents and, if [Draft & Publish](/cms/features/draft-and-publish) is enabled on the content-type, perform Strapi-specific features such as [publishing](#publish)/[unpublishing](#unpublish) documents and [discarding drafts](#discarddraft).

:::strapi Entity Service API is deprecated in Strapi 5
The Document Service API is meant to replace the Entity Service API used in Strapi v4 (<ExternalLink to="https://docs-v4.strapi.io/cms/api/entity-service" text="see Strapi v4 documentation"/>). Additional information on how to transition away from the Entity Service API to the Document Service API can be found in the related [migration reference](/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service).
:::

:::note
Relations can also be connected, disconnected, and set through the Document Service API just like with the REST API (see the [REST API relations documentation](/cms/api/rest/relations) for examples).
:::

## `findOne()`

Find a document matching the passed `documentId` and parameters.

Syntax: `findOne(parameters: Params) => Document`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| `documentId` | Document id | | `ID` |
| [`locale`](/cms/api/document-service/locale#find-one)|  Locale of the documents to create. | Default locale | String or `undefined` |
| [`status`](/cms/api/document-service/status#find-one) | _If [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type_:<br/>Publication status, can be: <ul><li>`'published'` to find only published documents</li><li>`'draft'` to find only draft documents</li></ul> | `'draft'` | `'published'` or `'draft'` |
| [`fields`](/cms/api/document-service/fields#findone)   | [Select fields](/cms/api/document-service/fields#findone) to return   | All fields<br/>(except those not populated by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If only a `documentId` is passed without any other parameters, `findOne()` returns the draft version of a document in the default locale:

<ApiCall>

<Request title="Find a document by passing its documentId">

```js
await strapi.documents('api::restaurant.restaurant').findOne({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm'
})
```

</Request>

<Response>

```js {4,5}
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  name: "Biscotte Restaurant",
  publishedAt: null, // draft version (default)
  locale: "en", // default locale
  // ‚Ä¶
}
```

</Response>

</ApiCall>

## `findFirst()`

Find the first document matching the parameters.

Syntax:  `findFirst(parameters: Params) => Document`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| [`locale`](/cms/api/document-service/locale#find-first) |  Locale of the documents to find. | Default locale | String or `undefined` |
| [`status`](/cms/api/document-service/status#find-first) | _If [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type_:<br/>Publication status, can be: <ul><li>`'published'` to find only published documents</li><li>`'draft'` to find only draft documents</li></ul> | `'draft'` | `'published'` or `'draft'` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#findfirst)   | [Select fields](/cms/api/document-service/fields#findfirst) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Examples

<br />

#### Generic example

By default, `findFirst()` returns the draft version, in the default locale, of the first document for the passed unique identifier (collection type id or single type id):

<ApiCall>

<Request title="Find the first document">

```js
await strapi.documents('api::restaurant.restaurant').findFirst()
```

</Request>

<Response>

```js
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  name: "Restaurant Biscotte",
  publishedAt: null,
  locale: "en"
  // ‚Ä¶
}
```

</Response>

</ApiCall>

#### Find the first document matching parameters

Pass some parameters to `findFirst()` to return the first document matching them.

If no `locale` or `status` parameters are passed, results return the draft version for the default locale:

<ApiCall>

<Request title="Find the first document that matches the defined filters">

```js
await strapi.documents('api::restaurant.restaurant').findFirst(
  {
    filters: {
      name: {
        $startsWith: "Pizzeria"
      }
    }
  }
)
```

</Request>

<Response>

```js
{
  documentId: "j9k8l7m6n5o4p3q2r1s0tuv",
  name: "Pizzeria Arrivederci",
  publishedAt: null,
  locale: "en"
  // ‚Ä¶
}
```

</Response>

</ApiCall>

## `findMany()`

Find documents matching the parameters.

Syntax: `findMany(parameters: Params) => Document[]`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| [`locale`](/cms/api/document-service/locale#find-many) |  Locale of the documents to find. | Default locale | String or `undefined` |
| [`status`](/cms/api/document-service/status#find-many) | _If [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type_:<br/>Publication status, can be: <ul><li>`'published'` to find only published documents</li><li>`'draft'` to find only draft documents</li></ul> | `'draft'` | `'published'` or `'draft'` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#findmany)   | [Select fields](/cms/api/document-service/fields#findmany) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |
| [`pagination`](/cms/api/document-service/sort-pagination#pagination) | [Paginate](/cms/api/document-service/sort-pagination#pagination) results |
| [`sort`](/cms/api/document-service/sort-pagination#sort) | [Sort](/cms/api/document-service/sort-pagination#sort) results | | | 

### Examples

<br />

#### Generic example

When no parameter is passed, `findMany()` returns the draft version in the default locale for each document:

<ApiCall>

<Request title="Find documents that match a specific filter">

```js
await strapi.documents('api::restaurant.restaurant').findMany()
```

</Request>

<Response>

```js {5,6}
[
  {
    documentId: "a1b2c3d4e5f6g7h8i9j0klm",
    name: "Biscotte Restaurant",
    publishedAt: null, // draft version (default)
    locale: "en" // default locale
    // ‚Ä¶
  },
  {
    documentId: "j9k8l7m6n5o4p3q2r1s0tuv",
    name: "Pizzeria Arrivederci",
    publishedAt: null,
    locale: "en"
    // ‚Ä¶
  },
]
```

</Response>

</ApiCall>

#### Find documents matching parameters

Available filters are detailed in the [filters](/cms/api/document-service/filters) page of the Document Service API reference.

If no `locale` or `status` parameters are passed, results return the draft version for the default locale:

<ApiCall>

<Request title="Find documents that match a specific filter">

```js
await strapi.documents('api::restaurant.restaurant').findMany(
  {
    filters: {  
      name: {
        $startsWith: 'Pizzeria'
      }
    }
  }
)
```

</Request>

<Response>

```js
[
  {
    documentId: "j9k8l7m6n5o4p3q2r1s0tuv",
    name: "Pizzeria Arrivederci",
    locale: "en", // default locale
    publishedAt: null, // draft version (default)
    // ‚Ä¶
  }, 
  // ‚Ä¶
]
```

</Response>

</ApiCall>

<!-- TODO: To be completed post v5 GA -->
<!-- #### Find ‚Äòfr‚Äô version of all documents with fallback on default (en)

```js
await documents('api:restaurant.restaurant').findMany({ locale: 'fr', fallbackLocales: ['en'] } );
``` -->

<!-- TODO: To be completed post v5 GA -->
<!-- #### Find sibling locales for one or many documents

```js
await documents('api:restaurant.restaurant').findMany({ locale: 'fr', populateLocales: ['en', 'it'] } );
// Option of response forma for this case 
{
  data: {
		title: { "Wonderful" }
  },
  localizations: [
    { enLocaleData },
    { itLocaleData }
  ]
}


await documents('api:restaurant.restaurant').findMany({ locale: ['en', 'it'] } );
// Option of response format for this case 
{
  data: {
		title: {
			"en": "Wonderful",
			"it": "Bellissimo"
		}
  },
}
```

</Request> -->

## `create()`

Creates a drafted document and returns it.

Pass fields for the content to create in a `data` object.

Syntax: `create(parameters: Params) => Document`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| [`locale`](/cms/api/document-service/locale#create) | Locale of the documents to create. | Default locale | String or `undefined` |
| [`fields`](/cms/api/document-service/fields#create)   | [Select fields](/cms/api/document-service/fields#create) to return   | All fields<br/>(except those not populated by default)  | Object |
| [`status`](/cms/api/document-service/status#create) | _If [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type_:<br/>Can be set to `'published'` to automatically publish the draft version of a document while creating it  | -| `'published'` |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If no `locale` parameter is passed, `create()` creates the draft version of the document for the default locale:

<ApiCall>

<Request title="Create a new 'Restaurant B' document">

```js
await strapi.documents('api::restaurant.restaurant').create({
  data: {
    name: 'Restaurant B'
  }
})
```

</Request>

<Response>

```js
{
  documentId: "ln1gkzs6ojl9d707xn6v86mw",
  name: "Restaurant B",
  publishedAt: null,
  locale: "en",
}
```

</Response>
</ApiCall>

:::tip
If the [Draft & Publish](/cms/features/draft-and-publish) feature is enabled on the content-type, you can automatically publish a document while creating it (see [`status` documentation](/cms/api/document-service/status#create)).
:::

## `update()`

Updates document versions and returns them.

Syntax: `update(parameters: Params) => Promise<Document>`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| `documentId` | Document id | | `ID` |
| [`locale`](/cms/api/document-service/locale#update) | Locale of the document to update. | Default locale | String or `null` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#update)   | [Select fields](/cms/api/document-service/fields#update) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`status`](/cms/api/document-service/status#update) | _If [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type_:<br/>Can be set to `'published'` to automatically publish the draft version of a document while updating it  | - | `'published'` |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

:::tip
Published versions are read-only, so you can not technically update the published version of a document.
To update a document and publish the new version right away, you can:

- update its draft version with `update()`, then [publish it](#publish) with `publish()`,
- or directly add `status: 'published'` along with the other parameters passed to `update()` (see [`status` documentation](/cms/api/document-service/status#update)).

:::

### Example

If no `locale` parameter is passed, `update()` updates the document for the default locale:

<ApiCall>

<Request>

```js
await strapi.documents('api::restaurant.restaurant').update({ 
    documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
    data: { name: "New restaurant name" }
})
```

</Request>

<Response>

```js {3}
{
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  name: "New restaurant name",
  locale: "en",
  publishedAt: null, // draft
  // ‚Ä¶
}
```

</Response>

</ApiCall>

<!-- ! not working -->
<!-- #### Update many document locales

```js
// Updates the default locale by default
await documents('api:restaurant.restaurant').update(documentId, {locale: ['es', 'en'], data: {name: "updatedName" }}
``` -->

## `delete()`

Deletes one document, or a specific locale of it.

Syntax: `delete(parameters: Params): Promise<{ documentId: ID, entries: Number }>`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| `documentId`| Document id | | `ID`|
| [`locale`](/cms/api/document-service/locale#delete) | Locale version of the document to delete. | `null`<br/>(deletes only the default locale) | String, `'*'`, or `null` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#delete)   | [Select fields](/cms/api/document-service/fields#delete) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If no `locale` parameter is passed, `delete()` only deletes the default locale version of a document. This deletes both the draft and published versions:

<Request>

```js
await strapi.documents('api::restaurant.restaurant').delete({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm', // documentId,
})
```

</Request>


<Response>

```js {6}
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  entries: [
    {
      "documentId": "a1b2c3d4e5f6g7h8i9j0klm",
      "name": "Biscotte Restaurant",
      "publishedAt": "2024-03-14T18:30:48.870Z",
      "locale": "en"
      // ‚Ä¶
    }
  ]
}
```

</Response>

<!-- ! not working -->
<!-- #### Delete a document with filters

To delete documents matching parameters, pass these parameters to `delete()`.

If no `locale` parameter is passed, it will delete only the default locale version:

<Request>

```js
await strapi.documents('api::restaurant.restaurant').delete(
  { filters: { name: { $startsWith: 'Pizzeria' }}}
)
```

</Request> -->

## `publish()`

Publishes one or multiple locales of a document.

This method is only available if [Draft & Publish](/cms/features/draft-and-publish) is enabled on the content-type.

Syntax: `publish(parameters: Params): Promise<{ documentId: ID, entries: Number }>`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| `documentId`| Document id | | `ID`|
| [`locale`](/cms/api/document-service/locale#publish) | Locale of the documents to publish. | Only the default locale | String, `'*'`, or `null` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#publish)   | [Select fields](/cms/api/document-service/fields#publish) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If no `locale` parameter is passed, `publish()` only publishes the default locale version of the document:

<ApiCall>

<Request>

```js
await strapi.documents('api::restaurant.restaurant').publish({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
});
```

</Request>

<Response>

```js {6}
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  entries: [
    {
      "documentId": "a1b2c3d4e5f6g7h8i9j0klm",
      "name": "Biscotte Restaurant",
      "publishedAt": "2024-03-14T18:30:48.870Z",
      "locale": "en"
      // ‚Ä¶
    }
  ]
}
```

</Response>

</ApiCall>

<!-- ! not working -->
<!-- #### Publish document locales with filters

```js
// Only publish locales with title is "Ready to publish"
await strapi.documents('api::restaurant.restaurant').publish(
  { filters: { title: 'Ready to publish' }}
);
``` -->

## `unpublish()`

Unpublishes one or all locale versions of a document, and returns how many locale versions were unpublished.

This method is only available if [Draft & Publish](/cms/features/draft-and-publish) is enabled on the content-type.

Syntax: `unpublish(parameters: Params): Promise<{ documentId: ID, entries: Number }>`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| `documentId`| Document id | | `ID`|
| [`locale`](/cms/api/document-service/locale#unpublish) | Locale of the documents to unpublish. | Only the default locale | String, `'*'`, or `null` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#unpublish)   | [Select fields](/cms/api/document-service/fields#unpublish) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If no `locale` parameter is passed, `unpublish()` only unpublishes the default locale version of the document:

<ApiCall>

<Request>

```js
await strapi.documents('api::restaurant.restaurant').unpublish({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm' 
});
```

</Request>

<Response>

```js
{
  documentId: "lviw819d5htwvga8s3kovdij",
  entries: [
    {
      documentId: "lviw819d5htwvga8s3kovdij",
      name: "Biscotte Restaurant",
      publishedAt: null,
      locale: "en"
      // ‚Ä¶
    }
  ]
}
```

</Response>

</ApiCall>

## `discardDraft()`

Discards draft data and overrides it with the published version.

This method is only available if [Draft & Publish](/cms/features/draft-and-publish) is enabled on the content-type.

Syntax: `discardDraft(parameters: Params): Promise<{ documentId: ID, entries: Number }>`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| `documentId`| Document id | | `ID`|
| [`locale`](/cms/api/document-service/locale#discard-draft) | Locale of the documents to discard. | Only the default locale. | String, `'*'`, or `null` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |
| [`fields`](/cms/api/document-service/fields#discarddraft)   | [Select fields](/cms/api/document-service/fields#discarddraft) to return   | All fields<br/>(except those not populate by default)  | Object |
| [`populate`](/cms/api/document-service/populate) | [Populate](/cms/api/document-service/populate) results with additional fields. | `null` | Object |

### Example

If no `locale` parameter is passed, `discardDraft()` discards draft data and overrides it with the published version only for the default locale:

<ApiCall>

<Request title="Discard draft for the default locale of a document">

```js
strapi.documents.discardDraft({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm', 
});
```

</Request>

<Response>

```js
{
  documentId: "lviw819d5htwvga8s3kovdij",
  entries: [
    {
      documentId: "lviw819d5htwvga8s3kovdij",
      name: "Biscotte Restaurant",
      publishedAt: null,
      locale: "en"
      // ‚Ä¶
    }
  ]
}
```

</Response>

</ApiCall>

## `count()`

Count the number of documents that match the provided parameters.

Syntax: `count(parameters: Params) => number`

### Parameters

| Parameter | Description | Default | Type |
|-----------|-------------|---------|------|
| [`locale`](/cms/api/document-service/locale#count) | Locale of the documents to count | Default locale | String or `null` |
| [`status`](/cms/api/document-service/status#count) | _If [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type_:<br/>Publication status, can be: <ul><li>`'published'` to find only published documents </li><li>`'draft'` to find draft documents (will return all documents)</li></ul> | `'draft'` | `'published'` or `'draft'` |
| [`filters`](/cms/api/document-service/filters) | [Filters](/cms/api/document-service/filters) to use | `null` | Object |

:::note
Since published documents necessarily also have a draft counterpart, a published document is still counted as having a draft version.

This means that counting with the `status: 'draft'` parameter still returns the total number of documents matching other parameters, even if some documents have already been published and are not displayed as "draft" or "modified" in the Content Manager anymore. There currently is no way to prevent already published documents from being counted.
:::

### Examples

<br />

#### Generic example

If no parameter is passed, the `count()` method the total number of documents for the default locale:
<ApiCall>

<Request>

```js
await strapi.documents('api::restaurant.restaurant').count()
```

</Request>

</ApiCall>

#### Count published documents

To count only published documents, pass `status: 'published'` along with other parameters to the `count()` method.

If no `locale` parameter is passed, documents are counted for the default locale.

<Request>

```js
strapi.documents('api::restaurant.restaurant').count({ status: 'published' })
```

</Request>

#### Count documents with filters

Any [filters](/cms/api/document-service/filters) can be passed to the `count()` method.

If no `locale` and no `status` parameter is passed, draft documents (which is the total of available documents for the locale since even published documents are counted as having a draft version) are counted only for the default locale:

```js
/**
 * Count number of draft documents (default if status is omitted) 
 * in English (default locale) 
 * whose name starts with 'Pizzeria'
 */
strapi.documents('api::restaurant.restaurant').count({ filters: { name: {¬†$startsWith: "Pizzeria" }}})`
```


 This is the content for the doc docusaurus/docs/cms/api/document-service/fields.md 

 ---
title: Using fields with the Document Service API
description: Use Strapi's Document Service API to select the fields to return with your queries.
sidebar_label: Fields
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- create()
- deleting content
- Document Service API
- discardDraft()
- findOne()
- findMany()
- findFirst()
- publish()
- fields
- update()
- unpublishing content
---
 
import IdsInResponse from '/docs/snippets/id-in-responses.md'

# Document Service API: Selecting fields

By default the [Document Service API](/cms/api/document-service) returns all the fields of a document but does not populate any fields. This page describes how to use the `fields` parameter to return only specific fields with the query results.

:::tip
You can also use the `populate` parameter to populate relations, media fields, components, or dynamic zones (see the [`populate` parameter](/cms/api/document-service/populate) documentation).
:::

<IdsInResponse />

## Select fields with `findOne()` queries {#findone}

To select fields to return while [finding a specific document](/cms/api/document-service#findone) with the Document Service API:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents("api::restaurant.restaurant").findOne({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  fields: ["name", "description"],
});
```

</Request>

<Response title="Example response">

```js
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  name: "Biscotte Restaurant",
  description: "Welcome to Biscotte restaurant! ‚Ä¶"
}
```

</Response>
</ApiCall>

## Select fields with `findFirst()` queries {#findfirst}

To select fields to return while [finding the first document](/cms/api/document-service#findfirst) matching the parameters with the Document Service API:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents("api::restaurant.restaurant").findFirst({
  fields: ["name", "description"],
});
```

</Request>

<Response title="Example response">

```js
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  name: "Biscotte Restaurant",
  description: "Welcome to Biscotte restaurant! ‚Ä¶"
}
```

</Response>
</ApiCall>

## Select fields with `findMany()` queries {#findmany}

To select fields to return while [finding documents](/cms/api/document-service#findmany) with the Document Service API:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const documents = await strapi.documents("api::restaurant.restaurant").findMany({
  fields: ["name", "description"],
});
```

</Request>

<Response title="Example response">

```js
[
  {
    documentId: "a1b2c3d4e5f6g7h8i9j0klm",
    name: "Biscotte Restaurant",
    description: "Welcome to Biscotte restaurant! ‚Ä¶"
  }
  // ...
]
```

</Response>
</ApiCall>

## Select fields with `create()` queries {#create}

To select fields to return while [creating documents](/cms/api/document-service#create) with the Document Service API:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents("api::restaurant.restaurant").create({
  data: {
    name: "Restaurant B",
    description: "Description for the restaurant",
  },
  fields: ["name", "description"],
});
```

</Request>

<Response title="Example response">

```js
{
  id: 4,
  documentId: 'fmtr6d7ktzpgrijqaqgr6vxs',
  name: 'Restaurant B',
  description: 'Description for the restaurant'
}
```

</Response>
</ApiCall>

## Select fields with `update()` queries {#update}

To select fields to return while [updating documents](/cms/api/document-service#update) with the Document Service API:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents("api::restaurant.restaurant").update({
  documentId: "fmtr6d7ktzpgrijqaqgr6vxs",
  data: {
    name: "Restaurant C",
  },
  fields: ["name"],
});
```

</Request>

<Response title="Example response">

```js
{ 
  documentId: 'fmtr6d7ktzpgrijqaqgr6vxs',
  name: 'Restaurant C'
}
```

</Response>
</ApiCall>

## Select fields with `delete()` queries {#delete}

To select fields to return while [deleting documents](/cms/api/document-service#delete) with the Document Service API:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents("api::restaurant.restaurant").delete({
  documentId: "fmtr6d7ktzpgrijqaqgr6vxs",
  fields: ["name"],
});
```

</Request>

<Response title="Example response">

```js
  documentId: 'fmtr6d7ktzpgrijqaqgr6vxs',
  // All of the deleted document's versions are returned
  entries: [
    {
      id: 4,
      documentId: 'fmtr6d7ktzpgrijqaqgr6vxs',
      name: 'Restaurant C',
      // ‚Ä¶
    }
  ]
}
```

</Response>
</ApiCall>

## Select fields with `publish()` queries {#publish}

To select fields to return while [publishing documents](/cms/api/document-service#publish) with the Document Service API:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents("api::restaurant.restaurant").publish({
  documentId: "fmtr6d7ktzpgrijqaqgr6vxs",
  fields: ["name"],
});
```

</Request>

<Response title="Example response">

```js
{
  documentId: 'fmtr6d7ktzpgrijqaqgr6vxs',
  // All of the published locale entries are returned
  entries: [
    {
      documentId: 'fmtr6d7ktzpgrijqaqgr6vxs',
      name: 'Restaurant B'
    }
  ]
}
```

</Response>
</ApiCall>

## Select fields with `unpublish()` queries {#unpublish}

To select fields to return while [unpublishing documents](/cms/api/document-service#unpublish) with the Document Service API:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents("api::restaurant.restaurant").unpublish({
  documentId: "cjld2cjxh0000qzrmn831i7rn",
  fields: ["name"],
});
```

</Request>

<Response title="Example response">

```js
{
  documentId: 'fmtr6d7ktzpgrijqaqgr6vxs',
  // All of the published locale entries are returned
  entries: [
    {
      documentId: 'fmtr6d7ktzpgrijqaqgr6vxs',
      name: 'Restaurant B'
    }
  ]
}
```

</Response>
</ApiCall>

## Select fields with `discardDraft()` queries {#discarddraft}

To select fields to return while [discarding draft versions of documents](/cms/api/document-service#discarddraft) with the Document Service API:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents("api::restaurant.restaurant").discardDraft({
  documentId: "fmtr6d7ktzpgrijqaqgr6vxs",
  fields: ["name"],
});
```

</Request>

<Response title="Example response">

```json
{
  documentId: "fmtr6d7ktzpgrijqaqgr6vxs",
  // All of the discarded draft entries are returned
  entries: [
    {
      "name": "Restaurant B"
    }
  ]
}
```

</Response>
</ApiCall>


 This is the content for the doc docusaurus/docs/cms/api/document-service/filters.md 

 ---
title: Using filters with the Document Service API
description: This document provides information about the filters available in the Document Service API.
displayed_sidebar: cmsSidebar
sidebar_label: Filters
tags:
- API
- Content API
- Document Service API
- filters
- logical operators
---

import DeepFilteringBlogLink from '/docs/snippets/deep-filtering-blog.md'

# Document Service API: Filters

The [Document Service API](/cms/api/document-service) offers the ability to filter results.

The following operators are available:

| Operator                         | Description                              |
| -------------------------------- | ---------------------------------------- |
| [`$eq`](#eq)                     | Equal                                    |
| [`$eqi`](#eqi)                   | Equal (case-insensitive)                 |
| [`$ne`](#ne)                     | Not equal                                |
| [`$nei`](#nei)                   | Not equal (case-insensitive)             |
| [`$lt`](#lt)                     | Less than                                |
| [`$lte`](#lte)                   | Less than or equal to                    |
| [`$gt`](#gt)                     | Greater than                             |
| [`$gte`](#gte)                   | Greater than or equal to                 |
| [`$in`](#in)                     | Included in an array                     |
| [`$notIn`](#notin)               | Not included in an array                 |
| [`$contains`](#contains)         | Contains                                 |
| [`$notContains`](#notcontains)   | Does not contain                         |
| [`$containsi`](#containsi)       | Contains (case-insensitive)              |
| [`$notContainsi`](#notcontainsi) | Does not contain (case-insensitive)      |
| [`$null`](#null)                 | Is null                                  |
| [`$notNull`](#notnull)           | Is not null                              |
| [`$between`](#between)           | Is between                               |
| [`$startsWith`](#startswith)     | Starts with                              |
| [`$startsWithi`](#startswithi)   | Starts with (case-insensitive)           |
| [`$endsWith`](#endswith)         | Ends with                                |
| [`$endsWithi`](#endswithi)       | Ends with (case-insensitive)             |
| [`$or`](#or)                     | Joins the filters in an "or" expression  |
| [`$and`](#and)                   | Joins the filters in an "and" expression |
| [`$not`](#not)                   | Joins the filters in an "not" expression |

<DeepFilteringBlogLink />

## Attribute operators

<br/>

### `$not`

Negates the nested condition(s).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $not: {
        $contains: 'Hello World',
      },
    },
  },
});
```

### `$eq`

Attribute equals input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $eq: 'Hello World',
    },
  },
});
```

`$eq` can be omitted:

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: 'Hello World',
  },
});
```

### `$eqi`

Attribute equals input value (case-insensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $eqi: 'HELLO World',
    },
  },
});
```

### `$ne`

Attribute does not equal input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $ne: 'ABCD',
    },
  },
});
```

### `$nei`

Attribute does not equal input value (case-insensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $nei: 'abcd',
    },
  },
});
```

### `$in`

Attribute is contained in the input list.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $in: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

`$in` can be omitted when passing an array of values:

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: ['Hello', 'Hola', 'Bonjour'],
  },
});
```

### `$notIn`

Attribute is not contained in the input list.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $notIn: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

### `$lt`

Attribute is less than the input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    rating: {
      $lt: 10,
    },
  },
});
```

### `$lte`

Attribute is less than or equal to the input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    rating: {
      $lte: 10,
    },
  },
});
```

### `$gt`

Attribute is greater than the input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    rating: {
      $gt: 5,
    },
  },
});
```

### `$gte`

Attribute is greater than or equal to the input value.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    rating: {
      $gte: 5,
    },
  },
});
```

### `$between`

Attribute is between the 2 input values, boundaries included (e.g., `$between[1, 3]` will also return `1` and `3`).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    rating: {
      $between: [1, 20],
    },
  },
});
```

### `$contains`

Attribute contains the input value (case-sensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $contains: 'Hello',
    },
  },
});
```

### `$notContains`

Attribute does not contain the input value (case-sensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $notContains: 'Hello',
    },
  },
});
```

### `$containsi`

Attribute contains the input value. `$containsi` is not case-sensitive, while [$contains](#contains) is.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $containsi: 'hello',
    },
  },
});
```

### `$notContainsi`

Attribute does not contain the input value. `$notContainsi` is not case-sensitive, while [$notContains](#notcontains) is.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $notContainsi: 'hello',
    },
  },
});
```

### `$startsWith`

Attribute starts with input value (case-sensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $startsWith: 'ABCD',
    },
  },
});
```

### `$startsWithi`

Attribute starts with input value (case-insensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $startsWithi: 'ABCD', // will return the same as filtering with 'abcd'
    },
  },
});
```

### `$endsWith`

Attribute ends with input value (case-sensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $endsWith: 'ABCD',
    },
  },
});
```

### `$endsWithi`

Attribute ends with input value (case-insensitive).

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $endsWith: 'ABCD', // will return the same as filtering with 'abcd'
    },
    },
  },
});
```

### `$null`

Attribute is `null`.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $null: true,
    },
  },
});
```

### `$notNull`

Attribute is not `null`.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $notNull: true,
    },
  },
});
```

## Logical operators

### `$and`

All nested conditions must be `true`.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    $and: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

`$and` will be used implicitly when passing an object with nested conditions:

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: 'Hello World',
    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
  },
});
```

### `$or`

One or many nested conditions must be `true`.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    $or: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

### `$not`

Negates the nested conditions.

**Example**

```js
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    $not: {
      title: 'Hello World',
    },
  },
});
```

:::note
`$not` can be used as:

- a logical operator (e.g. in `filters: { $not: { // conditions‚Ä¶ }}`)
- [an attribute operator](#not) (e.g. in `filters: { attribute-name: $not: { ‚Ä¶ } }`).
:::

:::tip
`$and`, `$or` and `$not` operators are nestable inside of another `$and`, `$or` or `$not` operator.
:::


 This is the content for the doc docusaurus/docs/cms/api/document-service/locale.md 

 ---
title: Using the locale parameter with the Document Service API
description: Use Strapi's Document Service API to work with locale versions with your queries.
displayed_sidebar: cmsSidebar
sidebar_label: Locale
tags:
- API
- Content API
- create()
- count()
- deleting content
- Document Service API
- discardDraft()
- findOne()
- findMany()
- findFirst()
- locale
- publish()
- update()
- unpublishing content
---

# Document Service API: Using the `locale` parameter

By default the [Document Service API](/cms/api/document-service) returns the default locale version of documents (which is 'en', i.e. the English version, unless another default locale has been set for the application, see [Internationalization (i18n) feature](/cms/features/internationalization)). This page describes how to use the `locale` parameter to get or manipulate data only for specific locales.

## Get a locale version with `findOne()` {#find-one}

If a `locale` is passed, the [`findOne()` method](/cms/api/document-service#findone) of the Document Service API returns the version of the document for this locale:

<ApiCall>

<Request>

```js
await strapi.documents('api::restaurant.restaurant').findOne({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: 'fr',
});
```

</Request>

<Response>

```js {5}
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  name: "Biscotte Restaurant",
  publishedAt: null, // draft version (default)
  locale: "fr", // as asked from the parameters
  // ‚Ä¶
}
```

</Response>

</ApiCall>

If no `status` parameter is passed, the `draft` version is returned by default.

## Get a locale version with `findFirst()` {#find-first}

To return a specific locale while [finding the first document](/cms/api/document-service#findfirst) matching the parameters with the Document Service API:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents('api::article.article').findFirst({
  locale: 'fr',
});
```

</Request>

<Response title="Example response">

```json
{
  "documentId": "cjld2cjxh0000qzrmn831i7rn",
  "title": "Test Article"
  // ‚Ä¶
}
```

</Response>
</ApiCall>

If no `status` parameter is passed, the `draft` version is returned by default.

## Get locale versions with `findMany()` {#find-many}

When a `locale` is passed to the [`findMany()` method](/cms/api/document-service#findmany) of the Document Service API, the response will return all documents that have this locale available.

If no `status` parameter is passed, the `draft` versions are returned by default.

<ApiCall>
<Request>

```js
// Defaults to status: draft
await strapi.documents('api::restaurant.restaurant').findMany({ locale: 'fr' });
```

</Request>

<Response>

```js {6}
[
  {
    documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
    name: 'Restaurant Biscotte',
    publishedAt: null,
    locale: 'fr',
    // ‚Ä¶
  },
  // ‚Ä¶
];
```

</Response>
</ApiCall>

<details>
<summary>Explanation:</summary>

Given the following 4 documents that have various locales:

- Document A:
  - en
  - `fr`
  - it
- Document B:
  - en
  - it
- Document C:
  - `fr`
- Document D:
  - `fr`
  - it

`findMany({ locale: 'fr' })` would only return the draft version of the documents that have a `‚Äòfr‚Äô` locale version, that is documents A, C, and D.

</details>

## `create()` a document for a locale {#create}

To create a document for specific locale, pass the `locale` as a parameter to the [`create` method](/cms/api/document-service#create) of the Document Service API:

<ApiCall>

<Request title="Create the Spanish draft locale of a document">

```js
await strapi.documents('api::restaurant.restaurant').create({
  locale: 'es' // if not passed, the draft is created for the default locale
  data: { name: 'Restaurante B' }
})
```

</Request>

<Response>

```js
{
  documentId: "pw2s0nh5ub1zmnk0d80vgqrh",
  name: "Restaurante B",
  publishedAt: null,
  locale: "es"
  // ‚Ä¶
}
```

</Response>

</ApiCall>

## `update()` a locale version {#update}

To update only a specific locale version of a document, pass the `locale` parameter to the [`update()` method](/cms/api/document-service#update) of the Document Service API:

<ApiCall>

<Request title="Update the Spanish locale of a document">

```js
await strapi.documents('api::restaurant.restaurant').update({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: 'es',
  data: { name: 'Nuevo nombre del restaurante' },
});
```

</Request>

<Response>

```js {3}
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  name: "Nuevo nombre del restaurante",
  locale: "es",
  publishedAt: null,
  // ‚Ä¶
}
```

</Response>

</ApiCall>

## `delete()` locale versions {#delete}

Use the `locale` parameter with the [`delete()` method](/cms/api/document-service#delete) of the Document Service API to delete only some locales. Unless a specific `status` parameter is passed, this deletes both the draft and published versions.

### Delete a locale version

To delete a specific locale version of a document:

<Request title="Delete the Spanish locale of a document">

```js
await strapi.documents('api::restaurant.restaurant').delete({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm', // documentId,
  locale: 'es',
});
```

</Request>

### Delete all locale versions

The `*` wildcard is supported by the `locale` parameter and can be used to delete all locale versions of a document:

<ApiCall>
<Request>

```js
await strapi.documents('api::restaurant.restaurant').delete({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm', // documentId,
  locale: '*',
}); // for all existing locales
```

</Request>

<Response title="Example response">

```json
{
  "documentId": "a1b2c3d4e5f6g7h8i9j0klm",
  // All of the deleted locale versions are returned
  "versions": [
    {
      "title": "Test Article"
    }
  ]
}
```

</Response>
</ApiCall>

## `publish()` locale versions {#publish}

To publish only specific locale versions of a document with the [`publish()` method](/cms/api/document-service#publish) of the Document Service API, pass `locale` as a parameter:

### Publish a locale version

To publish a specific locale version of a document:

<ApiCall>

<Request title="Publish the French locale of document">

```js
await strapi.documents('api::restaurant.restaurant').publish({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: 'fr',
});
```

</Request>

<Response>

```js
{
  versions: [
    {
      documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
      name: 'Restaurant Biscotte',
      publishedAt: '2024-03-14T18:38:05.674Z',
      locale: 'fr',
      // ‚Ä¶
    },
  ];
}
```

</Response>

</ApiCall>

### Publish all locale versions

The `*` wildcard is supported by the `locale` parameter to publish all locale versions of a document:

<ApiCall>

<Request title="Publish all locales of a document">

```js
await strapi
  .documents('api::restaurant.restaurant')
  .publish({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: '*' });
```

</Request>

<Response>

```js
{
  "versions": [
    {
      "documentId": "a1b2c3d4e5f6g7h8i9j0klm",
      "publishedAt": "2024-03-14T18:45:21.857Z",
      "locale": "en"
      // ‚Ä¶
    },
    {
      "documentId": "a1b2c3d4e5f6g7h8i9j0klm",
      "publishedAt": "2024-03-14T18:45:21.857Z",
      "locale": "es"
      // ‚Ä¶
    },
    {
      "documentId": "a1b2c3d4e5f6g7h8i9j0klm",
      "publishedAt": "2024-03-14T18:45:21.857Z",
      "locale": "fr"
      // ‚Ä¶
    }
  ]
}
```

</Response>

</ApiCall>

## `unpublish()` locale versions {#unpublish}

To publish only specific locale versions of a document with the [`unpublish()` method](/cms/api/document-service#unpublish) of the Document Service API, pass `locale` as a parameter:

### Unpublish a locale version

To unpublish a specific locale version of a document, pass the `locale` as a parameter to `unpublish()`:

<ApiCall>

<Request title="Unpublish the French locale version of document">

```js
await strapi
  .documents('api::restaurant.restaurant')
  .unpublish({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: 'fr' });
```

</Request>

<Response>

```js
{
  versions: 1;
}
```

</Response>

</ApiCall>

### Unpublish all locale versions

The `*` wildcard is supported by the `locale` parameter, to unpublish all locale versions of a document:

<ApiCall>

<Request title="Unpublish all locale versions of a document">

```js
await strapi
  .documents('api::restaurant.restaurant')
  .unpublish({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: '*' });
```

</Request>

<Response>

```js
{
  versions: 3;
}
```

</Response>

</ApiCall>

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents('api::article.article').unpublish({
  documentId: 'cjld2cjxh0000qzrmn831i7rn',
  fields: ['title'],
});
```

</Request>

<Response title="Example response">

```json
{
  "documentId": "cjld2cjxh0000qzrmn831i7rn",
  // All of the unpublished locale versions are returned
  "versions": [
    {
      "title": "Test Article"
    }
  ]
}
```

</Response>
</ApiCall>

## `discardDraft()` for locale versions {#discard-draft}

To discard draft data only for some locales versions of a document with the [`discardDraft()` method](/cms/api/document-service#discarddraft) of the Document Service API, pass `locale` as a parameter:

### Discard draft for a locale version

To discard draft data for a specific locale version of a document and override it with data from the published version for this locale, pass the `locale` as a parameter to `discardDraft()`:

<ApiCall>

<Request title="Discard draft for the French locale version of document">

```js
await strapi
  .documents('api::restaurant.restaurant')
  .discardDraft({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: 'fr' });
```

</Request>

<Response>

```js
{
  versions: [
    {
      documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
      name: 'Restaurant Biscotte',
      publishedAt: null,
      locale: 'fr',
      // ‚Ä¶
    },
  ];
}
```

</Response>

</ApiCall>

### Discard drafts for all locale versions

The `*` wildcard is supported by the `locale` parameter, to discard draft data for all locale versions of a document and replace them with the data from the published versions:

<ApiCall>

<Request title="Discard drafts for all locale versions of a document">

```js
await strapi
  .documents('api::restaurant.restaurant')
  .discardDraft({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: '*' });
```

</Request>

<Response>

```js
{
  versions: [
    {
      documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
      name: 'Biscotte Restaurant',
      publishedAt: null,
      locale: 'en',
      // ‚Ä¶
    },
    {
      documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
      name: 'Restaurant Biscotte',
      publishedAt: null,
      locale: 'fr',
      // ‚Ä¶
    },
    {
      documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
      name: 'Biscotte Restaurante',
      publishedAt: null,
      locale: 'es',
      // ‚Ä¶
    },
  ];
}
```

</Response>

</ApiCall>

## `count()` documents for a locale {#count}

To count documents for a specific locale, pass the `locale` along with other parameters to the [`count()` method](/cms/api/document-service#count) of the Document Service API.

If no `status` parameter is passed, draft documents are counted (which is the total of available documents for the locale since even published documents are counted as having a draft version):

```js
// Count number of published documents in French
strapi.documents('api::restaurant.restaurant').count({ locale: 'fr' });
```


 This is the content for the doc docusaurus/docs/cms/api/document-service/middlewares.md 

 ---
title: Extending the Document Service behavior
description: This document provides information about the middlewares in the Document Service API.
toc_max_heading_level: 4
sidebar_label: Middlewares
displayed_sidebar: cmsSidebar
---

# Document Service API: Middlewares

The [Document Service API](/cms/api/document-service) offers the ability to extend its behavior thanks to middlewares.

Document Service middlewares allow you to perform actions before and/or after a method runs.

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-controllers-services.png" alt="Simplified Strapi backend diagram with controllers highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with the Document Service highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Registering a middleware

Syntax: `strapi.documents.use(middleware)`

### Parameters

A middleware is a function that receives a context and a next function.

Syntax: `(context, next) => ReturnType<typeof next>`

| Parameter | Description                           | Type       |
|-----------|---------------------------------------|------------|
| `context` | Middleware context                    | `Context`  |
| `next`    | Call the next middleware in the stack | `function` |

#### `context`

| Parameter     | Description                                                                          | Type          |
|---------------|--------------------------------------------------------------------------------------|---------------|
| `action`      | The method that is running ([see available methods](/cms/api/document-service)) | `string`      |
| `params`      | The method params ([see available methods](/cms/api/document-service))          | `Object`      |
| `uid`         | Content type unique identifier                                                       | `string`      |
| `contentType` | Content type                                                                         | `ContentType` |

<details>
<summary>Examples:</summary>

The following examples show what `context` might include depending on the method called:

<Tabs>


<TabItem value="find-one" label="findOne">

```js
{
  uid: "api::restaurant.restaurant",
  contentType: {
    kind: "collectionType",
    collectionName: "restaurants",
    info: {
      singularName: "restaurant",
      pluralName: "restaurants",
      displayName: "restaurant"
    },
    options: {
      draftAndPublish: true
    },
    pluginOptions: {},
    attributes: {
      name: { /*...*/ },
      description: { /*...*/ },
      createdAt: { /*...*/ },
      updatedAt: { /*...*/ },
      publishedAt: { /*...*/ },
      createdBy: { /*...*/ },
      updatedBy: { /*...*/ },
      locale: { /*...*/ },
    },
    apiName: "restaurant",
    globalId: "Restaurants",
    uid: "api::restaurant.restaurant",
    modelType: "contentType",
    modelName: "restaurant",
    actions: { /*...*/ },
    lifecycles: { /*...*/ },
  },
  action: "findOne",
  params: {
    documentId: 'hp7hjvrbt8rcgkmabntu0aoq',
    locale: undefined,
    status: "publish"
    populate: { /*...*/ },
  }
}
```

</TabItem>

<TabItem value="find-many" label="findMany">

```js
{
  uid: "api::restaurant.restaurant",
  contentType: {
    kind: "collectionType",
    collectionName: "restaurants",
    info: {
      singularName: "restaurant",
      pluralName: "restaurants",
      displayName: "restaurant"
    },
    options: {
      draftAndPublish: true
    },
    pluginOptions: {},
    attributes: {
      name: { /*...*/ },
      description: { /*...*/ },
      createdAt: { /*...*/ },
      updatedAt: { /*...*/ },
      publishedAt: { /*...*/ },
      createdBy: { /*...*/ },
      updatedBy: { /*...*/ },
      locale: { /*...*/ },
    },
    apiName: "restaurant",
    globalId: "Restaurants",
    uid: "api::restaurant.restaurant",
    modelType: "contentType",
    modelName: "restaurant",
    actions: { /*...*/ },
    lifecycles: { /*...*/ },
  },
  action: "findMany",
  params: {
    filters: { /*...*/ },
    status: "draft",
    locale: null,
    fields: ['name', 'description'],
  }
}
```

</TabItem>

<TabItem value="create" label="create">

```js
{
  uid: "api::restaurant.restaurant",
  contentType: {
    kind: "collectionType",
    collectionName: "restaurants",
    info: {
      singularName: "restaurant",
      pluralName: "restaurants",
      displayName: "restaurant"
    },
    options: {
      draftAndPublish: true
    },
    pluginOptions: {},
    attributes: {
      name: { /*...*/ },
      description: { /*...*/ },
      createdAt: { /*...*/ },
      updatedAt: { /*...*/ },
      publishedAt: { /*...*/ },
      createdBy: { /*...*/ },
      updatedBy: { /*...*/ },
      locale: { /*...*/ },
    },
    apiName: "restaurant",
    globalId: "Restaurants",
    uid: "api::restaurant.restaurant",
    modelType: "contentType",
    modelName: "restaurant",
    actions: { /*...*/ },
    lifecycles: { /*...*/ },
  },
  action: "create",
  params: {
    data: { /*...*/ },
    status: "draft",
    populate: { /*...*/ },
  }
}
```

</TabItem>

<TabItem value="update" label="update">

```js
{
  uid: "api::restaurant.restaurant",
  contentType: {
    kind: "collectionType",
    collectionName: "restaurants",
    info: {
      singularName: "restaurant",
      pluralName: "restaurants",
      displayName: "restaurant"
    },
    options: {
      draftAndPublish: true
    },
    pluginOptions: {},
    attributes: {
      name: { /*...*/ },
      description: { /*...*/ },
      createdAt: { /*...*/ },
      updatedAt: { /*...*/ },
      publishedAt: { /*...*/ },
      createdBy: { /*...*/ },
      updatedBy: { /*...*/ },
      locale: { /*...*/ },
    },
    apiName: "restaurant",
    globalId: "Restaurants",
    uid: "api::restaurant.restaurant",
    modelType: "contentType",
    modelName: "restaurant",
    actions: { /*...*/ },
    lifecycles: { /*...*/ },
  },
  action: "update",
  params: {
    data: { /*...*/ },
    documentId: 'hp7hjvrbt8rcgkmabntu0aoq',
    locale: undefined,
    status: "draft"
    populate: { /*...*/ },
  }
}
```

</TabItem>

<TabItem value="delete" label="delete">

```js
{
  uid: "api::restaurant.restaurant",
  contentType: {
    kind: "collectionType",
    collectionName: "restaurants",
    info: {
      singularName: "restaurant",
      pluralName: "restaurants",
      displayName: "restaurant"
    },
    options: {
      draftAndPublish: true
    },
    pluginOptions: {},
    attributes: {
      name: { /*...*/ },
      description: { /*...*/ },
      createdAt: { /*...*/ },
      updatedAt: { /*...*/ },
      publishedAt: { /*...*/ },
      createdBy: { /*...*/ },
      updatedBy: { /*...*/ },
      locale: { /*...*/ },
    },
    apiName: "restaurant",
    globalId: "Restaurants",
    uid: "api::restaurant.restaurant",
    modelType: "contentType",
    modelName: "restaurant",
    actions: { /*...*/ },
    lifecycles: { /*...*/ },
  },
  action: "delete",
  params: {
    data: { /*...*/ },
    documentId: 'hp7hjvrbt8rcgkmabntu0aoq',
    locale: "*",
    populate: { /*...*/ },
  }
}
```

</TabItem>
</Tabs>
</details>

#### `next`

`next` is a function without parameters that calls the next middleware in the stack and return its response.

**Example**

```js
strapi.documents.use((context, next) => {
  return next();
});
```

### Where to register

Generaly speaking you should register your middlewares during the Strapi registration phase.

#### Users

The middleware must be registered in the general `register()` lifecycle method:

```js title="/src/index.js|ts"
module.exports = {
  register({ strapi }) {
    strapi.documents.use((context, next) => {
      // your logic
      return next();
    });
  },

  // bootstrap({ strapi }) {},
  // destroy({ strapi }) {},
};
```

#### Plugin developers

The middleware must be registered in the plugin's `register()` lifecycle method:

```js title="/(plugin-root-folder)/strapi-server.js|ts"
module.exports = {
  register({ strapi }) {
    strapi.documents.use((context, next) => {
      // your logic
      return next();
    });
  },

  // bootstrap({ strapi }) {},
  // destroy({ strapi }) {},
};
```

## Implementing a middleware

When implementing a middleware, always return the response from `next()`.
Failing to do this will break the Strapi application.

### Examples

```js
const applyTo = ['api::article.article'];

strapi.documents.use((context, next) => {
  // Only run for certain content types
  if (!applyTo.includes(context.uid)) {
    return next();
  }

  // Only run for certain actions
  if (['create', 'update'].includes(context.action)) {
    context.params.data.fullName = `${context.params.data.firstName} ${context.params.data.lastName}`;
  }

  const result = await next();

  // do something with the result before returning it
  return result
});
```

<br/>

:::strapi Lifecycle hooks
The Document Service API triggers various database lifecycle hooks based on which method is called. For a complete reference, see [Document Service API: Lifecycle hooks](/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service#table).
:::


 This is the content for the doc docusaurus/docs/cms/api/document-service/populate.md 

 ---
title: Using Populate with the Document Service API
description: Use Strapi's Document Service API to populate or select some fields.
displayed_sidebar: cmsSidebar
sidebar_label: Populate
tags:
- Components
- Content API
- Document Service API
- dynamic zones
- populate
- Populating with create()
- Populating with publish()
- Populating with update()
---

# Document Service API: Populating fields

By default the [Document Service API](/cms/api/document-service) does not populate any relations, media fields, components, or dynamic zones. This page describes how to use the `populate` parameter to populate specific fields.

:::tip
You can also use the `select` parameter to return only specific fields with the query results (see the [`select` parameter](/cms/api/document-service/fields) documentation).
:::

:::caution
If the Users & Permissions plugin is installed, the `find` permission must be enabled for the content-types that are being populated. If a role doesn't have access to a content-type it will not be populated.
:::

<!-- TODO: add link to populate guides (even if REST API, the same logic still applies) -->

## Relations and media fields

Queries can accept a `populate` parameter to explicitly define which fields to populate, with the following syntax option examples.

### Populate 1 level for all relations

To populate one-level deep for all relations, use the `*` wildcard in combination with the `populate` parameter:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const documents = await strapi.documents("api::article.article").findMany({
  populate: "*",
});
```

</Request>

<Response title="Example response">

```json
{
  [
    {
      "id": "cjld2cjxh0000qzrmn831i7rn",
      "title": "Test Article",
      "slug": "test-article",
      "body": "Test 1",
      // ...
      "headerImage": {
        "data": {
          "id": 1,
          "attributes": {
            "name": "17520.jpg",
            "alternativeText": "17520.jpg",
            "formats": {
              // ...
            }
            // ...
          }
        }
      },
      "author": {
        // ...
      },
      "categories": {
        // ...
      }
    }
    // ...
  ]
}
```

</Response>
</ApiCall>

### Populate 1 level for specific relations

To populate specific relations one-level deep, pass the relation names in a `populate` array:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const documents = await strapi.documents("api::article.article").findMany({
  populate: ["headerImage"],
});
```

</Request>

<Response title="Example response">

```json
[
  {
    "id": "cjld2cjxh0000qzrmn831i7rn",
    "title": "Test Article",
    "slug": "test-article",
    "body": "Test 1",
    // ...
    "headerImage": {
      "id": 2,
      "name": "17520.jpg"
      // ...
    }
  }
  // ...
]
```

</Response>
</ApiCall>

### Populate several levels deep for specific relations

To populate specific relations several levels deep, use the object format with `populate`:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const documents = await strapi.documents("api::article.article").findMany({
  populate: {
    categories: {
      populate: ["articles"],
    },
  },
});
```

</Request>

<Response title="Example response">

```json
[
  {
    "id": "cjld2cjxh0000qzrmn831i7rn",
    "title": "Test Article",
    "slug": "test-article",
    "body": "Test 1",
    // ...
    "categories": {
      "id": 1,
      "name": "Test Category",
      "slug": "test-category",
      "description": "Test 1"
      // ...
      "articles": [
        {
          "id": 1,
          "title": "Test Article",
          "slug": "test-article",
          "body": "Test 1",
          // ...
        }
        // ...
      ]
    }
  }
  // ...
]
```

</Response>
</ApiCall>

## Components & Dynamic Zones

Components are populated the same way as relations:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const documents = await strapi.documents("api::article.article").findMany({
  populate: ["testComp"],
});
```

</Request>

<Response title="Example response">

```json
[
  {
    "id": "cjld2cjxh0000qzrmn831i7rn",
    "title": "Test Article",
    "slug": "test-article",
    "body": "Test 1",
    // ...
    "testComp": {
      "id": 1,
      "name": "Test Component"
      // ...
    }
  }
  // ...
]
```

</Response>
</ApiCall>

Dynamic zones are highly dynamic content structures by essence. To populate a dynamic zone, you must define per-component populate queries using the `on` property.

<ApiCall noSideBySide>
<Request title="Example request">

```js
const documents = await strapi.documents("api::article.article").findMany({
  populate: {
    testDZ: {
      on: {
        "test.test-compo": {
          fields: ["testString"],
          populate: ["testNestedCompo"],
        },
      },
    },
  },
});
```

</Request>

<Response title="Example response">

```json
[
  {
    "id": "cjld2cjxh0000qzrmn831i7rn",
    "title": "Test Article",
    "slug": "test-article",
    "body": "Test 1",
    // ...
    "testDZ": [
      {
        "id": 3,
        "__component": "test.test-compo",
        "testString": "test1",
        "testNestedCompo": {
          "id": 3,
          "testNestedString": "testNested1"
        }
      }
    ]
  }
  // ...
]
```

</Response>
</ApiCall>

## Populating with `create()`

To populate while creating documents:

<ApiCall noSideBySide>
<Request title="Example request">

```js
strapi.documents("api::article.article").create({
  data: {
    title: "Test Article",
    slug: "test-article",
    body: "Test 1",
    headerImage: 2,
  },
  populate: ["headerImage"],
});
```

</Request>

<Response title="Example response">

```json
{
  "id": "cjld2cjxh0000qzrmn831i7rn",
  "title": "Test Article",
  "slug": "test-article",
  "body": "Test 1",
  "headerImage": {
    "id": 2,
    "name": "17520.jpg"
    // ...
  }
}
```

</Response>
</ApiCall>

## Populating with `update()`

To populate while updating documents:

<ApiCall noSideBySide>
<Request title="Example request">

```js
strapi.documents("api::article.article").update({
  documentId: "cjld2cjxh0000qzrmn831i7rn",
  data: {
    title: "Test Article Update",
  },
  populate: ["headerImage"],
});
```

</Request>

<Response title="Example response">

```json
{
  "id": "cjld2cjxh0000qzrmn831i7rn",
  "title": "Test Article Update",
  "slug": "test-article",
  "body": "Test 1",
  "headerImage": {
    "id": 2,
    "name": "17520.jpg"
    // ...
  }
}
```

</Response>
</ApiCall>

## Populating with `publish()`

To populate while publishing documents (same behavior with `unpublish()` and `discardDraft()`):

<ApiCall noSideBySide>
<Request title="Example request">

```js
strapi.documents("api::article.article").publish({
  documentId: "cjld2cjxh0000qzrmn831i7rn",
  populate: ["headerImage"],
});
```

</Request>

<Response title="Example response">

```json
{
  "id": "cjld2cjxh0000qzrmn831i7rn",
  "versions": [
    {
      "id": "cjld2cjxh0001qzrm1q1i7rn",
      "locale": "en",
      // ...
      "headerImage": {
        "id": 2,
        "name": "17520.jpg"
        // ...
      }
    }
  ]
}
```

</Response>
</ApiCall>


 This is the content for the doc docusaurus/docs/cms/api/document-service/sort-pagination.md 

 ---
title: Using Sort & Pagination with the Document Service API
description: Use Strapi's Document Service API to sort and paginate query results
displayed_sidebar: cmsSidebar
sidebar_label: Sort & Pagination
tags:
- API 
- Content API 
- Document Service API 
- sort
- pagination
---

# Document Service API: Sorting and paginating results

The [Document Service API](/cms/api/document-service) offers the ability to sort and paginate query results.

## Sort

To sort results returned by the Document Service API, include the `sort` parameter with queries.

### Sort on a single field

To sort results based on a single field:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const documents = await strapi.documents("api::article.article").findMany({
  sort: "title:asc",
});
```

</Request>

<Response title="Example response">

```json
[
  {
    "documentId": "cjld2cjxh0000qzrmn831i7rn",
    "title": "Test Article",
    "slug": "test-article",
    "body": "Test 1"
    // ...
  },
  {
    "documentId": "cjld2cjxh0001qzrm5q1j5q7m",
    "title": "Test Article 2",
    "slug": "test-article-2",
    "body": "Test 2"
    // ...
  }
  // ...
]
```

</Response>
</ApiCall>

### Sort on multiple fields

To sort on multiple fields, pass them all in an array:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const documents = await strapi.documents("api::article.article").findMany({
  sort: [{ title: "asc" }, { slug: "desc" }],
});
```

</Request>

<Response title="Example response">

```json
[
  {
    "documentId": "cjld2cjxh0000qzrmn831i7rn",
    "title": "Test Article",
    "slug": "test-article",
    "body": "Test 1"
    // ...
  },
  {
    "documentId": "cjld2cjxh0001qzrm5q1j5q7m",
    "title": "Test Article 2",
    "slug": "test-article-2",
    "body": "Test 2"
    // ...
  }
  // ...
]
```

</Response>
</ApiCall>

## Pagination

To paginate results, pass the `limit` and `start` parameters:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const documents = await strapi.documents("api::article.article").findMany({
  limit: 10,
  start: 0,
});
```

</Request>

<Response title="Example response">

```json
[
  {
    "documentId": "cjld2cjxh0000qzrmn831i7rn",
    "title": "Test Article",
    "slug": "test-article",
    "body": "Test 1"
    // ...
  },
  {
    "documentId": "cjld2cjxh0001qzrm5q1j5q7m",
    "title": "Test Article 2",
    "slug": "test-article-2",
    "body": "Test 2"
    // ...
  }
  // ... (8 more)
]
```

</Response>
</ApiCall>


 This is the content for the doc docusaurus/docs/cms/api/document-service/status.md 

 ---
title: Using Draft & Publish with the Document Service API
description: Use Strapi's Document Service API to return either the draft or the published version of a document
displayed_sidebar: cmsSidebar
sidebar_label: Status
tags:
- API
- Content API
- count()
- Document Service API
- Draft & Publish
- findOne()
- findMany()
- findFirst()
- published version
- status

---

# Document Service API: Usage with Draft & Publish

By default the [Document Service API](/cms/api/document-service) returns the draft version of a document when the [Draft & Publish](/cms/features/draft-and-publish) feature is enabled. This page describes how to use the `status` parameter to:

- return the published version of a document,
- count documents depending on their status, 
- and directly publish a document while creating it or updating it.

:::note
Passing `{ status: 'draft' }` to a Document Service API query returns the same results as not passing any `status` parameter.
:::

## Get the published version with `findOne()` {#find-one}

`findOne()` queries return the draft version of a document by default.

To return the published version while [finding a specific document](/cms/api/document-service#findone) with the Document Service API, pass `status: 'published'`:

<ApiCall>

<Request>

```js
await strapi.documents('api::restaurant.restaurant').findOne({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  status: 'published'
});
```

</Request>

<Response>

```js {4}
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  name: "Biscotte Restaurant",
  publishedAt: "2024-03-14T15:40:45.330Z",
  locale: "en", // default locale
  // ‚Ä¶
}
```

</Response>

</ApiCall>

## Get the published version with `findFirst()` {#find-first}

`findFirst()` queries return the draft version of a document by default.

To return the published version while [finding the first document](/cms/api/document-service#findfirst) with the Document Service API, pass `status: 'published'`:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const document = await strapi.documents("api::restaurant.restaurant").findFirst({
  status: 'published',
});
```

</Request>

<Response title="Example response">

```js {4}
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  name: "Biscotte Restaurant",
  publishedAt: "2024-03-14T15:40:45.330Z",
  locale: "en", // default locale
  // ‚Ä¶
}
```

</Response>
</ApiCall>

## Get the published version with `findMany()` {#find-many}

`findMany()` queries return the draft version of documents by default.

To return the published version while [finding documents](/cms/api/document-service#findmany) with the Document Service API, pass `status: 'published'`:

<ApiCall noSideBySide>
<Request title="Example request">

```js
const documents = await strapi.documents("api::restaurant.restaurant").findMany({
  status: 'published'
});
```

</Request>

<Response title="Example response">

```js {5}
[
  {
    documentId: "a1b2c3d4e5f6g7h8i9j0klm",
    name: "Biscotte Restaurant",
    publishedAt: "2024-03-14T15:40:45.330Z",
    locale: "en", // default locale
    // ‚Ä¶
  }
  // ‚Ä¶
]
```

</Response>
</ApiCall>

## `count()` only draft or published versions {#count}

To take into account only draft or published versions of documents while [counting documents](/cms/api/document-service#count) with the Document Service API, pass the corresponding `status` parameter:

```js
// Count draft documents (also actually includes published documents)
const draftsCount = await strapi.documents("api::restaurant.restaurant").count({
  status: 'draft'
});
```

```js
// Count only published documents
const publishedCount = await strapi.documents("api::restaurant.restaurant").count({
  status: 'published'
});
```

:::note
Since published documents necessarily also have a draft counterpart, a published document is still counted as having a draft version.

This means that counting with the `status: 'draft'` parameter still returns the total number of documents matching other parameters, even if some documents have already been published and are not displayed as "draft" or "modified" in the Content Manager anymore. There currently is no way to prevent already published documents from being counted.
:::

## Create a draft and publish it {#create}

To automatically publish a document while creating it, add `status: 'published'` to parameters passed to `create()`:

<ApiCall>

<Request>

```js
await strapi.documents('api::restaurant.restaurant').create({
  data: {
    name: "New Restaurant",
  },
  status: 'published',
})
```

</Request>

<Response>

```js {5}
{
  documentId: "d41r46wac4xix5vpba7561at",
  name: "New Restaurant",
  publishedAt: "2024-03-14T17:29:03.399Z",
  locale: "en" // default locale
  // ‚Ä¶
}
```

</Response>
</ApiCall>

## Update a draft and publish it {#update}

To automatically publish a document while updating it, add `status: 'published'` to parameters passed to `update()`:

<ApiCall>

<Request>

```js
await strapi.documents('api::restaurant.restaurant').update({
  data: {
    documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
    name: "Biscotte Restaurant (closed)",
  },
  status: 'published',
})
```

</Request>

<Response>

```js {4}
{
  documentId: "a1b2c3d4e5f6g7h8i9j0klm",
  name: "Biscotte Restaurant (closed)",
  publishedAt: "2024-03-14T17:29:03.399Z",
  locale: "en" // default locale
  // ‚Ä¶
}
```

</Response>
</ApiCall>



 This is the content for the doc docusaurus/docs/cms/api/document.md 

 ---
title: Documents
description: Learn what a Document is in Strapi v5
displayed_sidebar: cmsSidebar
sidebar_label: Document concept
pagination_prev: cms/api/content-api
tags:
- API
- concepts
- Content API
- Document Service API
- Draft & Publish
- Internationalization (i18n)
- introduction
---

<div className="document-concept-page custom-mermaid-layout">

A **document** in Strapi 5 is an API-only concept. A document represents all the different variations of content for a given entry of a content-type.

A single type contains a unique document, and a collection type can contain several documents.

When you use the admin panel, the concept of a document is never mentioned and not necessary for the end user. Users create and edit **entries** in the [Content Manager](/cms/features/content-manager). For instance, as a user, you either list the entries for a given locale, or edit the draft version of a specific entry in a given locale.

However, at the API level, the value of the fields of an entry can actually have:

- different content for the English and the French locale,
- and even different content for the draft and published version in each locale.

The bucket that includes the content of all the draft and published versions for all the locales is a document.

Manipulating documents with the [Document Service API](/cms/api/document-service) will help you create, retrieve, update, and delete documents or a specific subset of the data they contain.

The following diagrams represent all the possible variations of content depending on which features, such as [Internationalization (i18n)](/cms/features/internationalization) and [Draft & Publish](/cms/features/draft-and-publish), are enabled for a content-type:

<Tabs>
<TabItem value="document-only" label="Neither i18n nor Draft & Publish enabled">

<MermaidWithFallback
    chartFile="/diagrams/document.mmd"
    fallbackImage="/img/assets/diagrams/document.png"
    fallbackImageDark="/img/assets/diagrams/document_DARK.png"
    alt="Document diagram (no Draft & Publish, no i18n)"
/>

</TabItem>

<TabItem value="dandp-only" label="Only Draft & Publish enabled">

<MermaidWithFallback
    chartFile="/diagrams/document-draft.mmd"
    fallbackImage="/img/assets/diagrams/document-draft.png"
    fallbackImageDark="/img/assets/diagrams/document-draft_DARK.png"
    alt="Document diagram (only Draft & Publish, no i18n)"
/>

</TabItem>

<TabItem value="i18n-only" label="Only i18n enabled">

<MermaidWithFallback
    chartFile="/diagrams/document-locales.mmd"
    fallbackImage="/img/assets/diagrams/document-locales.png"
    fallbackImageDark="/img/assets/diagrams/document-locales_DARK.png"
    alt="Document diagram (only Draft & Publish, no i18n)"
/>

</TabItem>

<TabItem value="i18n-and-dandp" label="i18n + Draft & Publish enabled" default>

<MermaidWithFallback
    chartFile="/diagrams/document-draft-locales.mmd"
    fallbackImage="/img/assets/diagrams/document-draft-locales.png"
    fallbackImageDark="/img/assets/diagrams/document-draft-locales_DARK.png"
    alt="Document diagram (only Draft & Publish, no i18n)"
/>

</TabItem>
</Tabs>

- If the Internationalization (i18n) feature is enabled on the content-type, a document can have multiple **document locales**.
- If the Draft & Publish feature is enabled on the content-type, a document can have a **published** and a **draft** version.

:::strapi APIs to query documents data
To interact with documents or the data they represent:

  - From the back-end server (for instance, from controllers, services, and the back-end part of plugins), use the [Document Service API](/cms/api/document-service).
  - From the front-end part of your application, query your data using the [REST API](/cms/api/rest) or the [GraphQL API](/cms/api/graphql).

For additional information about the APIs, please refer to the [Content API introduction](/cms/api/content-api).
:::

:::info Default version in returned results
An important difference between the back-end and front-end APIs is about the default version returned when no parameter is passed:
- The Document Service API returns the draft version by default,
- while REST and GraphQL APIs return the published version by default.
:::

</div>


 This is the content for the doc docusaurus/docs/cms/api/entity-service.md 

 ---
title: Entity Service API
description: The Entity Service is the layer that handles Strapi's complex content structures like components and dynamic zones, and uses the Query Engine API under the hood to execute database queries.
displayed_sidebar: cmsSidebar
unlisted: true
---

import EntityQueryKnex from '/docs/snippets/entity-query-knex.md'
import BackendIntroCrosslink from '/docs/snippets/backend-custom-intro-crosslink.md'
import ESdeprecated from '/docs/snippets/entity-service-deprecated.md'

# Entity Service API

<ESdeprecated />

:::prerequisites
Before diving deeper into the Entity Service API documentation, it is recommended that you read the following introductions:
- the [backend customization introduction](/cms/backend-customization),
- and the [Content APIs introduction](/cms/api/content-api).
:::

The Strapi backend provides an Entity Service API, built on top of the [Query Engine API](/cms/api/query-engine/). The Entity Service is the layer that handles Strapi's complex content structures like [components](/cms/backend-customization/models#components-json) and [dynamic zones](/cms/backend-customization/models#dynamic-zones), and uses the Query Engine API under the hood to execute database queries.

:::strapi Entity Service API vs. Query Engine API
<EntityQueryKnex components={props.components} />
:::

:::info Disambiguation: Services vs. Entity Service
While [services](/cms/backend-customization/services) can use the Entity Service API, services and the Entity Service API are not directly related. You can find more information about the core elements of the Strapi back end in the [back-end customization](/cms/backend-customization) documentation.
:::

## Basic usage

The Entity Service is available through `strapi.entityService`:

```js
const entry = await strapi.entityService.findOne('api::article.article', 1, {
  populate: { someRelation: true },
});
```

## Available operations

The Entity Service API allows the following operations on entities:

<CustomDocCardsWrapper>
<CustomDocCard emoji="" title="CRUD operations" description="Create, read, update, and delete entities with the Entity Service API." link="/cms/api/entity-service/crud" />
<CustomDocCard emoji="" title="Filters" description="Get exactly what you need by filtering entities with your Entity Service API queries." link="/cms/api/entity-service/filter" />
<CustomDocCard emoji="" title="Populate" description="Get additional data with your Entity Service API queries by populating relations." link="/cms/api/entity-service/populate" />
<CustomDocCard emoji="" title="Order & Pagination" description="Sort and paginate the results of your Entity Service API queries." link="/cms/api/entity-service/order-pagination" />
<CustomDocCard emoji="" title="Components/Dynamic Zones" description="Create and update components and dynamic zones with your Entity Service API queries." link="/cms/api/entity-service/components-dynamic-zones" />
</CustomDocCardsWrapper>


 This is the content for the doc docusaurus/docs/cms/api/entity-service/components-dynamic-zones.md 

 ---
title: Components and Dynamic Zones
description: Use Strapi's Entity Service to create and update components and dynamic zones.
displayed_sidebar: cmsSidebar
unlisted: true
---

import ESdeprecated from '/docs/snippets/entity-service-deprecated.md'

# Creating components and dynamic zones with the Entity Service API

<ESdeprecated />

The [Entity Service](/cms/api/entity-service) is the layer that handles [components](/cms/backend-customization/models#components-json) and [dynamic zones](/cms/backend-customization/models#dynamic-zones) logic. With the Entity Service API, components and dynamic zones can be [created](#creation) and [updated](#update) while creating or updating entries.

## Creation

A [component](/cms/backend-customization/models#components-json) can be created while creating an entry with the Entity Service API:

```js
strapi.entityService.create('api::article.article', {
  data: {
    myComponent: {
      foo: 'bar',
    },
  },
});
```

A [dynamic zone](/cms/backend-customization/models#dynamic-zones) (i.e. a list of components) can be created while creating an entry with the Entity Service API:

```js
strapi.entityService.create('api::article.article', {
  data: {
    myDynamicZone: [
      {
        __component: 'compo.type',
        foo: 'bar',
      },
      {
        __component: 'compo.type2',
        foo: 'bar',
      },
    ],
  },
});
```

## Update

A [component](/cms/backend-customization/models#components-json) can be updated while updating an entry with the Entity Service API. If a component `id` is specified, the component is updated, otherwise the old one is deleted and a new one is created:

```js
strapi.entityService.update('api::article.article', 1, {
  data: {
    myComponent: {
      id: 1, // will update component with id: 1 (if not specified, would have deleted it and created a new one)
      foo: 'bar',
    },
  },
});
```

A [dynamic zone](/cms/backend-customization/models#dynamic-zones) (i.e. a list of components) can be updated while updating an entry with the Entity Service API. If a component `id` is specified, the component is updated, otherwise the old one is deleted and a new one is created:

```js
strapi.entityService.update('api::article.article', 1, {
  data: {
    myDynamicZone: [
      {
        // will update
        id: 2,
        __component: 'compo.type',
        foo: 'bar',
      },
      {
        // will add a new & delete old ones
        __component: 'compo.type2',
        foo: 'bar2',
      },
    ],
  },
});
```


 This is the content for the doc docusaurus/docs/cms/api/entity-service/crud.md 

 ---
title: CRUD operations
description: Use Strapi's Entity Service API to perform CRUD (create, read, update, delete) operations on your content.
displayed_sidebar: cmsSidebar
unlisted: true
---
import ManagingRelations from '/docs/snippets/managing-relations.md'
import ESdeprecated from '/docs/snippets/entity-service-deprecated.md'

# CRUD operations with the Entity Service API

<ESdeprecated />

The [Entity Service API](/cms/api/entity-service) is built on top of the the [Query Engine API](/cms/api/query-engine) and uses it to perform CRUD operations on entities.


The `uid` parameter used in function calls for this API is a `string` built with the following format: `[category]::[content-type]` where `category` is one of: `admin`, `plugin` or `api`.

Examples:
- A correct `uid` to get users of the Strapi admin panel is `admin::user`.
- A possible `uid` for the Upload plugin could be `plugin::upload.file`.
- As the `uid`s for user-defined custom content-types follow the `api::[content-type]` syntax, if a content-type `article` exists, it is referenced by `api::article.article`.

:::tip
Run the [`strapi content-types:list`](/cms/cli#strapi-content-types) command in a terminal to display all possible content-types' `uid`s for a specific Strapi instance.
:::

## findOne()

Finds the first entry matching the parameters.

Syntax: `findOne(uid: string, id: ID, parameters: Params)` ‚áí `Entry`

### Parameters

| Parameter  | Description | Type |
| ---------- | --------------- | --------------- |
| `fields`   | Attributes to return | `String[]`  |
| `populate` | Relations, components and dynamic zones to [populate](/cms/api/entity-service/populate) | [`PopulateParameter`](/cms/api/entity-service/populate) |

### Example

```js
const entry = await strapi.entityService.findOne('api::article.article', 1, {
  fields: ['title', 'description'],
  populate: { category: true },
});
```

## findMany()

Finds entries matching the parameters.

Syntax: `findMany(uid: string, parameters: Params)` ‚áí `Entry[]`

### Parameters

| Parameter   | Description | Type   |
| ----------- | ------ | -------------- |
| `fields`  | Attributes to return   | `String[]`  |
| `filters` | [Filters](/cms/api/entity-service/filter) to use   | [`FiltersParameters`](/cms/api/entity-service/filter)             |
| `start`   | Number of entries to skip (see [pagination](/cms/api/entity-service/order-pagination#pagination))   | `Number`  |
| `limit`   | Number of entries to return (see [pagination](/cms/api/entity-service/order-pagination#pagination)) | `Number`  |
| `sort`   | [Order](/cms/api/entity-service/order-pagination) definition  | [`OrderByParameter`](/cms/api/entity-service/order-pagination) |
| `populate`  | Relations, components and dynamic zones to [populate](/cms/api/entity-service/populate)  | [`PopulateParameter`](/cms/api/entity-service/populate)         |
| `publicationState` | Publication state, can be:<ul><li>`live` to return only published entries</li><li>`preview` to return both draft entries & published entries (default)</li></ul>   | `PublicationStateParameter`  |

### Example

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  fields: ['title', 'description'],
  filters: { title: 'Hello World' },
  sort: { createdAt: 'DESC' },
  populate: { category: true },
});
```

<br/>

:::tip
To retrieve only draft entries, combine the `preview` publication state and the `publishedAt` fields:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  publicationState: 'preview',
  filters: {
    publishedAt: {
      $null: true,
    },
  },
});

:::

## create()

Creates one entry and returns it

Syntax: `create(uid: string, parameters: Params)` ‚áí `Entry`

### Parameters

| Parameter  | Description | Type |
| ---------- | ----------- | ---------- |
| `fields`   | Attributes to return | `String[]`  |
| `populate` | Relations, components and dynamic zones to [populate](/cms/api/entity-service/populate) | [`PopulateParameter`](/cms/api/entity-service/populate) |
| `data`     | Input data  | `Object` |

<ManagingRelations components={props.components} />

### Example

```js
const entry = await strapi.entityService.create('api::article.article', {
  data: {
    title: 'My Article',
  },
});
```

## update()

Updates one entry and returns it.

:::note
`update()` only performs a partial update, so existing fields that are not included won't be replaced.
:::

Syntax: `update(uid: string, id: ID, parameters: Params)` ‚áí `Entry`

<ManagingRelations components={props.components} />

### Parameters

| Parameter  | Description | Type |
| ---------- | ------------- | ---------- |
| `fields`   | Attributes to return | `String[]`  |
| `populate` | Relations, components and dynamic zones to [populate](/cms/api/entity-service/populate) | [`PopulateParameter`](/cms/api/entity-service/populate) |
| `data`     | Input data  | `object`  |

### Example

```js
const entry = await strapi.entityService.update('api::article.article', 1, {
  data: {
    title: 'xxx',
  },
});
```

## delete()

Deletes one entry and returns it.

Syntax: `delete(uid: string, id: ID, parameters: Params)` ‚áí `Entry`

### Parameters

| Parameter  | Description | Type |
| ---------- | --------- | -------- |
| `fields`   | Attributes to return | `String[]`  |
| `populate` | Relations, components and dynamic zones to [populate](/cms/api/entity-service/populate) | [`PopulateParameter`](/cms/api/entity-service/populate) |

### Example

```js
const entry = await strapi.entityService.delete('api::article.article', 1);
```


 This is the content for the doc docusaurus/docs/cms/api/entity-service/filter.md 

 ---
title: Filtering with the Entity Service API
description: Use Strapi's Entity Service API to filter your queries results.
displayed_sidebar: cmsSidebar
unlisted: true
---

import ESdeprecated from '/docs/snippets/entity-service-deprecated.md'
import DeepFilteringBlogLink from '/docs/snippets/deep-filtering-blog.md'

# Filtering with the Entity Service API

<ESdeprecated />

The [Entity Service API](/cms/api/entity-service) offers the ability to filter results found with its [findMany()](/cms/api/entity-service/crud#findmany) method.

Results are filtered with the `filters` parameter that accepts [logical operators](#logical-operators) and [attribute operators](#attribute-operators). Every operator should be prefixed with `$`.

<DeepFilteringBlogLink/>

## Logical operators

### `$and`

All nested conditions must be `true`.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    $and: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

`$and` will be used implicitly when passing an object with nested conditions:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: 'Hello World',
    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
  },
});
```

### `$or`

One or many nested conditions must be `true`.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    $or: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

### `$not`

Negates the nested conditions.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    $not: {
      title: 'Hello World',
    },
  },
});
```

:::note
`$not` can be used as:

- a logical operator (e.g. in `filters: { $not: { // conditions‚Ä¶ }}`)
- [an attribute operator](#not-1) (e.g. in `filters: { attribute-name: $not: { ‚Ä¶ } }`).
:::

:::tip
`$and`, `$or` and `$not` operators are nestable inside of another `$and`, `$or` or `$not` operator.
:::

## Attribute Operators

:::caution
Using these operators may give different results depending on the database's implementation, as the comparison is handled by the database and not by Strapi.
:::

### `$not`

Negates the nested condition(s).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $not: {
        $contains: 'Hello World',
      },
    },
  },
});
```

### `$eq`

Attribute equals input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $eq: 'Hello World',
    },
  },
});
```

`$eq` can be omitted:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: 'Hello World',
  },
});
```

### `$eqi`

Attribute equals input value (case-insensitive).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $eqi: 'HELLO World',
    },
  },
});
```

### `$ne`

Attribute does not equal input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $ne: 'ABCD',
    },
  },
});
```

### `$nei`

Attribute does not equal input value (case-insensitive).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $nei: 'abcd',
    },
  },
});
```

### `$in`

Attribute is contained in the input list.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $in: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

`$in` can be omitted when passing an array of values:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: ['Hello', 'Hola', 'Bonjour'],
  },
});
```

### `$notIn`

Attribute is not contained in the input list.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $notIn: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

### `$lt`

Attribute is less than the input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    rating: {
      $lt: 10,
    },
  },
});
```

### `$lte`

Attribute is less than or equal to the input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    rating: {
      $lte: 10,
    },
  },
});
```

### `$gt`

Attribute is greater than the input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    rating: {
      $gt: 5,
    },
  },
});
```

### `$gte`

Attribute is greater than or equal to the input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    rating: {
      $gte: 5,
    },
  },
});
```

### `$between`

Attribute is between the 2 input values, boundaries included (e.g., `$between[1, 3]` will also return `1` and `3`).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    rating: {
      $between: [1, 20],
    },
  },
});
```

### `$contains`

Attribute contains the input value (case-sensitive).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $contains: 'Hello',
    },
  },
});
```

### `$notContains`

Attribute does not contain the input value (case-sensitive).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $notContains: 'Hello',
    },
  },
});
```

### `$containsi`

Attribute contains the input value. `$containsi` is not case-sensitive, while [$contains](#contains) is.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $containsi: 'hello',
    },
  },
});
```

### `$notContainsi`

Attribute does not contain the input value. `$notContainsi` is not case-sensitive, while [$notContains](#notcontains) is.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $notContainsi: 'hello',
    },
  },
});
```

### `$startsWith`

Attribute starts with input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $startsWith: 'ABCD',
    },
  },
});
```

### `$endsWith`

Attribute ends with input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $endsWith: 'ABCD',
    },
  },
});
```

### `$null`

Attribute is `null`.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $null: true,
    },
  },
});
```

### `$notNull`

Attribute is not `null`.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $notNull: true,
    },
  },
});
```


 This is the content for the doc docusaurus/docs/cms/api/entity-service/order-pagination.md 

 ---
title: Ordering & Pagination with the Entity Service API
description: Use Strapi's Entity Service API to order and paginate queries results.
displayed_sidebar: cmsSidebar
unlisted: true
---

import ESdeprecated from '/docs/snippets/entity-service-deprecated.md'

# Ordering and Paginating with the Entity Service API

<ESdeprecated />

The [Entity Service API](/cms/api/entity-service) offers the ability to [order](#ordering) and [paginate](#pagination) results found with its [findMany()](/cms/api/entity-service/crud#findmany) method.

## Ordering

To order results returned by the Entity Service API, use the `sort` parameter. Results can be ordered based on a [single](#single) or on [multiple](#multiple) attribute(s) and can also use [relational ordering](#relational-ordering).

### Single

To order results by a single field, pass it to the `sort` parameter either:

- as a `string` to sort with the default ascending order, or
- as an `object` to define both the field name and the order (i.e. `'asc'` for ascending order or `'desc'` for descending order)

```js
strapi.entityService.findMany('api::article.article', {
  sort: 'id',
});

// single with direction
strapi.entityService.findMany('api::article.article', {
  sort: { id: 'desc' },
});
```

### Multiple

To order results by multiple fields, pass the fields as an array to the `sort` parameter either:

- as an array of strings to sort multiple fields using the default ascending order, or
- as an array of objects to define both the field name and the order (i.e. `'asc'` for ascending order or `'desc'` for descending order)

```js
strapi.entityService.findMany('api::article.article', {
  sort: ['publishDate', 'name'],
});

// multiple with direction
strapi.entityService.findMany('api::article.article', {
  sort: [{ title: 'asc' }, { publishedAt: 'desc' }],
});
```

### Relational ordering

Fields can also be sorted based on fields from relations:

```js
strapi.entityService.findMany('api::article.article', {
  sort: {
    author: {
      name: 'asc',
    },
  },
});
```

## Pagination

To paginate results returned by the Entity Service API, you can use the `start` and `limit` parameters:

```js
strapi.entityService.findMany('api::article.article', {
  start: 10,
  limit: 15,
});
```

You may instead use the `page` and `pageSize` parameters:

```js
strapi.entityService.findMany('api::article.article', {
  page: 1,
  pageSize: 15,
});
```


 This is the content for the doc docusaurus/docs/cms/api/entity-service/populate.md 

 ---
title: Populating with the Entity Service API
description: Use Strapi's Entity Service API to populate relations in your queries.
displayed_sidebar: cmsSidebar
unlisted: true
---

import ESdeprecated from '/docs/snippets/entity-service-deprecated.md'

# Populating with the Entity Service API

<ESdeprecated />

The [Entity Service API](/cms/api/entity-service) does not populate relations, components or dynamic zones by default, which means an Entity Service API query that does not use the `populate` parameter will not return information about relations, components, or dynamic zones.

## Basic populating

To populate all the root level relations, use `populate: '*'`:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: '*',
});
```

Populate various component or relation fields by passing an array of attribute names:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: ['componentA', 'relationA'],
});
```

## Advanced populating

An object can be passed for more advanced populating:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: {
    relationA: true,
    repeatableComponent: {
      fields: ['fieldA'],
      filters: {},
      sort: 'fieldA:asc',
      populate: {
        relationB: true,
      },
    },
  },
});
```

Complex populating can be achieved by using the [`filters` parameter](/cms/api/entity-service/filter) and select or populate nested relations or components:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: {
    relationA: {
      filters: {
        name: {
          $contains: 'Strapi',
        },
      },
    },

    repeatableComponent: {
      fields: ['someAttributeName'],
      sort: ['someAttributeName'],
      populate: {
        componentRelationA: true,
      },
    },
  },
});
```

## Populate fragments

When dealing with polymorphic content structures (dynamic zones, polymorphic relations, etc...), it is possible to use populate fragments to have a better granularity on the populate strategy.

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: {
    dynamicZone: {
      on: {
        'components.foo': {
          fields: ['title'],
          filters: { title: { $contains: 'strapi' } },
        },
        'components.bar': {
          fields: ['name'],
        },
      },
    },

    morphAuthor: {
      on: {
        'plugin::users-permissions.user': {
          fields: ['username'],
        },
        'api::author.author': {
          fields: ['name'],
        },
      },
    },
  },
});
```


 This is the content for the doc docusaurus/docs/cms/api/graphql.md 

 ---
title: GraphQL API
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- documentId
- filters
- GraphQL
- mutation
- pagination
- pagination by offset
- pagination by page
- plural API ID
- sort
---

import DeepFilteringBlogLink from '/docs/snippets/deep-filtering-blog.md'

# GraphQL API

The GraphQL API allows performing queries and mutations to interact with the [content-types](/cms/backend-customization/models#content-types) through Strapi's [GraphQL plugin](/cms/plugins/graphql). Results can be [filtered](#filters), [sorted](#sorting) and [paginated](#pagination).

:::prerequisites
To use the GraphQL API, install the [GraphQL](/cms/plugins/graphql) plugin:

<Tabs groupId="yarn-npm">
<TabItem value="yarn" label="Yarn">

```sh
yarn add @strapi/plugin-graphql
```

</TabItem>
<TabItem value="npm" label="NPM">

```sh
npm install @strapi/plugin-graphql
```

</TabItem>

</Tabs>
:::

Once installed, the GraphQL playground is accessible at the `/graphql` URL and can be used to interactively build your queries and mutations and read documentation tailored to your content-types:

<ThemedImage
  alt="GraphQL playground use example"
  sources={{
    light:'/img/assets/apis/use-graphql-playground.gif',
    dark:'/img/assets/apis/use-graphql-playground_DARK.gif',
  }}
/>

<br/>

:::note No GraphQL API to upload media files
The GraphQL API does not support media upload. Use the [REST API `POST /upload` endpoint](/cms/api/rest/upload) for all file uploads and use the returned info to link to it in content types. You can still update or delete uploaded files with the `updateUploadFile` and `deleteUploadFile` mutations using media files `id` (see [mutations on media files](#mutations-on-media-files)).
:::

## Queries

Queries in GraphQL are used to fetch data without modifying it.

When a content-type is added to your project, 2 automatically generated GraphQL queries are added to your schema, named after the content-type's singular and plural API IDs, as in the following example:

| Content-type display name | Singular API ID | Plural API ID |
|---------------------------|-----------------|---------------|
| Restaurant                | `restaurant`    | `restaurants` |

<details>
<summary>Singular API ID vs. Plural API ID:</summary>

Singular API ID and Plural API ID values are defined when creating a content-type in the Content-Type Builder, and can be found while editing a content-type in the admin panel (see [User Guide](/cms/features/content-type-builder#creating-content-types)). You can define custom API IDs while creating the content-type, but these can not modified afterwards.

<ThemedImage
alt="Screenshot of the Content-Type Builder to retrieve singular and plural API IDs"
sources={{
  light: '/img/assets/apis/singular-and-plural-api-ids.png',
  dark: '/img/assets/apis/singular-and-plural-api-ids_DARK.png',
}}
/>

</details>

### Fetch a single document

Documents <DocumentDefinition/> can be fetched by their `documentId`.

```graphql title="Example query: Find a restaurant with its documentId"
{
  restaurant(documentId: "a1b2c3d4e5d6f7g8h9i0jkl") {
    name
    description
  }
}
```

### Fetch multiple documents

To fetch multiple documents <DocumentDefinition/> you can use simple, flat queries or <ExternalLink to="https://www.apollographql.com/docs/technotes/TN0029-relay-style-connections/" text="Relay-style"/> queries:

<Tabs groupId="flat-relay">

<TabItem value="flat" label="Flat queries">

To fetch multiple documents you can use flat queries like the following:

```graphql title="Example query: Find all restaurants"
restaurants {
  documentId
  title
}
```

</TabItem>

<TabItem value="relay" label="Relay-style queries">

Relay-style queries can be used to fetch multiple documents and return meta information:

```graphql title="Example query: Find all restaurants"
{
  restaurants_connection {
    nodes {
      documentId
      name
    }
    pageInfo {
      pageSize
      page
      pageCount
      total
    }
  }
}
```

</TabItem>

</Tabs>

#### Fetch relations

You can ask to include relation data in your flat queries or in your <ExternalLink to="https://www.apollographql.com/docs/technotes/TN0029-relay-style-connections/" text="Relay-style"/> queries:

<Tabs groupId="flat-relay">

<TabItem value="flat" label="Flat queries">

The following example fetches all documents from the "Restaurant" content-type, and for each of them, also returns some fields for the many-to-many relation with the "Category" content-type:

```graphql title="Example query: Find all restaurants and their associated categories"
{
  restaurants {
    documentId
    name
    description
    # categories is a many-to-many relation
    categories {
      documentId
      name
    }
  }
}
```

</TabItem>

<TabItem value="relay" label="Relay-style queries">

The following example fetches all documents from the "Restaurant" content-type using a Relay-style query, and for each restaurant, also returns some fields for the many-to-many relation with the "Category" content-type:

```graphql title="Example query: Find all restaurants and their associated categories"
{
  restaurants_connection {
    nodes {
      documentId
      name
      description
      # categories is a many-to-many relation
      categories_connection {
        nodes {
          documentId
          name
        } 
      }
    }
    pageInfo {
      page
      pageCount
      pageSize
      total
    }
  }
}
```

:::info
For now, `pageInfo` only works for documents at the first level. Future implementations of Strapi might implement `pageInfo` for relations.

<details>
<summary>Possible use cases for <code>pageInfo</code>:</summary>

<Columns>
<ColumnLeft>
This works:

```graphql
{
  restaurants_connection {
    nodes {
      documentId
      name
      description
      # many-to-many relation
      categories_connection {
        nodes {
          documentId
          name
        } 
      }
    }
    pageInfo {
      page
      pageCount
      pageSize
      total
    }
  }
}
```

</ColumnLeft>
<ColumnRight>
This does not work:

```graphql {13-19}
{
  restaurants_connection {
    nodes {
      documentId
      name
      description
      # many-to-many relation
      categories_connection {
        nodes {
          documentId
          name
        }
        # not supported
        pageInfo {
          page
          pageCount
          pageSize
          total
        }
      }
    }
    pageInfo {
      page
      pageCount
      pageSize
      total
    }
  }
}}
```

</ColumnRight>
</Columns>
</details>

:::

</TabItem>

</Tabs>

### Fetch media fields

Media fields content is fetched just like other attributes.

The following example fetches the `url` attribute value for each `cover` media field attached to each document from the "Restaurants" content-type:

```graphql
{
  restaurants {
    images {
      documentId
      url
    }
  }
}
```

For multiple media fields, you can use flat queries or <ExternalLink to="https://www.apollographql.com/docs/technotes/TN0029-relay-style-connections/" text="Relay-style"/> queries:

<Tabs groupId="flat-relay">

<TabItem value="flat" label="Flat queries">

The following example fetches some attributes from the `images` multiple media field found in the "Restaurant" content-type:

```graphql
{
  restaurants {
    images_connection {
      nodes {
        documentId
        url
      }
    }
  }
}
```

</TabItem>

<TabItem value="relay" label="Relay-style queries">

The following example fetches some attributes from the `images` multiple media field found in the "Restaurant" content-type using a Relay-style query:

```graphql
{
  restaurants {
    images_connection {
      nodes {
        documentId
        url
      }
    }
  }
}
```

:::info
For now, `pageInfo` only works for documents. Future implementations of Strapi might implement `pageInfo` for the media fields `_connection` too.
:::

</TabItem>

</Tabs>

### Fetch components

Components content is fetched just like other attributes.

The following example fetches the `label`, `start_date`, and `end_date` attributes values for each `closingPeriod` component added to each document from the "Restaurants" content-type:

```graphql
{
  restaurants {
    closingPeriod {
      label
      start_date
      end_date
    }
  }
}
```

### Fetch dynamic zone data

Dynamic zones are union types in GraphQL so you need to use <ExternalLink to="https://www.apollographql.com/docs/react/data/fragments/" text="fragments"/> (i.e., with `...on`) to query the fields, passing the component name (with the `ComponentCategoryComponentname` syntax) to <ExternalLink to="https://www.apollographql.com/docs/apollo-server/schema/schema/#the-__typename-field" text="`__typename`"/>:

The following example fetches data for the `label` attribute of a "Closingperiod" component from the "Default" components category that can be added to the "dz" dynamic zone:

```graphql
{
  restaurants {
    dz {
      __typename
      ...on ComponentDefaultClosingperiod {
        # define which attributes to return for the component
        label
      }
    }
  }
}
```

### Fetch draft or published versions {#status}

If the [Draft & Publish](/cms/features/draft-and-publish) feature is enabled for the content-type, you can add a `status` parameter to queries to fetch draft or published versions of documents <DocumentDefinition/>:

```graphql title="Example: Fetch draft versions of documents"
query Query($status: PublicationStatus) {
  restaurants(status: DRAFT) {
    documentId
    name
    publishedAt # should return null
  }
}
```

```graphql title="Example: Fetch published versions of documents"
query Query($status: PublicationStatus) {
  restaurants(status: PUBLISHED) {
    documentId
    name
    publishedAt
  }
}
```

## Mutations

Mutations in GraphQL are used to modify data (e.g. create, update, and delete data).

When a content-type is added to your project, 3 automatically generated GraphQL mutations to create, update, and delete documents <DocumentDefinition/> are added to your schema.

For instance, for a "Restaurant" content-type, the following mutations are generated:

| Use case                                    | Singular API ID     |
|---------------------------------------------|---------------------|
| Create a new "Restaurant" document          | `createRestaurant`  |
| Update an existing "Restaurant" restaurant  | `updateRestaurant`  |
| Delete an existing "Restaurant" restaurant  | `deleteRestaurant`  |

### Create a new document

When creating new documents, the `data` argument will have an associated input type that is specific to your content-type.

For instance, if your Strapi project contains the "Restaurant" content-type, you will have the following:

| Mutation           | Argument         | Input type         |
|--------------------|------------------|--------------------|
| `createRestaurant` | `data`           | `RestaurantInput!` |

The following example creates a new document for the "Restaurant" content-type and returns its `name` and `documentId`:

```graphql
mutation CreateRestaurant($data: RestaurantInput!) {
  createRestaurant(data: {
    name: "Pizzeria Arrivederci"
  }) {
    name
    documentId
  }
}
```

When creating a new document, a `documentId` is automatically generated.

The implementation of the mutations also supports relational attributes. For example, you can create a new "Category" and attach many "Restaurants" (using their `documentId`) to it by writing your query like follows:

```graphql
mutation CreateCategory {
  createCategory(data: { 
    Name: "Italian Food"
    restaurants: ["a1b2c3d4e5d6f7g8h9i0jkl", "bf97tfdumkcc8ptahkng4puo"]
  }) {
    documentId
    Name
    restaurants {
      documentId
      name
    }
  }
}
```

:::tip
If the Internationalization (i18n) feature is enabled for your content-type, you can create a document for a specific locale (see [create a new localized document](/cms/api/graphql#locale-create)).
:::

### Update an existing document

When updating an existing document <DocumentDefinition/>, pass the `documentId` and the `data` object containing new content. The `data` argument will have an associated input type that is specific to your content-type.

For instance, if your Strapi project contains the "Restaurant" content-type, you will have the following:

| Mutation           | Argument         | Input type         |
|--------------------|------------------|--------------------|
| `updateRestaurant` | `data`           | `RestaurantInput!` |

For instance, the following example updates an existing document from the "Restaurants" content-type and give it a new name:

```graphql
mutation UpdateRestaurant($documentId: ID!, $data: RestaurantInput!) {
  updateRestaurant(
    documentId: "bf97tfdumkcc8ptahkng4puo",
    data: { name: "Pizzeria Amore" }
  ) {
    documentId
    name
  }
}
```

:::tip
If the Internationalization (i18n) feature is enabled for your content-type, you can create a document for a specific locale (see [i18n documentation](/cms/api/graphql#locale-update)).
:::

#### Update relations

You can update relational attributes by passing a `documentId` or an array of `documentId` (depending on the relation type).

For instance, the following example updates a document from the "Restaurant" content-type and adds a relation to a document from the "Category" content-type through the `categories` relation field:

```graphql
mutation UpdateRestaurant($documentId: ID!, $data: RestaurantInput!) {
  updateRestaurant(
    documentId: "slwsiopkelrpxpvpc27953je",
    data: { categories: ["kbbvj00fjiqoaj85vmylwi17"] }
  ) {
    documentId
    name
    categories {
      documentId
      Name
    }
  }
}
```

### Delete a document

To delete a document <DocumentDefinition/>, pass its `documentId`:

```graphql
mutation DeleteRestaurant {
  deleteRestaurant(documentId: "a1b2c3d4e5d6f7g8h9i0jkl") {
    documentId
  }
}
```

:::tip
If the Internationalization (i18n) feature is enabled for your content-type, you can delete a specific localized version of a document (see [i18n documentation](/cms/api/graphql#locale-delete)).
:::

### Mutations on media files

:::caution
Currently, mutations on media fields use Strapi v4 `id`, not Strapi 5 `documentId`, as unique identifiers for media files.
:::

Media fields mutations use files `id`. However, GraphQL API queries in Strapi 5 do not return `id` anymore. Media files `id` can be found:

- either in the [Media Library](/cms/features/media-library) from the admin panel,

  <ThemedImage
    alt="Media Library screenshot highlighting how to find a media file id"
    sources={{
      light: '/img/assets/apis/media-field-id.png',
      dark: '/img/assets/apis/media-field-id.png'
    }}
  />

- or by sending REST API `GET` requests that [populate media files](/cms/api/rest/populate-select#population), because REST API requests currently return both `id` and `documentId` for media files.

#### Update an uploaded media file

When updating an uploaded media file, pass the media's `id` (not its `documentId`) and the `info` object containing new content. The `info` argument will has an associated input type that is specific to media files.

For instance, if your Strapi project contains the "Restaurant" content-type, you will have the following:

| Mutation           | Argument         | Input type         |
|--------------------|------------------|--------------------|
| `updateUploadFile` | `info`           | `FileInfoInput!`   |

For instance, the following example updates the `alternativeText` attribute for a media file whose `id` is 3:

```graphql
mutation Mutation($updateUploadFileId: ID!, $info: FileInfoInput) {
  updateUploadFile(
    id: 3,
    info: {
      alternativeText: "New alt text"
    }
  ) {
    documentId
    url
    alternativeText
  }
}
```

:::tip
If upload mutations return a forbidden access error, ensure proper permissions are set for the Upload plugin (see [User Guide](/cms/features/users-permissions#editing-a-role)).
:::

#### Delete an uploaded media file

When deleting an uploaded media file, pass the media's `id` (not its `documentId`).

```graphql title="Example: Delete the media file with id 4"
mutation DeleteUploadFile($deleteUploadFileId: ID!) {
  deleteUploadFile(id: 4) {
    documentId # return its documentId
  }
}
```

:::tip
If upload mutations return a forbidden access error, ensure proper permissions are set for the Upload plugin (see [User Guide](/cms/features/users-permissions#editing-a-role)).
:::

## Filters

<!-- TODO: create examples for every filter and expand this into a section -->
Queries can accept a `filters` parameter with the following syntax:

`filters: { field: { operator: value } }`

Multiple filters can be combined together, and logical operators (`and`, `or`, `not`) can also be used and accept arrays of objects.

The following operators are available:

| Operator       | Description                        |
| -------------- | ---------------------------------- |
| `eq`           | Equal                              |
| `ne`           | Not equal                          |
| `lt`           | Less than                          |
| `lte`          | Less than or equal to              |
| `gt`           | Greater than                       |
| `gte`          | Greater than or equal to           |
| `in`           | Included in an array               |
| `notIn`        | Not included in an array           |
| `contains`     | Contains, case sensitive           |
| `notContains`  | Does not contain, case sensitive   |
| `containsi`    | Contains, case insensitive         |
| `notContainsi` | Does not contain, case insensitive |
| `null`         | Is null                            |
| `notNull`      | Is not null                        |
| `between`      | Is between                         |
| `startsWith`   | Starts with                        |
| `endsWith`     | Ends with                          |
| `and`          | Logical `and`                      |
| `or`           | Logical `or`                       |
| `not`          | Logical `not`                      |

```graphql title="Example with advanced filters: Fetch pizzerias with an averagePrice lower than 20"
{
  restaurants(
    filters: { 
      averagePrice: { lt: 20 },
      or: [
        { name: { eq: "Pizzeria" }}
        { name: { startsWith: "Pizzeria" }}
      ]}
    ) {
    documentId
    name
    averagePrice
  }
}
```

<DeepFilteringBlogLink />

## Sorting

Queries can accept a `sort` parameter with the following syntax:

- to sort based on a single value: `sort: "value"` 
- to sort based on multiple values: `sort: ["value1", "value2"]`

The sorting order can be defined with `:asc` (ascending order, default, can be omitted) or `:desc` (for descending order).

```graphql title="Example: Fetch and sort on name by ascending order"
{
  restaurants(sort: "name") {
    documentId
    name
  }
}
```

```graphql title="Example: Fetch and sort on average price by descending order"
{
  restaurants(sort: "averagePrice:desc") {
    documentId
    name
    averagePrice
  }
}
```

```graphql title="Example: Fetch and sort on title by ascending order, then on average price by descending order"
{
  restaurants(sort: ["name:asc", "averagePrice:desc"]) {
    documentId
    name
    averagePrice
  }
}
```

## Pagination

<ExternalLink to="https://www.apollographql.com/docs/technotes/TN0029-relay-style-connections/" text="Relay-style"/> queries can accept a `pagination` parameter. Results can be paginated either by page or by offset.

:::note
Pagination methods can not be mixed. Always use either `page` with `pageSize` or `start` with `limit`.
:::

### Pagination by page

| Parameter              | Description | Default |
| ---------------------- | ----------- | ------- |
| `pagination.page`      | Page number | 1       |
| `pagination.pageSize`  | Page size   | 10      |

```graphql title="Example query: Pagination by page"
{
  restaurants_connection(pagination: { page: 1, pageSize: 10 }) {
    nodes {
      documentId
      name
    }
    pageInfo {
      page
      pageSize
      pageCount
      total
    }
  }
}
```

### Pagination by offset

| Parameter          | Description                  | Default | Maximum |
| ------------------ | ---------------------------- | ------- | ------- |
| `pagination.start` | Start value                  | 0       | -       |
| `pagination.limit` | Number of entities to return | 10      | -1      |

```graphql title="Example query: Pagination by offset"
{
  restaurants_connection(pagination: { start: 10, limit: 19 }) {
    nodes {
      documentId
      name
    }
    pageInfo {
      page
      pageSize
      pageCount
      total
    }
  }
}
```

:::tip
The default and maximum values for `pagination.limit` can be [configured in the `./config/plugins.js`](/cms/plugins/graphql#code-based-configuration) file with the `graphql.config.defaultLimit` and `graphql.config.maxLimit` keys.
:::

## `locale` {#locale}

The [Internationalization (i18n)](/cms/features/internationalization) feature adds new features to the GraphQL API:

- The `locale` field is added to the GraphQL schema.
- GraphQL can be used:
  - to query documents for a specific locale with the `locale` argument
  - for mutations to [create](#locale-create), [update](#locale-update), and [delete](#locale-delete) documents for a specific locale

### Fetch all documents in a specific locale {#locale-fetch-all}

To fetch all documents <DocumentDefinition/> for a specific locale, pass the `locale` argument to the query:

<ApiCall>

<Request> 

```graphql
query {
  restaurants(locale: "fr") {
    documentId
    name
    locale
  }
}
```

</Request>

<Response>

```json
{
  "data": {
    "restaurants": [
      {
        "documentId": "a1b2c3d4e5d6f7g8h9i0jkl",
        "name": "Restaurant Biscotte",
        "locale": "fr"
      },
      {
        "documentId": "m9n8o7p6q5r4s3t2u1v0wxyz",
        "name": "Pizzeria Arrivederci",
        "locale": "fr"
      },
    ]
  }
}
```

</Response>

</ApiCall>

### Fetch a document in a specific locale {#locale-fetch}

To fetch a documents <DocumentDefinition/> for a specific locale, pass the `documentId` and the `locale` arguments to the query:

<ApiCall>

<Request title="Example query"> 

```graphql
query Restaurant($documentId: ID!, $locale: I18NLocaleCode) {
  restaurant(documentId: "a1b2c3d4e5d6f7g8h9i0jkl", locale: "fr") {
    documentId
    name
    description
    locale
  }
}
```

</Request>

 <Response title="Example response"> 

```json
{
  "data": {
    "restaurant": {
      "documentId": "lviw819d5htwvga8s3kovdij",
      "name": "Restaurant Biscotte",
      "description": "Bienvenue au restaurant Biscotte!",
      "locale": "fr"
    }
  }
}
```

</Response>
</ApiCall>

### Create a new localized document {#locale-create}

The `locale` field can be passed to create a localized document <DocumentDefinition/> for a specific locale (for more information about mutations with GraphQL, see [the GraphQL API documentation](/cms/api/graphql#create-a-new-document)).

```graphql title="Example: Create a new restaurant for the French locale"
mutation CreateRestaurant($data: RestaurantInput!, $locale: I18NLocaleCode) {
  createRestaurant(
    data: {
      name: "Brasserie Bonjour",
      description: "Description in French goes here"
    },
    locale: "fr"
  ) {
  documentId
  name
  description
  locale
}
```

### Update a document for a specific locale {#locale-update}

A `locale` argument can be passed in the mutation to update a document <DocumentDefinition/> for a given locale (for more information about mutations with GraphQL, see [the GraphQL API documentation](/cms/api/graphql#update-an-existing-document)).

```graphql title="Example: Update the description field of restaurant for the French locale"
mutation UpdateRestaurant($documentId: ID!, $data: RestaurantInput!, $locale: I18NLocaleCode) {
  updateRestaurant(
    documentId: "a1b2c3d4e5d6f7g8h9i0jkl"
    data: {
      description: "New description in French"
    },
    locale: "fr"
  ) {
  documentId
  name
  description
  locale
}
```

### Delete a locale for a document {#locale-delete}

Pass the `locale` argument in the mutation to delete a specific localization for a document <DocumentDefinition/>:

```graphql
mutation DeleteRestaurant($documentId: ID!, $locale: I18NLocaleCode) {
  deleteRestaurant(documentId: "xzmzdo4k0z73t9i68a7yx2kk", locale: "fr") {
    documentId
  }
}
```


 This is the content for the doc docusaurus/docs/cms/api/graphql/locale.md 

 # Use `locale` with the GraphQL API {#graphql}

The i18n feature adds new features to the [GraphQL API](/cms/api/graphql):

- The `locale` field is added to the GraphQL schema.
- GraphQL can be used:
  - to query documents for a specific locale with the `locale` argument
  - for mutations to [create](#graphql-create), [update](#graphql-update), and [delete](#graphql-delete) documents for a specific locale

### Fetch all documents in a specific locale {#graphql-fetch-all}

To fetch all documents <DocumentDefinition/> for a specific locale, pass the `locale` argument to the query:

<ApiCall>

<Request> 

```graphql
query {
  restaurants(locale: "fr") {
    documentId
    name
    locale
  }
}
```

</Request>

<Response>

```json
{
  "data": {
    "restaurants": [
      {
        "documentId": "a1b2c3d4e5d6f7g8h9i0jkl",
        "name": "Restaurant Biscotte",
        "locale": "fr"
      },
      {
        "documentId": "m9n8o7p6q5r4s3t2u1v0wxyz",
        "name": "Pizzeria Arrivederci",
        "locale": "fr"
      },
    ]
  }
}
```

</Response>

</ApiCall>

### Fetch a document in a specific locale {#graphql-fetch}

To fetch a documents <DocumentDefinition/> for a specific locale, pass the `documentId` and the `locale` arguments to the query:

<ApiCall>

<Request title="Example query"> 

```graphql
query Restaurant($documentId: ID!, $locale: I18NLocaleCode) {
  restaurant(documentId: "a1b2c3d4e5d6f7g8h9i0jkl", locale: "fr") {
    documentId
    name
    description
    locale
  }
}
```

</Request>

 <Response title="Example response"> 

```json
{
  "data": {
    "restaurant": {
      "documentId": "lviw819d5htwvga8s3kovdij",
      "name": "Restaurant Biscotte",
      "description": "Bienvenue au restaurant Biscotte!",
      "locale": "fr"
    }
  }
}
```

</Response>
</ApiCall>

### Create a new localized document {#graphql-create}

The `locale` field can be passed to create a localized document <DocumentDefinition/> for a specific locale (for more information about mutations with GraphQL, see [the GraphQL API documentation](/cms/api/graphql#create-a-new-document)).

```graphql title="Example: Create a new restaurant for the French locale"
mutation CreateRestaurant($data: RestaurantInput!, $locale: I18NLocaleCode) {
  createRestaurant(
    data: {
      name: "Brasserie Bonjour",
      description: "Description in French goes here"
    },
    locale: "fr"
  ) {
  documentId
  name
  description
  locale
}
```

### Update a document for a specific locale {#graphql-update}

A `locale` argument can be passed in the mutation to update a document <DocumentDefinition/> for a given locale (for more information about mutations with GraphQL, see [the GraphQL API documentation](/cms/api/graphql#update-an-existing-document)).

```graphql title="Example: Update the description field of restaurant for the French locale"
mutation UpdateRestaurant($documentId: ID!, $data: RestaurantInput!, $locale: I18NLocaleCode) {
  updateRestaurant(
    documentId: "a1b2c3d4e5d6f7g8h9i0jkl"
    data: {
      description: "New description in French"
    },
    locale: "fr"
  ) {
  documentId
  name
  description
  locale
}
```

### Delete a locale for a document {#graphql-delete}

Pass the `locale` argument in the mutation to delete a specific localization for a document <DocumentDefinition/>:

```graphql
mutation DeleteRestaurant($documentId: ID!, $locale: I18NLocaleCode) {
  deleteRestaurant(documentId: "xzmzdo4k0z73t9i68a7yx2kk", locale: "fr") {
    documentId
  }
}
```


 This is the content for the doc docusaurus/docs/cms/api/query-engine.md 

 ---
unlisted: true
title: Query Engine API
description: Strapi provides a Query Engine API to give unrestricted internal access to the database layer at a lower level.
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- introduction
- Query Engine API
---

import EntityQueryKnex from '/docs/snippets/entity-query-knex.md'
import BackendIntroCrosslink from '/docs/snippets/backend-custom-intro-crosslink.md'
import ConsiderDocumentService from '/docs/snippets/consider-document-service.md'

# Query Engine API

The Strapi backend provides a Query Engine API to interact with the database layer at a lower level. 

<ConsiderDocumentService />

:::prerequisites
Before diving deeper into the Query Engine API documentation, it is recommended that you read the following introductions:
- the [backend customization introduction](/cms/backend-customization),
- and the [Content APIs introduction](/cms/api/content-api).
:::


## Basic usage

The Query Engine is available through `strapi.db.query`:

```js
strapi.db.query('api::blog.article').findMany({ // uid syntax: 'api::api-name.content-type-name'
  where: {
    title: {
      $startsWith: '2021',
      $endsWith: 'v4',
    },
  },
  populate: {
    category: true,
  },
});
```

## Available operations

The Query Engine allows the following operations on database entries:

<CustomDocCardsWrapper>
<CustomDocCard emoji="" title="Single operations" description="Create, read, update, and delete single database entries with the Query Engine API." link="/cms/api/query-engine/single-operations" />
<CustomDocCard emoji="" title="Bulk operations" description="Create, read, update, and delete multiple database entries with the Query Engine API." link="/cms/api/query-engine/bulk-operations" />
<CustomDocCard emoji="" title="Filters" description="Get exactly what you need by filtering database entries with the Query Engine API." link="/cms/api/query-engine/filtering" />
<CustomDocCard emoji="" title="Populate" description="Get additional data with your Query Engine API queries by populating relations." link="/cms/api/query-engine/populating" />
<CustomDocCard emoji="" title="Order & Pagination" description="Sort and paginate the results of your Query Engine API queries." link="/cms/api/query-engine/order-pagination" />
</CustomDocCardsWrapper>


 This is the content for the doc docusaurus/docs/cms/api/query-engine/bulk-operations.md 

 ---
unlisted: true
title: Bulk Operations
description: Use Strapi's Query Engine API to perform operations on multiple entries.
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- createMany()
- count()
- deleting content
- Query Engine API
- updateMany()
---

import ConsiderDocumentService from '/docs/snippets/consider-document-service.md'

# Bulk Operations with the Query Engine API

<ConsiderDocumentService />

:::caution
To avoid performance issues, bulk operations are not allowed on relations.
:::

## createMany()

Creates multiple entries.

Syntax: `createMany(parameters) => { count: number, ids: id[] }`

### Parameters

| Parameter | Type             | Description         |
| --------- | ---------------- | ------------------- |
| `data`    | Array of objects | Array of input data |

:::caution
* MySQL will only return an array of one id containing the last inserted id, not the entire list.
* Prior to Strapi v4.9.0, `createMany()` only returns the `count`. 
:::

### Example

```js
await strapi.db.query("api::blog.article").createMany({
  data: [
    {
      title: "ABCD",
    },
    {
      title: "EFGH",
    },
  ],
});

// { count: 2 , ids: [1,2]}
```

## updateMany()

Updates multiple entries matching the parameters.

Syntax: `updateMany(parameters) => { count: number }`

### Parameters

| Parameter | Type                                                      | Description                                             |
| --------- | --------------------------------------------------------- | ------------------------------------------------------- |
| `where`   | [`WhereParameter`](/cms/api/query-engine/filtering/) | [Filters](/cms/api/query-engine/filtering/) to use |
| `data`    | Object                                                    | Input data                                              |

### Example

```js
await strapi.db.query("api::shop.article").updateMany({
  where: {
    price: 20,
  },
  data: {
    price: 18,
  },
});

// { count: 42 }
```

## deleteMany()

Deletes multiple entries matching the parameters.

Syntax: `deleteMany(parameters) => { count: number }`

### Parameters

| Parameter | Type                                                      | Description                                             |
| --------- | --------------------------------------------------------- | ------------------------------------------------------- |
| `where`   | [`WhereParameter`](/cms/api/query-engine/filtering/) | [Filters](/cms/api/query-engine/filtering/) to use |

### Example

```js
await strapi.db.query("api::blog.article").deleteMany({
  where: {
    title: {
      $startsWith: "v3",
    },
  },
});

// { count: 42 }
```

## Aggregations

### count()

Counts entries matching the parameters.

Syntax: `count(parameters) => number`

#### Parameters

| Parameter | Type                                                      | Description                                             |
| --------- | --------------------------------------------------------- | ------------------------------------------------------- |
| `where`   | [`WhereParameter`](/cms/api/query-engine/filtering/) | [Filters](/cms/api/query-engine/filtering/) to use |

```js
const count = await strapi.db.query("api::blog.article").count({
  where: {
    title: {
      $startsWith: "v3",
    },
  },
});

// 12
```


 This is the content for the doc docusaurus/docs/cms/api/query-engine/filtering.md 

 ---
unlisted: true
title: Filtering with the Query Engine API
description: Use Strapi's Query Engine API to filter the results of your queries.
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- filters
- logical operators
- Query Engine API
---

import ConsiderDocumentService from '/docs/snippets/consider-document-service.md'
import DeepFilteringBlogLink from '/docs/snippets/deep-filtering-blog.md'

# Filtering with the Query Engine API

<ConsiderDocumentService />

The [Query Engine API](/cms/api/query-engine/) offers the ability to filter results found with its [findMany()](/cms/api/query-engine/single-operations#findmany) method.

Results are filtered with the `where` parameter that accepts [logical operators](#logical-operators) and [attribute operators](#attribute-operators). Every operator should be prefixed with `$`.

<DeepFilteringBlogLink />

## Logical operators

### `$and`

All nested conditions must be `true`.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    $and: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

`$and` is used implicitly when passing an object with nested conditions:

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: 'Hello World',
    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
  },
});
```

### `$or`

One or many nested conditions must be `true`.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    $or: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

### `$not`

Negates the nested conditions.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    $not: {
      title: 'Hello World',
    },
  },
});
```

:::note
`$not` can be used:

- as a logical operator (e.g. in `where: { $not: { // conditions‚Ä¶ }}`)
- or [as an attribute operator](#not-1) (e.g. in `where: { attribute-name: $not: { ‚Ä¶ } }`).
:::

:::tip
`$and`, `$or` and `$not` operators are nestable inside of another `$and`, `$or` or `$not` operator.
:::

## Attribute Operators

:::caution
Using these operators may give different results depending on the database's implementation, as the comparison is handled by the database and not by Strapi.
:::

### `$not`

Negates nested condition(s).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $not: {
        $contains: 'Hello World',
      },
    },
  },
});
```

### `$eq`

Attribute equals input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $eq: 'Hello World',
    },
  },
});
```

`$eq` can be omitted:

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: 'Hello World',
  },
});
```

### `$eqi`

Attribute equals input value (case-insensitive).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $eqi: 'HELLO World',
    },
  },
});
```

### `$ne`

Attribute does not equal input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $ne: 'ABCD',
    },
  },
});
```

### `$nei`

Attribute does not equal input value (case-insensitive).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $nei: 'abcd',
    },
  },
});
```

### `$in`

Attribute is contained in the input list.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $in: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

`$in` can be omitted when passing an array of values:

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: ['Hello', 'Hola', 'Bonjour'],
  },
});
```

### `$notIn`

Attribute is not contained in the input list.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $notIn: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

### `$lt`

Attribute is less than the input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $lt: 10,
    },
  },
});
```

### `$lte`

Attribute is less than or equal to the input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $lte: 10,
    },
  },
});
```

### `$gt`

Attribute is greater than the input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $gt: 5,
    },
  },
});
```

### `$gte`

Attribute is greater than or equal to the input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $gte: 5,
    },
  },
});
```


### `$between`

Attribute is between the 2 input values, boundaries included (e.g., `$between[1, 3]` will also return `1` and `3`).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $between: [1, 20],
    },
  },
});
```


### `$contains`

Attribute contains the input value (case-sensitive).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $contains: 'Hello',
    },
  },
});
```

### `$notContains`

Attribute does not contain the input value (case-sensitive).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $notContains: 'Hello',
    },
  },
});
```

### `$containsi`

Attribute contains the input value. `$containsi` is not case-sensitive, while [$contains](#contains) is.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $containsi: 'hello',
    },
  },
});
```

### `$notContainsi`

Attribute does not contain the input value. `$notContainsi` is not case-sensitive, while [$notContains](#notcontains) is.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $notContainsi: 'hello',
    },
  },
});
```

### `$startsWith`

Attribute starts with input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $startsWith: 'ABCD',
    },
  },
});
```

### `$endsWith`

Attribute ends with input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $endsWith: 'ABCD',
    },
  },
});
```

### `$null`

Attribute is `null`.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $null: true,
    },
  },
});
```

### `$notNull`

Attribute is not `null`.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $notNull: true,
    },
  },
});
```


 This is the content for the doc docusaurus/docs/cms/api/query-engine/order-pagination.md 

 ---
unlisted: true
title: Ordering & Pagination with the Query Engine API
description: Use Strapi's Query Engine API to order and paginate the results of your queries.
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- sort
- pagination
- Query Engine API
---

import ConsiderDocumentService from '/docs/snippets/consider-document-service.md'

# Ordering and Paginating with the Query Engine API

<ConsiderDocumentService />

The [Query Engine API](/cms/api/query-engine) offers the ability to [order](#ordering) and [paginate](#pagination) results.

## Ordering

To order results returned by the Query Engine, use the `orderBy` parameter. Results can be ordered based on a [single](#single) or on [multiple](#multiple) attributes and can also use [relational ordering](#relational-ordering).

### Single

```js
strapi.db.query('api::article.article').findMany({
  orderBy: 'id',
});

// single with direction
strapi.db.query('api::article.article').findMany({
  orderBy: { id: 'asc' },
});
```

### Multiple

```js
strapi.db.query('api::article.article').findMany({
  orderBy: ['id', 'name'],
});

// multiple with direction
strapi.db.query('api::article.article').findMany({
  orderBy: [{ title: 'asc' }, { publishedAt: 'desc' }],
});
```

### Relational ordering

```js
strapi.db.query('api::article.article').findMany({
  orderBy: {
    author: {
      name: 'asc',
    },
  },
});
```

## Pagination

To paginate results returned by the Query Engine API, use the `offset` and `limit` parameters:

```js
strapi.db.query('api::article.article').findMany({
  offset: 15, 
  limit: 10,
});
```


 This is the content for the doc docusaurus/docs/cms/api/query-engine/populating.md 

 ---
unlisted: true
title: Populating with the Query Engine API
description: Use Strapi's Query Engine API to populate relations when querying your content.
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- populate
- findMany()
- Query Engine API
---

import ConsiderDocumentService from '/docs/snippets/consider-document-service.md'

# Populating with the Query Engine API

<ConsiderDocumentService />

Relations and components have a unified API for populating them.

To populate all the root level relations, use `populate: true`:

```js
strapi.db.query('api::article.article').findMany({
  populate: true,
});
```

Select which data to populate by passing an array of attribute names:

```js
strapi.db.query('api::article.article').findMany({
  populate: ['componentA', 'relationA'],
});
```

An object can be passed for more advanced usage:

```js
strapi.db.query('api::article.article').findMany({
  populate: {
    componentB: true,
    dynamiczoneA: true,
    relation: someLogic || true,
  },
});
```

Complex populating can also be achieved by applying `where` filters and select or populate nested relations:

```js
strapi.db.query('api::article.article').findMany({
  populate: {
    relationA: {
      where: {
        name: {
          $contains: 'Strapi',
        },
      },
    },

    repeatableComponent: {
      select: ['someAttributeName'],
      orderBy: ['someAttributeName'],
      populate: {
        componentRelationA: true,
      },
    },

    dynamiczoneA: true,
  },
});
```

When dealing with polymorphic content structures (dynamic zones, polymorphic relations, etc...), it is possible to use populate fragments to have a better granularity on the populate strategy.

```js
strapi.db.query('api::article.article').findMany('api::article.article', {
  populate: {
    dynamicZone: {
      on: {
        'components.foo': {
          select: ['title'],
          where: { title: { $contains: 'strapi' } },
        },
        'components.bar': {
          select: ['name'],
        },
      },
    },

    morphAuthor: {
      on: {
        'plugin::users-permissions.user': {
          select: ['username'],
        },
        'api::author.author': {
          select: ['name'],
        },
      },
    },
  },
});
```


 This is the content for the doc docusaurus/docs/cms/api/query-engine/single-operations.md 

 ---
unlisted: true
title: Single Operations
description: Use Strapi's Query Engine API to perform operations on single entries.
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- create()
- deleting content
- findOne()
- findMany()
- findWithCount()
- Query Engine API
- update()
---

import ManagingRelations from '/docs/snippets/managing-relations.md'
import ConsiderDocumentService from '/docs/snippets/consider-document-service.md'

# Single Operations with the Query Engine API

<ConsiderDocumentService />

## findOne()

:::note
 Only use the Query Engine's `findOne()` method if the [Document Service's `findOne()`](/cms/api/document-service#findone) method can't cover your use case.
:::
Finds the first entry matching the parameters.

Syntax: `findOne(parameters) ‚áí Entry`

### Parameters

| Parameter  | Type   | Description   |
| ---------- | -------------- | --------- |
| `select`   | String, or Array of strings | [Attributes](/cms/backend-customization/models#model-attributes) to return |
| `where`    | [`WhereParameter`](/cms/api/query-engine/filtering/) | [Filters](/cms/api/query-engine/filtering/) to use   |
| `offset`   | Integer   | Number of entries to skip   |
| `orderBy`  | [`OrderByParameter`](/cms/api/query-engine/order-pagination/) | [Order](/cms/api/query-engine/order-pagination/) definition |
| `populate` | [`PopulateParameter`](/cms/api/query-engine/populating/) | Relations to [populate](/cms/api/query-engine/populating/) |

### Example

```js
const entry = await strapi.db.query('api::blog.article').findOne({
  select: ['title', 'description'],
  where: { title: 'Hello World' },
  populate: { category: true },
});
```

## findMany()

:::note
 Only use the Query Engine's `findMany()` method if the [Document Service `findMany()`](/cms/api/document-service#findmany) method can't cover your use case.
:::

Finds entries matching the parameters.

Syntax: `findMany(parameters) ‚áí Entry[]`

### Parameters

| Parameter | Type                           | Description                                |
| --------- | ------------------------------ | ------------------------------------------ |
| `select`   | String, or Array of strings | [Attributes](/cms/backend-customization/models#model-attributes) to return |
| `where`    | [`WhereParameter`](/cms/api/query-engine/filtering/)  | [Filters](/cms/api/query-engine/filtering/) to use |
| `limit`   | Integer  | Number of entries to return  |
| `offset`   | Integer  | Number of entries to skip |
| `orderBy`  | [`OrderByParameter`](/cms/api/query-engine/order-pagination/) | [Order](/cms/api/query-engine/order-pagination/) definition |
| `populate` | [`PopulateParameter`](/cms/api/query-engine/populating/)      | Relations to [populate](/cms/api/query-engine/populating/) |

### Example

```js
const entries = await strapi.db.query('api::blog.article').findMany({
  select: ['title', 'description'],
  where: { title: 'Hello World' },
  orderBy: { publishedAt: 'DESC' },
  populate: { category: true },
});
```

## findWithCount()

Finds and counts entries matching the parameters.

Syntax: `findWithCount(parameters) => [Entry[], number]`

### Parameters

| Parameter | Type                           | Description                                |
| --------- | ------------------------------ | ------------------------------------------ |
| `select`   | String, or Array of strings | [Attributes](/cms/backend-customization/models#model-attributes) to return |
| `where`    | [`WhereParameter`](/cms/api/query-engine/filtering/)          | [Filters](/cms/api/query-engine/filtering/) to use |
| `limit`     | Integer    | Number of entries to return    |
| `offset`   | Integer  | Number of entries to skip  |
| `orderBy`  | [`OrderByParameter`](/cms/api/query-engine/order-pagination/) | [Order](/cms/api/query-engine/order-pagination/) definition |
| `populate` | [`PopulateParameter`](/cms/api/query-engine/populating/)      | Relations to [populate](/cms/api/query-engine/populating/) |

### Example

```js
const [entries, count] = await strapi.db.query('api::blog.article').findWithCount({
  select: ['title', 'description'],
  where: { title: 'Hello World' },
  orderBy: { title: 'DESC' },
  populate: { category: true },
});
```

## create()

:::note
 Only use the Query Engine's `create()` method if the [Document Service `create()` method](/cms/api/document-service#create) can't cover your use case.
:::

Creates one entry and returns it.

Syntax: `create(parameters) => Entry`

### Parameters

| Parameter | Type                           | Description                                |
| --------- | ------------------------------ | ------------------------------------------ |
| `select`   | String, or Array of strings | [Attributes](/cms/backend-customization/models#model-attributes) to return |
| `populate` | [`PopulateParameter`](/cms/api/query-engine/populating/)  | Relations to [populate](/cms/api/query-engine/populating/) |
| `data`  | Object   | Input data  |

### Example

```js
const entry = await strapi.db.query('api::blog.article').create({
  data: {
    title: 'My Article',
  },
});
```

<ManagingRelations components={props.components} />

## update()

:::note
 Only use the Query Engine's `update()` method if the [Document Service `update()`](/cms/api/document-service#update) method can't cover your use case.
:::

Updates one entry and returns it.

Syntax: `update(parameters) => Entry`

### Parameters

| Parameter | Type                           | Description                                |
| --------- | ------------------------------ | ------------------------------------------ |
| `select`   | String, or Array of strings | [Attributes](/cms/backend-customization/models#model-attributes) to return |
| `populate` | [`PopulateParameter`](/cms/api/query-engine/populating/)      | Relations to [populate](/cms/api/query-engine/populating/)
| `where`    | [`WhereParameter`](/cms/api/query-engine/filtering/)          | [Filters](/cms/api/query-engine/filtering/) to use  |
| `data`  | Object     | Input data   |

### Example

```js
const entry = await strapi.db.query('api::blog.article').update({
  where: { id: 1 },
  data: {
    title: 'xxx',
  },
});
```

<ManagingRelations components={props.components} />

## delete()

:::note
 Only use the Query Engine's `delete()` method if the [Document Service `delete()`](/cms/api/document-service#delete) method can't cover your use case.
:::

Deletes one entry and returns it.

Syntax: `delete(parameters) => Entry`

### Parameters

| Parameter | Type                           | Description                                |
| --------- | ------------------------------ | ------------------------------------------ |
| `select`   | String, or Array of strings | [Attributes](/cms/backend-customization/models#model-attributes) to return |
| `populate` | [`PopulateParameter`](/cms/api/query-engine/populating/)      | Relations to [populate](/cms/api/query-engine/populating/)
| `where`    | [`WhereParameter`](/cms/api/query-engine/filtering/)          | [Filters](/cms/api/query-engine/filtering/) to use    |

### Example

```js
const entry = await strapi.db.query('api::blog.article').delete({
  where: { id: 1 },
});
```


 This is the content for the doc docusaurus/docs/cms/api/rest.md 

 --- 
title: REST API reference
description: Interact with your Content-Types using the REST API endpoints Strapi generates for you.
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- documentId
- Documents
- plural API ID
- REST API
- singular API ID
---

# REST API reference

The REST API allows accessing the [content-types](/cms/backend-customization/models) through API endpoints. Strapi automatically creates [API endpoints](#endpoints) when a content-type is created. [API parameters](/cms/api/rest/parameters) can be used when querying API endpoints to refine the results.

This section of the documentation is for the REST API reference. We also have [guides](/cms/api/rest/guides/intro) available for specific use cases.

:::prerequisites
All content types are private by default and need to be either made public or queries need to be authenticated with the proper permissions. See the [Quick Start Guide](/cms/quick-start#step-4-set-roles--permissions), the user guide for the [Users & Permissions feature](/cms/features/users-permissions#roles), and [API tokens configuration documentation](/cms/features/api-tokens) for more details.
:::

:::note
By default, the REST API responses only include top-level fields and does not populate any relations, media fields, components, or dynamic zones. Use the [`populate` parameter](/cms/api/rest/populate-select) to populate specific fields. Ensure that the find permission is given to the field(s) for the relation(s) you populate.
:::

:::strapi Strapi Client
The [Strapi Client](/cms/api/client) library simplifies interactions with your Strapi back end, providing a way to fetch, create, update, and delete content.
:::

## Endpoints

For each Content-Type, the following endpoints are automatically generated:

<details>

<summary>Plural API ID vs. Singular API ID:</summary>

In the following tables:

- `:singularApiId` refers to the value of the "API ID (Singular)" field of the content-type,
- and `:pluralApiId` refers to the value of the "API ID (Plural)" field of the content-type.

These values are defined when creating a content-type in the Content-Type Builder, and can be found while editing a content-type in the admin panel (see [User Guide](/cms/features/content-type-builder#creating-content-types)). For instance, by default, for an "Article" content-type:

- `:singularApiId` will be `article`
- `:pluralApiId` will be `articles`

<ThemedImage
alt="Screenshot of the Content-Type Builder to retrieve singular and plural API IDs"
sources={{
  light: '/img/assets/rest-api/plural-api-id.png',
  dark: '/img/assets/rest-api/plural-api-id_DARK.png'
}}
/>

</details>

<Tabs groupId="collection-single">

<TabItem value="collection" label="Collection type">

| Method   | URL                             | Description                           |
| -------- | ------------------------------- | ------------------------------------- |
| `GET`    | `/api/:pluralApiId`             | [Get a list of document](#get-all) |
| `POST`   | `/api/:pluralApiId`             | [Create a document](#create)   |
| `GET`    | `/api/:pluralApiId/:documentId` | [Get a document](#get)         |
| `PUT`    | `/api/:pluralApiId/:documentId` | [Update a document](#update)   |
| `DELETE` | `/api/:pluralApiId/:documentId` | [Delete a document](#delete)   |

</TabItem>

<TabItem value="single" label="Single type">

| Method   | URL                   | Description                                |
| -------- | --------------------- | ------------------------------------------ |
| `GET`    | `/api/:singularApiId` | [Get a document](#get)              |
| `PUT`    | `/api/:singularApiId` | [Update/Create a document](#update) |
| `DELETE` | `/api/:singularApiId` | [Delete a document](#delete)        |

</TabItem>

</Tabs>

<details>

<summary>Real-world examples of endpoints:</summary>

The following endpoint examples are taken from the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application.

<Tabs groupId="collection-single">

<TabItem value="collection" label="Collection type">

`Restaurant` **Content type**

| Method | URL                      | Description               |
| ------ | ------------------------ | ------------------------- |
| GET    | `/api/restaurants`       | Get a list of restaurants |
| POST   | `/api/restaurants`       | Create a restaurant       |
| GET    | `/api/restaurants/:documentId`   | Get a specific restaurant |
| DELETE | `/api/restaurants/:documentId`   | Delete a restaurant       |
| PUT    | `/api/restaurants/:documentId`   | Update a restaurant       |

</TabItem>

<TabItem value="single" label="Single type">

`Homepage` **Content type**

| Method | URL             | Description                        |
| ------ | --------------- | ---------------------------------- |
| GET    | `/api/homepage` | Get the homepage content           |
| PUT    | `/api/homepage` | Update/create the homepage content |
| DELETE | `/api/homepage` | Delete the homepage content        |

</TabItem>
</Tabs>
</details>

:::strapi Upload API
The Upload package (which powers the [Media Library feature](/cms/features/media-library)) has a specific API accessible through its [`/api/upload` endpoints](/cms/api/rest/upload).
:::

:::note
[Components](/cms/backend-customization/models#components-json) don't have API endpoints.
:::

## Requests

:::strapi Strapi 5 vs. Strapi v4
Strapi 5's Content API includes 2 major differences with Strapi v4:

- The response format has been flattened, which means attributes are no longer nested in a `data.attributes` object and are directly accessible at the first level of the `data` object (e.g., a content-type's "title" attribute is accessed with `data.title`).
- Strapi 5 now uses **documents** <DocumentDefinition/> and documents are accessed by their `documentId`.
:::

Requests return a response as an object which usually includes the following keys:

- `data`: the response data itself, which could be:
  - a single document, as an object with the following keys:
    - `id` (integer)
    - `documentId` (string), which is the unique identifier to use when querying a given document,
    - the attributes (each attribute's type depends on the attribute, see [models attributes](/cms/backend-customization/models#model-attributes) documentation for details)
    - `meta` (object)
  - a list of documents, as an array of objects
  - a custom response

- `meta` (object): information about pagination, publication state, available locales, etc.

- `error` (object, _optional_): information about any [error](/cms/error-handling) thrown by the request

:::note
Some plugins (including Users & Permissions and Upload) may not follow this response format.
:::

### Get documents {#get-all}

Returns documents matching the query filters (see [API parameters](/cms/api/rest/parameters) documentation).

:::tip Tip: Strapi 5 vs. Strapi 4
In Strapi 5 the response format has been flattened, and attributes are directly accessible from the `data` object instead of being nested in `data.attributes`.

You can pass an optional header while you're migrating to Strapi 5 (see the [related breaking change](/cms/migration/v4-to-v5/breaking-changes/new-response-format)).
:::

<ApiCall>

<Request>

`GET http://localhost:1337/api/restaurants`

</Request>

<Response>

```json
{
  "data": [
    {
      "id": 2,
      "documentId": "hgv1vny5cebq2l3czil1rpb3",
      "Name": "BMK Paris Bamako",
      "Description": null,
      "createdAt": "2024-03-06T13:42:05.098Z",
      "updatedAt": "2024-03-06T13:42:05.098Z",
      "publishedAt": "2024-03-06T13:42:05.103Z",
      "locale": "en"
    },
    {
      "id": 4,
      "documentId": "znrlzntu9ei5onjvwfaalu2v",
      "Name": "Biscotte Restaurant",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers."
            }
          ]
        }
      ],
      "createdAt": "2024-03-06T13:43:30.172Z",
      "updatedAt": "2024-03-06T13:43:30.172Z",
      "publishedAt": "2024-03-06T13:43:30.175Z",
      "locale": "en"
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 2
    }
  }
}
```

</Response>

</ApiCall>

### Get a document {#get}

Returns a document by `documentId`.

:::strapi Strapi 5 vs. Strapi v4
In Strapi 5, a specific document is reached by its `documentId`.
:::

<ApiCall>

<Request title="Example request">

`GET http://localhost:1337/api/restaurants/j964065dnjrdr4u89weh79xl`

</Request>

<Response title="Example response">

```json
{
  "data": {
    "id": 6,
    "documentId": "znrlzntu9ei5onjvwfaalu2v",
    "Name": "Biscotte Restaurant",
    "Description": [
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine bassics, such as 4 Formaggi or Calzone, and our original creations such as Do Luigi or Nduja."
          }
        ]
      }
    ],
    "createdAt": "2024-02-27T10:19:04.953Z",
    "updatedAt": "2024-03-05T15:52:05.591Z",
    "publishedAt": "2024-03-05T15:52:05.600Z",
    "locale": "en"
  },
  "meta": {}
}

```

</Response>

</ApiCall>

### Create a document {#create}

Creates a document and returns its value.

If the [Internationalization (i18n) plugin](/cms/features/internationalization) is installed, it's possible to use POST requests to the REST API to [create localized documents](/cms/api/rest/locale#rest-delete).

:::note
While creating a document, you can define its relations and their order (see [Managing relations through the REST API](/cms/api/rest/relations.md) for more details).
:::

<ApiCall>

<Request title="Example request">

`POST http://localhost:1337/api/restaurants`

```json
{ 
  "data": {
    "Name": "Restaurant D",
    "Description": [ // uses the "Rich text (blocks)" field type
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "A very short description goes here."
          }
        ]
      }
    ]
  }
}
```

</Request>

<Response title="Example response">

```json
{
  "data": {
    "documentId": "bw64dnu97i56nq85106yt4du",
    "Name": "Restaurant D",
    "Description": [
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "A very short description goes here."
          }
        ]
      }
    ],
    "createdAt": "2024-03-05T16:44:47.689Z",
    "updatedAt": "2024-03-05T16:44:47.689Z",
    "publishedAt": "2024-03-05T16:44:47.687Z",
    "locale": "en"
  },
  "meta": {}
}
```

</Response>

</ApiCall>

### Update a document {#update}

Partially updates a document by `id` and returns its value.

Send a `null` value to clear fields.

:::note NOTES
* Even with the [Internationalization (i18n) plugin](/cms/features/internationalization) installed, it's currently not possible to [update the locale of a document](/cms/api/rest/locale#rest-update).
* While updating a document, you can define its relations and their order (see [Managing relations through the REST API](/cms/api/rest/relations) for more details).
:::

<ApiCall>

<Request title="Example request">

`PUT http://localhost:1337/api/restaurants/hgv1vny5cebq2l3czil1rpb3`

```json
{ 
  "data": {
    "Name": "BMK Paris Bamako", // we didn't change this field but still need to include it
    "Description": [ // uses the "Rich text (blocks)" field type
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "A very short description goes here."
          }
        ]
      }
    ]
  }
}
```

</Request>

<Response title="Example response">

```json
{
  "data": {
    "id": 9,
    "documentId": "hgv1vny5cebq2l3czil1rpb3",
    "Name": "BMK Paris Bamako",
    "Description": [
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "A very short description goes here."
          }
        ]
      }
    ],
    "createdAt": "2024-03-06T13:42:05.098Z",
    "updatedAt": "2024-03-06T14:16:56.883Z",
    "publishedAt": "2024-03-06T14:16:56.895Z",
    "locale": "en"
  },
  "meta": {}
}
```

</Response>

</ApiCall>

### Delete a document {#delete}

Deletes a document.

`DELETE` requests only send a 204 HTTP status code on success and do not return any data in the response body.

<ApiCall>

<Request title="Example request">

`DELETE http://localhost:1337/api/restaurants/bw64dnu97i56nq85106yt4du`

</Request>

</ApiCall>


 This is the content for the doc docusaurus/docs/cms/api/rest/filters.md 

 ---
title: Filters
description: Use Strapi's REST API to filter the results of your requests.
sidebarDepth: 3
sidebar_label:  Filters
displayed_sidebar: cmsSidebar
tags:
- API
- complex filtering
- Content API
- deep filtering
- filters
- find
- interactive query builder
- locale
- REST API
- qs library
---

import QsIntroFull from '/docs/snippets/qs-intro-full.md'
import QsForQueryBody from '/docs/snippets/qs-for-query-body.md'
import QsForQueryTitle from '/docs/snippets/qs-for-query-title.md'
import DeepFilteringBlogLink from '/docs/snippets/deep-filtering-blog.md'

# REST API: Filters

The [REST API](/cms/api/rest) offers the ability to filter results found with its ["Get entries"](/cms/api/rest#get-all) method.<br/>
Using optional Strapi features can provide some more filters:

- If the [Internationalization (i18n) plugin](/cms/features/internationalization) is enabled on a content-type, it's possible to filter by locale.
- If the [Draft & Publish](/cms/features/draft-and-publish) is enabled, it's possible to filter based on a `published` (default) or `draft` status.

:::tip
<QsIntroFull />
:::

Queries can accept a `filters` parameter with the following syntax:

`GET /api/:pluralApiId?filters[field][operator]=value`

The following operators are available:

| Operator        | Description                              |
| --------------- | ---------------------------------------- |
| `$eq`           | Equal                                    |
| `$eqi`          | Equal (case-insensitive)                 |
| `$ne`           | Not equal                                |
| `$nei`          | Not equal (case-insensitive)             |
| `$lt`           | Less than                                |
| `$lte`          | Less than or equal to                    |
| `$gt`           | Greater than                             |
| `$gte`          | Greater than or equal to                 |
| `$in`           | Included in an array                     |
| `$notIn`        | Not included in an array                 |
| `$contains`     | Contains                                 |
| `$notContains`  | Does not contain                         |
| `$containsi`    | Contains (case-insensitive)              |
| `$notContainsi` | Does not contain (case-insensitive)      |
| `$null`         | Is null                                  |
| `$notNull`      | Is not null                              |
| `$between`      | Is between                               |
| `$startsWith`   | Starts with                              |
| `$startsWithi`  | Starts with (case-insensitive)           |
| `$endsWith`     | Ends with                                |
| `$endsWithi`    | Ends with (case-insensitive)             |
| `$or`           | Joins the filters in an "or" expression  |
| `$and`          | Joins the filters in an "and" expression |
| `$not`          | Joins the filters in an "not" expression |

:::caution
By default, the filters can only be used from `find` endpoints generated by the Content-type Builder and the CLI.
:::

## Example: Find users having 'John' as a first name

You can use the `$eq` filter operator to find an exact match.

<br />

<ApiCall>
<Request title="Find users having 'John' as first name">

`GET /api/users?filters[username][$eq]=John`

</Request>

<details>
<summary>JavaScript query (built with the qs library):</summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify({
  filters: {
    username: {
      $eq: 'John',
    },
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/users?${query}`);
```

</details>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 1,
      "documentId": "znrlzntu9ei5onjvwfaalu2v",
      "username": "John",
      "email": "john@test.com",
      "provider": "local",
      "confirmed": true,
      "blocked": false,
      "createdAt": "2021-12-03T20:08:17.740Z",
      "updatedAt": "2021-12-03T20:08:17.740Z"
    }
  ],
  "meta": {
  "pagination": {
    "page": 1,
    "pageSize": 25,
    "pageCount": 1,
    "total": 1
  }
}
```

</Response>
</ApiCall>

## Example: Find multiple restaurants with ids 3, 6,8

You can use the `$in` filter operator with an array of values to find multiple exact values.

<br />

<ApiCall>
<Request title="Find multiple restaurants with ids 3, 6, 8">

`GET /api/restaurants?filters[id][$in][0]=6&filters[id][$in][1]=8`

</Request>

<details>
<summary>JavaScript query (built with the qs library):</summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify({
  filters: {
    id: {
      $in: [3, 6, 8],
    },
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/restaurants?${query}`);
```

</details>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 6,
      "documentId": "ethwxjxtvuxl89jq720e38uk",
      "name": "test6",
      // ...
    },
    {
      "id": 8,
      "documentId": "cf07g1dbusqr8mzmlbqvlegx",
      "name": "test8",
      // ...
    },
  ],
  "meta": {
    // ...
  }
}
```

</Response>
</ApiCall>

## Complex filtering

Complex filtering is combining multiple filters using advanced methods such as combining `$and` & `$or`. This allows for more flexibility to request exactly the data needed.

<br />
<ApiCall>
<Request title="Find books with 2 possible dates and a specific author">

`GET /api/books?filters[$or][0][date][$eq]=2020-01-01&filters[$or][1][date][$eq]=2020-01-02&filters[author][name][$eq]=Kai%20doe`

</Request>

<details>
<summary>JavaScript query (built with the qs library):</summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify({
  filters: {
    $or: [
      {
        date: {
          $eq: '2020-01-01',
        },
      },
      {
        date: {
          $eq: '2020-01-02',
        },
      },
    ],
    author: {
      name: {
        $eq: 'Kai doe',
      },
    },
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/books?${query}`);
```

</details>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 1,
      "documentId": "rxngxzclq0zdaqtvz67hj38d",
      "name": "test1",
      "date": "2020-01-01",
      // ...
    },
    {
      "id": 2,
      "documentId": "kjkhff4e269a50b4vi16stst",
      "name": "test2",
      "date": "2020-01-02",
      // ...
    }
  ],
  "meta": {
    // ...
  }
}
```

</Response>
</ApiCall>

## Deep filtering

Deep filtering is filtering on a relation's fields.

:::note
- Relations, media fields, components, and dynamic zones are not populated by default. Use the `populate` parameter to populate these content structures (see [`populate` documentation](/cms/api/rest/populate-select#population))
- You can filter what you populate, you can also filter nested relations, but you can't use filters for polymorphic content structures (such as media fields and dynamic zones).
:::

:::caution
Querying your API with deep filters may cause performance issues.  If one of your deep filtering queries is too slow, we recommend building a custom route with an optimized version of the query.
:::

<DeepFilteringBlogLink />

<ApiCall>
<Request title="Find restaurants owned by a chef who belongs to a 5-star restaurant">

`GET /api/restaurants?filters[chef][restaurants][stars][$eq]=5`

</Request>

<details>
<summary>JavaScript query (built with the qs library):</summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify({
  filters: {
    chef: {
      restaurants: {
        stars: {
          $eq: 5,
        },
      },
    },
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/restaurants?${query}`);
```

</details>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 1,
      "documentId": "cvsz61qg33rtyv1qljb1nrtg",
      "name": "GORDON RAMSAY STEAK",
      "stars": 5
      // ...
    },
    {
      "id": 2,
      "documentId": "uh17h7ibw0g8thit6ivi71d8",
      "name": "GORDON RAMSAY BURGER",
      "stars": 5
      // ...
    }
  ],
  "meta": {
    // ...
  }
}
```

</Response>
</ApiCall>


 This is the content for the doc docusaurus/docs/cms/api/rest/guides/intro.md 

 ---
title: REST API Guides
description: Deep dive into some specific REST API topics using guides that extensively explain some use cases or give step-by-step instructions.
displayed_sidebar: cmsSidebar
sidebar_label: Guides
pagination_prev: cms/api/rest
pagination_next: cms/api/client
tags:
- API
- Content API
- guides
- REST API
- REST API guides

---

# REST API Guides

The [REST API reference](/cms/api/rest) documentation is meant to provide a quick reference for all the endpoints and parameters available.

## Guides

The following guides, officially maintained by the Strapi Documentation team, cover dedicated topics and provide detailed explanations (guides indicated with üß†) or step-by-step instructions (guides indicated with üõ†Ô∏è) for some use cases:

<CustomDocCard emoji="üß†" title="Understanding populate" description="Learn what populating means and how you can use the populate parameter in your REST API queries to add additional fields to your responses." link="/cms/api/rest/guides/understanding-populate" />
<CustomDocCard emoji="üõ†Ô∏è" title="How to populate creator fields" description="Read step-by-step instructions on how to build a custom controller that leverages the populate parameter to add 'createdBy' and 'updatedBy' data to queries responses" link="/cms/api/rest/guides/populate-creator-fields" />

## Additional resources

:::strapi Want to help other users?
Some of the additional resources listed in this section have been created for Strapi v4 and might not fully work with Strapi 5. If you want to update one of the following articles for Strapi 5, feel free to <ExternalLink to="https://strapi.io/write-for-the-community" text="propose an article"/> for the Write for the Community program.
:::

Additional tutorials and guides can be found in the following blog posts:

<CustomDocCard emoji="‚ûï" title="Authenticating requests with the REST API" description="Learn how to authenticate your REST API queries with JSON Web Tokens and API tokens." link="https://strapi.io/blog/guide-on-authenticating-requests-with-the-rest-api" />

<CustomDocCard emoji="‚ûï" title="Using Fetch with Strapi's Content API" description="Explore how to use the fetch() method of the Fetch API to interact with Strapi's Content API." link="https://strapi.io/blog/mastering-api-requests-using-fetch-with-strapi-content-api" />

<CustomDocCard emoji="‚ûï" title="Requesting Strapi's REST API behind a Content Delivery Network (CDN)" description="Learn how to overcome network latency issues when requesting large numbers of media assets by leveraging the usage of a CDN with Strapi's REST API." link="https://strapi.io/blog/request-strapi-s-rest-api-behind-a-content-delivery-network-cdn" />




 This is the content for the doc docusaurus/docs/cms/api/rest/guides/populate-creator-fields.md 

 ---
title: How to populate creator fields
description: Learn how to populate creator fields such as createdBy and updatedBy by creating a custom controller that leverages the populate parameter.
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- createdBy
- guides
- populate
- populateCreatorFields
- REST API
- REST API guides
- updatedBy
---

# üõ†Ô∏è How to populate creator fields such as `createdBy` and `updatedBy`

The creator fields `createdBy` and `updatedBy` are removed from the [REST API](/cms/api/rest) response by default. These 2 fields can be returned in the REST API by activating the `populateCreatorFields` parameter at the content-type level.

:::note

The `populateCreatorFields` property is not available to the GraphQL API.

Only the following fields will be populated: `id`, `firstname`, `lastname`, `username`, `preferedLanguage`, `createdAt`, and `updatedAt`.
:::

To add `createdBy` and `updatedBy` to the API response:

1. Open the content-type `schema.json` file.
2. Add `"populateCreatorFields": true` to the `options` object:

  ```json
  "options": {
      "draftAndPublish": true,
      "populateCreatorFields": true
    },
  ```

3. Save the `schema.json`.
4. Create a new route middleware either using the [generate CLI](/cms/cli.md) or by manually creating a new file in `./src/api/[content-type-name]/middlewares/[your-middleware-name].js`
5. Add the following piece of code, you can modify this example to suit your needs:

  ```js title="./src/api/test/middlewares/defaultTestPopulate.js"
  "use strict";

  module.exports = (config, { strapi }) => {
    return async (ctx, next) => {
      if (!ctx.query.populate) {
        ctx.query.populate = ["createdBy", "updatedBy"];
      }

      await next();
    };
  };
  ```

6. Modify your default route factory to enable this middleware on the specific routes you want this population to apply to and replacing the content-type/middleware name with yours:

  ```js title="./src/api/test/routes/test.js"
  "use strict";

  const { createCoreRouter } = require("@strapi/strapi").factories;

  module.exports = createCoreRouter("api::test.test", {
    config: {
      find: {
        middlewares: ["api::test.default-test-populate"],
      },
      findOne: {
        middlewares: ["api::test.default-test-populate"],
      },
    },
  });
  ```

REST API requests with no `populate` parameter will include the `createdBy` or `updatedBy` fields by default.


 This is the content for the doc docusaurus/docs/cms/api/rest/guides/understanding-populate.md 

 ---
title: Understanding populate
description: Learn what populating means and how you can use the populate parameter in your REST API queries to add additional fields to your responses.
displayed_sidebar: cmsSidebar
toc_max_heading_level: 6
tags:
- API
- components
- Content API
- dynamic zones
- guides
- populate
- REST API
- REST API guides
---

import QsIntroFull from '/docs/snippets/qs-intro-full.md'
import QsForQueryTitle from '/docs/snippets/qs-for-query-title.md'
import QsForQueryBody from '/docs/snippets/qs-for-query-body.md'
import NotV5 from '/docs/snippets/_not-updated-to-v5.md'
import ScreenshotNumberReference from '/src/components/ScreenshotNumberReference.jsx';

# üß† Understanding the `populate` parameter for the REST API

<NotV5/>

:::note Note: Example responses might differ from your experience

The content of this page might not be fully up-to-date with Strapi 5 yet:

- All the conceptual information and explanations are correct and up-to-date.
- However, in the examples, the response content might be slightly different.

Examples will be fully up-to-date _after_ the Strapi 5.0.0 (stable version) release and as soon as the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application is upgraded to Strapi 5.

However, having slightly different response examples should not prevent you from grasping the essential concepts taught in this page.
:::

When querying content-types with Strapi's [REST API](/cms/api/rest), by default, responses only include top-level fields and do not include any relations, media fields, components, or dynamic zones.

Populating in the context of the Strapi REST API means including additional content with your response by returning more fields than the ones returned by default. You use the [`populate` parameter](/cms/api/rest/populate-select#population) to achieve this.

:::info
Throughout this guide, examples are built with real data queried from the server included with the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application. To test examples by yourself, setup FoodAdvisor, start the server in the `/api/` folder, and ensure that proper `find` permissions are given for the queried content-types before sending your queries.
:::

The present guide will cover detailed explanations for the following use cases:

- populate [all fields and relations, 1 level deep](#populate-all-relations-and-fields-1-level-deep),
- populate [some fields and relations, 1 level deep](#populate-1-level-deep-for-specific-relations),
- populate [some fields and relations, several levels deep](#populate-several-levels-deep-for-specific-relations),
- populate [components](#populate-components),
- populate [dynamic zones](#populate-dynamic-zones).

:::info
Populating several levels deep is often called "deep populate".
:::

:::strapi Advanced use case: Populating creator fields
In addition to the various ways of using the `populate` parameter in your queries, you can also build a custom controller as a workaround to populate creator fields (e.g., `createdBy` and `updatedBy`). This is explained in the dedicated [How to populate creator fields](/cms/api/rest/guides/populate-creator-fields) guide.
:::

## Populate all relations and fields, 1 level deep

You can return all relations, media fields, components and dynamic zones with a single query. For relations, this will only work 1 level deep, to prevent performance issues and long response times.

To populate everything 1 level deep, add the `populate=*` parameter to your query.

The following diagram compares data returned by the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application with and without populating everything 1 level deep:

![Diagram with populate use cases with FoodAdvisor data ](/img/assets/rest-api/populate-foodadvisor-diagram1.png)

Let's compare and explain what happens with and without this query parameter:

### Example: Without `populate`

Without the populate parameter, a `GET` request to `/api/articles` only returns the default attributes and does not return any media fields, relations, components or dynamic zones.

The following example is the full response for all 4 entries from the `articles` content-types.

Notice how the response only includes the `title`, `slug`, `createdAt`, `updatedAt`, `publishedAt`, and `locale` fields, and the field content of the article as handled by the CKEditor plugin (`ckeditor_content`, truncated for brevity):

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles`

</Request>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 1,
      "documentId": "t3q2i3v1z2j7o8p6d0o4xxg",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": // truncated content
    },
    {
      "id": 2,
      "documentId": "k2r5l0i9g3u2j3b4p7f0sed",
      "title": "What are chinese hamburgers and why aren't you eating them?",
      "slug": "what-are-chinese-hamburgers-and-why-aren-t-you-eating-them",
      "createdAt": "2021-11-11T13:33:19.948Z",
      "updatedAt": "2023-06-01T14:32:50.984Z",
      "publishedAt": "2022-09-22T12:36:48.312Z",
      "locale": "en",
      "ckeditor_content": // truncated content
    },
    {
      "id": 3,
      "documentId": "k6m6l9q0n6v9z2m3i0z5jah"
      "title": "7 Places worth visiting for the food alone",
      "slug": "7-places-worth-visiting-for-the-food-alone",
      "createdAt": "2021-11-12T13:33:19.948Z",
      "updatedAt": "2023-06-02T11:30:00.075Z",
      "publishedAt": "2023-06-02T11:30:00.075Z",
      "locale": "en",
      "ckeditor_content": // truncated content
    },
    {
      "id": 4,
      "documentId": "d5m4b6z6g5d9e3v1k9n5gbn",
      "title": "If you don't finish your plate in these countries, you might offend someone",
      "slug": "if-you-don-t-finish-your-plate-in-these-countries-you-might-offend-someone",
      "createdAt": "2021-11-15T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:59:35.148Z",
      "publishedAt": "2022-09-22T12:35:53.899Z",
      "locale": "en",
      "ckeditor_content": // truncated content
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall>

### Example: With `populate=*`

With the `populate=*` parameter, a `GET` request to `/api/articles` also returns all media fields, first-level relations, components and dynamic zones.

The following example is the full response for the first of all 4 entries from the `articles` content-types (the data from articles with ids 2, 3, and 4 is truncated for brevity).

Scroll down to see that the response size is much bigger than without populate. The response now includes additional fields (see highlighted lines) such as:
* the `image` media field (which stores all information about the article cover, including all its different formats), 
* the first-level fields of the `blocks` dynamic zone and the `seo` component,
* the `category` relation and its fields,
* and even some information about the articles translated in other languages, as shown by the `localizations` object.

:::tip
To populate deeply nested components, see the [populate components](#populate-components) section.
:::

<br />
<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles?populate=*`

</Request>

<Response title="Example response">

```json {13-122}
{
  "data": [
    {
      "id": 1,
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": // truncated content
      "image": {
        "data": {
            "id": 12,
            "documentId": "o5d4b0l4p8l4o4k5n1l3rxa",
            "name": "Basque dish",
            "alternativeText": "Basque dish",
            "caption": "Basque dish",
            "width": 758,
            "height": 506,
            "formats": {
              "thumbnail": {
                "name": "thumbnail_https://4d40-2a01-cb00-c8b-1800-7cbb-7da-ea9d-2011.ngrok.io/uploads/basque_cuisine_17fa4567e0.jpeg",
                "hash": "thumbnail_basque_cuisine_17fa4567e0_f033424240",
                "ext": ".jpeg",
                "mime": "image/jpeg",
                "width": 234,
                "height": 156,
                "size": 11.31,
                "path": null,
                "url": "/uploads/thumbnail_basque_cuisine_17fa4567e0_f033424240.jpeg"
              },
              "medium": {
                "name": "medium_https://4d40-2a01-cb00-c8b-1800-7cbb-7da-ea9d-2011.ngrok.io/uploads/basque_cuisine_17fa4567e0.jpeg",
                "hash": "medium_basque_cuisine_17fa4567e0_f033424240",
                "ext": ".jpeg",
                "mime": "image/jpeg",
                "width": 750,
                "height": 501,
                "size": 82.09,
                "path": null,
                "url": "/uploads/medium_basque_cuisine_17fa4567e0_f033424240.jpeg"
              },
              "small": {
                "name": "small_https://4d40-2a01-cb00-c8b-1800-7cbb-7da-ea9d-2011.ngrok.io/uploads/basque_cuisine_17fa4567e0.jpeg",
                "hash": "small_basque_cuisine_17fa4567e0_f033424240",
                "ext": ".jpeg",
                "mime": "image/jpeg",
                "width": 500,
                "height": 334,
                "size": 41.03,
                "path": null,
                "url": "/uploads/small_basque_cuisine_17fa4567e0_f033424240.jpeg"
              }
            },
            "hash": "basque_cuisine_17fa4567e0_f033424240",
            "ext": ".jpeg",
            "mime": "image/jpeg",
            "size": 58.209999999999994,
            "url": "/uploads/basque_cuisine_17fa4567e0_f033424240.jpeg",
            "previewUrl": null,
            "provider": "local",
            "provider_metadata": null,
            "createdAt": "2021-11-23T14:05:33.460Z",
            "updatedAt": "2021-11-23T14:05:46.084Z"
            }
          }
        },
        "blocks": [
          {
            "id": 2,
            "__component": "blocks.related-articles"
          },
          {
            "id": 2,
            "documentId": "w8r5k8o8v0t9l9e0d7y6vco",
            "__component": "blocks.cta-command-line",
            "theme": "primary",
            "title": "Want to give a try to a Strapi starter?",
            "text": "‚ù§Ô∏è",
            "commandLine": "git clone https://github.com/strapi/nextjs-corporate-starter.git"
          }
        ],
        "seo": {
          "id": 1,
          "documentId": "h7c8d0u3i3q5v1j3j3r4cxf",
          "metaTitle": "Articles - FoodAdvisor",
          "metaDescription": "Discover our articles about food, restaurants, bars and more! - FoodAdvisor",
          "keywords": "food",
          "metaRobots": null,
          "structuredData": null,
          "metaViewport": null,
          "canonicalURL": null
        },
        "category": {
          "data": {
            "id": 4,
            "documentId": "t1t3d9k6n1k5a6r8l7f8rox",
            "name": "European",
            "slug": "european",
            "createdAt": "2021-11-09T13:33:20.123Z",
            "updatedAt": "2021-11-09T13:33:20.123Z"
          }
        },
        "localizations": {
          "data": [
            {
              "id": 10,
              "documentId": "h7c8d0u3i3q5v1j3j3r4cxf",
              "title": "Voici pourquoi il faut essayer la cuisine basque, selon un chef basque",
              "slug": "voici-pourquoi-il-faut-essayer-la-cuisine-basque-selon-un-chef-basque",
              "createdAt": "2021-11-18T13:33:19.948Z",
              "updatedAt": "2023-06-02T10:57:19.606Z",
              "publishedAt": "2022-09-22T13:00:00.069Z",
              "locale": "fr-FR",
              "ckeditor_content": // truncated content
            }
          ]
        }
      }
    },
    {
      "id": 2,
      // truncated content
    },
    {
      "id": 3,
      // truncated content
    },
    {
      "id": 4,
      // truncated content
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall>

## Populate specific relations and fields

You can also populate specific relations and fields, by explicitly defining what to populate. This requires that you know the name of fields and relations to populate.

Relations and fields populated this way can be 1 or several levels deep. The following diagram compares data returned by the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application when you populate [1 level deep](#populate-1-level-deep-for-specific-relations) vs. [2 levels deep](#populate-several-levels-deep-for-specific-relations):

![Diagram with populate use cases with FoodAdvisor data ](/img/assets/rest-api/populate-foodadvisor-diagram2.png)

<SubtleCallout emoji="ü§ì" title="Different populating strategies for similar results">
Depending on your content structure, you might get similar data presented in different ways with different queries. For instance, the FoodAdvisor example application includes the article, category, and restaurant content-types that are all in relation to each other in different ways. This means that if you want to get data about the 3 content-types in a single GET request, you have 2 options:

- query articles and populate categories, plus populate the nested relation between categories and restaurants ([2 levels deep population](#populate-several-levels-deep-for-specific-relations))
- query categories and populate both articles and restaurants because categories have a 1st level relation with the 2 other content-types ([1 level deep](#populate-1-level-deep-for-specific-relations))

The 2 different strategies are illustrated in the following diagram:

![Diagram with populate use cases with FoodAdvisor data ](/img/assets/rest-api/populate-foodadvisor-diagram3.png)

</SubtleCallout>

<details>
<summary>Populate as an object vs. populate as an array: Using the interactive query builder</summary>

The syntax for advanced query parameters can be quite complex to build manually. We recommend you use our [interactive query builder](/cms/api/rest/interactive-query-builder) tool to generate the URL.

Using this tool, you will write clean and readable requests in a familiar (JavaScript) format, which should help you understand the differences between different queries and different ways of populating. For instance, populating 2 levels deep implies using populate as an object, while populating several relations 1 level deep implies using populate as an array:

<Columns>
<ColumnLeft>

Populate as an object<br/>(to populate 1 relation several levels deep):

```json
{
  populate: {
    category: {
      populate: ['restaurants'],
    },
  },
}
```

</ColumnLeft>
<ColumnRight>

Populate as an array<br/>(to populate many relations 1 level deep)

```json
{
  populate: [ 
    'articles',
    'restaurants'
  ],
}

```

</ColumnRight>
</Columns>

</details>

### Populate 1 level deep for specific relations

You can populate specific relations 1 level deep by using the populate parameter as an array.

Since the REST API uses the <ExternalLink to="https://christiangiacomi.com/posts/rest-design-principles/#lhs-brackets" text="LHS bracket notation"/> (i.e., with square brackets `[]`), the parameter syntaxes to populate 1 level deep would look like the following:

| How many relations to populate | Syntax example    |
|-------------------------------|--------------------|
| Only 1 relation |  `populate[0]=a-relation-name`   |
| Several relations | `populate[0]=relation-name&populate[1]=another-relation-name&populate[2]=yet-another-relation-name` |

Let's compare and explain what happens with and without populating relations 1 level deep when sending queries to the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application:

#### Example: Without `populate`

Without the populate parameter, a `GET` request to `/api/articles` only returns the default attributes.

The following example is the full response for all 4 entries from the `articles` content-type.

Notice that the response does not include any media fields, relations, components or dynamic zones:

<br/>

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles`

</Request>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 1,
      "documentId": "x2m0d7d9o4m2z3u2r2l9yes",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
    },
    {
      "id": 2,
      "documentId": "k6m6l9q0n6v9z2m3i0z5jah",
      "title": "What are chinese hamburgers and why aren't you eating them?",
      "slug": "what-are-chinese-hamburgers-and-why-aren-t-you-eating-them",
      "createdAt": "2021-11-11T13:33:19.948Z",
      "updatedAt": "2023-06-01T14:32:50.984Z",
      "publishedAt": "2022-09-22T12:36:48.312Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
    },
    {
      "id": 3,
      "documentId": "o5d4b0l4p8l4o4k5n1l3rxa",
      "title": "7 Places worth visiting for the food alone",
      "slug": "7-places-worth-visiting-for-the-food-alone",
      "createdAt": "2021-11-12T13:33:19.948Z",
      "updatedAt": "2023-06-02T11:30:00.075Z",
      "publishedAt": "2023-06-02T11:30:00.075Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
    },
    {
      "id": 4,
      "documentId": "t3q2i3v1z2j7o8p6d0o4xxg",
      "title": "If you don't finish your plate in these countries, you might offend someone",
      "slug": "if-you-don-t-finish-your-plate-in-these-countries-you-might-offend-someone",
      "createdAt": "2021-11-15T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:59:35.148Z",
      "publishedAt": "2022-09-22T12:35:53.899Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
}
```

</Response>
</ApiCall>

#### Example: With `populate[0]=category`

With `populate[0]=category` added to the request, we explicitly ask to include some information about `category`, which is a relation field that links the `articles` and the `categories` content-types.

The following example is the full response for all 4 entries from the `articles` content-type.

Notice that the response now includes additional data with the `category` field for each article (see highlighted lines):

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles?populate[0]=category`

</Request>

<Response title="Example response">

```json {13-23,36-46,59-69,82-92}
{
  "data": [
    {
      "id": 1,
      "documentId": "w8r5k8o8v0t9l9e0d7y6vco",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "category": {
        "data": {
          "id": 4,
          "documentId": "u6x8u7o7j5q1l5y3t8j9yxi",
          "name": "European",
          "slug": "european",
          "createdAt": "2021-11-09T13:33:20.123Z",
          "updatedAt": "2021-11-09T13:33:20.123Z"
        }
      }
    },
    {
      "id": 2,
      "documentId": "k6m6l9q0n6v9z2m3i0z5jah",
      "title": "What are chinese hamburgers and why aren't you eating them?",
      "slug": "what-are-chinese-hamburgers-and-why-aren-t-you-eating-them",
      "createdAt": "2021-11-11T13:33:19.948Z",
      "updatedAt": "2023-06-01T14:32:50.984Z",
      "publishedAt": "2022-09-22T12:36:48.312Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "category": {
        "data": {
          "id": 13,
          "documentId": "x2m0d7d9o4m2z3u2r2l9yes",
          "name": "Chinese",
          "slug": "chinese",
          "createdAt": "2021-11-09T13:33:20.123Z",
          "updatedAt": "2021-11-09T13:33:20.123Z"
        }
      }
    },
    {
      "id": 3,
      "title": "7 Places worth visiting for the food alone",
      "slug": "7-places-worth-visiting-for-the-food-alone",
      "createdAt": "2021-11-12T13:33:19.948Z",
      "updatedAt": "2023-06-02T11:30:00.075Z",
      "publishedAt": "2023-06-02T11:30:00.075Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "category": {
        "data": {
          "id": 3,
          "documentId": "h7c8d0u3i3q5v1j3j3r4cxf",
          "name": "International",
          "slug": "international",
          "createdAt": "2021-11-09T13:33:20.123Z",
          "updatedAt": "2021-11-09T13:33:20.123Z"
        }
      }
    },
    {
      "id": 4,
      "documentId": "t1t3d9k6n1k5a6r8l7f8rox",
      "title": "If you don't finish your plate in these countries, you might offend someone",
      "slug": "if-you-don-t-finish-your-plate-in-these-countries-you-might-offend-someone",
      "createdAt": "2021-11-15T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:59:35.148Z",
      "publishedAt": "2022-09-22T12:35:53.899Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "category": {
        "data": {
          "id": 3,
          "documentId": "u6x8u7o7j5q1l5y3t8j9yxi",
          "name": "International",
          "slug": "international",
          "createdAt": "2021-11-09T13:33:20.123Z",
          "updatedAt": "2021-11-09T13:33:20.123Z"
        }
      }
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall>

### Populate several levels deep for specific relations

You can also populate specific relations several levels deep. For instance, when you populate a relation which itself populates another relation, you are populating 2 levels deep. Populating 2 levels deep is the example covered in this guide.

:::caution
There is no limit on the number of levels that can be populated. However, the deeper the populates, the more the request will take time to be performed.
:::

Since the REST API uses the <ExternalLink to="https://christiangiacomi.com/posts/rest-design-principles/#lhs-brackets" text="LHS bracket notation"/>, (i.e., with square brackets `[]`), for instance if you want to populate a relation nested inside another relation, the parameter syntax would look like the following:

`populate[first-level-relation-to-populate][populate][0]=second-level-relation-to-populate`

:::tip
The syntax for advanced query parameters can be quite complex to build manually. We recommend you use our [interactive query builder](/cms/api/rest/interactive-query-builder) tool to generate the URL. For instance, the `/api/articles?populate[category][populate][0]=restaurants` URL used in the following examples has been generated by converting the following object using our tool:

```json
{
  populate: {
    category: {
      populate: ['restaurants'],
    },
  },
}
```

:::

The <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application includes various levels of relations between content-types. For instance:

- an `article` content-type includes a relation with the `category` content-type,
- but a `category` can also be assigned to any `restaurant` content-type.

With a single `GET` request to `/api/articles` and the appropriate populate parameters, you can return information about articles, restaurants, and categories simultaneously.

Let's compare and explain the responses returned with `populate[0]=category` (1 level deep) and `populate[category][populate][0]=restaurants` (2 levels deep) when sending queries to FoodAdvisor:

#### Example: With 1-level deep population

When we only populate 1 level deep, asking for the categories associated to articles, we can get the following example response (highlighted lines show the `category` relations field):

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles?populate[0]=category`

</Request>

<Response title="Example response">

```json {13-23,36-46,59-69,82-92}
{
  "data": [
    {
      "id": 1,
      "documentId": "9ih6hy1bnma3q3066kdwt3",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "category": {
        "data": {
          "id": 4,
          "name": "European",
          "slug": "european",
          "createdAt": "2021-11-09T13:33:20.123Z",
          "updatedAt": "2021-11-09T13:33:20.123Z"
        }
      }
    },
    {
      "id": 2,
      "documentId": "sen6qfgxcac13pwchf8xbu",
      "title": "What are chinese hamburgers and why aren't you eating them?",
      "slug": "what-are-chinese-hamburgers-and-why-aren-t-you-eating-them",
      "createdAt": "2021-11-11T13:33:19.948Z",
      "updatedAt": "2023-06-01T14:32:50.984Z",
      "publishedAt": "2022-09-22T12:36:48.312Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "category": {
        "data": {
          "id": 13,
          "documentId": "r3rhzcxd7gjx07vkq3pia5",
          "name": "Chinese",
          "slug": "chinese",
          "createdAt": "2021-11-09T13:33:20.123Z",
          "updatedAt": "2021-11-09T13:33:20.123Z"
        }
      }
    },
    {
      "id": 3,
      "documentId": "s9uu7rkukhfcsmj2e60b67",
      "title": "7 Places worth visiting for the food alone",
      "slug": "7-places-worth-visiting-for-the-food-alone",
      "createdAt": "2021-11-12T13:33:19.948Z",
      "updatedAt": "2023-06-02T11:30:00.075Z",
      "publishedAt": "2023-06-02T11:30:00.075Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "category": {
        "data": {
          "id": 3,
          "documentId": "4sevz15w6bdol6y4t8kblk",
          "name": "International",
          "slug": "international",
          "createdAt": "2021-11-09T13:33:20.123Z",
          "updatedAt": "2021-11-09T13:33:20.123Z"
        }
      }
    },
    {
      "id": 4,
      "documentId": "iy5ifm3xj8q0t8vlq6l23h",
      "title": "If you don't finish your plate in these countries, you might offend someone",
      "slug": "if-you-don-t-finish-your-plate-in-these-countries-you-might-offend-someone",
      "createdAt": "2021-11-15T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:59:35.148Z",
      "publishedAt": "2022-09-22T12:35:53.899Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "category": {
        "data": {
          "id": 3,
          "documentId": "0eor603u8qej933maphdv3",
          "name": "International",
          "slug": "international",
          "createdAt": "2021-11-09T13:33:20.123Z",
          "updatedAt": "2021-11-09T13:33:20.123Z"
        }
      }
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall>

#### Example: With 2-level deep population

When we populate 2 levels deep, asking for the categories associated to articles, but also for restaurants associated to these categories, we can get the following example response.

Notice that we now have the `restaurants` relation field included with the response inside the `category` relation (see highlighted lines):

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles?populate[category][populate][0]=restaurants`

</Request>

<Response title="Example response">

```json {13-56}
{{
  "data": [
    {
      "id": 1,
      "documentId": "iy5ifm3xj8q0t8vlq6l23h",
      "attributes": {
        "title": "Here's why you have to try basque cuisine, according to a basque chef",
        "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
        "createdAt": "2021-11-09T13:33:19.948Z",
        "updatedAt": "2023-06-02T10:57:19.584Z",
        "publishedAt": "2022-09-22T09:30:00.208Z",
        "locale": "en",
        "ckeditor_content": "‚Ä¶", // truncated content
        "category": {
          "data": {
            "id": 4,
            "name": "European",
            "slug": "european",
            "createdAt": "2021-11-09T13:33:20.123Z",
            "updatedAt": "2021-11-09T13:33:20.123Z",
            "restaurants": {
              "data": [
                {
                  "id": 1,
                  "documentId": "ozlqrdxpnjb7wtvf6lp74v",
                  "name": "Mint Lounge",
                  "slug": "mint-lounge",
                  "price": "p3",
                  "createdAt": "2021-11-09T14:07:47.125Z",
                  "updatedAt": "2021-11-23T16:41:30.504Z",
                  "publishedAt": "2021-11-23T16:41:30.501Z",
                  "locale": "en"
                },
                {
                  "id": 9,
                  // truncated content
                },
                {
                  "id": 10,
                  // truncated content
                },
                {
                  "id": 12,
                  // truncated content
                },
                {
                  "id": 21,
                  // truncated content
                },
                {
                  "id": 26,
                  // truncated content
                }
              ]
            }
          }
        }
      }
    },
    {
      "id": 2,
      // truncated content
    },
    {
      "id": 3,
      // truncated content
    },
    {
      "id": 4,
      // truncated content
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall>

### Populate components

Components and dynamic zones are not included in responses by default and you need to explicitly populate each dynamic zones, components, and their nested components.

Since the REST API uses the <ExternalLink to="https://christiangiacomi.com/posts/rest-design-principles/#lhs-brackets" text="LHS bracket notation"/>, (i.e., with square brackets `[]`), you need to pass all elements in a `populate` array. Nested fields can also be passed, and the parameter syntax could look like the following:

`populate[0]=a-first-field&populate[1]=a-second-field&populate[2]=a-third-field&populate[3]=a-third-field.a-nested-field&populate[4]=a-third-field.a-nested-component.a-nested-field-within-the-component`

:::tip
The syntax for advanced query parameters can be quite complex to build manually. We recommend you use our [interactive query builder](/cms/api/rest/interactive-query-builder) tool to generate the URL. For instance, the `/api/articles?populate[0]=seo&populate[1]=seo.metaSocial&populate[2]=seo.metaSocial.image` URL used in the following examples has been generated by converting the following object using our tool:

```json
{
  populate: [
    'seoData',
    'seoData.sharedImage',
    'seoData.sharedImage.media',
  ],
},
```

:::

The <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application includes various components and even components nested inside other components. For instance:

- an `article` content-type includes a `seo` component <ScreenshotNumberReference number="1" />,
- the `seo` component includes a nested, repeatable `metaSocial` component <ScreenshotNumberReference number="2" />,
- and the `metaSocial` component itself has several fields, including an `image` media field <ScreenshotNumberReference number="3" />.

![FoodAdvisor's SEO component structure in the Content-Type Builder](/img/assets/rest-api/ctb-article-components-structure.png)

By default, none of these fields or components are included in the response of a `GET` request to `/api/articles`. But with the appropriate populate parameters, you can return all of them in a single request.

Let's compare and explain the responses returned with `populate[0]=seo` (1st level component) and `populate[0]=seo&populate[1]=seo.metaSocial` (2nd level component nested within the 1st level component):

#### Example: Only 1st level component

When we only populate the `seo` component, we go only 1 level deep, and we can get the following example response. Highlighted lines show the `seo` component.

Notice there's no mention of the `metaSocial` component nested within the `seo` component:

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles?populate[0]=seo`

</Request>

<Response title="Example response">

```json {13-22}
{
  "data": [
    {
      "id": 1,
      "documentId": "md60m5cy3dula5g87x1uar",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "seo": {
        "id": 1,
        "documentId": "kqcwhq6hes25kt9ebj8x7j",
        "metaTitle": "Articles - FoodAdvisor",
        "metaDescription": "Discover our articles about food, restaurants, bars and more! - FoodAdvisor",
        "keywords": "food",
        "metaRobots": null,
        "structuredData": null,
        "metaViewport": null,
        "canonicalURL": null
      }
    },
    {
      "id": 2,
      // truncated content
    },
    {
      "id": 3,
      // truncated content
    },
    {
      "id": 4,
      // truncated content
    },
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall>

#### Example: 1st level and 2nd level component

When we populate 2 levels deep, asking both for the `seo` component and the `metaSocial` component nested inside `seo`, we can get the following example response.

Notice that we now have the `metaSocial` component-related data included with the response (see highlighted lines):

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles?populate[0]=seo&populate[1]=seo.metaSocial`

</Request>

<Response title="Example response">

```json {13,22-29}
{
  "data": [
    {
      "id": 1,
      "documentId": "c2imt19iywk27hl2ftph7s",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "seo": {
        "id": 1,
        "documentId": "e8cnux5ejxyqrejd5addfv",
        "metaTitle": "Articles - FoodAdvisor",
        "metaDescription": "Discover our articles about food, restaurants, bars and more! - FoodAdvisor",
        "keywords": "food",
        "metaRobots": null,
        "structuredData": null,
        "metaViewport": null,
        "canonicalURL": null,
        "metaSocial": [
          {
            "id": 1,
            "documentId": "ks7xsp9fewoi0qljcz9qa0",
            "socialNetwork": "Facebook",
            "title": "Browse our best articles about food and restaurants ",
            "description": "Discover our articles about food, restaurants, bars and more!"
          }
        ]
      }
    },
    {
      "id": 2,
      // truncated content
    },
    {
      "id": 3,
      // truncated content
    },
    {
      "id": 4,
      // truncated content
    },
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall>

### Populate dynamic zones

Dynamic zones are highly dynamic content structures by essence. To populate dynamic zones and their content, you need to explicitly define what to populate with the response.

<!-- ! not working in Strapi 5 -->
<!-- #### Shared population strategy

With the shared population strategy, you apply the same population to all the components of a dynamic zone.

For instance, in the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application:

- A `blocks` dynamic zone exists the `article` content-type <ScreenshotNumberReference number="1" />.
- The dynamic zone includes 3 different components: `relatedArticles` <ScreenshotNumberReference number="2" />, `faq` <ScreenshotNumberReference number="3" />, and `CtaCommandLine` <ScreenshotNumberReference number="4" />. All components have a different content structure containing various fields.

![FoodAdvisor's 'blocks' dynamic zone structure in the Content-Type Builder](/img/assets/rest-api/ctb-blocks-dynamic-zone-structure.png)

By default, none of these fields or components are included in the response of a `GET` request to `/api/articles`. But with the appropriate populate parameters, you can return all of them in a single request. And instead of explicitly defining all the field names to populate, you can choose to use the shared population strategy  to populate all fields of all components by passing `[populate=*]`.

:::tip
The syntax for advanced query parameters can be quite complex to build manually. We recommend you use our [interactive query builder](/cms/api/rest/interactive-query-builder) tool to generate the URL. For instance, the `/api/articles?populate[blocks][populate]=*` URL used in the following example has been generated by converting the following object using our tool:

```json
{
  populate: {
    blocks: { // asking to populate the blocks dynamic zone
      populate: '*' // populating all first-level fields in all components
    }
  },
}
```

:::

Let's compare and explain the responses returned with `populate[0]=blocks` (only populating the dynamic zone) and `populate[blocks][populate]=*` (populating the dynamic zone and applying a shared population strategy to all its components):

##### Example: Populating only the dynamic zone

When we only populate the `blocks` dynamic zone, we go only 1 level deep, and we can get the following example response. Highlighted lines show the `blocks` dynamic zone and the 2 components it includes:

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles?populate[0]=blocks`

</Request>

<Response title="Example response">

```json {13-26}
{
  "data": [
    {
      "id": 1,
      "documentId": "e8cnux5ejxyqrejd5addfv",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶" // truncated content
      "blocks": [
        {
          "id": 2,
          "documentId": "it9bbhcgc6mcfsqas7h1dp",
          "__component": "blocks.related-articles"
        },
        {
          "id": 2,
          "documentId": "ugagwkoce7uqb0k2yof4lz",
          "__component": "blocks.cta-command-line",
          "theme": "primary",
          "title": "Want to give a try to a Strapi starter?",
          "text": "‚ù§Ô∏è",
          "commandLine": "git clone https://github.com/strapi/nextjs-corporate-starter.git"
        }
      ]
    },
    {
      "id": 2,
      // ‚Ä¶
    },
    {
      "id": 3,
      // ‚Ä¶
    },
    {
      "id": 4,
      // ‚Ä¶
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall>

##### Example: Populating the dynamic zone and applying a shared strategy to its components

When we populate the `blocks` dynamic zone and apply a shared population strategy to all its components with `[populate]=*`, we not only include components fields but also their 1st-level relations, as shown in the highlighted lines of the following example response:

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles?populate[blocks][populate]=*`

</Request>

<Response>

```json {13-63}
{
  "data": [
    {
      "id": 1,
      "documentId": "c14dwiff3b4os6gs4yyrag",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "blocks": [
        {
          "id": 2,
          "documentId": "lu16w9g4jri8ppiukg542j",
          "__component": "blocks.related-articles",
          "header": {
            "id": 2,
            "documentId": "c2imt19iywk27hl2ftph7s",
            "theme": "primary",
            "label": "More, I want more!",
            "title": "Similar articles"
          },
          "articles": {
            "data": [
              {
                "id": 2,
                "documentId": "isn91s2bxk3jib97evvjni",
                "title": "What are chinese hamburgers and why aren't you eating them?",
                "slug": "what-are-chinese-hamburgers-and-why-aren-t-you-eating-them",
                "createdAt": "2021-11-11T13:33:19.948Z",
                "updatedAt": "2023-06-01T14:32:50.984Z",
                "publishedAt": "2022-09-22T12:36:48.312Z",
                "locale": "en",
                "ckeditor_content": "‚Ä¶", // truncated content
              },
              {
                "id": 3,
                "documentId": "yz6lg7tp5ph8dr79gidoyl",
                "title": "7 Places worth visiting for the food alone",
                "slug": "7-places-worth-visiting-for-the-food-alone",
                "createdAt": "2021-11-12T13:33:19.948Z",
                "updatedAt": "2023-06-02T11:30:00.075Z",
                "publishedAt": "2023-06-02T11:30:00.075Z",
                "locale": "en",
                "ckeditor_content": "‚Ä¶", // truncated content
              },
              {
                "id": 4,
                "documentId": "z5jnfvyuj07fogzh1kcbd3",
                "title": "If you don't finish your plate in these countries, you might offend someone",
                "slug": "if-you-don-t-finish-your-plate-in-these-countries-you-might-offend-someone",
                "createdAt": "2021-11-15T13:33:19.948Z",
                "updatedAt": "2023-06-02T10:59:35.148Z",
                "publishedAt": "2022-09-22T12:35:53.899Z",
                "locale": "en",
                "ckeditor_content": "‚Ä¶", // truncated content
              }
            ]
          }
        },
        {
          "id": 2,
          "documentId": "vpihrdqj5984k8ynrc39p0",
          "__component": "blocks.cta-command-line",
          "theme": "primary",
          "title": "Want to give a try to a Strapi starter?",
          "text": "‚ù§Ô∏è",
          "commandLine": "git clone https://github.com/strapi/nextjs-corporate-starter.git"
        }
      ]
    },
    {
      "id": 2,
      // ‚Ä¶
    },
    {
      "id": 3,
      // ‚Ä¶ 
    },
    {
      "id": 4,
      // ‚Ä¶
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall> -->

To do so, you can define per-component populate queries using the `on` property.

For instance, in the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application:

- A `blocks` dynamic zone exists the `article` content-type <ScreenshotNumberReference number="1" />.
- The dynamic zone includes 3 different components: `relatedArticles` <ScreenshotNumberReference number="2" />, `faq` <ScreenshotNumberReference number="3" />, and `CtaCommandLine` <ScreenshotNumberReference number="4" />. All components have a different content structure containing various fields.
- The `relatedArticles` component has an `articles` relation <ScreenshotNumberReference number="5" /> with the article content-type.

![FoodAdvisor's 'blocks' dynamic zone structure in the Content-Type Builder](/img/assets/rest-api/ctb-blocks-dynamic-zone-structure-2.png)

By default, none of the deeply nested fields or relations are included in the response of a `GET` request to `/api/articles`. With the appropriate populate parameters and by applying a detailed population strategy, you can return precisely the data you need.

:::tip
The syntax for advanced query parameters can be quite complex to build manually. We recommend you use our [interactive query builder](/cms/api/rest/interactive-query-builder) tool to generate the URL. For instance, the `/api/articles?populate[blocks][on][blocks.related-articles][populate][articles][populate][0]=image&populate[blocks][on][blocks.cta-command-line][populate]=*` URL used in the following example has been generated by converting the following object using our tool:

```json
{
  populate: {
    blocks: { // asking to populate the blocks dynamic zone
      on: { // using a detailed population strategy to explicitly define what you want
        'blocks.related-articles': {
          populate: {
           'articles': {
             populate: ['image']
           }
         }
        },
        'blocks.cta-command-line': {
          populate: '*'
        }
      },
    },
  },
}
```

:::

Let's compare and explain the responses returned with some examples of a shared population strategy and a detailed population strategy:

#### Example

When we populate the `blocks` dynamic zone, we explicitly define which data to populate.

In the following example response, highlighted lines show that:

- We deeply populate the `articles` relation of the `relatedArticles` component, and even the `image` media field of the related article.

- But because we have only asked to populate everything for the `CtaCommandLine` component and have not defined anything for the `faq` component, no data from the `faq` component is returned.

<ApiCall noSideBySide>

<Request title="Example request with a detailed population">

`GET /api/articles?populate[blocks][on][blocks.related-articles][populate][articles][populate][0]=image&populate[blocks][on][blocks.cta-command-line][populate]=*`

</Request>

<Response title="Example response with a detailed population">

```json {16-17,29-34}
{
  "data": [
    {
      "id": 1,
      "documentId": "it9bbhcgc6mcfsqas7h1dp",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // truncated content
      "blocks": [
        {
          "id": 2,
          "documentId": "e8cnux5ejxyqrejd5addfv",
          "__component": "blocks.related-articles",
          "articles": {
            "data": [
              {
                "id": 2,
                "documentId": "wkgojrcg5bkz8teqx1foz7",
                "title": "What are chinese hamburgers and why aren't you eating them?",
                "slug": "what-are-chinese-hamburgers-and-why-aren-t-you-eating-them",
                "createdAt": "2021-11-11T13:33:19.948Z",
                "updatedAt": "2023-06-01T14:32:50.984Z",
                "publishedAt": "2022-09-22T12:36:48.312Z",
                "locale": "en",
                "ckeditor_content": "‚Ä¶", // truncated content
                "image": {
                  "data": {
                      // ‚Ä¶
                    }
                  }
                }
              },
              {
                "id": 3,
                // ‚Ä¶
              },
              {
                "id": 4,
                // ‚Ä¶
              }
            ]
          }
        },
        {
          "id": 2,
          "__component": "blocks.cta-command-line",
          "theme": "primary",
          "title": "Want to give a try to a Strapi starter?",
          "text": "‚ù§Ô∏è",
          "commandLine": "git clone https://github.com/strapi/nextjs-corporate-starter.git"
        }
      ]
    },
    {
      "id": 2,
      // ‚Ä¶
    },
    {
      "id": 3,
      "documentId": "z5jnfvyuj07fogzh1kcbd3",
      "title": "7 Places worth visiting for the food alone",
      "slug": "7-places-worth-visiting-for-the-food-alone",
      "createdAt": "2021-11-12T13:33:19.948Z",
      "updatedAt": "2023-06-02T11:30:00.075Z",
      "publishedAt": "2023-06-02T11:30:00.075Z",
      "locale": "en",
      "ckeditor_content": "‚Ä¶", // ‚Ä¶ truncated content
      "blocks": [
        {
          "id": 1,
          "documentId": "ks7xsp9fewoi0qljcz9qa0",
          "__component": "blocks.related-articles",
          "articles": {
            // ‚Ä¶
          }
        },
        {
          "id": 1,
          "documentId": "c2imt19iywk27hl2ftph7s",
          "__component": "blocks.cta-command-line",
          "theme": "secondary",
          "title": "Want to give it a try with a brand new project?",
          "text": "Up & running in seconds üöÄ",
          "commandLine": "npx create-strapi-app my-project --quickstart"
        }
      ]
    },
    {
      "id": 4,
      // ‚Ä¶
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>

</ApiCall>


 This is the content for the doc docusaurus/docs/cms/api/rest/interactive-query-builder.md 

 ---
title: Interactive Query Builder
description: Use an interactive tool that leverages the querystring library to build your query URL
displayed_sidebar: cmsSidebar
sidebar_label: Interactive Query Builder
tags:
- Content API
- interactive query builder
- REST API
- qs library
---

# Build your query URL with Strapi's interactive tool

A wide range of parameters can be used and combined to query your content with the [REST API](/cms/api/rest), which can result in long and complex query URLs.

Strapi's codebase uses <ExternalLink to="https://github.com/ljharb/qs" text="the `qs` library"/> to parse and stringify nested JavaScript objects. It's recommended to use `qs` directly to generate complex query URLs instead of creating them manually.

You can use the following interactive query builder tool to generate query URLs automatically:

1. Replace the values in the _Endpoint_ and _Endpoint Query Parameters_ fields with content that fits your needs.
2. Click the **Copy to clipboard** button to copy the automatically generated _Query String URL_ which is updated as you type.

:::info Parameters usage
Please refer to the [REST API parameters table](/cms/api/rest/parameters) and read the corresponding parameters documentation pages to better understand parameters usage.
:::

<br />

<InteractiveQueryBuilder
  endpoint="/api/books"
  code={`
{
  sort: ['title:asc'],
  filters: {
    title: {
      $eq: 'hello',
    },
  },
  populate: {
    author: {
      fields: ['firstName', 'lastName']
    }
  },
  fields: ['title'],
  pagination: {
    pageSize: 10,
    page: 1,
  },
  status: 'published',
  locale: ['en'],
}
  `}
/>

<br />
 
<br />

:::note
The default endpoint path is prefixed with `/api/` and should be kept as-is unless you configured a different API prefix using [the `rest.prefix` API configuration option](/cms/configurations/api).<br/> For instance, to query the `books` collection type using the default API prefix, type `/api/books` in the _Endpoint_ field.
:::

:::caution Disclaimer
The `qs` library and the interactive query builder provided on this page:
- might not detect all syntax errors,
- are not aware of the parameters and values available in a Strapi project,
- and do not provide autocomplete features.

Currently, these tools are only provided to transform the JavaScript object in an inline query string URL. Using the generated query URL does not guarantee that proper results will get returned with your API.
:::


 This is the content for the doc docusaurus/docs/cms/api/rest/locale.md 

 ---
title: Locale
description: Browse the REST API reference for the locale parameter to take advantage of the Internationalization feature through REST.
toc_max_heading_level: 5
tags:
- REST API
- Internationalization
- API
- locale
- Content API
- find
- interactive query builder
- qs library
---

import QsIntroFull from '/docs/snippets/qs-intro-full.md'
import QsForQueryBody from '/docs/snippets/qs-for-query-body.md'
import QsForQueryTitle from '/docs/snippets/qs-for-query-title.md'

# REST API: `locale`

The [Internationalization (i18n) feature](/cms/features/internationalization) adds new abilities to the [REST API](/cms/api/rest).

:::prerequisites
To work with API content for a locale, please ensure the locale has been already [added to Strapi in the admin panel](/cms/features/internationalization#settings).
:::

The `locale` [API parameter](/cms/api/rest/parameters) can be used to work with documents only for a specified locale. `locale` takes a locale code as a value (see <ExternalLink to="https://github.com/strapi/strapi/blob/main/packages/plugins/i18n/server/src/constants/iso-locales.json" text="full list of available locales"/>).

:::tip
If the `locale` parameter is not defined, it will be set to the default locale. `en` is the default locale when a new Strapi project is created, but another locale can be [set as the default locale](/cms/features/internationalization#settings) in the admin panel.

For instance, by default, a GET request to `/api/restaurants` will return the same response as a request to `/api/restaurants?locale=en`.
:::

The following table lists the new possible use cases added by i18n to the REST API and gives syntax examples (you can click on requests to jump to the corresponding section with more details):

<Tabs groupId="collection-single">

<TabItem value="collection" label="For collection types">

| Use case | Syntax example<br/>and link for more information |
|---------|-------|
| Get all documents in a specific locale | [`GET /api/restaurants?locale=fr`](#rest-get-all) |
| Get a specific locale version for a document | [`GET /api/restaurants/abcdefghijklmno456?locale=fr`](#get-one-collection-type) |
| Create a new document for the default locale | [`POST /api/restaurants`](#rest-create-default-locale)<br/>+ pass attributes in the request body |
| Create a new document for a specific locale | [`POST /api/restaurants`](#rest-create-specific-locale)<br/>+ pass attributes **and locale** in the request body |
| Create a new, or update an existing, locale version for an existing document | [`PUT /api/restaurants/abcdefghijklmno456?locale=fr`](#rest-put-collection-type)<br/>+ pass attributes in the request body |
| Delete a specific locale version of a document | [`DELETE /api/restaurants/abcdefghijklmno456?locale=fr`](#rest-delete-collection-type) |

</TabItem>

<TabItem value="single" label="For single types">

| Use case                                     | Syntax example<br/>and link for more information |
|----------------------------------------------|--------------------------------------------------|
| Get a specific locale version for a document | [`GET /api/homepage?locale=fr`](#get-one-single-type)  |
| Create a new, or update an existing, locale version for an existing document | [`PUT /api/homepage?locale=fr`](#rest-put-single-type)<br/>+ pass attributes in the request body |
| Delete a specific locale version of a document | [`DELETE /api/homepage?locale=fr`](#rest-delete-single-type) |

</TabItem>
</Tabs>

### `GET` Get all documents in a specific locale {#rest-get-all}

<ApiCall>

<Request> 

`GET http://localhost:1337/api/restaurants?locale=fr`

</Request>

<Response> 

```json
{
  "data": [
    {
      "id": 5,
      "documentId": "h90lgohlzfpjf3bvan72mzll",
      "Title": "Meilleures pizzas",
      "Body": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "On d√©guste les meilleures pizzas de la ville √† la Pizzeria Arrivederci."
            }
          ]
        }
      ],
      "createdAt": "2024-03-06T22:08:59.643Z",
      "updatedAt": "2024-03-06T22:10:21.127Z",
      "publishedAt": "2024-03-06T22:10:21.130Z",
      "locale": "fr"
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 1
    }
  }
}
```

</Response>
</ApiCall>

### `GET` Get a document in a specific locale {#rest-get}

To get a specific document in a given locale, add the `locale` parameter to the query:

| Use case             | Syntax format and link for more information                                                    |
| -------------------- | ---------------------------------------------------------------------------------------------- |
| In a collection type | [`GET /api/content-type-plural-name/document-id?locale=locale-code`](#get-one-collection-type) |
| In a single type     | [`GET /api/content-type-singular-name?locale=locale-code`](#get-one-single-type)               |

#### Collection types {#get-one-collection-type}

To get a specific document in a collection type in a given locale, add the `locale` parameter to the query, after the `documentId`:

<ApiCall>

<Request>

`GET /api/restaurants/lr5wju2og49bf820kj9kz8c3?locale=fr`

</Request>

<Response>

```json
{
  "data": [
    {
      "id": 22,
      "documentId": "lr5wju2og49bf820kj9kz8c3",
      "Name": "Biscotte Restaurant",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "Bienvenue au restaurant Biscotte! Le Restaurant Biscotte propose une cuisine √† base de produits frais et de qualit√©, souvent locaux, biologiques lorsque cela est possible, et toujours produits par des producteurs passionn√©s."
            }
          ]
        }
      ],
      // ‚Ä¶
      "locale": "fr"
    },
    // ‚Ä¶
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 3
    }
  }
}
```

</Response>

</ApiCall>

#### Single types {#get-one-single-type}

To get a specific single type document in a given locale, add the `locale` parameter to the query, after the single type name:

<ApiCall>

<Request>

`GET /api/homepage?locale=fr`

</Request>

<Response>

```json
{
  "data": {
    "id": 10,
    "documentId": "ukbpbnu8kbutpn98rsanyi50",
    "Title": "Page d'accueil",
    "Body": null,
    "createdAt": "2024-03-07T13:28:26.349Z",
    "updatedAt": "2024-03-07T13:28:26.349Z",
    "publishedAt": "2024-03-07T13:28:26.353Z",
    "locale": "fr"
  },
  "meta": {}
}
```

</Response>

</ApiCall>

### `POST` Create a new localized document for a collection type {#rest-create}

To create a localized document from scratch, send a POST request to the Content API. Depending on whether you want to create it for the default locale or for another locale, you might need to pass the `locale` parameter in the request's body

| Use case                      | Syntax format and link for more information                                               |
| ----------------------------- | --------------------------------------------------------------------------------------- |
| Create for the default locale | [`POST /api/content-type-plural-name`](#rest-create-default-locale) |
| Create for a specific locale  | [`POST /api/content-type-plural-name`](#rest-create-specific-locale)<br/>+ pass locale in request body               |

#### For the default locale {#rest-create-default-locale}

If no locale has been passed in the request body, the document is created using the default locale for the application:

<ApiCall>
<Request> 

`POST http://localhost:1337/api/restaurants`

```json
{
  "data": {
    "Name": "Oplato",
  }
}
```

</Request>

<Response>

```json
{
  "data": {
    "id": 13,
    "documentId": "jae8klabhuucbkgfe2xxc5dj",
    "Name": "Oplato",
    "Description": null,
    "createdAt": "2024-03-06T22:19:54.646Z",
    "updatedAt": "2024-03-06T22:19:54.646Z",
    "publishedAt": "2024-03-06T22:19:54.649Z",
    "locale": "en"
  },
  "meta": {}
}
```

</Response>
</ApiCall>

#### For a specific locale {#rest-create-specific-locale}

To create a localized entry for a locale different from the default one, add the `locale` attribute to the body of the POST request:

<ApiCall>
<Request>

`POST http://localhost:1337/api/restaurants`

```json {4}
{
  "data": {
    "Name": "She's Cake",
    "locale": "fr"
  }
}
```

</Request>

<Response>

```json
{
  "data": {
    "id": 15,
    "documentId": "ldcmn698iams5nuaehj69j5o",
    "Name": "She's Cake",
    "Description": null,
    "createdAt": "2024-03-06T22:21:18.373Z",
    "updatedAt": "2024-03-06T22:21:18.373Z",
    "publishedAt": "2024-03-06T22:21:18.378Z",
    "locale": "en"
  },
  "meta": {}
}
```

</Response>
</ApiCall>

### `PUT` Create a new, or update an existing, locale version for an existing document {#rest-update}

With `PUT` requests sent to an existing document, you can:

- create another locale version of the document,
- or update an existing locale version of the document.

Send the `PUT` request to the appropriate URL, adding the `locale=your-locale-code` parameter to the query URL and passing attributes in a `data` object in the request's body:

| Use case             | Syntax format and link for more information                                               |
| -------------------- | --------------------------------------------------------------------------------------- |
| In a collection type | [`PUT /api/content-type-plural-name/document-id?locale=locale-code`](#rest-put-collection-type) |
| In a single type     | [`PUT /api/content-type-singular-name?locale=locale-code`](#rest-put-single-type)               |

:::caution
When creating a localization for existing localized entries, the body of the request can only accept localized fields.
:::

:::tip
The Content-Type should have the [`createLocalization` permission](/cms/features/rbac#collection-and-single-types) enabled, otherwise the request will return a `403: Forbidden` status.
:::

:::note
It is not possible to change the locale of an existing localized entry. When updating a localized entry, if you set a `locale` attribute in the request body it will be ignored.
:::

#### In a collection type {#rest-put-collection-type}

To create a new locale for an existing document in a collection type, add the `locale` parameter to the query, after the `documentId`, and pass data to the request's body:

<ApiCall noSideBySide>

<Request title="Example request: Creating a French locale for an existing restaurant">

`PUT http://localhost:1337/api/restaurants/lr5wju2og49bf820kj9kz8c3?locale=fr`

```json
{
  data: {
    "Name": "She's Cake in French",
  }
}
```

</Request>

<Response>

```json
{
  "data": {
    "id": 19,
    "documentId": "lr5wju2og49bf820kj9kz8c3",
    "Name": "She's Cake in French",
    "Description": null,
    "createdAt": "2024-03-07T12:13:09.551Z",
    "updatedAt": "2024-03-07T12:13:09.551Z",
    "publishedAt": "2024-03-07T12:13:09.554Z",
    "locale": "fr"
  },
  "meta": {}
}
```

</Response>

</ApiCall>

#### In a single type {#rest-put-single-type}

To create a new locale for an existing single type document, add the `locale` parameter to the query, after the single type name, and pass data to the request's body:

<ApiCall>

<Request title="Example: Create a FR locale for an existing Homepage single type">

`PUT http://localhost:1337/api/homepage?locale=fr`

```json
{
  "data": {
    "Title": "Page d'accueil"
  }
}
```

</Request>

<Response>

```json
{
  "data": {
    "id": 10,
    "documentId": "ukbpbnu8kbutpn98rsanyi50",
    "Title": "Page d'accueil",
    "Body": null,
    "createdAt": "2024-03-07T13:28:26.349Z",
    "updatedAt": "2024-03-07T13:28:26.349Z",
    "publishedAt": "2024-03-07T13:28:26.353Z",
    "locale": "fr"
  },
  "meta": {}
}
```

</Response>

</ApiCall>

<br/>

### `DELETE` Delete a locale version of a document {#rest-delete}

To delete a locale version of a document, send a `DELETE` request with the appropriate `locale` parameter.

`DELETE` requests only send a 204 HTTP status code on success and do not return any data in the response body.

#### In a collection type {#rest-delete-collection-type}

To delete only a specific locale version of a document in a collection type, add the `locale` parameter to the query after the `documentId`:

<Request>

`DELETE /api/restaurants/abcdefghijklmno456?locale=fr`

</Request>

#### In a single type {#rest-delete-single-type}

To delete only a specific locale version of a single type document, add the `locale` parameter to the query after the single type name:

<Request>

`DELETE /api/homepage?locale=fr`

</Request>


 This is the content for the doc docusaurus/docs/cms/api/rest/parameters.md 

 ---
title: Parameters
description: Use API parameters to refine your Strapi REST API queries.
sidebar_label: Parameters
next: ./filtering-locale-publication.md
tags:
- API
- Content API
- filters
- locale
- populate
- REST API
- sort
- status
---

# REST API parameters

API parameters can be used with the [REST API](/cms/api/rest) to filter, sort, and paginate results and to select fields and relations to populate. Additionally, specific parameters related to optional Strapi features can be used, like the publication state and locale of a content-type.

The following API parameters are available:

| Operator           | Type          | Description                                           |
| ------------------ | ------------- | ----------------------------------------------------- |
| `filters`          | Object        | [Filter the response](/cms/api/rest/filters) |
| `locale`           | String        | [Select a locale](/cms/api/rest/locale) |
| `status`           | String        | [Select the Draft & Publish status](/cms/api/rest/status) |
| `populate`         | String or Object | [Populate relations, components, or dynamic zones](/cms/api/rest/populate-select#population) |
| `fields`           | Array         | [Select only specific fields to display](/cms/api/rest/populate-select#field-selection) |
| `sort`             | String or Array  | [Sort the response](/cms/api/rest/sort-pagination.md#sorting) |
| `pagination`       | Object        | [Page through entries](/cms/api/rest/sort-pagination.md#pagination) |

Query parameters use the <ExternalLink to="https://christiangiacomi.com/posts/rest-design-principles/#lhs-brackets" text="LHS bracket syntax"/> (i.e. they are encoded using square brackets `[]`).

:::tip
A wide range of REST API parameters can be used and combined to query your content, which can result in long and complex query URLs.<br/>üëâ You can use Strapi's [interactive query builder](/cms/api/rest/interactive-query-builder) tool to build query URLs more conveniently. ü§ó
:::


 This is the content for the doc docusaurus/docs/cms/api/rest/populate-select.md 

 ---
title: Populate and Select
description: Use Strapi's REST API to populate or select certain fields.
sidebarDepth: 3
sidebar_label: Populate & Select
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- Combining operators
- find
- populate
- REST API
- select
- qs library
---

import QsIntroFull from '/docs/snippets/qs-intro-full.md'
import QsForQueryTitle from '/docs/snippets/qs-for-query-title.md'
import QsForQueryBody from '/docs/snippets/qs-for-query-body.md'

# REST API: Population & Field Selection

The [REST API](/cms/api/rest) by default does not populate any relations, media fields, components, or dynamic zones. Use the [`populate` parameter](#population) to populate specific fields and the [`select` parameter](#field-selection) to return only specific fields with the query results.

:::tip
<QsIntroFull />
:::

:::callout üèó Work-in-progress
Strapi v4 docs very recently included a more extensive description of how to use the `populate` parameter, including an [extensive API reference](https://docs.strapi.io/cms/api/rest/populate-select#population) and [additional guides](https://docs.strapi.io/cms/api/rest/guides/intro). These v4 pages are currently being ported and adapted to Strapi 5 docs so that examples reflect the new data response format.

In the meantime, you can trust the content of the present page as accurate as it already reflects the new Strapi 5, flattened response format (see [breaking change entry](/cms/migration/v4-to-v5/breaking-changes/new-response-format) and [REST API introduction](/cms/api/rest#requests) for details); the present page is just not as complete as its v4 equivalent yet.
:::

## Field selection

Queries can accept a `fields` parameter to select only some fields. By default, only the following [types of fields](/cms/backend-customization/models#model-attributes) are returned:

- string types: string, text, richtext, enumeration, email, password, and uid,
- date types: date, time, datetime, and timestamp,
- number types: integer, biginteger, float, and decimal,
- generic types: boolean, array, and JSON.

| Use case              | Example parameter syntax              |
|-----------------------|---------------------------------------|
| Select a single field | `fields=name`                         |
| Select multiple fields| `fields[0]=name&fields[1]=description`|

:::note
Field selection does not work on relational, media, component, or dynamic zone fields. To populate these fields, use the [`populate` parameter](#population).
:::

<ApiCall noSideBySide>
<Request title="Example request: Return only name and description fields">

`GET /api/restaurants?fields[0]=name&fields[1]=description`

<details>
<summary><QsForQueryTitle/></summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify(
  {
    fields: ['name', 'description'],
  },
  {
    encodeValuesOnly: true, // prettify URL
  }
);

await request(`/api/users?${query}`);
```

</details>
</Request>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 4,
      "Name": "Pizzeria Arrivederci",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "Specialized in pizza, we invite you to rediscover our classics, such as 4 Formaggi or Calzone, and our original creations such as Do Luigi or Nduja."
            }
          ]
        }
      ],
      "documentId": "lr5wju2og49bf820kj9kz8c3"
    },
    // ‚Ä¶
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall>

## Population

The REST API by default does not populate any type of fields, so it will not populate relations, media fields, components, or dynamic zones unless you pass a `populate` parameter to populate various field types.

The `populate` parameter can be used alone or [in combination with with multiple operators](#combining-population-with-other-operators) to have much more control over the population.

:::caution
The `find` permission must be enabled for the content-types that are being populated. If a role doesn't have access to a content-type it will not be populated (see [User Guide](/cms/features/users-permissions#editing-a-role) for additional information on how to enable `find` permissions for content-types).
:::

:::note
It's currently not possible to return just an array of ids with a request.
:::

:::strapi Populating guides

The [REST API guides](/cms/api/rest/guides/intro) section includes more detailed information about various possible use cases for the populate parameter:

- The [Understanding populate](/cms/api/rest/guides/understanding-populate) guide explains in details how populate works, with diagrams, comparisons, and real-world examples.
- The [How to populate creator fields](/cms/api/rest/guides/populate-creator-fields) guide provides step-by-step instructions on how to add `createdBy` and `updatedBy` fields to your queries responses.

:::

The following table sums up possible populate use cases and their associated parameter syntaxes, and links to sections of the Understanding populate guide which includes more detailed explanations:

| Use case  | Example parameter syntax | Detailed explanations to read |
|-----------| ---------------|-----------------------|
| Populate everything, 1 level deep, including media fields, relations, components, and dynamic zones | `populate=*`| [Populate all relations and fields, 1 level deep](/cms/api/rest/guides/understanding-populate#populate-all-relations-and-fields-1-level-deep) |
| Populate one relation,<br/>1 level deep | `populate=a-relation-name`| [Populate 1 level deep for specific relations](/cms/api/rest/guides/understanding-populate#populate-1-level-deep-for-specific-relations) |
| Populate several relations,<br/>1 level deep | `populate[0]=relation-name&populate[1]=another-relation-name&populate[2]=yet-another-relation-name`| [Populate 1 level deep for specific relations](/cms/api/rest/guides/understanding-populate#populate-1-level-deep-for-specific-relations) |
| Populate some relations, several levels deep | `populate[root-relation-name][populate][0]=nested-relation-name`| [Populate several levels deep for specific relations](/cms/api/rest/guides/understanding-populate#populate-several-levels-deep-for-specific-relations) |
| Populate a component | `populate[0]=component-name`| [Populate components](/cms/api/rest/guides/understanding-populate#populate-components) |
| Populate a component and one of its nested components | `populate[0]=component-name&populate[1]=component-name.nested-component-name`| [Populate components](/cms/api/rest/guides/understanding-populate#populate-components) |
| Populate a dynamic zone (only its first-level elements) | `populate[0]=dynamic-zone-name`| [Populate dynamic zones](/cms/api/rest/guides/understanding-populate#populate-dynamic-zones) |
| Populate a dynamic zone and its nested elements and relations, using a precisely defined, detailed population strategy | `populate[dynamic-zone-name][on][component-category.component-name][populate][relation-name][populate][0]=field-name`| [Populate dynamic zones](/cms/api/rest/guides/understanding-populate#populate-dynamic-zones) |

:::tip
The easiest way to build complex queries with multiple-level population is to use our [interactive query builder](/cms/api/rest/interactive-query-builder) tool.
:::

### Combining Population with other operators

By utilizing the `populate` operator it is possible to combine other operators such as [field selection](/cms/api/rest/populate-select#field-selection), [filters](/cms/api/rest/filters), and [sort](/cms/api/rest/sort-pagination) in the population queries.

:::caution
The population and pagination operators cannot be combined.
:::

#### Populate with field selection

`fields` and `populate` can be combined.

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles?fields[0]=title&fields[1]=slug&populate[headerImage][fields][0]=name&populate[headerImage][fields][1]=url`

</Request>

<details>
<summary><QsForQueryTitle/></summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify(
  {
    fields: ['title', 'slug'],
    populate: {
      headerImage: {
        fields: ['name', 'url'],
      },
    },
  },
  {
    encodeValuesOnly: true, // prettify URL
  }
);

await request(`/api/articles?${query}`);
```

</details>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 1,
      "documentId": "h90lgohlzfpjf3bvan72mzll",
      "title": "Test Article",
      "slug": "test-article",
      "headerImage": {
        "id": 1,
        "documentId": "cf07g1dbusqr8mzmlbqvlegx",
        "name": "17520.jpg",
        "url": "/uploads/17520_73c601c014.jpg"
      }
    }
  ],
  "meta": {
    // ...
  }
}
```

</Response>
</ApiCall>


#### Populate with filtering

`filters` and `populate` can be combined.

<ApiCall noSideBySide>
<Request title="Example request">

`GET /api/articles?populate[categories][sort][0]=name%3Aasc&populate[categories][filters][name][$eq]=Cars`

</Request>

<details>
<summary><QsForQueryTitle/></summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify(
  {
    populate: {
      categories: {
        sort: ['name:asc'],
        filters: {
          name: {
            $eq: 'Cars',
          },
        },
      },
    },
  },
  {
    encodeValuesOnly: true, // prettify URL
  }
);

await request(`/api/articles?${query}`);
```

</details>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 1,
      "documentId": "a1b2c3d4e5d6f7g8h9i0jkl",
      "title": "Test Article",
      // ...
      "categories": {
        "data": [
          {
            "id": 2,
            "documentId": "jKd8djla9ndalk98hflj3",
            "name": "Cars"
            // ...
          }
        ]
        }
      }
    }
  ],
  "meta": {
    // ...
  }
}
```

</Response>
</ApiCall>


 This is the content for the doc docusaurus/docs/cms/api/rest/relations.md 

 ---
title: Relations
description: Use the REST API to manage the order of relations
displayed_sidebar: cmsSidebar
sidebar_label: Relations
tags:
- API 
- relations
- Content API
- disconnect
- REST API
---

# Managing relations with API requests

Defining relations between content-types (that are designated as entities in the database layers) is connecting entities with each other.

Relations between content-types can be managed through the [admin panel](/cms/features/content-manager#relational-fields) or through [REST API](/cms/api/rest) or [Document Service API](/cms/api/document-service) requests.

Relations can be connected, disconnected or set through the Content API by passing parameters in the body of the request:

|  Parameter name         | Description | Type of update |
|-------------------------|-------------|----------------|
| [`connect`](#connect)   | Connects new entities.<br /><br />Can be used in combination with `disconnect`.<br /><br />Can be used with [positional arguments](#relations-reordering) to define an order for relations.    | Partial |
| [`disconnect`](#disconnect)    | Disconnects entities.<br /><br />Can be used in combination with `connect`. | Partial |
| [`set`](#set)           | Set entities to a specific set. Using `set` will overwrite all existing connections to other entities.<br /><br />Cannot be used in combination with `connect` or `disconnect`.  | Full |

:::note
When [Internationalization (i18n)](/cms/features/internationalization) is enabled on the content-type, you can also pass a locale to set relations for a specific locale, as in this Document Service API example:

```js
await strapi.documents('api::restaurant.restaurant').update({ 
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: 'fr',
  data: { 
    category: {
      connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']
    }
  }
})
```

If no locale is passed, the default locale will be assumed.
:::

## `connect`

Using `connect` in the body of a request performs a partial update, connecting the specified relations.

`connect` accepts either a shorthand or a longhand syntax:

| Syntax type | Syntax example |
| ------------|----------------|
| shorthand   | `connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']` |
| longhand    | ```connect: [{ documentId: 'z0y2x4w6v8u1t3s5r7q9onm' }, { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }]``` |

You can also use the longhand syntax to [reorder relations](#relations-reordering).

`connect` can be used in combination with [`disconnect`](#disconnect).

:::caution
`connect` can not be used for media attributes
:::

<Tabs groupId="shorthand-longhand">

<TabItem value="shorthand" label="Shorthand syntax example">

Sending the following request updates a `restaurant`, identified by its `documnentId` `a1b2c3d4e5f6g7h8i9j0klm`. The request uses the `categories` attribute to connect the restaurant with 2 categories identified by their `documentId`:

<MultiLanguageSwitcher title="Example request using the shorthand syntax">
<MultiLanguageSwitcherRequest language="REST">

`PUT` `http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm`

```js
{
  data: {
    categories: {
      connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']
    }
  }
}
```

</MultiLanguageSwitcherRequest>

<MultiLanguageSwitcherRequest language="Node">

```js
const fetch = require('node-fetch');

const response = await fetch(
  'http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm',
  {
    method: 'put',
    body: {
      data: {
        categories: {
          connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']
        }
      }
    }
  }
);
```

</MultiLanguageSwitcherRequest>
</MultiLanguageSwitcher>

</TabItem>

<TabItem value="longhand" label="Longhand syntax example">

Sending the following request updates a `restaurant`, identified by its `documnentId` `a1b2c3d4e5f6g7h8i9j0klm`. The request uses the `categories` attribute to connect the restaurant with 2 categories identified by their `documentId`:

<MultiLanguageSwitcher title="Example request using the longhand syntax">
<MultiLanguageSwitcherRequest language="REST">

`PUT` `http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm`

```js
{
  data: {
    categories: {
      connect: [
        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm' },
        { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }
      ]
    }
  }
}
```

</MultiLanguageSwitcherRequest>

<MultiLanguageSwitcherRequest language="Node">

```js
const fetch = require('node-fetch');

const response = await fetch(
  'http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm',
  {
    method: 'put',
    body: {
      data: {
        categories: {
          connect: [
            { documentId: 'z0y2x4w6v8u1t3s5r7q9onm' },
            { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }
          ]
        }
      }
    }
  }
);
```

</MultiLanguageSwitcherRequest>
</MultiLanguageSwitcher>

</TabItem>
</Tabs>

### Relations reordering

<VersionBadge version="4.6.0" />

Positional arguments can be passed to the longhand syntax of `connect` to define the order of relations.

The longhand syntax accepts an array of objects, each object containing the `documentId` of the entry to be connected and an optional `position` object to define where to connect the relation.

:::note Different syntaxes for different relations
The syntaxes described in this documentation are useful for one-to-many, many-to-many and many-ways relations.<br />For one-to-one, many-to-one and one-way relations, the syntaxes are also supported but only the last relation will be used, so it's preferable to use a shorter format (e.g.: `{ data: { category: 'a1b2c3d4e5f6g7h8i9j0klm' } }`, see [REST API documentation](/cms/api/rest#requests)).
:::

To define the `position` for a relation, pass one of the following 4 different positional attributes:

| Parameter name and syntax | Description                                                            | Type       |
| ------------------------- | ---------------------------------------------------------------------- | ---------- |
| `before: documentId`      | Positions the relation before the given `documentId`.                  | `documentId` (string) |
| `after: documentId`       | Positions the relation after the given `documentId`.                   | `documentId` (string) |
| `start: true`             | Positions the relation at the start of the existing list of relations. | Boolean    |
| `end: true`               | Positions the relation at the end of the existing list of relations.   | Boolean    |

The `position` argument is optional and defaults to `position: { end: true }`.

:::note Sequential order
Since `connect` is an array, the order of operations is important as they will be treated sequentially (see combined example below).
:::

:::caution
The same relation should not be connected more than once, otherwise it would return a Validation error by the API.
:::

<Tabs>

<TabItem value="basic" label="Basic example">

Consider the following record in the database:

```js
categories: [
  { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }
  { documentId: 'z0y2x4w6v8u1t3s5r7q9onm' }
]
```

Sending the following request updates a `restaurant`, identified by its `documentId` `a1b2c3d4e5f6g7h8i9j0klm`, connecting a relation of entity with a `documentId` of `ma12bc34de56fg78hi90jkl` for the `categories` attribute and positioning it before the entity with `documentId` `z0y2x4w6v8u1t3s5r7q9onm`:

<Request title="Example request to update the position of one relation">

`PUT http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm`

```js
{
  data: {
    categories: {
      connect: [
        { documentId: 'ma12bc34de56fg78hi90jkl', position: { before: 'z0y2x4w6v8u1t3s5r7q9onm' } },
      ]
    }
  }
}
```

</Request>
</TabItem>

<TabItem value="combined" label="Combined example">

Consider the following record in the database:

```js
categories: [
  { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }
  { documentId: 'z0y2x4w6v8u1t3s5r7q9onm' }
]
```

Sending the following example in the request body of a PUT request updates multiple relations:

<Request title="Example request to reorder several relations">

`PUT http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm`

```js
{
  data: {
    categories: {
      connect: [
        { id: '6u86wkc6x3parjd4emikhmx', position: { after: 'j9k8l7m6n5o4p3q2r1s0tuv'} },
        { id: '3r1wkvyjwv0b9b36s7hzpxl', position: { before: 'z0y2x4w6v8u1t3s5r7q9onm' } },
        { id: 'rkyqa499i84197l29sbmwzl', position: { end: true } },
        { id: 'srkvrr77k96o44d9v6ef1vu' },
        { id: 'nyk7047azdgbtjqhl7btuxw', position: { start: true } },
      ]
    }
  }
}
```

</Request>

Omitting the `position` argument (as in `documentId: 'srkvrr77k96o44d9v6ef1vu9'`) defaults to `position: { end: true }`. All other relations are positioned relative to another existing `id` (using `after` or `before`) or relative to the list of relations (using `start` or `end`). Operations are treated sequentially in the order defined in the `connect` array, so the resulting database record will be the following:

```js
categories: [
  { id: 'nyk7047azdgbtjqhl7btuxw' },
  { id: 'j9k8l7m6n5o4p3q2r1s0tuv' },
  { id: '6u86wkc6x3parjd4emikhmx6' },
  { id: '3r1wkvyjwv0b9b36s7hzpxl7' },
  { id: 'a1b2c3d4e5f6g7h8i9j0klm' },
  { id: 'rkyqa499i84197l29sbmwzl' },
  { id: 'srkvrr77k96o44d9v6ef1vu9' }
]
```

</TabItem>

</Tabs>

### Edge cases: Draft & Publish or i18n disabled

When some built-in features of Strapi 5 are disabled for a content-type, such as [Draft & Publish](/cms/features/draft-and-publish) and [Internationalization (i18)](/cms/features/internationalization), the `connect` parameter might be used differently:

**Relation from a `Category` with i18n _off_ to an `Article` with i18n _on_:**

In this situation you can select which locale you are connecting to:

```js
data: {
    categories: {
      connect: [
        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', locale: 'en' },
        // Connect to the same document id but with a different locale üëá
        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', locale: 'fr' },
      ]
   }
}
```

**Relation from a `Category` with Draft & Publish _off_ to an `Article` with Draft & Publish _on_:**

```js
data: {
  categories: {
    connect: [
      { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', status: 'draft' },
      // Connect to the same document id but with different publication states üëá
      { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', status: 'published' },
    ]
  }
}
```

## `disconnect`

Using `disconnect` in the body of a request performs a partial update, disconnecting the specified relations.

`disconnect` accepts either a shorthand or a longhand syntax:

| Syntax type | Syntax example |
| ------------|----------------|
| shorthand   | `disconnect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']`
| longhand    | ```disconnect: [{ documentId: 'z0y2x4w6v8u1t3s5r7q9onm' }, { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }]``` |

`disconnect` can be used in combination with [`connect`](#connect).

<br />

<Tabs groupId="shorthand-longhand">

<TabItem value="shorthand" label="Shorthand syntax example">

Sending the following request updates a `restaurant`, identified by its `documentId` `a1b2c3d4e5f6g7h8i9j0klm`, disconnecting the relations with 2 entries identified by their `documentId`:

<Request title="Example request using the shorthand syntax">

`PUT http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm`

```js
{
  data: {
    categories: {
      disconnect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv'],
    }
  }
}
```

</Request>

</TabItem>

<TabItem value="longhand" label="Longhand syntax example">

Sending the following request updates a `restaurant`, identified by its `documentId` `a1b2c3d4e5f6g7h8i9j0klm`, disconnecting the relations with 2 entries identified by their `documentId`:

<Request title="Example request using the longhand syntax">

`PUT http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm`

```js
{
  data: {
    categories: {
      disconnect: [
        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm' },
        { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }
      ],
    }
  }
}
```

</Request>

</TabItem>
</Tabs>

## `set`

Using `set` performs a full update, replacing all existing relations with the ones specified, in the order specified.

`set` accepts a shorthand or a longhand syntax:

| Syntax type | Syntax example                  |
| ----------- | ------------------------------- |
| shorthand   | `set: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']`                   |
| longhand    | ```set: [{ documentId: 'z0y2x4w6v8u1t3s5r7q9onm' }, { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }]``` |

As `set` replaces all existing relations, it should not be used in combination with other parameters. To perform a partial update, use [`connect`](#connect) and [`disconnect`](#disconnect).

:::note Omitting set
Omitting any parameter is equivalent to using `set`.<br/>For instance, the following 3 syntaxes are all equivalent:

- `data: { categories: set: [{ documentId: 'z0y2x4w6v8u1t3s5r7q9onm' }, { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }] }}`
- `data: { categories: set: ['z0y2x4w6v8u1t3s5r7q9onm2', 'j9k8l7m6n5o4p3q2r1s0tuv'] }}`
- `data: { categories: ['z0y2x4w6v8u1t3s5r7q9onm2', 'j9k8l7m6n5o4p3q2r1s0tuv'] }`

:::

<Tabs groupId="shorthand-longhand">

<TabItem value="shorthand" label="Shorthand syntax example">

Sending the following request updates a `restaurant`, identified by its `documentId` `a1b2c3d4e5f6g7h8i9j0klm`, replacing all previously existing relations and using the `categories` attribute to connect 2 categories identified by their `documentId`:

<Request title="Example request using the shorthand syntax with set">

`PUT http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm`

```js
{
  data: {
    categories: {
      set: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv4'],
    }
  }
}
```

</Request>

</TabItem>

<TabItem value="longhand" label="Longhand syntax example">

Sending the following request updates a `restaurant`, identified by its `documentId` `a1b2c3d4e5f6g7h8i9j0klm`, replacing all previously existing relations and using the `categories` attribute to connect 2 categories identified by their `documentId`:

<Request title="Example request using the longhand syntax with set">

`PUT http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm`

```js
{
  data: {
    categories: {
      set: [
        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm' },
        { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }
      ],
    }
  }
}
```

</Request>

</TabItem>
</Tabs>

<FeedbackPlaceholder />


 This is the content for the doc docusaurus/docs/cms/api/rest/sort-pagination.md 

 ---
title: Sort and Pagination
description: Use Strapi's REST API to sort or paginate your data.
sidebar_label: Sort & Pagination
sidebarDepth: 3
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- interactive query builder
- pagination
- pagination by page
- pagination by offset
- REST API
- sort
- qs library
---

import QsIntroFull from '/docs/snippets/qs-intro-full.md'
import QsForQueryTitle from '/docs/snippets/qs-for-query-title.md'
import QsForQueryBody from '/docs/snippets/qs-for-query-body.md'

# REST API: Sort & Pagination

Entries that are returned by queries to the [REST API](/cms/api/rest) can be sorted and paginated.

:::tip

<QsIntroFull />

:::

## Sorting

Queries can accept a `sort` parameter that allows sorting on one or multiple fields with the following syntaxes:

- `GET /api/:pluralApiId?sort=value` to sort on 1 field
- `GET /api/:pluralApiId?sort[0]=value1&sort[1]=value2` to sort on multiple fields (e.g. on 2 fields)

The sorting order can be defined with:

- `:asc` for ascending order (default order, can be omitted)
- or `:desc` for descending order.


### Example: Sort using 2 fields

You can sort by multiple fields by passing fields in a `sort` array.

<br />

<ApiCall>
<Request title="Example request: Sort using 2 fields">

`GET /api/restaurants?sort[0]=Description&sort[1]=Name`

</Request>

<details>
<summary>JavaScript query (built with the qs library):</summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify({
  sort: ['Description', 'Name'],
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/restaurants?${query}`);
```

</details>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 9,
      "documentId": "hgv1vny5cebq2l3czil1rpb3",
      "Name": "BMK Paris Bamako",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "A very short description goes here."
            }
          ]
        }
      ],
      // ‚Ä¶
    },
    {
      "id": 8,
      "documentId": "flzc8qrarj19ee0luix8knxn",
      "Name": "Restaurant D",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "A very short description goes here."
            }
          ]
        }
      ],
      // ‚Ä¶
    },
   // ‚Ä¶ 
  ],
  "meta": {
    // ‚Ä¶
  }
}
```

</Response>
</ApiCall>

### Example: Sort using 2 fields and set the order

Using the `sort` parameter and defining `:asc` or  `:desc` on sorted fields, you can get results sorted in a particular order.

<br />

<ApiCall>
<Request title="Example request: Sort using 2 fields and set the order">

`GET /api/restaurants?sort[0]=Description:asc&sort[1]=Name:desc`

</Request>

<details>
<summary>JavaScript query (built with the qs library):</summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify({
  sort: ['Description:asc', 'Name:desc'],
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/restaurants?${query}`);
```

</details>

<Response title="Example response">

```json
{
  "data": [
    {
      "id": 8,
      "documentId": "flzc8qrarj19ee0luix8knxn",
      "Name": "Restaurant D",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "A very short description goes here."
            }
          ]
        }
      ],
      // ‚Ä¶
    },
    {
      "id": 9,
      "documentId": "hgv1vny5cebq2l3czil1rpb3",
      "Name": "BMK Paris Bamako",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "A very short description goes here."
            }
          ]
        }
      ],
      // ‚Ä¶
    },
    // ‚Ä¶
  ],
  "meta": {
    // ‚Ä¶
  }
}
```

</Response>

</ApiCall>

## Pagination

Queries can accept `pagination` parameters. Results can be paginated:

- either by [page](#pagination-by-page) (i.e., specifying a page number and the number of entries per page)
- or by [offset](#pagination-by-offset) (i.e., specifying how many entries to skip and to return)

:::note
Pagination methods can not be mixed. Always use either `page` with `pageSize` **or** `start` with `limit`.
:::

### Pagination by page

To paginate results by page, use the following parameters:

| Parameter               | Type    | Description                                                               | Default |
| ----------------------- | ------- | ------------------------------------------------------------------------- | ------- |
| `pagination[page]`      | Integer | Page number                                                               | 1       |
| `pagination[pageSize]`  | Integer | Page size                                                                 | 25      |
| `pagination[withCount]` | Boolean | Adds the total numbers of entries and the number of pages to the response | True    |

<ApiCall>
<Request title="Example request: Return only 10 entries on page 1">

`GET /api/articles?pagination[page]=1&pagination[pageSize]=10`

</Request>

<details>
<summary>JavaScript query (built with the qs library):</summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify({
  pagination: {
    page: 1,
    pageSize: 10,
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/articles?${query}`);
```

</details>

<Response title="Example response">

```json
{
  "data": [
    // ...
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 10,
      "pageCount": 5,
      "total": 48
    }
  }
}
```

</Response>
</ApiCall>

### Pagination by offset

To paginate results by offset, use the following parameters:

| Parameter               | Type    | Description                                                    | Default |
| ----------------------- | ------- | -------------------------------------------------------------- | ------- |
| `pagination[start]`     | Integer | Start value (i.e. first entry to return)                      | 0       |
| `pagination[limit]`     | Integer | Number of entries to return                                    | 25      |
| `pagination[withCount]` | Boolean | Toggles displaying the total number of entries to the response | `true`  |

:::tip
The default and maximum values for `pagination[limit]` can be [configured in the `./config/api.js`](/cms/configurations/api) file with the `api.rest.defaultLimit` and `api.rest.maxLimit` keys.
:::

<ApiCall>
<Request title="Example request: Return only the first 10 entries using offset">

`GET /api/articles?pagination[start]=0&pagination[limit]=10`

</Request>

<details>
<summary>JavaScript query (built with the qs library):</summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify({
  pagination: {
    start: 0,
    limit: 10,
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/articles?${query}`);
```

</details>

<Response title="Example response">

```json
{
  "data": [
    // ...
  ],
  "meta": {
    "pagination": {
      "start": 0,
      "limit": 10,
      "total": 42
    }
  }
}
```

</Response>
</ApiCall>


 This is the content for the doc docusaurus/docs/cms/api/rest/status.md 

 ---
title: Status
description: Use Strapi's REST API to work with draft or published versions of your documents.
sidebarDepth: 3
sidebar_label:  Status
displayed_sidebar: cmsSidebar
tags:
- API
- Content API
- find
- interactive query builder
- REST API
- qs library
- status
---

import QsIntroFull from '/docs/snippets/qs-intro-full.md'
import QsForQueryBody from '/docs/snippets/qs-for-query-body.md'
import QsForQueryTitle from '/docs/snippets/qs-for-query-title.md'

# REST API: `status`

The [REST API](/cms/api/rest) offers the ability to filter results based on their status, draft or published.

:::prerequisites
The [Draft & Publish](/cms/features/draft-and-publish) feature should be enabled.
:::

Queries can accept a `status` parameter to fetch documents based on their status:

- `published`: returns only the published version of documents (default)
- `draft`: returns only the draft version of documents

:::tip
In the response data, the `publishedAt` field is `null` for drafts.
:::

:::note
Since published versions are returned by default, passing no status parameter is equivalent to passing `status=published`.
:::

<br /><br />

<ApiCall>
<Request title="Get draft versions of restaurants">

`GET /api/articles?status=draft`

</Request>

<details>
<summary>JavaScript query (built with the qs library):</summary>

<QsForQueryBody />

```js
const qs = require('qs');
const query = qs.stringify({
  status: 'draft',
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/articles?${query}`);
```

</details>

<Response title="Example response">

```json {21}
{
  "data": [
    // ‚Ä¶
    {
      "id": 5,
      "documentId": "znrlzntu9ei5onjvwfaalu2v",
      "Name": "Biscotte Restaurant",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "This is the draft version."
            }
          ]
        }
      ],
      "createdAt": "2024-03-06T13:43:30.172Z",
      "updatedAt": "2024-03-06T21:38:46.353Z",
      "publishedAt": null,
      "locale": "en"
    },
    // ‚Ä¶
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}
```

</Response>
</ApiCall>


 This is the content for the doc docusaurus/docs/cms/api/rest/upload.md 

 ---
title: Upload files
description: Learn how to use the /api/upload endpoints to upload files to Strapi with the REST API.
tags:
- API
- Content API
- upload
- REST API
- Media Library
---

# REST API: Upload files

The [Media Library feature](/cms/features/media-library) is powered in the back-end server of Strapi by the `upload` package. To upload files to Strapi, you can either use the Media Library directly from the admin panel, or use the [REST API](/cms/api/rest), with the following available endpoints :

| Method | Path                    | Description         |
| :----- | :---------------------- | :------------------ |
| GET    | `/api/upload/files`     | Get a list of files |
| GET    | `/api/upload/files/:id` | Get a specific file |
| POST   | `/api/upload`           | Upload files        |
| POST   | `/api/upload?id=x`      | Update fileInfo     |
| DELETE | `/api/upload/files/:id` | Delete a file       |

:::note Notes
- [Folders](/cms/features/media-library#organizing-assets-with-folders) are an admin panel-only feature and are not part of the Content API (REST or GraphQL). Files uploaded through REST are located in the automatically created "API Uploads" folder.
- The GraphQL API does not support uploading media files. To upload files, use the REST API or directly add files from the [Media Library](/cms/features/media-library) in the admin panel. Some GraphQL mutations to update or delete uploaded media files are still possible (see [GraphQL API documentation](/cms/api/graphql#mutations-on-media-files) for details).
:::

## Upload files

Upload one or more files to your application.

`files` is the only accepted parameter, and describes the file(s) to upload. The value(s) can be a Buffer or Stream:

<Tabs>
<TabItem value="browser" label="Browser">

```html
<form>
  <!-- Can be multiple files -->
  <input type="file" name="files" />
  <input type="submit" value="Submit" />
</form>

<script type="text/javascript">
  const form = document.querySelector('form');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    await fetch('/api/upload', {
      method: 'post',
      body: new FormData(e.target)
    });
  });
</script>
```

</TabItem>

<TabItem value="Node.js" label="Node.js">

```js
import { FormData } from 'formdata-node';
import fetch, { blobFrom } from 'node-fetch';

const file = await blobFrom('./1.png', 'image/png');
const form = new FormData();

form.append('files', file, "1.png");

const response = await fetch('http://localhost:1337/api/upload', {
  method: 'post',
  body: form,
});

```

</TabItem>

</Tabs>

:::caution
You have to send FormData in your request body.
:::

## Upload entry files

Upload one or more files that will be linked to a specific entry.

The following parameters are accepted:

| Parameter | Description |
| --------- | ----------- |
|`files`    | The file(s) to upload. The value(s) can be a Buffer or Stream. |
|`path` (optional) | The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). |
| `refId` | The ID of the entry which the file(s) will be linked to. |
| `ref` | The unique ID (uid) of the model which the file(s) will be linked to (see more below). |
| `source` (optional) | The name of the plugin where the model is located. |
| `field` | The field of the entry which the file(s) will be precisely linked to. |

For example, given the `Restaurant` model attributes:

```json title="/src/api/restaurant/content-types/restaurant/schema.json"
{
  // ...
  "attributes": {
    "name": {
      "type": "string"
    },
    "cover": {
      "type": "media",
      "multiple": false,
    }
  }
// ...
}
```

The following is an example of a corresponding front-end code:

```html
<form>
  <!-- Can be multiple files if you setup "collection" instead of "model" -->
  <input type="file" name="files" />
  <input type="text" name="ref" value="api::restaurant.restaurant" />
  <input type="text" name="refId" value="5c126648c7415f0c0ef1bccd" />
  <input type="text" name="field" value="cover" />
  <input type="submit" value="Submit" />
</form>

<script type="text/javascript">
  const form = document.querySelector('form');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    await fetch('/api/upload', {
      method: 'post',
      body: new FormData(e.target)
    });
  });
</script>
```

:::caution
You have to send FormData in your request body.
:::

## Update fileInfo

Update a file in your application.

`fileInfo` is the only accepted parameter, and describes the fileInfo to update:

```js
import { FormData } from 'formdata-node';
import fetch from 'node-fetch';

const fileId = 50;
const newFileData = {
  alternativeText: 'My new alternative text for this image!',
};

const form = new FormData();

form.append('fileInfo', JSON.stringify(newFileData));

const response = await fetch(`http://localhost:1337/api/upload?id=${fileId}`, {
  method: 'post',
  body: form,
});

```

## Models definition

Adding a file attribute to a [model](/cms/backend-customization/models) (or the model of another plugin) is like adding a new association.

The following example lets you upload and attach one file to the `avatar` attribute:

```json title="/src/api/restaurant/content-types/restaurant/schema.json"

{
  // ...
  {
    "attributes": {
      "pseudo": {
        "type": "string",
        "required": true
      },
      "email": {
        "type": "email",
        "required": true,
        "unique": true
      },
      "avatar": {
        "type": "media",
        "multiple": false,
      }
    }
  }
  // ...
}

```

The following example lets you upload and attach multiple pictures to the `restaurant` content-type:

```json title="/src/api/restaurant/content-types/restaurant/schema.json"
{
  // ...
  {
    "attributes": {
      "name": {
        "type": "string",
        "required": true
      },
      "covers": {
        "type": "media",
        "multiple": true,
      }
    }
  }
  // ...
}
```



 This is the content for the doc docusaurus/docs/cms/backend-customization.md 

 ---
title: Back-end customization
description: All elements of Strapi's back end, like routes, policies, middlewares, controllers, services, models, requests, responses, and webhooks, can be customized.
pagination_next: cms/backend-customization/requests-responses
tags:
- backend customization
- backend server
- Content-type Builder 
- controllers
- Document Service API 
- global middlewares
- GraphQL API
- HTTP server
- middlewares
- Query Engine API
- REST API 
- route middlewares
---

<div className="custom-mermaid-layout">

:::strapi Disambiguation: Strapi back end
As a headless CMS, the Strapi software as a whole can be considered as the "back end" of your website or application.
But the Strapi software itself includes 2 different parts:

- The **back-end** part of Strapi is an HTTP server that Strapi runs. Like any HTTP server, the Strapi back end receives requests and send responses. Your content is stored in a database, and the Strapi back end interacts with the database to create, retrieve, update, and delete content.
- The **front-end** part of Strapi is called the admin panel. The admin panel presents a graphical user interface to help you structure and manage the content.

Throughout this developer documentation, 'back end' refers _exclusively_ to the back-end part of Strapi.

The [Getting Started > Admin panel page](/cms/features/admin-panel) gives an admin panel overview and the [admin panel customization section](/cms/admin-panel-customization) details the various customization options available for the admin panel.
:::

The Strapi back end runs an HTTP server based on <ExternalLink to="https://koajs.com/" text="Koa"/>, a back-end JavaScript framework.

Like any HTTP server, the Strapi back end receives requests and send responses. You can send requests to the Strapi back end to create, retrieve, update, or delete data through the [REST](/cms/api/rest) or [GraphQL](/cms/api/graphql) APIs.

A request can travel through the Strapi back end as follows:

1. The Strapi server receives a [request](/cms/backend-customization/requests-responses).
2. The request hits [global middlewares](/cms/backend-customization/middlewares) that are run in a sequential order.
3. The request hits a [route](/cms/backend-customization/routes).<br/>By default, Strapi generates route files for all the content-types that you create (see [REST API documentation](/cms/api/rest)), and more routes can be added and configured.
4. [Route policies](/cms/backend-customization/policies) act as a read-only validation step that can block access to a route. [Route middlewares](/cms/backend-customization/routes#middlewares) can control the request flow and mutate the request itself before moving forward.
5. [Controllers](/cms/backend-customization/controllers) execute code once a route has been reached. [Services](/cms/backend-customization/services) are optional, additional code that can be used to build custom logic reusable by controllers.
6. The code executed by the controllers and services interacts with the [models](/cms/backend-customization/models) that are a representation of the content content structure stored in the database.<br />Interacting with the data represented by the models is handled by the [Document Service](/cms/api/document-service) and [Query Engine](/cms/api/query-engine).
7. You can implement [Document Service middlewares](/cms/api/document-service/middlewares) to control the data before it's sent to the Query Engine. The Query Engine can also use lifecycle hooks though we recommend you use Document Service middlewares unless you absolutely need to directly interact with the database.
7. The server returns a [response](/cms/backend-customization/requests-responses). The response can travel back through route middlewares and global middlewares before being sent.

Both global and route middlewares include an asynchronous callback function, `await next()`. Depending on what is returned by the middleware, the request will either go through a shorter or longer path through the back end:

* If a middleware returns nothing, the request will continue travelling through the various core elements of the back end (i.e., controllers, services, and the other layers that interact with the database).
* If a middleware returns before calling `await next()`, a response will be immediately sent, skipping the rest of the core elements. Then it will go back down the same chain it came up.

:::info
Please note that all customizations described in the pages of this section are only for the REST API. [GraphQL customizations](/cms/plugins/graphql#customization) are described in the GraphQL plugin documentation.
:::

<!-- TODO: uncomment this once we have updated the backend examples cookbook for v5 -->
<!-- :::tip Learn by example
If you prefer learning by reading examples and understanding how they can be used in real-world use cases, the [Examples cookbook](/cms/backend-customization/examples) section is another way at looking how the Strapi back end customization works.
::: -->

## Interactive diagram

The following diagram represents how requests travel through the Strapi back end. You can click on any shape to jump to the relevant page in the documentation.

<MermaidWithFallback
    chartFile="/diagrams/backend-customization.mmd"
    fallbackImage="/img/assets/diagrams/backend-customization.png"
    fallbackImageDark="/img/assets/diagrams/backend-customization_DARK.png"
    alt="Backend customization diagram"
/>

</div>


 This is the content for the doc docusaurus/docs/cms/backend-customization/controllers.md 

 ---
title: Controllers
tags: 
- backend customization
- backend server
- controllers
- createCoreController
- core controllers
- ctx
- REST API 
- routes
- sanitizeQuery function
- strapi-utils
- validateQuery function
---

# Controllers

Controllers are JavaScript files that contain a set of methods, called actions, reached by the client according to the requested [route](/cms/backend-customization/routes). Whenever a client requests the route, the action performs the business logic code and sends back the [response](/cms/backend-customization/requests-responses). Controllers represent the C in the model-view-controller (MVC) pattern.

In most cases, the controllers will contain the bulk of a project's business logic. But as a controller's logic becomes more and more complicated, it's a good practice to use [services](/cms/backend-customization/services) to organize the code into re-usable parts.

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-controllers-services.png" alt="Simplified Strapi backend diagram with controllers highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with controllers highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation 

Controllers can be [generated or added manually](#adding-a-new-controller). Strapi provides a `createCoreController` factory function that automatically generates core controllers and allows building custom ones or [extend or replace the generated controllers](#extending-core-controllers).

### Adding a new controller

A new controller can be implemented:

- with the [interactive CLI command `strapi generate`](/cms/cli)
- or manually by creating a JavaScript file:
  - in `./src/api/[api-name]/controllers/` for API controllers (this location matters as controllers are auto-loaded by Strapi from there)
  - or in a folder like `./src/plugins/[plugin-name]/server/controllers/` for plugin controllers, though they can be created elsewhere as long as the plugin interface is properly exported in the `strapi-server.js` file (see [Server API for Plugins documentation](/cms/plugins-development/server-api))

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">



```js title="./src/api/restaurant/controllers/restaurant.js"
const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({
  // Method 1: Creating an entirely custom action
  async exampleAction(ctx) {
    try {
      ctx.body = 'ok';
    } catch (err) {
      ctx.body = err;
    }
  },

  // Method 2: Wrapping a core action (leaves core logic in place)
  async find(ctx) {
    // some custom logic here
    ctx.query = { ...ctx.query, local: 'en' }

    // Calling the default core action
    const { data, meta } = await super.find(ctx);

    // some more custom logic
    meta.date = Date.now()

    return { data, meta };
  },

  // Method 3: Replacing a core action with proper sanitization
  async find(ctx) {
    // validateQuery (optional)
    // to throw an error on query params that are invalid or the user does not have access to
    await this.validateQuery(ctx);

    // sanitizeQuery to remove any query params that are invalid or the user does not have access to
    // It is strongly recommended to use sanitizeQuery even if validateQuery is used
    const sanitizedQueryParams = await this.sanitizeQuery(ctx);
    const { results, pagination } = await strapi.service('api::restaurant.restaurant').find(sanitizedQueryParams);
    const sanitizedResults = await this.sanitizeOutput(results, ctx);

    return this.transformResponse(sanitizedResults, { pagination });
  }
}));
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/controllers/restaurant.ts"

import { factories } from '@strapi/strapi';

export default factories.createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({
  // Method 1: Creating an entirely custom action
  async exampleAction(ctx) {
    try {
      ctx.body = 'ok';
    } catch (err) {
      ctx.body = err;
    }
  },

  // Method 2: Wrapping a core action (leaves core logic in place)
  async find(ctx) {
    // some custom logic here
    ctx.query = { ...ctx.query, local: 'en' }

    // Calling the default core action
    const { data, meta } = await super.find(ctx);

    // some more custom logic
    meta.date = Date.now()

    return { data, meta };
  },

  // Method 3: Replacing a core action with proper sanitization
  async find(ctx) {
    // validateQuery (optional)
    // to throw an error on query params that are invalid or the user does not have access to
    await this.validateQuery(ctx); 

    // sanitizeQuery to remove any query params that are invalid or the user does not have access to
    // It is strongly recommended to use sanitizeQuery even if validateQuery is used
    const sanitizedQueryParams = await this.sanitizeQuery(ctx);
    const { results, pagination } = await strapi.service('api::restaurant.restaurant').find(sanitizedQueryParams);

    // sanitizeOutput to ensure the user does not receive any data they do not have access to
    const sanitizedResults = await this.sanitizeOutput(results, ctx);

    return this.transformResponse(sanitizedResults, { pagination });
  }
}));
```

</TabItem>
</Tabs>

Each controller action can be an `async` or `sync` function.
Every action receives a context object (`ctx`) as a parameter. `ctx` contains the [request context](/cms/backend-customization/requests-responses#ctxrequest) and the [response context](/cms/backend-customization/requests-responses#ctxresponse).

<details><UpdatedBadge />
<summary>Example: GET /hello route calling a basic controller</summary>

A specific `GET /hello` [route](/cms/backend-customization/routes) is defined, the name of the router file (i.e. `index`) is used to call the controller handler (i.e. `index`). Every time a `GET /hello` request is sent to the server, Strapi calls the `index` action in the `hello.js` controller, which returns `Hello World!`:

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js "title="./src/api/hello/routes/hello.js"

module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/hello',
      handler: 'hello.index',
    }
  ]
}
```

```js "title="./src/api/hello/controllers/hello.js"

module.exports = {
  async index(ctx, next) { // called by GET /hello
    ctx.body = 'Hello World!'; // we could also send a JSON
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js "title="./src/api/hello/routes/hello.ts"

export default {
  routes: [
    {
      method: 'GET',
      path: '/hello',
      handler: 'hello.index',
    }
  ]
}
```

```js title="./src/api/hello/controllers/hello.ts"

export default {
  async index(ctx, next) { // called by GET /hello
    ctx.body = 'Hello World!'; // we could also send a JSON
  },
};
```

</TabItem>

</Tabs>

</details>

:::note 
When a new [content-type](/cms/backend-customization/models#content-types) is created, Strapi builds a generic controller with placeholder code, ready to be customized.
:::

:::tip 
To see a possible advanced usage for custom controllers, read the [services and controllers](/cms/backend-customization/examples/services-and-controllers) page of the backend customization examples cookbook.
:::

### Sanitization and Validation in controllers  {#sanitization-and-validation-in-controllers}

:::warning 
It's strongly recommended you sanitize (v4.8.0+) and/or validate (v4.13.0+) your incoming request query utilizing the new `sanitizeQuery` and `validateQuery` functions to prevent the leaking of private data.
:::

Sanitization means that the object is ‚Äúcleaned‚Äù and returned.

Validation means an assertion is made that the data is already clean and throws an error if something is found that shouldn't be there.

In Strapi 5, both query parameters and input data (i.e., create and update body data) are validated. Any create and update data requests with the following invalid input will throw a `400 Bad Request` error:

- relations the user do not have permission to create
- unrecognized values that are not present on a schema
- non-writable fields and internal timestamps like `createdAt` and `createdBy` fields
- setting or updating an `id` field (except for connecting relations)

#### Sanitization when utilizing controller factories

Within the Strapi factories the following functions are exposed that can be used for sanitization and validation:



| Function Name    | Parameters                 | Description                                                                          |
|------------------|----------------------------|--------------------------------------------------------------------------------------|
| `sanitizeQuery`  | `ctx`                      | Sanitizes the request query                                                          |
| `sanitizeOutput` | `entity`/`entities`, `ctx` | Sanitizes the output data where entity/entities should be an object or array of data |
| `sanitizeInput`  | `data`, `ctx`              | Sanitizes the input data                                                             |
| `validateQuery`  | `ctx`                      | Validates the request query (throws an error on invalid params)                      |
| `validateInput`  | `data`, `ctx`              | (EXPERIMENTAL) Validates the input data (throws an error on invalid data)                           |

These functions automatically inherit the sanitization settings from the model and sanitize the data accordingly based on the content-type schema and any of the content API authentication strategies, such as the Users & Permissions plugin or API tokens.

:::warning
Because these methods use the model associated with the current controller, if you query data that is from another model (i.e., doing a find for "menus" within a "restaurant" controller method), you must instead use the `@strapi/utils` tools, such as `sanitize.contentAPI.query` described in [Sanitizing Custom Controllers](#sanitize-validate-custom-controllers), or else the result of your query will be sanitized against the wrong model.
:::

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">


```js title="./src/api/restaurant/controllers/restaurant.js"

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({
  async find(ctx) {
    await this.validateQuery(ctx);
    const sanitizedQueryParams = await this.sanitizeQuery(ctx);
    const { results, pagination } = await strapi.service('api::restaurant.restaurant').find(sanitizedQueryParams);
    const sanitizedResults = await this.sanitizeOutput(results, ctx);

    return this.transformResponse(sanitizedResults, { pagination });
  }
}));
```

</TabItem>

<TabItem value="ts" label="TypeScript">



```js title="./src/api/restaurant/controllers/restaurant.ts"

import { factories } from '@strapi/strapi';

export default factories.createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({
  async find(ctx) {
    const sanitizedQueryParams = await this.sanitizeQuery(ctx);
    const { results, pagination } = await strapi.service('api::restaurant.restaurant').find(sanitizedQueryParams);
    const sanitizedResults = await this.sanitizeOutput(results, ctx);

    return this.transformResponse(sanitizedResults, { pagination });
  }
}));
```

</TabItem>
</Tabs>

#### Sanitization and validation when building custom controllers  {#sanitize-validate-custom-controllers}

Within custom controllers, there are 5 primary functions exposed via the `@strapi/utils` package that can be used for sanitization and validation:


| Function Name                | Parameters         | Description                                             |
|------------------------------|--------------------|---------------------------------------------------------|
| `sanitize.contentAPI.input`  | `data`, `schema`, `auth`      | Sanitizes the request input including non-writable fields, removing restricted relations, and other nested "visitors" added by plugins |
| `sanitize.contentAPI.output` | `data`, `schema`, `auth`      | Sanitizes the response output including restricted relations, private fields, passwords, and other nested "visitors" added by plugins  |
| `sanitize.contentAPI.query`  | `ctx.query`, `schema`, `auth` | Sanitizes the request query including filters, sort, fields, and populate  |
| `validate.contentAPI.query`  | `ctx.query`, `schema`, `auth` | Validates the request query including filters, sort, fields (currently not populate) |
| `validate.contentAPI.input`  | `data`, `schema`, `auth` | (EXPERIMENTAL) Validates the request input including non-writable fields, removing restricted relations, and other nested "visitors" added by plugins |

:::note 
Depending on the complexity of your custom controllers, you may need additional sanitization that Strapi cannot currently account for, especially when combining the data from multiple sources.
:::

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">


```js title="./src/api/restaurant/controllers/restaurant.js"

const { sanitize, validate } = require('@strapi/utils');

module.exports = {
  async findCustom(ctx) {
    const contentType = strapi.contentType('api::test.test');
    await validate.contentAPI.query(ctx.query, contentType, { auth: ctx.state.auth });
    const sanitizedQueryParams = await sanitize.contentAPI.query(ctx.query, contentType, { auth: ctx.state.auth });

    const documents = await strapi.documents(contentType.uid).findMany(sanitizedQueryParams);

    return await sanitize.contentAPI.output(documents, contentType, { auth: ctx.state.auth });
  }
}
```

</TabItem>

<TabItem value="ts" label="TypeScript">



```js title="./src/api/restaurant/controllers/restaurant.ts"

import { sanitize, validate } from '@strapi/utils';

export default {
  async findCustom(ctx) {
    const contentType = strapi.contentType('api::test.test');

    await validate.contentAPI.query(ctx.query, contentType, { auth: ctx.state.auth });
    const sanitizedQueryParams = await sanitize.contentAPI.query(ctx.query, contentType, { auth: ctx.state.auth });

    const documents = await strapi.documents(contentType.uid).findMany(sanitizedQueryParams);

    return await sanitize.contentAPI.output(documents, contentType, { auth: ctx.state.auth });
  }
}
```

</TabItem>
</Tabs>

### Extending core controllers  {#extending-core-controllers}

Default controllers and actions are created for each content-type. These default controllers are used to return responses to API requests (e.g. when `GET /api/articles/3` is accessed, the `findOne` action of the default controller for the "Article" content-type is called). Default controllers can be customized to implement your own logic. The following code examples should help you get started.

:::tip 
An action from a core controller can be replaced entirely by [creating a custom action](#adding-a-new-controller) and naming the action the same as the original action (e.g. `find`, `findOne`, `create`, `update`, or `delete`).
:::

:::tip 
When extending a core controller, you do not need to re-implement any sanitization as it will already be handled by the core controller you are extending. Where possible it's strongly recommended to extend the core controller instead of creating a custom controller.
:::

<details>
<summary>Collection type examples</summary>

:::tip
The [backend customization examples cookbook](/cms/backend-customization/examples) shows how you can overwrite a default controller action, for instance for the [`create` action](/cms/backend-customization/examples/services-and-controllers#custom-controller).
:::
<Tabs>
<TabItem value="find" label="`find()`">

```js
async find(ctx) {
  // some logic here
  const { data, meta } = await super.find(ctx);
  // some more logic

  return { data, meta };
}
```

</TabItem>
<TabItem value="findOne" label="findOne()">

```js
async findOne(ctx) {
  // some logic here
  const response = await super.findOne(ctx);
  // some more logic

  return response;
}
```

</TabItem>

<TabItem value="create" label="create()">

```js
async create(ctx) {
  // some logic here
  const response = await super.create(ctx);
  // some more logic

  return response;
}
```

</TabItem>

<TabItem value="update" label="update()">

```js
async update(ctx) {
  // some logic here
  const response = await super.update(ctx);
  // some more logic

  return response;
}
```

</TabItem>

<TabItem value="delete" label="delete()">

```js
async delete(ctx) {
  // some logic here
  const response = await super.delete(ctx);
  // some more logic

  return response;
}
```

</TabItem>
</Tabs>
</details>

<details>
<summary>Single type examples</summary>
<Tabs>

<TabItem value="find" label="find()">

```js
async find(ctx) {
  // some logic here
  const response = await super.find(ctx);
  // some more logic

  return response;
}
```

</TabItem>

<TabItem value="update" label="update()">

```js
async update(ctx) {
  // some logic here
  const response = await super.update(ctx);
  // some more logic

  return response;
}
```

</TabItem>

<TabItem value="delete" label="delete()">

```js
async delete(ctx) {
  // some logic here
  const response = await super.delete(ctx);
  // some more logic

  return response;
}
```

</TabItem>
</Tabs>
</details>

## Usage 

Controllers are declared and attached to a route. Controllers are automatically called when the route is called, so controllers usually do not need to be called explicitly. However, [services](/cms/backend-customization/services) can call controllers, and in this case the following syntax should be used:

```js
// access an API controller
strapi.controller('api::api-name.controller-name');
// access a plugin controller
strapi.controller('plugin::plugin-name.controller-name');
```

:::tip  
To list all the available controllers, run `yarn strapi controllers:list`.
:::


 This is the content for the doc docusaurus/docs/cms/backend-customization/examples.md 

 ---
title: Backend Customization Examples Cookbook
description: Learn how to use the core backend features of Strapi with the FoodAdvisor deployment
displayed_sidebar: cmsSidebar
pagination_prev: cms/backend-customization
pagination_next: cms/backend-customization/examples/authentication
---

import NotV5 from '/docs/snippets/_not-updated-to-v5.md'

# Backend customization: An examples cookbook using FoodAdvisor

<NotV5/>

The present section of the documentation is intended for developers who would like to get a deeper understanding of the Strapi back end customization possibilities.

The section is a collection of examples that demonstrate how the core components of the back-end server of Strapi can be used in a real-world project. Front-end code that interacts with the back end may also be part of some examples, but displayed in collapsed blocks by default since front-end code examples are not the main focus of this cookbook.

Examples are meant to extend the features of <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/>, the official Strapi demo application. FoodAdvisor builds a ready-made restaurants directory powered by a Strapi back end (included in the `/api` folder) and renders a <ExternalLink to="https://nextjs.org/" text="Next.js"/>-powered front-end website (included in the `/client` folder).

:::prerequisites
- üëÄ You have read the [Quick Start Guide](/cms/quick-start) and/or understood that Strapi is a **headless CMS** <Annotation>A headless CMS is a Content Management System that separates the presentation layer (i.e., the front end, where content is displayed) from the back end (where content is managed).<br /><br/>Strapi is a headless CMS that provides:<ul><li>a back-end server exposing an API for your content,</li><li>and a graphical user interface, called the admin panel, to manage the content.</li></ul>The presentation layer should be handled by another framework, not by Strapi.</Annotation> that helps you create a content structure with the [Content-Type Builder](/cms/features/content-type-builder) and add some content through the [Content Manager](/cms/features/content-manager), then exposes the content through APIs.
- üëÄ You have read the [back-end customization introduction](/cms/backend-customization) to get a general understanding of what routes, policies, middlewares, controllers, and services are in Strapi.
- üë∑ If you want to test and play with the code examples by yourself, ensure you have cloned the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> repository, setup the project, and started both the front-end and back-end servers. The Strapi admin panel should be accessible from <ExternalLink to="http://localhost:1337/admin" text="`localhost:1337/admin`"/> and the Next.js-based FoodAdvisor front-end website should be running on <ExternalLink to="http://localhost:3000" text="`localhost:3000`"/>.
:::

This section can be read from start to finish, or you might want to jump directly to a specific page to understand how a given core element from the Strapi back end can be used to solve a real-world use case example:

| I want to understand‚Ä¶ | Dedicated page |
|------------|---------------|
| How to authenticate my queries | [Authentication flow with JWT](/cms/backend-customization/examples/authentication) |
| How and when to use<br />custom controllers and services | [Custom controllers and services examples](/cms/backend-customization/examples/services-and-controllers) |
| How to use custom policies<br />and send custom errors | [Custom policies examples](/cms/backend-customization/examples/policies) |
| How to configure and use custom routes | [Custom routes examples](/cms/backend-customization/examples/routes) |
| How and when to use<br />custom global middlewares | [Custom middleware example](/cms/backend-customization/examples/middlewares) |


 This is the content for the doc docusaurus/docs/cms/backend-customization/examples/authentication.md 

 ---
title: Authentication flow with JWT
description: Learn how to authenticate REST API queries using our FoodAdvisor example
displayed_sidebar: cmsSidebar
pagination_prev: cms/backend-customization/examples
pagination_next: cms/backend-customization/examples/services-and-controllers
---

import NotV5 from '/docs/snippets/_not-updated-to-v5.md'

# Examples cookbook: Authentication flow with JWT

<NotV5/>

:::prerequisites
This page is part of the back end customization examples cookbook. Please ensure you've read its [introduction](/cms/backend-customization/examples).
:::

**üí≠ Context:**

Out of the box, the front-end website of <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> does not provide any log in functionality. Logging in is done by accessing Strapi's admin panel at <ExternalLink to="http://localhost:1337/admin`" text="`localhost:1337/admin`"/>.

<SideBySideContainer>

<SideBySideColumn>

Let's add a basic login page to the front-end, <ExternalLink to="https://nextjs.org/" text="Next.js"/>-powered website included in the `/client` folder of FoodAdvisor. The login page will be accessible at <ExternalLink to="http://localhost:3000/auth/login" text="`localhost:3000/auth/login`"/> and contain a typical email/password login form. This will allow programmatically authenticating API requests sent to Strapi.

</SideBySideColumn>

<SideBySideColumn>

<figure style={{ width: '100%', margin: '0' }}>
  <img src="/img/assets/backend-customization/tutorial-auth-flow.png" alt="Example login page" />
  <em><figcaption style={{ fontSize: '12px' }}>A possible example of a login form on the front-end website of FoodAdvisor</figcaption></em>
</figure>


</SideBySideColumn>
</SideBySideContainer>

<SideBySideContainer>
<SideBySideColumn>

**üéØ Goal**:

Create a front-end component to:

1. to display a login form,
2. send a request to the `/auth/local` route of the Strapi back-end server to authenticate,
3. get a <ExternalLink to="https://en.wikipedia.org/wiki/JSON_Web_Token" text="JSON Web Token"/> (JWT),
4. and store the JWT into the <ExternalLink to="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" text="`localStorage`"/> property of your browser for later retrieval and authentication of our requests.

</SideBySideColumn>

<SideBySideColumn>

<SubtleCallout title="Related concept">

Additional information about JWT authentication can be found in the [Users & Permissions plugin](/cms/features/users-permissions) documentation.

</SubtleCallout>

</SideBySideColumn>
</SideBySideContainer>

**üßë‚Äçüíª Code example:**

To achieve this, in the `/client` folder of the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> project, you could create a `pages/auth/login.js` file that contains the following example code.  Highlighted lines show the request sent to the `/auth/local` route provided by Strapi's Users & Permissions plugin:

This file uses the formik package - install it using `yarn add formik` and restart the dev server.

```jsx title="/client/pages/auth/login.js" {21-27}

import React from 'react';
import { useFormik } from 'formik';
import { Button, Input } from '@nextui-org/react';
import Layout from '@/components/layout';
import { getStrapiURL } from '@/utils';

const Login = () => {
  const { handleSubmit, handleChange } = useFormik({
    initialValues: {
      identifier: '',
      password: '',
    },
    onSubmit: async (values) => {
      /**
       * API URLs in Strapi are by default prefixed with /api,
       * but because the API prefix can be configured
       * with the rest.prefix property in the config/api.js file,
       * we use the getStrapiURL() method to build the proper full auth URL.
       **/
      const res = await fetch(getStrapiURL('/auth/local'), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(values),
      });
      /**
       * Gets the JWT from the server response
       */
      const { jwt } = await res.json();
      /**
       * Stores the JWT in the localStorage of the browser. 
       * A better implementation would be to do this with an authentication context provider
       * or something more sophisticated, but it's not the purpose of this tutorial.
       */
      localStorage.setItem('token', jwt); 
    },
  });
  /**
   * The following code renders a basic login form 
   * accessible from the localhost:3000/auth/login page.
   */
  return (
    <Layout>
      <div className="h-full w-full flex justify-center items-center my-24">
        <form onSubmit={handleSubmit} className="flex flex-col gap-y-6 w-4/12 ">
          <h1 className="font-bold text-3xl mb-6">Login</h1>
          <Input
            onChange={handleChange}
            type="email"
            name="identifier"
            label="Email"
            placeholder="Enter your email"
          />
          <Input
            type="password"
            name="password"
            label="Password"
            placeholder="Enter your password"
            onChange={handleChange}
          />
          <Button type="submit" className="bg-primary rounded-md text-muted">
            Login
          </Button>
        </form>
      </div>
    </Layout>
  );
};

export default Login;
```

<br />

:::strapi What's next?
Learn more about how custom [services and controllers](/cms/backend-customization/examples/services-and-controllers) can help you tweak a Strapi-based application.
:::


 This is the content for the doc docusaurus/docs/cms/backend-customization/examples/middlewares.md 

 ---
title: Custom middlewares
description: Learn how to use custom middlewares using our FoodAdvisor example
displayed_sidebar: cmsSidebar
pagination_prev: cms/backend-customization/examples/routes
---

import NotV5 from '/docs/snippets/_not-updated-to-v5.md'

# Examples cookbook: Custom global middlewares

<NotV5/>

:::prerequisites
This page is part of the back end customization examples cookbook. Please ensure you've read its [introduction](/cms/backend-customization/examples).
:::

Out of the box, <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> does not provide any custom middlewares that could use incoming requests and perform some additional logic before executing the controller code.

There are 2 types of middlewares in Strapi: **route middlewares** control access to a route while **global middlewares** have a wider scope (see reference documentation for [middlewares customization](/cms/backend-customization/middlewares)).

Custom route middlewares could be used instead of policies to control access to an endpoint (see [policies cookbook](/cms/backend-customization/examples/policies)) and could modify the context before passing it down to further core elements of the Strapi server. This page will _not_ cover custom route middlewares but rather illustrate a more elaborated usage for **custom global middlewares**.

## Populating an analytics dashboard in Google Sheets with a custom middleware

**üí≠ Context:**

In essence, a middleware gets executed between a request arriving at the server and the controller function getting executed. So, for instance, a middleware is a good place to perform some analytics. 

<SideBySideContainer>

<SideBySideColumn>

Let‚Äôs create a rudimentary example of an analytics dashboard made with Google Spreadsheets to have some insights on which restaurants pages of <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> are more visited.

</SideBySideColumn>

<SideBySideColumn>

<figure style={{ width: '100%', margin: '0' }}>
  <img src="/img/assets/backend-customization/custom-global-middleware-in-action.gif" alt="Visiting a restaurant page updates the Google Sheets spreadsheet" />
  <em><figcaption style={{ fontSize: '12px' }}>Every GET request to a restaurant's page executes the code of a custom middleware, updating a Google Sheets spreadsheet in real-time.</figcaption></em>
</figure>

</SideBySideColumn>

</SideBySideContainer>

<SideBySideContainer>

<SideBySideColumn>

**üéØ Goals**:

- Create some utility functions that interact with Google Sheets.
- Create a custom Strapi middleware that will create and/or update an existing Google Sheet document every time we have an incoming request to a Restaurants page of the FoodAdvisor project.
- Append the custom middleware to the route where we want it to get executed.

</SideBySideColumn>

<SideBySideColumn>

<SubtleCallout title="Related concept">

Additional information can be found in the [middlewares customization](/cms/backend-customization/middlewares) documentation.

</SubtleCallout>

</SideBySideColumn>

</SideBySideContainer>

**üßë‚Äçüíª Code example:**

1. In the `/api` folder of the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> project, create a `/restaurant/middlewares/utils.js` file with the following example code:

  <details>
  <summary>Example utility functions that could be used to read, write and update a Google spreadsheet:</summary>

  The following code allows reading, writing, and updating a Google spreadsheet given an API Key read from a JSON file and a spreadsheet ID retrieved from the URL:

  ![Google Spreadsheet URL](/img/assets/backend-customization/tutorial-spreadsheet-url.png)

  Additional information can be found in the official <ExternalLink to="https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values?hl=es-419" text="Google Sheets API documentation"/>.

  ```jsx title="src/api/restaurant/middlewares/utils.js"

  const { google } = require('googleapis');

  const createGoogleSheetClient = async ({
    keyFile,
    sheetId,
    tabName,
    range,
  }) => {
    async function getGoogleSheetClient() {
      const auth = new google.auth.GoogleAuth({
        keyFile,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
      });
      const authClient = await auth.getClient();
      return google.sheets({
        version: 'v4',
        auth: authClient,
      });
    }

    const googleSheetClient = await getGoogleSheetClient();

    const writeGoogleSheet = async (data) => {
      googleSheetClient.spreadsheets.values.append({
        spreadsheetId: sheetId,
        range: `${tabName}!${range}`,
        valueInputOption: 'USER_ENTERED',
        insertDataOption: 'INSERT_ROWS',
        resource: {
          majorDimension: 'ROWS',
          values: data,
        },
      });
    };

    const updateoogleSheet = async (cell, data) => {
      googleSheetClient.spreadsheets.values.update({
        spreadsheetId: sheetId,
        range: `${tabName}!${cell}`,
        valueInputOption: 'USER_ENTERED',
        resource: {
          majorDimension: 'ROWS',
          values: data,
        },
      });
    };

    const readGoogleSheet = async () => {
      const res = await googleSheetClient.spreadsheets.values.get({
        spreadsheetId: sheetId,
        range: `${tabName}!${range}`,
      });

      return res.data.values;
    };

    return {
      writeGoogleSheet,
      updateoogleSheet,
      readGoogleSheet,
    };
  };

  module.exports = {
    createGoogleSheetClient,
  };
  ```

  </details>

2. In the `/api` folder of the FoodAdvisor project, create a custom `analytics` middleware with the following code:

  ```jsx title="src/api/restaurant/middlewares/analytics.js"

  'use strict';

  const { createGoogleSheetClient } = require('./utils');

  const serviceAccountKeyFile = './gs-keys.json';
  // Replace the sheetId value with the corresponding id found in your own URL
  const sheetId = '1P7Oeh84c18NlHp1Zy-5kXD8zgpoA1WmvYL62T4GWpfk';
  const tabName = 'Restaurants';
  const range = 'A2:C';

  const VIEWS_CELL = 'C';

  const transformGSheetToObject = (response) =>
    response.reduce(
      (acc, restaurant) => ({
        ...acc,
        [restaurant[0]]: {
          id: restaurant[0],
          name: restaurant[1],
          views: restaurant[2],
          cellNum: Object.keys(acc).length + 2 // + 2 because we need to consider the header and that the initial length is 0, so our first real row would be 2,
        },
      }),
      {}
    );

  module.exports = (config, { strapi }) => {
    return async (context, next) => {
      // Generating google sheet client
      const { readGoogleSheet, updateoogleSheet, writeGoogleSheet } =
        await createGoogleSheetClient({
          keyFile: serviceAccountKeyFile,
          range,
          sheetId,
          tabName,
        });
      
      // Get the restaurant ID from the params in the URL
      const restaurantId = context.params.id;
      const restaurant = await strapi.entityService.findOne(
        'api::restaurant.restaurant',
        restaurantId
      );

      // Read the spreadsheet to get the current data
      const restaurantAnalytics = await readGoogleSheet();
      
      /** 
       * The returned data comes in the shape [1, "Mint Lounge", 23],
       * and we need to transform it into an object: {id: 1, name: "Mint Lounge", views: 23, cellNum: 2}
       */
      const requestedRestaurant =
        transformGSheetToObject(restaurantAnalytics)[restaurantId];

      if (requestedRestaurant) {
        await updateoogleSheet(
          `${VIEWS_CELL}${requestedRestaurant.cellNum}:${VIEWS_CELL}${requestedRestaurant.cellNum}`,
          [[Number(requestedRestaurant.views) + 1]]
        );
      } else {
        /** If we don't have the restaurant in the spreadsheet already, 
         * we create it with 1 view.
         */
        const newRestaurant = [[restaurant.id, restaurant.name, 1]];
        await writeGoogleSheet(newRestaurant);
      }
    
      // Call next to continue with the flow and get to the controller
      await next();
    };
  };
  ```

3. Configure the routes for the "Restaurants" content-type to execute the custom `analytics` middleware whenever a restaurant page is queried. To do so, use the following code:

  ```jsx title="src/api/restaurant/routes/restaurant.js"

  'use strict';

  const { createCoreRouter } = require('@strapi/strapi').factories;

  module.exports = createCoreRouter('api::restaurant.restaurant', {
    config: {
      findOne: {
        auth: false,
        policies: [],
        middlewares: ['api::restaurant.analytics'],
      },
    },
  });
  ```



 This is the content for the doc docusaurus/docs/cms/backend-customization/examples/policies.md 

 ---
title: Custom policies
description: Learn how to create custom policies using our FoodAdvisor example
displayed_sidebar: cmsSidebar
pagination_prev: cms/backend-customization/examples/services-and-controllers
pagination_next: cms/backend-customization/examples/routes
---

import NotV5 from '/docs/snippets/_not-updated-to-v5.md'

# Examples cookbook: Custom policies

<NotV5/>

:::prerequisites
This page is part of the back end customization examples cookbook. Please ensure you've read its [introduction](/cms/backend-customization/examples).
:::

Out of the box, <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> does not use any custom policies or route middlewares that could control access to content type endpoints.

In Strapi, controlling access to a content-type endpoint can be done either with a policy or route middleware:

- policies are read-only and allow a request to pass or return an error,
- while route middlewares can perform additional logic.

In our example, let's use a policy.

## Creating a custom policy

**üí≠ Context:**

Let's say we would like to customize the backend of <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> to prevent restaurant owners from creating fake reviews for their businesses using a [form previously created](/cms/backend-customization/examples/services-and-controllers#rest-api-queries-from-the-front-end) on the front-end website.

<SideBySideContainer>

<SideBySideColumn>

**üéØ Goals**:

1. Create a new folder for policies to apply only to the "Reviews" collection type.
2. Create a new policy file.
3. Use the `findMany()` method from the Entity Service API to get information about the owner of a restaurant when the `/reviews` endpoint is reached.
4. Return an error if the authenticated user is the restaurant's owner, or let the request pass in other cases.

</SideBySideColumn>

<SideBySideColumn>

<SubtleCallout title="Related concepts">

Additional information can be found in the [Policies](/cms/backend-customization/policies), [Routes](/cms/backend-customization/routes), and [Entity Service API](/cms/api/entity-service) documentation.

</SubtleCallout>

</SideBySideColumn>

</SideBySideContainer>

**üßë‚Äçüíª Code example:**

In the `/api` folder of the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> project, create a new `src/api/review/policies/is-owner-review.js` file with the following code:

```jsx title="src/api/review/policies/is-owner-review.js"

module.exports = async (policyContext, config, { strapi }) => {
  const { body } = policyContext.request;
  const { user } = policyContext.state;

  // Return an error if there is no authenticated user with the request
  if (!user) {
    return false;
  }
  /**
   * Queries the Restaurants collection type
   * using the Entity Service API
   * to retrieve information about the restaurant's owner.
   */ 
  const [restaurant] = await strapi.entityService.findMany(
    'api::restaurant.restaurant',
    {
      filters: {
        slug: body.restaurant,
      },
      populate: ['owner'],
    }
  );
  if (!restaurant) {
    return false;
  }

  /**
   * If the user submitting the request is the restaurant's owner,
   * we don't allow the review creation.
   */ 
  if (user.id === restaurant.owner.id) {
    return false;
  }

  return true;
};
```

:::caution
Policies or route middlewares should be declared in the configuration of a route to actually control access. Read more about routes in the [reference documentation](/cms/backend-customization/routes) or see an example in the [routes cookbook](/cms/backend-customization/examples/routes).
:::

## Sending custom errors through policies

**üí≠ Context:**

Out of the box, <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> sends a default error when a policy refuses access to a route. Let's say we want to customize the error sent when the [previously created custom policy](#creating-a-custom-policy) does not allow creating a review.

<SideBySideContainer>

<SideBySideColumn>

**üéØ Goal:**

Configure the custom policy to throw a custom error instead of the default error.

</SideBySideColumn>

<SideBySideColumn>

<SubtleCallout title="Related concept">

Additional information can be found in the [Error handling](/cms/error-handling) documentation.

</SubtleCallout>

</SideBySideColumn>

</SideBySideContainer>

**üßë‚Äçüíª Code example:**

In the `/api` folder of the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> project, update the [previously created `is-owner-review` custom policy](#creating-a-custom-policy) as follows (highlighted lines are the only modified lines):

```jsx title="src/api/review/policies/is-owner-review.js" showLineNumbers
const { errors } = require('@strapi/utils');
const { PolicyError } = errors;

module.exports = async (policyContext, config, { strapi }) => {
  const { body } = policyContext.request;
  const { user } = policyContext.state;

  // Return an error if there is no authenticated user with the request
  if (!user) {
    return false;
  }
  /**
   * Queries the Restaurants collection type
   * using the Entity Service API
   * to retrieve information about the restaurant's owner.
   */ 
  const filteredRestaurants = await strapi.entityService.findMany(
    'api::restaurant.restaurant',
    {
      filters: {
        slug: body.restaurant,
      },
      populate: ['owner'],
    }
  );

  const restaurant = filteredRestaurants[0];

  if (!restaurant) {
    return false;
  }

  /**
   * If the user submitting the request is the restaurant's owner,
   * we don't allow the review creation.
   */ 
  if (user.id === restaurant.owner.id) {
    // highlight-start
    /**
     * Throws a custom policy error
     * instead of just returning false
     * (which would result into a generic Policy Error).
     */ 
    throw new PolicyError('The owner of the restaurant cannot submit reviews', {
      errCode: 'RESTAURANT_OWNER_REVIEW', // can be useful for identifying different errors on the front end
    });
    // highlight-end
  }

  return true;
};
```

<details>
<summary>Responses sent with default policy error vs. custom policy error:</summary>

<Tabs>

<TabItem value="default-error" label="Default error response">

When a policy refuses access to a route and a default error is thrown, the following response will be sent when trying to query the content-type through the REST API:

```jsx
{
  "data": null,
  "error": {
      "status": 403,
      "name": "PolicyError",
      "message": "Policy Failed",
      "details": {}
  }
}
```

</TabItem>

<TabItem value="custom-error" label="Custom error response">

When a policy refuses access to a route and the custom policy throws the custom error defined in the code example above, the following response will be sent when trying to query the content-type through the REST API:

```jsx
{
  "data": null,
  "error": {
    "status": 403,
    "name": "PolicyError",
    "message": "The owner of the restaurant cannot submit reviews",
    "details": {
        "policy": "is-owner-review",
        "errCode": "RESTAURANT_OWNER_REVIEW"
    }
  }
}
```

</TabItem>

</Tabs>

</details>

<br />

### Using custom errors on the front end

**üí≠ Context:**

Out of the box, the Next.js-powered front-end website provided with <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> does not display errors or success messages on the front-end website when accessing content. For instance, the website will not inform the user when adding a new review with a [previously created form](/cms/backend-customization/examples/services-and-controllers#rest-api-queries-from-the-front-end) is not possible.

<SideBySideContainer>

<SideBySideColumn>

Let's say we want to customize the front end of FoodAdvisor to catch the custom error thrown by a [previously created custom policy](#creating-a-custom-policy) and display it to the user with a <ExternalLink to="https://github.com/timolins/react-hot-toast" text="React Hot Toast notification"/>. As a bonus, another toast notification will be displayed when a review is successfully created.

</SideBySideColumn>

<SideBySideColumn>

<figure style={{ width: '100%', margin: '0' }}>
  <img src="/img/assets/backend-customization/tutorial-owner-cantsubmit.png" alt="Restaurant owner can't submit reviews" />
  <em><figcaption style={{ fontSize: '12px' }}>When the restaurant's owner tries to submit a new review, a custom error is returned with the REST API response and a toast notification is displayed on the front-end website.</figcaption></em>
</figure>

</SideBySideColumn>
</SideBySideContainer>

**üéØ Goals**:

- Catch the error on the front-end website and display it within a notification.
- Send another notification in case the policy allows the creation of a new review.

**üßë‚Äçüíª Code example:**

In the `/client` folder of the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> project, you could update the [previously created `new-review` component](/cms/backend-customization/examples/services-and-controllers#rest-api-queries-from-the-front-end) as follows (modified lines are highlighted):

<details>
<summary>Example front-end code to display toast notifications for custom errors or successful review creation:</summary>

```jsx title="/client/components/pages/restaurant/RestaurantContent/Reviews/new-review.js" showLineNumbers
import { Button, Input, Textarea } from '@nextui-org/react';
import { useFormik } from 'formik';
import { useRouter } from 'next/router';
import React from 'react';
import { getStrapiURL } from '../../../../../utils';
// highlight-start
/** 
 * A notification will be displayed on the front-end using React Hot Toast
 * (See https://github.com/timolins/react-hot-toast).
 * React Hot Toast should be added to your project's dependencies;
 * Use yarn or npm to install it and it will be added to your package.json file.
 */
import toast from 'react-hot-toast';

class UnauthorizedError extends Error {
  constructor(message) {
    super(message);
  }
}
// highlight-end

const NewReview = () => {
  const router = useRouter();

  const { handleSubmit, handleChange, values } = useFormik({
    initialValues: {
      note: '',
      content: '',
    },
    onSubmit: async (values) => {
      // highlight-start
      /**
       * The previously added code is wrapped in a try/catch block.
       */
      try {
        // highlight-end
        const res = await fetch(getStrapiURL('/reviews'), {
          method: 'POST',
          body: JSON.stringify({
            restaurant: router.query.slug,
            ...values,
          }),
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json',
          },
        });

        // highlight-start
        const { data, error } = await res.json();
        /**
         * If the Strapi backend server returns an error,
         * we use the custom error message to throw a custom error.
         * If the request is a success, we display a success message.
         * In both cases, a toast notification is displayed on the front-end.
         */
        if (error) {
          throw new UnauthorizedError(error.message);
        }
        toast.success('Review created!');
        return data;
      } catch (err) {
        toast.error(err.message);
        console.error(err);
      }
    },
    // highlight-end
  });
  return (
    <div className="my-6">
      <h1 className="font-bold text-2xl mb-3">Write your review</h1>
      <form onSubmit={handleSubmit} className="flex flex-col gap-y-4">
        <Input
          onChange={handleChange}
          name="note"
          type="number"
          min={1}
          max={5}
          label="Stars"
        />
        <Textarea
          name="content"
          onChange={handleChange}
          placeholder="What do you think about this restaurant?"
        />
        <Button
          type="submit"
          className="bg-primary text-white rounded-md self-start"
        >
          Send
        </Button>
      </form>
    </div>
  );
};

export default NewReview;
```

</details>

<br />

:::strapi What's next?
Learn more about how to configure [custom routes](/cms/backend-customization/examples/routes) to use your custom policies, and how these custom routes can be used to tweak a Strapi-based application.
:::


 This is the content for the doc docusaurus/docs/cms/backend-customization/examples/routes.md 

 ---
title: Custom routes
description: Learn how to use custom routes using our FoodAdvisor example
displayed_sidebar: cmsSidebar
pagination_prev: cms/backend-customization/examples/policies
pagination_next: cms/backend-customization/examples/middlewares
---

import NotV5 from '/docs/snippets/_not-updated-to-v5.md'

# Examples cookbook: Custom routes

<NotV5/>

:::prerequisites
This page is part of the back end customization examples cookbook. Please ensure you've read its [introduction](/cms/backend-customization/examples).
:::

**üí≠ Context:**

Out of the box, <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> does not control access to its content-type endpoints.

Let's say we [previously created a policy](/cms/backend-customization/examples/policies) to restrict access to the "Reviews" content-type to some conditions, for instance to prevent a restaurant's owner to create a review for their restaurants. We must now enable the policy on the route we use to create reviews.

<SideBySideContainer>

<SideBySideColumn>

**üéØ Goals**:

- Explicitly define a routes configuration for the "Reviews" content-type.
- Configure the route used when creating a review to:
  - bypass the default Strapi authentication system
  - and restrict access depending on the [previously defined custom policy](/cms/backend-customization/examples/policies).

</SideBySideColumn>

<SideBySideColumn>

<SubtleCallout title="Related concept">

Additional information can be found in the [Policies](/cms/backend-customization/policies) and [Routes](/cms/backend-customization/routes) documentation.

</SubtleCallout>

</SideBySideColumn>

</SideBySideContainer>

**üßë‚Äçüíª Code example:**

In the `/api` folder of the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> project, replace the content of the `api/src/api/review/routes/review.js` file with the following code:

```jsx title="src/api/review/routes/review.js"

'use strict';

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::review.review', {
  config: {
    create: {
      auth: false, // set the route to bypass the normal Strapi authentication system
      policies: ['is-owner-review'], // set the route to use a custom policy
      middlewares: [],
    },
  },
});
```

<br />

:::strapi What's next?
Learn more about how to configure [custom middlewares](/cms/backend-customization/examples/middlewares) to perform additional actions that extend your Strapi-based application.
:::


 This is the content for the doc docusaurus/docs/cms/backend-customization/examples/services-and-controllers.md 

 ---
title: Custom services and controllers
description: Learn how to authenticate use custom services and controllers using our FoodAdvisor example
displayed_sidebar: cmsSidebar
pagination_prev: cms/backend-customization/examples/authentication
pagination_next: cms/backend-customization/examples/policies
tags:
- backend customization
- backend server
- controllers
- custom controllers
- custom services
- ctx
- REST API 
- services
---

import NotV5 from '/docs/snippets/_not-updated-to-v5.md'

# Examples cookbook: Custom services and controllers

<NotV5/>

:::prerequisites
This page is part of the back end customization examples cookbook. Please ensure you've read its [introduction](/cms/backend-customization/examples).
:::

From the front-end website of <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/>, you can browse a list of restaurants accessible at <ExternalLink to="http://localhost:3000/restaurants" text="`localhost:3000/restaurants`"/>. Clicking on any restaurant from the list will use the code included in the `/client` folder to display additional information about this restaurant. The content displayed on a restaurant page was created within Strapi's Content Manager and is retrieved by querying Strapi's REST API which uses code included in the `/api` folder.

This page will teach about the following advanced topics:

| Topic | Section |
|------|---------|
| Create a component that interacts with the backend of Strapi | [REST API queries from the front-end](#rest-api-queries-from-the-front-end) |
| Understand how services and controllers can play together    | [Controllers vs. services](#controllers-vs-services)     |
| Create custom services | <ul><li>A [custom service](#custom-service-creating-a-review) that only uses the Entity Service API</li><li>Another more [advanced custom service](#custom-service-sending-an-email-to-the-restaurant-owner) that uses both Entity Service API and a Strapi plugin</li></ul> |
| Use services in a controller | [Custom controller](#custom-controller) |

<br/>

### REST API queries from the front end

<SideBySideContainer>
<SideBySideColumn>

**üí≠ Context:**

Restaurant pages on the front-end website of <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> include a Reviews section that is read-only. Adding reviews requires logging in to Strapi's admin panel and adding content to the "Reviews" collection type through the [Content Manager](/cms/features/content-manager).

Let's add a small front-end component to restaurant pages. This component will allow a user to write a review directly from the front-end website.

</SideBySideColumn>

<SideBySideColumn>

<figure style={{ width: '100%', margin: '0' }}>
  <img src="/img/assets/backend-customization/tutorial-write-review.png" alt="Writing a review on the front end" />
  <em><figcaption style={{ fontSize: '12px' }}>A possible example of a form allowing users to submit a new review on a restaurant's page of the front-end website of FoodAdvisor</figcaption></em>
</figure>

</SideBySideColumn>

</SideBySideContainer>

<SideBySideContainer>
<SideBySideColumn>

**üéØ Goals**:

* Add a form to write a review.
* Display the form on any restaurants page.
* Send a POST request to Strapi's REST API when the form is submitted.
* Use the [previously stored JWT](/cms/backend-customization/examples/authentication) to authenticate the request.

</SideBySideColumn>

<SideBySideColumn>

<SubtleCallout title="Related concept">

Additional information on endpoints for content types can be found in the [REST API](/cms/api/rest#endpoints) documentation.

</SubtleCallout>

</SideBySideColumn>

</SideBySideContainer>

**üßë‚Äçüíª Code example:**

In the `/client` folder of the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> project, you could use the following code examples to:
- create a new `pages/restaurant/RestaurantContent/Reviews/new-review.js` file,
- and update the existing `components/pages/restaurant/RestaurantContent/Reviews/reviews.js`.

<details>
<summary>Example front-end code to add a component for writing reviews and display it on restaurants pages:</summary>

1. Create a new file in the `/client` folder to add a new component for writing reviews with the following code:

  ```jsx title='/client/components/pages/restaurant/RestaurantContent/Reviews/new-review.js'

  import { Button, Input, Textarea } from '@nextui-org/react';
  import { useFormik } from 'formik';
  import { useRouter } from 'next/router';
  import React from 'react';
  import { getStrapiURL } from '../../../../../utils';

  const NewReview = () => {
    const router = useRouter();

    const { handleSubmit, handleChange, values } = useFormik({
      initialValues: {
        note: '',
        content: '',
      },
      onSubmit: async (values) => {
        /**
         * Queries Strapi REST API to reach the reviews endpoint
         * using the JWT previously stored in localStorage to authenticate
         */
        const res = await fetch(getStrapiURL('/reviews'), {
          method: 'POST',
          body: JSON.stringify({
            restaurant: router.query.slug,
            ...values,
          }),
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json',
          },
        });
      },
    });
    /**
     * Renders the form
     */
    return (
      <div className="my-6">
        <h1 className="font-bold text-2xl mb-3">Write your review</h1>
        <form onSubmit={handleSubmit} className="flex flex-col gap-y-4">
          <Input
            onChange={handleChange}
            name="note"
            type="number"
            min={1}
            max={5}
            label="Stars"
          />
          <Textarea
            name="content"
            onChange={handleChange}
            placeholder="What do you think about this restaurant?"
          />
          <Button
            type="submit"
            className="bg-primary text-white rounded-md self-start"
          >
            Send
          </Button>
        </form>
      </div>
    );
  };

  export default NewReview;
  ```

2. Display the new form component on any restaurants page by adding the highlighted lines (7, 8, and 13) to the code used to render restaurant's information:

  ```jsx title='/client/components/pages/restaurant/RestaurantContent/Reviews/reviews.js' showLineNumbers
  import React from 'react';
  import delve from 'dlv';

  import { formatDistance } from 'date-fns';

  import { getStrapiMedia } from '../../../../../utils';
  // highlight-start
  import { Textarea } from '@nextui-org/react';
  import NewReview from './new-review';
  // highlight-end

  const Reviews = ({ reviews }) => {
    return (
      <div className="col-start-2 col-end-2 mt-24">
        // highlight-next-line
        <NewReview />
        {reviews &&
          reviews.map((review, index) => (
    // ‚Ä¶
  ```

</details>

<br />

### Controllers vs. Services

Controllers could contain any business logic to be executed when the client requests a route. However, as your code grows bigger and becomes more structured, it is a best practice to split the logic into specific services that do only one thing well, then call the services from controllers.

To illustrate the use of services, in this documentation the custom controller does not handle any responsibilities and delegates all the business logic to services.

Let's say we would like to customize the back end of <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> to achieve the following scenario: when submitting the [previously added review form](#rest-api-queries-from-the-front-end) on the front-end website, Strapi will create a review in the back end and notify the restaurant owner by email. Translating this to Strapi back end customization means performing 3 actions:

1. Creating a custom service to [create the review](#custom-service-creating-a-review).
2. Creating a custom service to [send an email](#custom-service-sending-an-email-to-the-restaurant-owner).
3. [Customizing the default controller](#custom-controller) provided by Strapi for the Review content-type to use the 2 new services.

<br />

### Custom service: Creating a review

**üí≠ Context:**

By default, service files in Strapi includes basic boilerplate code that use the `createCoreService` factory function.

Let's update the existing `review.js` service file for the "Reviews" collection type of <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> by replacing its code to create a review.

<SideBySideContainer>

<SideBySideColumn>

**üéØ Goals**:

- Declare a `create` method.
- Grab context from the request.
- Use the `findMany()` method from the EntityService API to find a restaurant.
- Use the `create()` method from the EntityService API to append data to the restaurant, populating the restaurant owner.
- Return the new review data.
    
</SideBySideColumn>

<SideBySideColumn>

<SubtleCallout title="Related concepts">

Additional information can be found in the [request context](/cms/backend-customization/requests-responses), [services](/cms/backend-customization/services) and [EntityService API](/cms/api/entity-service) documentation.

</SubtleCallout>

</SideBySideColumn>

</SideBySideContainer>

**üßë‚Äçüíª Code example:**

To create such a service, in the `/api` folder of the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> project, replace the content of the `src/api/review/services/review.js` file with the following code:

```jsx title="src/api/review/services/review.js"
const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::review.review', ({ strapi }) => ({
  async create(ctx) {
    const user = ctx.state.user;
    const { body } = ctx.request;

    /**
     * Queries the Restaurants collection type
     * using the Entity Service API
     * to retrieve information about the restaurant.
     */
    const restaurants = await strapi.entityService.findMany(
      'api::restaurant.restaurant',
      {
        filters: {
          slug: body.restaurant,
        },
      }
    );

    /**
     * Creates a new entry for the Reviews collection type
     * and populates data with information about the restaurant's owner
     * using the Entity Service API.
     */
    const newReview = await strapi.entityService.create('api::review.review', {
      data: {
        note: body.note,
        content: body.content,
        restaurant: restaurants[0].id,
        author: user.id,
      },
      populate: ['restaurant.owner'],
    });

    return newReview;
  },
}));
```

:::tip Tips
- In a controller's code, the `create` method from this service can be called with `strapi.service('api::review.review').create(ctx)` where `ctx` is the request's [context](/cms/backend-customization/requests-responses).
- The provided example code does not cover error handling. You should consider handling errors, for instance when the restaurant does not exist. Additional information can be found in the [Error handling](/cms/error-handling) documentation.
:::

<br />

### Custom Service: Sending an email to the restaurant owner

**üí≠ Context:**

Out of the box, <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> does not provide any automated email service feature.

Let's create an `email.js` service file to send an email. We could use it in a [custom controller](#custom-controller) to notify the restaurant owner whenever a new review is created on the front-end website.

:::callout ü§ó Optional service
This service is an advanced code example using the [Email](/cms/features/email) plugin and requires understanding how plugins and providers work with Strapi. If you don't need an email service to notify the restaurant's owner, you can skip this part and jump next to the custom [controller](#custom-controller) example.
:::

<SideBySideContainer>
<SideBySideColumn>

:::prerequisites
- You have setup a [provider for the Email plugin](/cms/features/email), for instance the <ExternalLink to="https://www.npmjs.com/package/@strapi/provider-email-sendmail" text="Sendmail"/> provider.
- In Strapi's admin panel, you have [created an `Email` single type](/cms/features/content-type-builder#creating-content-types) that contains a `from` Text field to define the sender email address.
:::

</SideBySideColumn>

<SideBySideColumn>

<figure style={{ width: '100%', margin: '0' }}>
  <img src="/img/assets/backend-customization/tutorial-single-type.png" alt="Email Single Type in Admin Panel" />
  <em><figcaption style={{ fontSize: '12px' }}>An Email single type has been created in the admin panel. It contains a "from" field used to define the sender address for the Email plugin.</figcaption></em>
</figure>

</SideBySideColumn>

</SideBySideContainer>

<SideBySideContainer>
<SideBySideColumn >

**üéØ Goals**:

- Create a new service file for the "Email" single type,
- Declare a `send()` method for this service,
- Grab the sender address stored in the Email single type using the Entity Service API,
- Use email details (recipient's address, subject, and email body) passed when invoking the service's `send()` method to send an email using the Email plugin and a previously configured provider.

</SideBySideColumn>

<SideBySideColumn>

<SubtleCallout title="Related concepts">

Additional information can be found in the [Services](/cms/backend-customization/services), [Entity Service API](/cms/api/entity-service) and [Email feature](/cms/features/email) documentation.

</SubtleCallout>

</SideBySideColumn>

</SideBySideContainer>

**üßë‚Äçüíª Code example:**

To create such a service, in the `/api` folder of the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> project, create a new `src/api/email/services/email.js` file with the following code:
    
```jsx title="src/api/email/services/email.js"

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::email.email', ({ strapi }) => ({
  async send({ to, subject, html }) {
    /**
     * Retrieves email configuration data
     * stored in the Email single type
     * using the Entity Service API.
     */
    const emailConfig = await strapi.entityService.findOne(
      'api::email.email',
      1
    );

    /**
     * Sends an email using:
     * - parameters to pass when invoking the service
     * - the 'from' address previously retrieved with the email configuration
     */
    await strapi.plugins['email'].services.email.send({
      to,
      subject,
      html,
      from: emailConfig.from,
    });
  },
}));
```

:::tip
In a controller's code, the `send` method from this email service can be called with `strapi.service('api::email.email).send(parameters)` where `parameters` is an object with the email's related information (recipient's address, subject, and email body).
:::

<br />

### Custom controller

**üí≠ Context:**

By default, controllers files in Strapi includes basic boilerplate code that use the `createCoreController` factory function. This exposes basic methods to create, retrieve, update, and delete content when reaching the requested endpoint. The default code for the controllers can be customized to perform any business logic.

Let's customize the default controller for the "Reviews" collection type of <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> with the following scenario: upon a `POST` request to the `/reviews` endpoint, the controller calls previously created services to both [create a review](#custom-service-creating-a-review) and [send an email](#custom-service-sending-an-email-to-the-restaurant-owner) to the restaurant's owner.

<SideBySideContainer>
<SideBySideColumn>

**üéØ Goals**:

- Extend the existing controller for the "Reviews" collection type.
- Declare a custom `create()` method.
- Call previously created service(s).
- Sanitize the content to be returned.

</SideBySideColumn>

<SideBySideColumn>

<SubtleCallout title="Related concept">

Additional information can be found in the [controllers](/cms/backend-customization/controllers) documentation.

</SubtleCallout>

</SideBySideColumn>

</SideBySideContainer>

**üßë‚Äçüíª Code example:**

In the `/api` folder of the <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> project, replace the content of the `src/api/review/controllers/review.js` file with one of the following code examples, depending on whether you previously created just [one custom service](#custom-service-creating-a-review) or both custom services for the review creation and the [email notification](#custom-service-sending-an-email-to-the-restaurant-owner):

<Tabs>
<TabItem value="create-only" label="Custom controller without email service">

```jsx title="src/api/review/controllers/review.js"

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::review.review', ({ strapi }) => ({
  /**
   * As the controller action is named
   * exactly like the original `create` action provided by the core controller, 
   * it overwrites it.
   */
  async create(ctx) {
    // Creates the new review using a service
    const newReview = await strapi.service('api::review.review').create(ctx);

    const sanitizedReview = await this.sanitizeOutput(newReview, ctx);

    ctx.body = sanitizedReview;
  },
}));
```

</TabItem>

<TabItem value="create-and-email" label="Custom controller with email service">

```jsx title="src/api/review/controllers/review.js"

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::review.review', ({ strapi }) => ({
  /**
   * As the controller action is named
   * exactly like the original `create` action provided by the core controller, 
   * it overwrites it.
   */
  async create(ctx) {
    // Creates the new review using a service
    const newReview = await strapi.service('api::review.review').create(ctx);

    // Sends an email to the restaurant's owner, using another service
    if (newReview.restaurant?.owner) {
      await strapi.service('api::email.email').send({
        to: newReview.restaurant.owner.email,
        subject: 'You have a new review!',
        html: `You've received a ${newReview.note} star review: ${newReview.content}`,
      });
    }

    const sanitizedReview = await this.sanitizeOutput(newReview, ctx);

    ctx.body = sanitizedReview;
  },
}));
```

</TabItem>

</Tabs>




<br />

:::strapi What's next?
Learn more about how [custom policies](/cms/backend-customization/examples/policies) can help you tweak a Strapi-based application and restrict access to some resources based on specific conditions.
:::


 This is the content for the doc docusaurus/docs/cms/backend-customization/middlewares.md 

 ---
title: Middlewares
tags:
- backend customization
- backend server
- controllers
- ctx
- global middlewares
- is-owner policy
- middlewares
- middlewares customization
- REST API 
- route middlewares
- routes
---

import MiddlewareTypes from '/docs/snippets/middleware-types.md'

# Middlewares customization

<MiddlewareTypes />

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-global-middlewares.png" alt="Simplified Strapi backend diagram with global middlewares highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with global middlewares highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

A new application-level or API-level middleware can be implemented:

- with the [interactive CLI command `strapi generate`](/cms/cli#strapi-generate)
- or manually by creating a JavaScript file in the appropriate folder (see [project structure](/cms/project-structure)):
  - `./src/middlewares/` for application-level middlewares
  - `./src/api/[api-name]/middlewares/` for API-level middlewares
  - `./src/plugins/[plugin-name]/middlewares/` for [plugin middlewares](/cms/plugins-development/server-api#middlewares)

Middlewares working with the REST API are functions like the following:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="./src/middlewares/my-middleware.js or ./src/api/[api-name]/middlewares/my-middleware.js"

module.exports = (config, { strapi })=> {
  return (context, next) => {};
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/middlewares/my-middleware.js or ./src/api/[api-name]/middlewares/my-middleware.ts"

export default (config, { strapi })=> {
  return (context, next) => {};
};
```

</TabItem>
</Tabs>

Globally scoped custom middlewares should be added to the [middlewares configuration file](/cms/configurations/middlewares#loading-order) or Strapi won't load them.

API level and plugin middlewares can be added into the specific router that they are relevant to like the following:

```js title="./src/api/[api-name]/routes/[collection-name].js or ./src/plugins/[plugin-name]/server/routes/index.js"
module.exports = {
  routes: [
    {
      method: "GET",
      path: "/[collection-name]",
      handler: "[controller].find",
      config: {
        middlewares: ["[middleware-name]"],
        // See the usage section below for middleware naming conventions
      },
    },
  ],
};
```

<details>
<summary>Example of a custom timer middleware</summary>

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="path: /config/middlewares.js"
module.exports = () => {
  return async (ctx, next) => {
    const start = Date.now();

    await next();

    const delta = Math.ceil(Date.now() - start);
    ctx.set('X-Response-Time', delta + 'ms');
  };
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/config/middlewares.ts"

export default () => {
  return async (ctx, next) => {
    const start = Date.now();

    await next();

    const delta = Math.ceil(Date.now() - start);
    ctx.set('X-Response-Time', delta + 'ms');
  };
};
```

</TabItem>
</Tabs>

</details>

The GraphQL plugin also allows [implementing custom middlewares](/cms/plugins/graphql#middlewares), with a different syntax.

## Usage

Middlewares are called different ways depending on their scope:

- use `global::middleware-name` for application-level middlewares
- use `api::api-name.middleware-name` for API-level middlewares
- use `plugin::plugin-name.middleware-name` for plugin middlewares

:::tip
To list all the registered middlewares, run `yarn strapi middlewares:list`.
:::

### Restricting content access with an "is-owner policy"

It is often required that the author of an entry is the only user allowed to edit or delete the entry. In previous versions of Strapi, this was known as an "is-owner policy". With Strapi v4, the recommended way to achieve this behavior is to use a middleware.

Proper implementation largely depends on your project's needs and custom code, but the most basic implementation could be achieved with the following procedure: 

1. From your project's folder, create a middleware with the Strapi CLI generator, by running the `yarn strapi generate` (or `npm run strapi generate`) command in the terminal.
2. Select `middleware` from the list, using keyboard arrows, and press Enter.
3. Give the middleware a name, for instance `isOwner`.
4. Choose `Add middleware to an existing API` from the list.
5. Select which API you want the middleware to apply.
6. Replace the code in the `/src/api/[your-api-name]/middlewares/isOwner.js` file with the following, replacing `api::restaurant.restaurant` in line 22 with the identifier corresponding to the API you choose at step 5 (e.g., `api::blog-post.blog-post` if your API name is `blog-post`):

  ```js showLineNumbers title="src/api/blog-post/middlewares/isOwner.js"
    "use strict";

    /**
     * `isOwner` middleware
     */

    module.exports = (config, { strapi }) => {
      // Add your own logic here.
      return async (ctx, next) => {
        const user = ctx.state.user;
        const entryId = ctx.params.id ? ctx.params.id : undefined;
        let entry = {};

        /** 
         * Gets all information about a given entry,
         * populating every relations to ensure 
         * the response includes author-related information
         */
        if (entryId) {
          entry = await strapi.documents('api::restaurant.restaurant').findOne(
            entryId,
            { populate: "*" }
          );
        }

        /**
         * Compares user id and entry author id
         * to decide whether the request can be fulfilled
         * by going forward in the Strapi backend server
         */
        if (user.id !== entry.author.id) {
          return ctx.unauthorized("This action is unauthorized.");
        } else {
          return next();
        }
      };
    };
  ```

7. Ensure the middleware is configured to apply on some routes. In the `config` object found in the `src/api/[your-api‚Äìname]/routes/[your-content-type-name].js` file, define the methods (`create`, `read`, `update`, `delete`) for which you would like the middleware to apply, and declare the `isOwner` middleware for these routes.<br /><br />For instance, if you wish to allow GET (i.e., `read` method) and POST (i.e., `create` method) requests to any user for the `restaurant` content-type in the `restaurant` API, but would like to restrict PUT (i.e., `update` method) and DELETE requests only to the user who created the entry, you could use the following code in the `src/api/restaurant/routes/restaurant.js` file:

    ```js title="src/api/restaurant/routes/restaurant.js"

    /**
     * restaurant router
     */
      
    const { createCoreRouter } = require("@strapi/strapi").factories;

    module.exports = createCoreRouter("api::restaurant.restaurant", {
      config: {
        update: {
          middlewares: ["api::restaurant.is-owner"],
        },
        delete: {
          middlewares: ["api::restaurant.is-owner"],
        },
      },
    });
    ```

:::info
You can find more information about route middlewares in the [routes documentation](/cms/backend-customization/routes).
:::


 This is the content for the doc docusaurus/docs/cms/backend-customization/models.md 

 ---
title: Models
description: Strapi models (i.e. content-types, components, and dynamic zones) define a representation of the content structure.
toc_max_heading_level: 4
tags:
- admin panel
- backend customization
- backend server
- content-type
- Content-type Builder
- models
- model schema
- lifecycle hooks
- REST API 
---

# Models

As Strapi is a headless Content Management System (CMS), creating a content structure for the content is one of the most important aspects of using the software. Models define a representation of the content structure.

There are 2 different types of models in Strapi:

- content-types, which can be collection types or single types, depending on how many entries they manage,
- and components that are content structures re-usable in multiple content-types.

If you are just starting out, it is convenient to generate some models with the [Content-type Builder](/cms/features/content-type-builder) directly in the admin panel. The user interface takes over a lot of validation tasks and showcases all the options available to create the content's content structure. The generated model mappings can then be reviewed at the code level using this documentation.

## Model creation

Content-types and components models are created and stored differently.

### Content-types

Content-types in Strapi can be created:

- with the [Content-type Builder in the admin panel](/cms/features/content-type-builder),
- or with [Strapi's interactive CLI `strapi generate`](/cms/cli#strapi-generate) command.

The content-types use the following files:

- `schema.json` for the model's [schema](#model-schema) definition. (generated automatically, when creating content-type with either method)
- `lifecycles.js` for [lifecycle hooks](#lifecycle-hooks). This file must be created manually.

These models files are stored in `./src/api/[api-name]/content-types/[content-type-name]/`, and any JavaScript or JSON file found in these folders will be loaded as a content-type's model (see [project structure](/cms/project-structure)).

:::note
In [TypeScript](/cms/typescript.md)-enabled projects, schema typings can be generated using the `ts:generate-types` command.
:::

### Components {#components-creation}

Component models can't be created with CLI tools. Use the [Content-type Builder](/cms/features/content-type-builder) or create them manually.

Components models are stored in the `./src/components` folder. Every component has to be inside a subfolder, named after the category the component belongs to (see [project structure](/cms/project-structure)).

## Model schema

The `schema.json` file of a model consists of:

- [settings](#model-settings), such as the kind of content-type the model represents or the table name in which the data should be stored,
- [information](#model-information), mostly used to display the model in the admin panel and access it through the REST and GraphQL APIs,
- [attributes](#model-attributes), which describe the content structure of the model,
- and [options](#model-options) used to defined specific behaviors on the model.

### Model settings

General settings for the model can be configured with the following parameters:

| Parameter                                          | Type   | Description                                                                                                            |
| -------------------------------------------- | ------ | ---------------------------------------------------------------------------------------------------------------------- |
| `collectionName`                                  | String | Database table name in which the data should be stored                                                    |
| `kind`<br /><br />_Optional,<br/>only for content-types_ | String | Defines if the content-type is:<ul><li>a collection type (`collectionType`)</li><li>or a single type (`singleType`)</li></ul> |

```json
// ./src/api/[api-name]/content-types/restaurant/schema.json

{
  "kind": "collectionType",
  "collectionName": "Restaurants_v1",
}
```

### Model information

The `info` key in the model's schema describes information used to display the model in the admin panel and access it through the Content API. It includes the following parameters:

<!-- ? with the new design system, do we still use FontAwesome?  -->

| Parameter            | Type   | Description                                                                                                                                 |
| -------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------- |
| `displayName`  | String | Default name to use in the admin panel                                                                                                      |
| `singularName` | String | Singular form of the content-type name.<br />Used to generate the API routes and databases/tables collection.<br /><br />Should be kebab-case. |
| `pluralName`   | String | Plural form of the content-type name.<br />Used to generate the API routes and databases/tables collection.<br /><br />Should be kebab-case.    |
| `description`  | String | Description of the model                                                                                                                   |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

  "info": {
    "displayName": "Restaurant",
    "singularName": "restaurant",
    "pluralName": "restaurants",
    "description": ""
  },
```

### Model attributes

The content structure of a model consists of a list of attributes. Each attribute has a `type` parameter, which describes its nature and defines the attribute as a simple piece of data or a more complex structure used by Strapi.

Many types of attributes are available:

- scalar types (e.g. strings, dates, numbers, booleans, etc.),
- Strapi-specific types, such as:
  - `media` for files uploaded through the [Media library](/cms/features/content-type-builder#media)
  - `relation` to describe a [relation](#relations) between content-types
  - `customField` to describe [custom fields](#custom-fields) and their specific keys
  - `component` to define a [component](#components-json) (i.e. a content structure usable in multiple content-types)
  - `dynamiczone` to define a [dynamic zone](#dynamic-zones) (i.e. a flexible space based on a list of components)
  - and the `locale` and `localizations` types, only used by the [Internationalization (i18n) plugin](/cms/features/internationalization)

The `type` parameter of an attribute should be one of the following values:

| Type categories | Available types |
|------|-------|
| String types | <ul><li>`string`</li> <li>`text`</li> <li>`richtext`</li><li>`enumeration`</li> <li>`email`</li><li>`password`</li><li>[`uid`](#uid-type)</li></ul> |
| Date types | <ul><li>`date`</li> <li>`time`</li> <li>`datetime`</li> <li>`timestamp`</li></ul> |
| Number types | <ul><li>`integer`</li><li>`biginteger`</li><li>`float`</li> <li>`decimal`</li></ul> |
| Other generic types |<ul><li>`boolean`</li><li>`json`</li></ul> |
| Special types unique to Strapi |<ul><li>`media`</li><li>[`relation`](#relations)</li><li>[`customField`](#custom-fields)</li><li>[`component`](#components-json)</li><li>[`dynamiczone`](#dynamic-zones)</li></ul> |
| Internationalization (i18n)-related types<br /><br />_Can only be used if the [i18n](/cms/features/internationalization) is enabled on the content-type_|<ul><li>`locale`</li><li>`localizations`</li></ul> |

#### Validations

Basic validations can be applied to attributes using the following parameters:

| Parameter | Type    | Description                                                                                               | Default |
| -------------- | ------- | --------------------------------------------------------------------------------------------------------- | ------- |
| `required`     | Boolean | If `true`, adds a required validator for this property                                                     | `false` |
| `max`          | Integer | Checks if the value is greater than or equal to the given maximum                                        | -       |
| `min`          | Integer | Checks if the value is less than or equal to the given minimum                                           | -       |
| `minLength`    | Integer | Minimum number of characters for a field input value                                                      | -       |
| `maxLength`    | Integer | Maximum number of characters for a field input value                                                      | -       |
| `private`      | Boolean | If `true`, the attribute will be removed from the server response.<br/><br/>üí° This is useful to hide sensitive data. | `false` |
| `configurable` | Boolean | If `false`, the attribute isn't configurable from the Content-type Builder plugin.                         | `true`  |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

{
  // ...
  "attributes": {
    "title": {
      "type": "string",
      "minLength": 3,
      "maxLength": 99,
      "unique": true
    },
    "description": {
      "default": "My description",
      "type": "text",
      "required": true
    },
    "slug": {
      "type": "uid",
      "targetField": "title"
    }
    // ...
  }
}
```

#### Database validations and settings

:::caution üöß This API is considered experimental.
These settings should be reserved to an advanced usage, as they might break some features. There are no plans to make these settings stable.
:::

Database validations and settings are custom options passed directly onto the `tableBuilder` Knex.js function during schema migrations. Database validations allow for an advanced degree of control for setting custom column settings. The following options are set in a `column: {}` object per attribute:

| Parameter     | Type    | Description                                                                                   | Default |
| ------------- | ------- | --------------------------------------------------------------------------------------------- | ------- |
| `name`        | string  | Changes the name of the column in the database                                                | -       |
| `defaultTo`   | string  | Sets the database `defaultTo`, typically used with `notNullable`                              | -       |
| `notNullable` | boolean | Sets the database `notNullable`, ensures that columns cannot be null                          | `false` |
| `unsigned`    | boolean | Only applies to number columns, removes the ability to go negative but doubles maximum length | `false` |
| `unique`      | boolean | Enforces database level unique, caution when using with draft & publish feature               | `false` |
| `type`        | string  | Changes the database type, if `type` has arguments, you should pass them in `args`            | -       |
| `args`        | array   | Arguments passed into the Knex.js function that changes things like `type`                    | `[]`    |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

{
  // ...
  "attributes": {
    "title": {
      "type": "string",
      "minLength": 3,
      "maxLength": 99,
      "unique": true,
      "column": {
        "unique": true // enforce database unique also
      }
    },
    "description": {
      "default": "My description",
      "type": "text",
      "required": true,
      "column": {
        "defaultTo": "My description", // set database level default
        "notNullable": true // enforce required at database level, even for drafts
      }
    },
    "rating": {
      "type": "decimal",
      "default": 0,
      "column": {
        "defaultTo": 0,
        "type": "decimal", // using the native decimal type but allowing for custom precision
        "args": [
          6,1 // using custom precision and scale
        ]
      }
    }
    // ...
  }
}
```

#### `uid` type

The `uid` type is used to automatically prefill the field value in the admin panel with a unique identifier (UID) (e.g. slugs for articles) based on 2 optional parameters:

- `targetField` (string): If used, the value of the field defined as a target is used to auto-generate the UID.
- `options` (string): If used, the UID is generated based on a set of options passed to <ExternalLink to="https://github.com/sindresorhus/slugify" text="the underlying `uid` generator"/>. The resulting `uid` must match the following regular expression pattern: `/^[A-Za-z0-9-_.~]*$`.

#### Relations

Relations link content-types together. Relations are explicitly defined in the [attributes](#model-attributes)  of a model with `type: 'relation'`  and accept the following additional parameters:

| Parameter                         | Description                                                                                                                                     |
| --------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |
| `relation`                  | The type of relation among these values:<ul><li>`oneToOne`</li><li>`oneToMany`</li><li>`manyToOne`</li><li>`manyToMany`</li></ul>                   |
| `target`                    | Accepts a string value as the name of the target content-type                                                                                   |
| `mappedBy` and `inversedBy`<br /><br />_Optional_ | In bidirectional relations, the owning side declares the `inversedBy` key while the inversed side declares the `mappedBy` key |

<Tabs>

<TabItem value="one-to-one" label="One-to-one">

One-to-One relationships are useful when one entry can be linked to only one other entry.

They can be unidirectional or bidirectional. In unidirectional relationships, only one of the models can be queried with its linked item.

<details>
<summary>Unidirectional use case example:</summary>

  - A blog article belongs to a category.
  - Querying an article can retrieve its category,
  - but querying a category won't retrieve the owned article.

  ```json title="./src/api/[api-name]/content-types/article/schema.json"

    // ‚Ä¶
    attributes: {
      category: {
        type: 'relation',
        relation: 'oneToOne',
        target: 'category',
      },
    },
    // ‚Ä¶
  ```

</details>

<details>
<summary>Bidirectional use case example:</summary>

  - A blog article belongs to a category.
  - Querying an article can retrieve its category,
  - and querying a category also retrieves its owned article.

  ```json title="./src/api/[api-name]/content-types/article/schema.json"

    // ‚Ä¶
    attributes: {
      category: {
        type: 'relation',
        relation: 'oneToOne',
        target: 'category',
        inversedBy: 'article',
      },
    },
    // ‚Ä¶

  ```

  ```json title="./src/api/[api-name]/content-types/category/schema.json"

    // ‚Ä¶
    attributes: {
      article: {
        type: 'relation',
        relation: 'oneToOne',
        target: 'article',
        mappedBy: 'category',
      },
    },
    // ‚Ä¶

  ```

</details>

</TabItem>

<TabItem value="one-to-many" label="One-to-Many">

One-to-Many relationships are useful when:

- an entry from a content-type A is linked to many entries of another content-type B,
- while an entry from content-type B is linked to only one entry of content-type A.

One-to-many relationships are always bidirectional, and are usually defined with the corresponding Many-to-One relationship:

<details>
<summary>Example:</summary>
A person can own many plants, but a plant is owned by only one person.

```json title="./src/api/[api-name]/content-types/plant/schema.json"

  // ‚Ä¶
  attributes: {
    owner: {
      type: 'relation',
      relation: 'manyToOne',
      target: 'api::person.person',
      inversedBy: 'plants',
    },
  },
  // ‚Ä¶

```

```json title="./src/api/person/models/schema.json"

  // ‚Ä¶
  attributes: {
    plants: {
      type: 'relation',
      relation: 'oneToMany',
      target: 'api::plant.plant',
      mappedBy: 'owner',
    },
  },
  // ‚Ä¶
```

</details>

</TabItem>

<TabItem value="many-to-one" label="Many-to-One">

Many-to-One relationships are useful to link many entries to one entry.

They can be unidirectional or bidirectional. In unidirectional relationships, only one of the models can be queried with its linked item.

<details>
<summary>Unidirectional use case example:</summary>

  A book can be written by many authors.

  ```json title="./src/api/[api-name]/content-types/book/schema.json"

    // ‚Ä¶
    attributes: {
      author: {
        type: 'relation',
        relation: 'manyToOne',
        target: 'author',
      },
    },
    // ‚Ä¶

  ```

</details>

<details>
<summary>Bidirectional use case example:</summary>

  An article belongs to only one category but a category has many articles.

  ```json title="./src/api/[api-name]/content-types/article/schema.json"

    // ‚Ä¶
    attributes: {
      author: {
        type: 'relation',
        relation: 'manyToOne',
        target: 'category',
        inversedBy: 'article',
      },
    },
    // ‚Ä¶
  ```

  ```json title="./src/api/[api-name]/content-types/category/schema.json"

    // ‚Ä¶
    attributes: {
      books: {
        type: 'relation',
        relation: 'oneToMany',
        target: 'article',
        mappedBy: 'category',
      },
    },
    // ‚Ä¶
  ```

</details>

</TabItem>

<TabItem value="many-to-many" label="Many-to-Many">

Many-to-Many relationships are useful when:

- an entry from content-type A is linked to many entries of content-type B,
- and an entry from content-type B is also linked to many entries from content-type A.

Many-to-many relationships can be unidirectional or bidirectional. In unidirectional relationships, only one of the models can be queried with its linked item.

<details>
<summary>Unidirectional use case example:</summary>

  ```json
    // ‚Ä¶
    attributes: {
      categories: {
        type: 'relation',
        relation: 'manyToMany',
        target: 'category',
      },
    },
    // ‚Ä¶
  ```

</details>

<details>
<summary>Bidirectional use case example:</summary>

An article can have many tags and a tag can be assigned to many articles.

  ```json title="/src/api/[api-name]/content-types/article/schema.json"

    // ‚Ä¶
    attributes: {
      tags: {
        type: 'relation',
        relation: 'manyToMany',
        target: 'tag',
        inversedBy: 'articles',
      },
    },
    // ‚Ä¶
  ```

  ```json title="./src/api/[api-name]/content-types/tag/schema.json"

    // ‚Ä¶
    attributes: {
      articles: {
        type: 'relation',
        relation: 'manyToMany',
        target: 'article',
        mappedBy: 'tag',
      },
    },
    // ‚Ä¶
  ```

</details>

<!-- ? not sure what to do with this note and the following example, that's why I commented them for now -->
<!-- :::tip NOTE
The `tableName` key defines the name of the join table. It has to be specified once. If it is not specified, Strapi will use a generated default one. It is useful to define the name of the join table when the name generated by Strapi is too long for the database you use.
:::

**Path ‚Äî** `./src/api/category/models/Category.settings.json`.

```js
{
  "attributes": {
    "products": {
      "collection": "product",
      "via": "categories"
    }
  }
}
``` -->

</TabItem>

</Tabs>

#### Custom fields

[Custom fields](/cms/features/custom-fields) extend Strapi‚Äôs capabilities by adding new types of fields to content-types. Custom fields are explicitly defined in the [attributes](#model-attributes) of a model with `type: customField`.

Custom fields' attributes also show the following specificities:

- a `customField` attribute whose value acts as a unique identifier to indicate which registered custom field should be used. Its value follows:
   - either the `plugin::plugin-name.field-name` format if a plugin created the custom field 
   - or the `global::field-name` format for a custom field specific to the current Strapi application
- and additional parameters depending on what has been defined when registering the custom field (see [custom fields documentation](/cms/features/custom-fields)).

```json title="./src/api/[apiName]/[content-type-name]/content-types/schema.json"

{
  // ‚Ä¶
  "attributes": {
    "attributeName": { // attributeName would be replaced by the actual attribute name
      "type": "customField",
      "customField": "plugin::color-picker.color",
      "options": {
        "format": "hex"
      }
    }
  }
  // ‚Ä¶
}
```

#### Components {#components-json}

Component fields create a relation between a content-type and a component structure. Components are explicitly defined in the [attributes](#model-attributes) of a model with `type: 'component'` and accept the following additional parameters:

| Parameter    | Type    | Description                                                                              |
| ------------ | ------- | ---------------------------------------------------------------------------------------- |
| `repeatable` | Boolean | Could be `true` or `false` depending on whether the component is repeatable or not       |
| `component`  | String  | Define the corresponding component, following this format:<br/>`<category>.<componentName>`  |

```json title="./src/api/[apiName]/restaurant/content-types/schema.json"

{
  "attributes": {
    "openinghours": {
      "type": "component",
      "repeatable": true,
      "component": "restaurant.openinghours"
    }
  }
}
```

#### Dynamic zones

Dynamic zones create a flexible space in which to compose content, based on a mixed list of [components](#components-json).

Dynamic zones are explicitly defined in the [attributes](#model-attributes)  of a model with `type: 'dynamiczone'`. They also accept a `components` array, where each component should be named following this format: `<category>.<componentName>`.

```json title="./src/api/[api-name]/content-types/article/schema.json"

{
  "attributes": {
    "body": {
      "type": "dynamiczone",
      "components": ["article.slider", "article.content"]
    }
  }
}
```

### Model options

The `options` key is used to define specific behaviors and accepts the following parameter:

| Parameter           | Type             | Description                                                                                                                                                                                                                                                                                                        |
|---------------------|------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `privateAttributes` | Array of strings | Allows treating a set of attributes as private, even if they're not actually defined as attributes in the model. It could be used to remove them from API responses timestamps. <br /><br /> The `privateAttributes` defined in the model are merged with the `privateAttributes` defined in the global Strapi configuration. |
| `draftAndPublish`   | Boolean          | Enables the draft and publish feature. <br /><br /> Default value: `true` (`false` if the content-type is created from the interactive CLI).                                                                                                                                                                                    |
| `populateCreatorFields` | Boolean | Populates `createdBy` and `updatedBy` fields in responses returned by the REST API (see [guide](/cms/api/rest/guides/populate-creator-fields) for more details).<br/><br/>Default value: `false`. |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

{
  "options": {
    "privateAttributes": ["id", "createdAt"],
    "draftAndPublish": true
  }
}
```

## Lifecycle hooks

Lifecycle hooks are functions that get triggered when Strapi queries are called. They are triggered automatically when managing content through the administration panel or when developing custom code using `queries`¬∑

Lifecycle hooks can be customized declaratively or programmatically.

:::caution
Lifecycles hooks are not triggered when using directly the <ExternalLink to="https://knexjs.org/" text="knex"/> library instead of Strapi functions.
:::

:::strapi Document Service API: lifecycles and middlewares
The Document Service API triggers various database lifecycle hooks based on which method is called. For a complete reference, see [Document Service API: Lifecycle hooks](/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service#table). Bulk actions lifecycles (`createMany`, `updateMany`, `deleteMany`) will never be triggered by a Document Service API method. [Document Service middlewares](/cms/api/document-service/middlewares) can be implemented too.
:::

### Available lifecycle events

The following lifecycle events are available:

- `beforeCreate`
- `beforeCreateMany`
- `afterCreate`
- `afterCreateMany`
- `beforeUpdate`
- `beforeUpdateMany`
- `afterUpdate`
- `afterUpdateMany`
- `beforeDelete`
- `beforeDeleteMany`
- `afterDelete`
- `afterDeleteMany`
- `beforeCount`
- `afterCount`
- `beforeFindOne`
- `afterFindOne`
- `beforeFindMany`
- `afterFindMany`

### Hook `event` object

Lifecycle hooks are functions that take an `event` parameter, an object with the following keys:

| Key      | Type              | Description                                                                                                                                                      |
| -------- | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `action` | String            | Lifecycle event that has been triggered (see [list](#available-lifecycle-events))                                                                                |
| `model`  | Array of strings (uid)            | An array of uids of the content-types whose events will be listened to.<br />If this argument is not supplied, events are listened on all content-types. |
| `params` | Object            | Accepts the following parameters:<ul><li>`data`</li><li>`select`</li><li>`where`</li><li>`orderBy`</li><li>`limit`</li><li>`offset`</li><li>`populate`</li></ul> |
| `result` | Object            | _Optional, only available with `afterXXX` events_<br /><br />Contains the result of the action.                                                                      |
| `state`  | Object            | Query state, can be used to share state between `beforeXXX` and `afterXXX` events of a query.                                                               |
<!-- TODO: `state` has not been implemented yet, ask for more info once done -->

### Declarative and programmatic usage

To configure a content-type lifecycle hook, create a `lifecycles.js` file in the `./src/api/[api-name]/content-types/[content-type-name]/` folder.

Each event listener is called sequentially. They can be synchronous or asynchronous.

<Tabs groupdId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/[api-name]/content-types/[content-type-name]/lifecycles.js"

module.exports = {
  beforeCreate(event) {
    const { data, where, select, populate } = event.params;

    // let's do a 20% discount everytime
    event.params.data.price = event.params.data.price * 0.8;
  },

  afterCreate(event) {
    const { result, params } = event;

    // do something to the result;
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/[api-name]/content-types/[content-type-name]/lifecycles.ts"

export default {
  beforeCreate(event) {
    const { data, where, select, populate } = event.params;

    // let's do a 20% discount everytime
    event.params.data.price = event.params.data.price * 0.8;
  },

  afterCreate(event) {
    const { result, params } = event;

    // do something to the result;
  },
};
```

</TabItem>
</Tabs>

Using the database layer API, it's also possible to register a subscriber and listen to events programmatically:

```js title="./src/index.js"
module.exports = {
  async bootstrap({ strapi }) {
// registering a subscriber
    strapi.db.lifecycles.subscribe({
      models: [], // optional;

      beforeCreate(event) {
        const { data, where, select, populate } = event.params;

        event.state = 'doStuffAfterWards';
      },

      afterCreate(event) {
        if (event.state === 'doStuffAfterWards') {
        }

        const { result, params } = event;

        // do something to the result
      },
    });

    // generic subscribe for generic handling
    strapi.db.lifecycles.subscribe((event) => {
      if (event.action === 'beforeCreate') {
        // do something
      }
    });
  }
}
```


 This is the content for the doc docusaurus/docs/cms/backend-customization/policies.md 

 ---
title: Policies
description: Strapi policies are functions that execute specific logic on each request before it reaches the controller. Policies can be customized according to your needs.
displayed_sidebar: cmsSidebar
tags:
- backend customization
- backend server
- controllers
- global policies
- plugin policies
- middlewares
- policies
- REST API 
- routes
---

# Policies

Policies are functions that execute specific logic on each request before it reaches the [controller](/cms/backend-customization/controllers). They are mostly used for securing business logic.

Each [route](/cms/backend-customization/routes) of a Strapi project can be associated to an array of policies. For example, a policy named `is-admin` could check that the request is sent by an admin user, and restrict access to critical routes.

Policies can be global or scoped. [Global policies](#global-policies) can be associated to any route in the project. Scoped policies only apply to a specific [API](#api-policies) or [plugin](#plugin-policies).

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-routes.png" alt="Simplified Strapi backend diagram with routes and policies highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with policies and routes highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

A new policy can be implemented:

- with the [interactive CLI command `strapi generate`](/cms/cli#strapi-generate) 
- or manually by creating a JavaScript file in the appropriate folder (see [project structure](/cms/project-structure)):
  - `./src/policies/` for global policies
  - `./src/api/[api-name]/policies/` for API policies
  - `./src/plugins/[plugin-name]/policies/` for plugin policies

<br/>

Global policy implementation example:

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/policies/is-authenticated.js"

module.exports = (policyContext, config, { strapi }) => {
  if (policyContext.state.user) { // if a session is open
    // go to next policy or reach the controller's action
    return true;
  }

  return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="./src/policies/is-authenticated.ts"

export default (policyContext, config, { strapi }) => {
  if (policyContext.state.user) { // if a session is open
    // go to next policy or reach the controller's action
    return true;
  }

  return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass
};
```

</TabItem>
</Tabs>

`policyContext` is a wrapper around the [controller](/cms/backend-customization/controllers) context. It adds some logic that can be useful to implement a policy for both REST and GraphQL.

<br/>

Policies can be configured using a `config` object:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title=".src/api/[api-name]/policies/my-policy.js"

module.exports = (policyContext, config, { strapi }) => {
    if (policyContext.state.user.role.code === config.role) { // if user's role is the same as the one described in configuration
      return true;
    }

    return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="./src/api/[api-name]/policies/my-policy.ts"

export default (policyContext, config, { strapi }) => {
    if (policyContext.state.user.role.code === config.role) { // if user's role is the same as the one described in configuration
      return true;
    }

    return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass
  };
```

</TabItem>
</Tabs>

## Usage

To apply policies to a route, add them to its configuration object (see [routes documentation](/cms/backend-customization/routes#policies)).

Policies are called different ways depending on their scope:

- use `global::policy-name` for [global policies](#global-policies)
- use `api::api-name.policy-name` for [API policies](#api-policies)
- use `plugin::plugin-name.policy-name` for [plugin policies](#plugin-policies)

:::tip
To list all the available policies, run `yarn strapi policies:list`.
:::

### Global policies

Global policies can be associated to any route in a project.

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/routes/custom-restaurant.js"

module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          Before executing the find action in the Restaurant.js controller,
          we call the global 'is-authenticated' policy,
          found at ./src/policies/is-authenticated.js.
         */
        policies: ['global::is-authenticated']
      }
    }
  ]
}
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="./src/api/restaurant/routes/custom-restaurant.ts"

export default {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          Before executing the find action in the Restaurant.js controller,
          we call the global 'is-authenticated' policy,
          found at ./src/policies/is-authenticated.js.
         */
        policies: ['global::is-authenticated']
      }
    }
  ]
}
```

</TabItem>
</Tabs>

### Plugin policies

Plugins can add and expose policies to an application. For example, the [Users & Permissions feature](/cms/features/users-permissions) comes with policies to ensure that the user is authenticated or has the rights to perform an action:

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/routes/custom-restaurant.js"

module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          The `isAuthenticated` policy prodived with the `users-permissions` plugin 
          is executed before the `find` action in the `Restaurant.js` controller.
        */
        policies: ['plugin::users-permissions.isAuthenticated']
      }
    }
  ]
}
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="./src/api/restaurant/routes/custom-restaurant.ts"

export default {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          The `isAuthenticated` policy prodived with the `users-permissions` plugin 
          is executed before the `find` action in the `Restaurant.js` controller.
        */
        policies: ['plugin::users-permissions.isAuthenticated']
      }
    }
  ]
}
```

</TabItem>
</Tabs>

### API policies

API policies are associated to the routes defined in the API where they have been declared.

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/policies/is-admin.js."

module.exports = async (policyContext, config, { strapi }) => {
  if (policyContext.state.user.role.name === 'Administrator') {
    // Go to next policy or will reach the controller's action.
    return true;
  }

  return false;
};
```

```js title="./src/api/restaurant/routes/custom-restaurant.js"

module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`
          is executed before the `find` action in the `Restaurant.js` controller.
         */
        policies: ['is-admin']
      }
    }
  ]
}


```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="./src/api/restaurant/policies/is-admin.ts"

export default (policyContext, config, { strapi }) => {
  if (policyContext.state.user.role.name === 'Administrator') {
    // Go to next policy or will reach the controller's action.
    return true;
  }

  return false;
};

```

```ts title="./src/api/restaurant/routes/custom-restaurant.ts"

export default {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`
          is executed before the `find` action in the `Restaurant.ts` controller.
         */
        policies: ['is-admin']
      }
    }
  ]
}

```

</TabItem>
</Tabs>

To use a policy in another API, reference it with the following syntax: `api::[apiName].[policyName]`:

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/category/routes/custom-category.js"

module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/categories',
      handler: 'Category.find',
      config: {
        /**
          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`
          is executed before the `find` action in the `Restaurant.js` controller.
        */
        policies: ['api::restaurant.is-admin']
      }
    }
  ]
}
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="./src/api/category/routes/custom-category.ts"

export default {
  routes: [
    {
      method: 'GET',
      path: '/categories',
      handler: 'Category.find',
      config: {
        /**
          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.ts`
          is executed before the `find` action in the `Restaurant.js` controller.
        */
        policies: ['api::restaurant.is-admin']
      }
    }
  ]
}
```

</TabItem>
</Tabs>


 This is the content for the doc docusaurus/docs/cms/backend-customization/requests-responses.md 

 ---
title: Requests and Responses 
description: Learn more about requests and responses for Strapi, the most popular headless CMS.
tags:
- backend customization
- backend server
- ctx
- REST API 
---

# Requests and Responses

The Strapi back end server is based on <ExternalLink to="https://koajs.com/" text="Koa"/>. When you send requests through the [REST API](/cms/api/rest), a context object (`ctx`) is passed to every element of the Strapi back end (e.g., [policies](/cms/backend-customization/policies), [controllers](/cms/backend-customization/controllers), [services](/cms/backend-customization/services)).

`ctx` includes 3 main objects:

- [`ctx.request`](#ctxrequest) for information about the request sent by the client making an API request,
- [`ctx.state`](#ctxstate) for information about the state of the request within the Strapi back end,
- and [`ctx.response`](#ctxresponse) for information about the response that the server will return.

:::tip
The request's context can also be accessed from anywhere in the code with the [`strapi.requestContext` function](#accessing-the-request-context-anywhere).
:::

:::info
In addition to the concepts and parameters described in the following documentation, you might find additional information in the <ExternalLink to="http://koajs.com/#request" text="Koa request documentation"/>, <ExternalLink to="https://github.com/koajs/router/blob/master/API.md" text="Koa Router documentation"/> and <ExternalLink to="http://koajs.com/#response" text="Koa response documentation"/>.
:::

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-requests-responses.png" alt="Simplified Strapi backend diagram with requests and responses highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with requests and responses highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## `ctx.request`

The `ctx.request` object contains the following parameters:

| Parameter             | Description                                                                                  | Type     |
| --------------------- | -------------------------------------------------------------------------------------------- | -------- |
| `ctx.request.body`    | Parsed version of the body. | `Object` |
| `ctx.request.files`   | Files sent with the request. | `Array` |
| `ctx.request.headers` | Headers sent with the request. | `Object` |
| `ctx.request.host`    | Host part of the URL, including the port. | `String` |
| `ctx.request.hostname`| Host part of the URL, excluding the port. | `String` |
| `ctx.request.href`    | Complete URL of the requested resource, including the protocol, domain, port (if specified), path, and query parameters. | `String` |
| `ctx.request.ip`      | IP of the person sending the request.| `String` |
| `ctx.request.ips`     | When `X-Forwarded-For` is present and `app.proxy` is enabled, an array of IPs is returned, ordered from upstream to downstream. <br /><br />For example if the value were "client, proxy1, proxy2", you would receive the `["client", "proxy1", "proxy2"]` array. | `Array` |
| `ctx.request.method`  | Request method (e.g., `GET`, `POST`). | `String` |
| `ctx.request.origin`  | URL part before the first `/`. | `String` |
| `ctx.request.params`  | Parameters sent in the URL.<br /><br/>For example, if the internal URL is `/restaurants/:id`, whatever you replace `:id` in the real request becomes accessible through `ctx.request.params.id`. | `Object` |
| `ctx.request.path`    | Path of the requested resource, excluding the query parameters. | `String` |
| `ctx.request.protocol`| Protocol being used (e.g., `https` or `http`). | `String` |
| `ctx.request.query`   | Strapi-specific [query parameters](#ctxrequestquery). | `Object` |
| `ctx.request.subdomains`| Subdomains included in the URL.<br /><br />For example, if the domain is `tobi.ferrets.example.com`, the value is the following array: `["ferrets", "tobi"]`. | `Array` |
| `ctx.request.url`     | Path and query parameters of the requested resource, excluding the protocol, domain, and port. | `String` |

<details>
<summary>Differences between protocol, origin, url, href, path, host, and hostname :</summary>

Given an API request sent to the `https://example.com:1337/api/restaurants?id=123` URL, here is what different parameters of the `ctx.request` object return:

| Parameter  | Returned value                                    |
| ---------- | ------------------------------------------------- |
| `ctx.request.href`     | `https://example.com:1337/api/restaurants?id=123` |
| `ctx.request.protocol` | `https`                                           |
| `ctx.request.host`     | `localhost:1337`                                  |
| `ctx.request.hostname` | `localhost`                                       |
| `ctx.request.origin`   | `https://example.com:1337`                          |
| `ctx.request.url`      | `/api/restaurants?id=123`                         |
| `ctx.request.path`     | `/api/restaurants`                                |

</details>

### `ctx.request.query`

`ctx.request` provides a `query` object that gives access to Strapi query parameters. The following table lists available parameters with a short description and a link to the relevant REST API documentation section (see [REST API parameters](/cms/api/rest/parameters) for more information):

| Parameter | Description                                                                                                                                            | Type                 |
| -------------------------------------| --------------------------------------------------------------------------------------------------------------------------- | -------------------- |
| `ctx.request.query`<br />`ctx.query` | The whole query object.                                                                                                    | `Object`             |
| `ctx.request.query.sort`             | Parameters to [sort the response](/cms/api/rest/sort-pagination.md#sorting)                                            | `String` or `Array`  |
| `ctx.request.query.filters`          | Parameters to [filter the response](/cms/api/rest/filters)                                | `Object`             |
| `ctx.request.query.populate`         | Parameters to [populate relations, components, or dynamic zones](/cms/api/rest/populate-select#population)             | `String` or `Object` |
| `ctx.request.query.fields`           | Parameters to [select only specific fields to return with the response](/cms/api/rest/populate-select#field-selection) | `Array`              |
| `ctx.request.query.pagination`       | Parameter to [page through entries](/cms/api/rest/sort-pagination.md#pagination)                                       | `Object`             |
| `ctx.request.query.publicationState` | Parameter to [select the Draft & Publish state](/cms/api/rest/status)            | `String`             |
| `ctx.request.query.locale`           | Parameter to [select one or multiple locales](/cms/api/rest/locale)                         | `String` or `Array`  |

## `ctx.state`

The `ctx.state` object gives access to the state of the request within the Strapi back end, including specific values about the [user](#ctxstateuser), [authentication](#ctxstateauth), [route](#ctxstateroute):

| Parameter                  | Description                                                                 | Type     |
| ---------------------------|---------------------------------------------------------------------------- | -------- |
| `ctx.state.isAuthenticated`| Returns whether the current user is authenticated in any way.               | `Boolean` |

### `ctx.state.user`

The `ctx.state.user` object gives access to information about the user performing the request and includes the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.state.user`| User's information. Only one relation is populated.                   | `Object` |
| `ctx.state.user.role`| The user's role | `Object` |
<!-- which type of "user" are we talking about here? a "U&P"-related user? -->

### `ctx.state.auth`

The `ctx.state.auth` object gives access to information related to the authentication and includes the following parameters:

| Parameter                     | Description                                                                                  | Type     |
| ------------------------------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.state.auth.strategy`     | Information about the currently used authentication strategy ([Users & Permissions plugin](/cms/features/users-permissions) or [API tokens](/cms/features/api-tokens)) | `Object` |
| `ctx.state.auth.strategy.name`| Name of the currently used strategy                                                          | `String` |
| `ctx.state.auth.credentials`  | The user's credentials                                                                      | `String` |
<!-- ? ctx.state.auth.strategy seems to include the authenticate and verify functions. should we document them somewhere? -->
<!-- ? not sure what credentials are used for ? -->

### `ctx.state.route`

The `ctx.state.route` object gives access to information related to the current route and includes the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.state.route.method`| Method used to access the current route. | `String` |
| `ctx.state.route.path`| Path of the current route. | `String` |
| `ctx.state.route.config`| Configuration information about the current route. | `Object` |
| `ctx.state.route.handler`| Handler (controller) of the current route. | `Object` |
| `ctx.state.route.info`| Additional information about the current route, such as the apiName and the API request type. | `Object` |
| `ctx.state.route.info.apiName`| Name of the used API.  | `String` |
| `ctx.state.route.info.type`| Type of the used API. | `String` |

## `ctx.response`

The `ctx.response` object gives access to information related to the response that the server will return and includes the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.response.body`| Body of the response. | `Any` |
| `ctx.response.status` | Status code of the response. | `Integer` |
| `ctx.response.message`| Status message of the response.<br/><br />By default, `response.message` is associated with `response.status`. | `String` |
| `ctx.response.header`<br />`ctx.response.headers`| Header(s) sent with the response. | `Object` |
| `ctx.response.length`| <ExternalLink to="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length" text="`Content-Length`"/> header value as a number when present, or deduces it from `ctx.body` when possible; otherwise, returns `undefined`. | `Integer` |
| `ctx.response.redirect`<br />`ctx.response.redirect(url, [alt])` | Performs a `302` redirect to the URL. The string "back" is special-cased to provide Referrer support; when Referrer is not present, alt or "/" is used.<br /><br />Example: `ctx.response.redirect('back', '/index.html');` | `Function` |
| `ctx.response.attachment`<br /><br />`ctx.response.attachment([filename], [options])` | Sets <ExternalLink to="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition" text="`Content-Disposition`"/> header to "attachment" to signal the client to prompt for download. Optionally specify the filename of the download and some <ExternalLink to="https://github.com/jshttp/content-disposition#options" text="options"/>. | `Function` |
| `ctx.response.type`| <ExternalLink to="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type" text="`Content-Type`"/> header, void of parameters such as "charset". | `String` |
| `ctx.response.lastModified`| <ExternalLink to="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified" text="`Last-Modified`"/> header as a Date, if it exists. | `DateTime` |
| `ctx.response.etag`| Sets the <ExternalLink to="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag" text="`ETag`"/> of a response including the wrapped "s.<br/>There is no corresponding `response.etag` getter. | `String` |
<!-- I don't understand what these 5 last lines above mean, just copied and pasted them from the user's PR ü§∑ ‚Äî piwi -->

## Accessing the request context anywhere

Strapi exposes a way to access the current request context from anywhere in the code (e.g. lifecycle functions).

You can access the request as follows:

```js
const ctx = strapi.requestContext.get();
```

You should only use this inside of functions that will be called in the context of an HTTP request.

```js
// correct

const service = {
  myFunction() {
    const ctx = strapi.requestContext.get();
    console.log(ctx.state.user);
  },
};

// incorrect
const ctx = strapi.requestContext.get();

const service = {
  myFunction() {
    console.log(ctx.state.user);
  },
};
```

**Example:**

```js title="./api/test/content-types/article/lifecycles.js"

module.exports = {
  beforeUpdate() {
    const ctx = strapi.requestContext.get();

    console.log('User info in service: ', ctx.state.user);
  },
};
```

:::note
Strapi uses a Node.js feature called <ExternalLink to="https://nodejs.org/docs/latest-v16.x/api/async_context.html#class-asynclocalstorage" text="AsyncLocalStorage"/> to make the context available anywhere.
:::


 This is the content for the doc docusaurus/docs/cms/backend-customization/routes.md 

 ---
title: Routes
description: Strapi routes handle requests to your content and are auto-generated for your content-types. Routes can be customized according to your needs.
displayed_sidebar: cmsSidebar
tags:
- backend customization
- backend server
- controllers
- core routers
- custom routers
- ctx
- middlewares
- policies
- public routes
- REST API 
- routes
---

# Routes

Requests sent to Strapi on any URL are handled by routes. By default, Strapi generates routes for all the content-types (see [REST API documentation](/cms/api/rest)). Routes can be [added](#implementation) and configured:

- with [policies](#policies), which are a way to block access to a route,
- and with [middlewares](#middlewares), which are a way to control and change the request flow and the request itself.

Once a route exists, reaching it executes some code handled by a controller (see [controllers documentation](/cms/backend-customization/controllers)). To view all existing routes and their hierarchal order, you can run `yarn strapi routes:list` (see [CLI reference](/cms/cli)).

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-routes.png" alt="Simplified Strapi backend diagram with routes highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with routes highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

Implementing a new route consists in defining it in a router file within the `./src/api/[apiName]/routes` folder (see [project structure](/cms/project-structure)).

There are 2 different router file structures, depending on the use case:

- configuring [core routers](#configuring-core-routers)
- or creating [custom routers](#creating-custom-routers).

### Configuring core routers

Core routers (i.e. `find`, `findOne`, `create`, `update`, and `delete`) correspond to [default routes](/cms/api/rest#endpoints) automatically created by Strapi when a new [content-type](/cms/backend-customization/models#model-creation) is created.

Strapi provides a `createCoreRouter` factory function that automatically generates the core routers and allows:

- passing in configuration options to each router
- and disabling some core routers to [create custom ones](#creating-custom-routers).

A core router file is a JavaScript file exporting the result of a call to `createCoreRouter` with the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `prefix`  | Allows passing in a custom prefix to add to all routers for this model (e.g. `/test`)        | `String` |
| `only`    | Core routes that will only be loaded<br /><br/>Anything not in this array is ignored.        | `Array` | -->
| `except`  | Core routes that should not be loaded<br/><br />This is functionally the opposite of the `only` parameter. | `Array` |
| `config`  | Configuration to handle [policies](#policies), [middlewares](#middlewares) and [public availability](#public-routes) for the route | `Object` |

<br/>

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/[apiName]/routes/[routerName].js (e.g './src/api/restaurant/routes/restaurant.js')"

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::restaurant.restaurant', {
  prefix: '',
  only: ['find', 'findOne'],
  except: [],
  config: {
    find: {
      auth: false,
      policies: [],
      middlewares: [],
    },
    findOne: {},
    create: {},
    update: {},
    delete: {},
  },
});
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/[apiName]/routes/[routerName].ts (e.g './src/api/restaurant/routes/restaurant.ts')"

import { factories } from '@strapi/strapi'; 

export default factories.createCoreRouter('api::restaurant.restaurant', {
  prefix: '',
  only: ['find', 'findOne'],
  except: [],
  config: {
    find: {
      auth: false,
      policies: [],
      middlewares: [],
    },
    findOne: {},
    create: {},
    update: {},
    delete: {},
  },
});
```

</TabItem>
</Tabs>

<br />

Generic implementation example:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/routes/restaurant.js"

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::restaurant.restaurant', {
  only: ['find'],
  config: {
    find: {
      auth: false,
      policies: [],
      middlewares: [],
    }
  }
});
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/routes/restaurant.ts"

import { factories } from '@strapi/strapi'; 

export default factories.createCoreRouter('api::restaurant.restaurant', {
  only: ['find'],
  config: {
    find: {
      auth: false,
      policies: [],
      middlewares: [],
    }
  }
});
```

</TabItem>
</Tabs>

This only allows a `GET` request on the `/restaurants` path from the core `find` [controller](/cms/backend-customization/controllers) without authentication.

### Creating custom routers

Creating custom routers consists in creating a file that exports an array of objects, each object being a route with the following parameters:

| Parameter                  | Description                                                                      | Type     |
| -------------------------- | -------------------------------------------------------------------------------- | -------- |
| `method`                   | Method associated to the route (i.e. `GET`, `POST`, `PUT`, `DELETE` or `PATCH`)  | `String` |
| `path`                     | Path to reach, starting with a forward-leading slash (e.g. `/articles`)| `String` |
| `handler`                  | Function to execute when the route is reached.<br/>Should follow this syntax: `<controllerName>.<actionName>` | `String` |
| `config`<br /><br />_Optional_ | Configuration to handle [policies](#policies), [middlewares](#middlewares) and [public availability](#public-routes) for the route<br/><br/>           | `Object` |

<br/>

Dynamic routes can be created using parameters and regular expressions. These parameters will be exposed in the `ctx.params` object. For more details, please refer to the <ExternalLink to="https://github.com/pillarjs/path-to-regexp" text="PathToRegex"/> documentation.

:::caution
Routes files are loaded in alphabetical order. To load custom routes before core routes, make sure to name custom routes appropriately (e.g. `01-custom-routes.js` and `02-core-routes.js`).
:::

<details>

<summary>Example of a custom router using URL parameters and regular expressions for routes</summary>

In the following example, the custom routes file name is prefixed with `01-` to make sure the route is reached before the core routes.

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/routes/01-custom-restaurant.js"

module.exports = {
  routes: [
    { // Path defined with an URL parameter
      method: 'POST',
      path: '/restaurants/:id/review', 
      handler: 'restaurant.review',
    },
    { // Path defined with a regular expression
      method: 'GET',
      path: '/restaurants/:category([a-z]+)', // Only match when the URL parameter is composed of lowercase letters
      handler: 'restaurant.findByCategory',
    }
  ]
}
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/routes/01-custom-restaurant.ts"

export default {
  routes: [
    { // Path defined with a URL parameter
      method: 'GET',
      path: '/restaurants/:category/:id',
      handler: 'Restaurant.findOneByCategory',
    },
    { // Path defined with a regular expression
      method: 'GET',
      path: '/restaurants/:region(\\d{2}|\\d{3})/:id', // Only match when the first parameter contains 2 or 3 digits.
      handler: 'Restaurant.findOneByRegion',
    }
  ]
}
```

</TabItem>
</Tabs>

</details>

## Configuration

Both [core routers](#configuring-core-routers) and [custom routers](#creating-custom-routers) have the same configuration options. The routes configuration is defined in a `config` object that can be used to handle [policies](#policies) and [middlewares](#middlewares) or to [make the route public](#public-routes).

### Policies

[Policies](/cms/backend-customization/policies) can be added to a route configuration:

- by pointing to a policy registered in `./src/policies`, with or without passing a custom configuration
- or by declaring the policy implementation directly, as a function that takes `policyContext` to extend <ExternalLink to="https://koajs.com/#context" text="Koa's context"/> (`ctx`) and the `strapi` instance as arguments (see [policies documentation](/cms/backend-customization/routes))

<Tabs groupId="core-vs-custom-router">

<TabItem value="core-router" label="Core router policy">

<Tabs  groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/routes/restaurant.js"

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::restaurant.restaurant', {
  config: {
    find: {
      policies: [
        // point to a registered policy
        'policy-name',

        // point to a registered policy with some custom configuration
        { name: 'policy-name', config: {} }, 
        
        // pass a policy implementation directly
        (policyContext, config, { strapi }) => {
          return true;
        },
      ]
    }
  }
});
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/routes/restaurant.ts"

import { factories } from '@strapi/strapi';

export default factories.createCoreRouter('api::restaurant.restaurant', {
  config: {
    find: {
      policies: [
        // point to a registered policy
        'policy-name',

        // point to a registered policy with some custom configuration
        { name: 'policy-name', config: {} }, 
        
        // pass a policy implementation directly
        (policyContext, config, { strapi }) => {
          return true;
        },
      ]
    }
  }
});
```

</TabItem>
</Tabs>

</TabItem>

<TabItem value="custom-router" label="Custom router policy">

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/routes/custom-restaurant.js"

module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/articles/customRoute',
      handler: 'api::api-name.controllerName.functionName', // or 'plugin::plugin-name.controllerName.functionName' for a plugin-specific controller
      config: {
        policies: [
          // point to a registered policy
          'policy-name',

          // point to a registered policy with some custom configuration
          { name: 'policy-name', config: {} }, 

          // pass a policy implementation directly
          (policyContext, config, { strapi }) => {
            return true;
          },
        ]
      },
    },
  ],
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/routes/custom-restaurant.ts"

export default {
  routes: [
    {
      method: 'GET',
      path: '/articles/customRoute',
      handler: 'api::api-name.controllerName.functionName', // or 'plugin::plugin-name.controllerName.functionName' for a plugin-specific controller
      config: {
        policies: [
          // point to a registered policy
          'policy-name',

          // point to a registered policy with some custom configuration
          { name: 'policy-name', config: {} }, 

          // pass a policy implementation directly
          (policyContext, config, { strapi }) => {
            return true;
          },
        ]
      },
    },
  ],
};
```

</TabItem>
</Tabs>

</TabItem>

</Tabs>

### Middlewares

[Middlewares](/cms/backend-customization/middlewares) can be added to a route configuration:

- by pointing to a middleware registered in `./src/middlewares`, with or without passing a custom configuration
- or by declaring the middleware implementation directly, as a function that takes <ExternalLink to="https://koajs.com/#context" text="Koa's context"/> (`ctx`) and the `strapi` instance as arguments:

<Tabs groupId="core-vs-custom-router">

<TabItem value="core-router" label="Core router middleware">

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/routes/restaurant.js"

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::restaurant.restaurant', {
  config: {
    find: {
      middlewares: [
        // point to a registered middleware
        'middleware-name', 

        // point to a registered middleware with some custom configuration
        { name: 'middleware-name', config: {} }, 

        // pass a middleware implementation directly
        (ctx, next) => {
          return next();
        },
      ]
    }
  }
});
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/routes/restaurant.ts"

import { factories } from '@strapi/strapi';

export default factories.createCoreRouter('api::restaurant.restaurant', {
  config: {
    find: {
      middlewares: [
        // point to a registered middleware
        'middleware-name', 

        // point to a registered middleware with some custom configuration
        { name: 'middleware-name', config: {} }, 

        // pass a middleware implementation directly
        (ctx, next) => {
          return next();
        },
      ]
    }
  }
});
```

</TabItem>
</Tabs>

</TabItem>

<TabItem value="custom-router" label="Custom router middleware">

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/routes/custom-restaurant.js"

module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/articles/customRoute',
      handler: 'api::api-name.controllerName.functionName', // or 'plugin::plugin-name.controllerName.functionName' for a plugin-specific controller
      config: {
        middlewares: [
          // point to a registered middleware
          'middleware-name', 

          // point to a registered middleware with some custom configuration
          { name: 'middleware-name', config: {} }, 

          // pass a middleware implementation directly
          (ctx, next) => {
            return next();
          },
        ],
      },
    },
  ],
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/routes/custom-restaurant.ts"

export default  {
  routes: [
    {
      method: 'GET',
      path: '/articles/customRoute',
      handler: 'api::api-name.controllerName.functionName', // or 'plugin::plugin-name.controllerName.functionName' for a plugin-specific controller
      config: {
        middlewares: [
          // point to a registered middleware
          'middleware-name', 

          // point to a registered middleware with some custom configuration
          { name: 'middleware-name', config: {} }, 

          // pass a middleware implementation directly
          (ctx, next) => {
            return next();
          },
        ],
      },
    },
  ],
};
```

</TabItem>
</Tabs>

</TabItem>

</Tabs>

### Public routes

By default, routes are protected by Strapi's authentication system, which is based on [API tokens](/cms/features/api-tokens) or on the use of the [Users & Permissions plugin](/cms/features/users-permissions).

In some scenarios, it can be useful to have a route publicly available and control the access outside of the normal Strapi authentication system. This can be achieved by setting the `auth` configuration parameter of a route to `false`:

<Tabs groupId="core-vs-custom-router">

<TabItem value="core-router" label="Core router with a public route">

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/routes/restaurant.js"

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::restaurant.restaurant', {
  config: {
    find: {
      auth: false
    }
  }
});
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/routes/restaurant.ts"

import { factories } from '@strapi/strapi';

export default  factories.createCoreRouter('api::restaurant.restaurant', {
  config: {
    find: {
      auth: false
    }
  }
});
```

</TabItem>
</Tabs>

</TabItem>

<TabItem value="custom-router" label="Custom router with a public route">

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/routes/custom-restaurant.js"

module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/articles/customRoute',
      handler: 'api::api-name.controllerName.functionName', // or 'plugin::plugin-name.controllerName.functionName' for a plugin-specific controller
      config: {
        auth: false,
      },
    },
  ],
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/routes/custom-restaurant.ts"

export default  {
  routes: [
    {
      method: 'GET',
      path: '/articles/customRoute',
      handler: 'api::api-name.controllerName.functionName', // or 'plugin::plugin-name.controllerName.functionName' for a plugin-specific controller
      config: {
        auth: false,
      },
    },
  ],
};
```

</TabItem>
</Tabs>

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/cms/backend-customization/services.md 

 ---
title: Services
description: Strapi services are a set of reusable functions, useful to simplify controllers logic.
displayed_sidebar: cmsSidebar
tags:
- backend customization
- backend server
- controllers
- createCoreService 
- services
- REST API 
---

# Services

Services are a set of reusable functions. They are particularly useful to respect the "don‚Äôt repeat yourself" (DRY) programming concept and to simplify [controllers](/cms/backend-customization/controllers.md) logic.

<figure style={{width: '100%', margin: '0'}}>
  <img src="/img/assets/backend-customization/diagram-controllers-services.png" alt="Simplified Strapi backend diagram with services highlighted" />
  <em><figcaption style={{fontSize: '12px'}}>The diagram represents a simplified version of how a request travels through the Strapi back end, with services highlighted. The backend customization introduction page includes a complete, <a href="/cms/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

Services can be [generated or added manually](#adding-a-new-service). Strapi provides a `createCoreService` factory function that automatically generates core services and allows building custom ones or [extend or replace the generated services](#extending-core-services).

### Adding a new service

A new service can be implemented:

- with the [interactive CLI command `strapi generate`](/cms/cli#strapi-generate)
- or manually by creating a JavaScript file in the appropriate folder (see [project structure](/cms/project-structure.md)):
  - `./src/api/[api-name]/services/` for API services
  - or `./src/plugins/[plugin-name]/services/` for [plugin services](/cms/plugins-development/server-api#services).

To manually create a service, export a factory function that returns the service implementation (i.e. an object with methods). This factory function receives the `strapi` instance:

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/services/restaurant.js"

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({
  // Method 1: Creating an entirely new custom service
  async exampleService(...args) {
    let response = { okay: true }

    if (response.okay === false) {
      return { response, error: true }
    }

    return response
  },

  // Method 2: Wrapping a core service (leaves core logic in place)
  async find(...args) {  
    // Calling the default core controller
    const { results, pagination } = await super.find(...args);

    // some custom logic
    results.forEach(result => {
      result.counter = 1;
    });

    return { results, pagination };
  },

  // Method 3: Replacing a core service
  async findOne(documentId, params = {}) {
    return strapi.documents('api::restaurant.restaurant').findOne(documentId, this.getFetchParams(params));
  }
}));
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/services/restaurant.ts"

import { factories } from '@strapi/strapi'; 

export default factories.createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({
  // Method 1: Creating an entirely custom service
  async exampleService(...args) {
    let response = { okay: true }

    if (response.okay === false) {
      return { response, error: true }
    }

    return response
  },

  // Method 2: Wrapping a core service (leaves core logic in place)
  async find(...args) {  
    // Calling the default core controller
    const { results, pagination } = await super.find(...args);

    // some custom logic
    results.forEach(result => {
      result.counter = 1;
    });

    return { results, pagination };
  },

  // Method 3: Replacing a core service
  async findOne(documentId, params = {}) {
     return strapi.documents('api::restaurant.restaurant').findOne(documentId, this.getFetchParams(params));
  }
}));
```

</TabItem>
</Tabs>

:::strapi Document Service API
To get started creating your own services, see Strapi's built-in functions in the [Document Service API](/cms/api/document-service) documentation.
:::

<details>

<summary>Example of a custom email service (using Nodemailer)</summary>

The goal of a service is to store reusable functions. A `sendNewsletter` service could be useful to send emails from different functions in our codebase that have a specific purpose:

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/services/restaurant.js"


const { createCoreService } = require('@strapi/strapi').factories;
const nodemailer = require('nodemailer'); // Requires nodemailer to be installed (npm install nodemailer)

// Create reusable transporter object using SMTP transport.
const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: {
    user: 'user@gmail.com',
    pass: 'password',
  },
});

module.exports = createCoreService('api::restaurant.restaurant', ({ strapi }) => ({
  sendNewsletter(from, to, subject, text) {
    // Setup e-mail data.
    const options = {
      from,
      to,
      subject,
      text,
    };

    // Return a promise of the function that sends the email.
    return transporter.sendMail(options);
  },
}));
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/services/restaurant.ts"


import { factories } from '@strapi/strapi'; 
const nodemailer = require('nodemailer'); // Requires nodemailer to be installed (npm install nodemailer)

// Create reusable transporter object using SMTP transport.
const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: {
    user: 'user@gmail.com',
    pass: 'password',
  },
});

export default factories.createCoreService('api::restaurant.restaurant', ({ strapi }) => ({
  sendNewsletter(from, to, subject, text) {
    // Setup e-mail data. 
    const options = {
      from,
      to,
      subject,
      text,
    };

    // Return a promise of the function that sends the email.
    return transporter.sendMail(options);
  },
}));
```

</TabItem>

</Tabs>

The service is now available through the `strapi.service('api::restaurant.restaurant').sendNewsletter(...args)` global variable. It can be used in another part of the codebase, like in the following controller:

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/api/restaurant/controllers/restaurant.js"

module.exports = createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({
  // GET /hello
  async signup(ctx) {
    const { userData } = ctx.body;

    // Store the new user in database.
    const user = await strapi.service('plugin::users-permissions.user').add(userData);

    // Send an email to validate his subscriptions.
    strapi.service('api::restaurant.restaurant').sendNewsletter('welcome@mysite.com', user.email, 'Welcome', '...');

    // Send response to the server.
    ctx.send({
      ok: true,
    });
  },
}));
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./src/api/restaurant/controllers/restaurant.ts"

export default factories.createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({
  // GET /hello
  async signup(ctx) {
    const { userData } = ctx.body;

    // Store the new user in database.
    const user = await strapi.service('plugin::users-permissions.user').add(userData);

    // Send an email to validate his subscriptions.
    strapi.service('api::restaurant.restaurant').sendNewsletter('welcome@mysite.com', user.email, 'Welcome', '...');

    // Send response to the server.
    ctx.send({
      ok: true,
    });
  },
}));
```

</TabItem>

</Tabs>

</details>

:::note
When a new [content-type](/cms/backend-customization/models.md#content-types) is created, Strapi builds a generic service with placeholder code, ready to be customized.
:::

### Extending core services

Core services are created for each content-type and could be used by [controllers](/cms/backend-customization/controllers.md) to execute reusable logic through a Strapi project. Core services can be customized to implement your own logic. The following code examples should help you get started.

:::tip
A core service can be replaced entirely by [creating a custom service](#adding-a-new-service) and naming it the same as the core service (e.g. `find`, `findOne`, `create`, `update`, or `delete`).
:::

<details>
<summary>Collection type examples</summary>

<Tabs groupdId="crud-methods">

<TabItem value="find" label="find()">

```js
async find(params) {
  // some logic here
  const { results, pagination } = await super.find(params);
  // some more logic

  return { results, pagination };
}
```

</TabItem>

<TabItem value="find-one" label="findOne()">

```js
async findOne(documentId, params) {
  // some logic here
  const result = await super.findOne(documentId, params);
  // some more logic

  return result;
}
```

</TabItem>

<TabItem value="create" label="create()">

```js
async create(params) {
  // some logic here
  const result = await super.create(params);
  // some more logic

  return result;
}
```

</TabItem>

<TabItem value="update" label="update()">

```js
async update(documentId, params) {
  // some logic here
  const result = await super.update(documentId, params);
  // some more logic

  return result;
}
```

</TabItem>

<TabItem value="delete" label="delete()">

```js
async delete(documentId, params) {
  // some logic here
  const result = await super.delete(documentId, params);
  // some more logic

  return result;
}
```

</TabItem>
</Tabs>

</details>

<details>

<summary>Single type examples</summary>

<Tabs groupdId="crud-methods">

<TabItem value="find" label="find()">

```js
async find(params) {
  // some logic here
  const document = await super.find(params);
  // some more logic

  return document;
}
```

</TabItem>

<TabItem value="update" label="update()">

```js
async createOrUpdate({ data, ...params }) {
  // some logic here
  const document = await super.createOrUpdate({ data, ...params });
  // some more logic

  return document;
}
```

</TabItem>

<TabItem value="delete" label="delete()">

```js
async delete(params) {
  // some logic here
  const document = await super.delete(params);
  // some more logic

  return document;
}
```

</TabItem>
</Tabs>

</details>

## Usage

Once a service is created, it's accessible from [controllers](/cms/backend-customization/controllers.md) or from other services:

```js
// access an API service
strapi.service('api::apiName.serviceName').FunctionName();
// access a plugin service
strapi.service('plugin::pluginName.serviceName').FunctionName();
```

In the syntax examples above, `serviceName` is the name of the service file for API services or the name used to export the service file to `services/index.js` for plugin services.

:::tip
To list all the available services, run `yarn strapi services:list`.
:::


 This is the content for the doc docusaurus/docs/cms/backend-customization/webhooks.md 

 ---
title: Webhooks
displayed_sidebar: cmsSidebar
description: Strapi webhooks are user-defined HTTP callbacks used by an application to notify other applications that an event occurred.
tags:
- backend customization
- backend server
- defaultHeaders
- Headers
- lifecycle hooks
- payload
- REST API 
- webhooks
---

# Webhooks

Webhook is a construct used by an application to notify other applications that an event occurred. More precisely, webhook is a user-defined HTTP callback. Using a webhook is a good way to tell third-party providers to start some processing (CI, build, deployment ...).

The way a webhook works is by delivering information to a receiving application through HTTP requests (typically POST requests).

## User content-type webhooks

To prevent from unintentionally sending any user's information to other applications, Webhooks will not work for the User content-type.
If you need to notify other applications about changes in the Users collection, you can do so by creating [Lifecycle hooks](/cms/backend-customization/models#lifecycle-hooks) using the `./src/index.js` example.

## Available configurations

You can set webhook configurations inside the file `./config/server`.

- `webhooks`
  - `defaultHeaders`: You can set default headers to use for your webhook requests. This option is overwritten by the headers set in the webhook itself.

**Example configuration**

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./config/server.js"
module.exports = {
  webhooks: {
    defaultHeaders: {
      "Custom-Header": "my-custom-header",
    },
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./config/server.ts"
export default {
  webhooks: {
    defaultHeaders: {
      "Custom-Header": "my-custom-header",
    },
  },
};
```

</TabItem>
</Tabs>

## Securing your webhooks

Most of the time, webhooks make requests to public URLs, therefore it is possible that someone may find that URL and send it wrong information.

To prevent this from happening you can send a header with an authentication token. Using the Admin panel you would have to do it for every webhook.
Another way is to define `defaultHeaders` to add to every webhook request.

You can configure these global headers by updating the file at `./config/server`:

<Tabs>

<TabItem value="simple-token" label="Simple token">

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="./config/server.js"
module.exports = {
  webhooks: {
    defaultHeaders: {
      Authorization: "Bearer my-very-secured-token",
    },
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./config.server.ts"
export default {
  webhooks: {
    defaultHeaders: {
      Authorization: "Bearer my-very-secured-token",
    },
  },
};
```

</TabItem>
</Tabs>

</TabItem>

<TabItem value="environment-variable" label="Environment variable">

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="./config/server.js"
module.exports = {
  webhooks: {
    defaultHeaders: {
      Authorization: `Bearer ${process.env.WEBHOOK_TOKEN}`,
    },
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="./config/server.ts"
export default {
  webhooks: {
    defaultHeaders: {
      Authorization: `Bearer ${process.env.WEBHOOK_TOKEN}`,
    },
  },
};
```

</TabItem>
</Tabs>

</TabItem>

</Tabs>

If you are developing the webhook handler yourself you can now verify the token by reading the headers.

<!--- ### Usage

To access the webhook configuration panel, go to `Settings` > `Webhooks`.

![Webhooks home](/img/assets/concepts/webhooks/home.png)

#### Create a webhook

Click on `Add new webhook` and fill in the form.

![create](/img/assets/concepts/webhooks/create.png)

#### Trigger a webhook

You can test out a webhook with a test event: `trigger-test`. Open the webhook you want to trigger.

![Trigger ](/img/assets/concepts/webhooks/trigger_start.png)

Click on the `Trigger` button.

![Trigger pending](/img/assets/concepts/webhooks/trigger.png)

You will see the trigger request appear and get the result.

![Trigger result](/img/assets/concepts/webhooks/trigger_result.png)

#### Enable or disable a webhook

You can enable or disable a webhook from the list view directly.

![Disable webhook](/img/assets/concepts/webhooks/disable.png)

#### Update a webhook

You can edit any webhook by clicking on the `pen` icon in the webhook list view.

![Update webhook](/img/assets/concepts/webhooks/list.png)

#### Delete a webhook

You can delete a webhook by clicking on the `trash` icon.

![Delete webhook](/img/assets/concepts/webhooks/disable.png) --->

## Available events

By default Strapi webhooks can be triggered by the following events:

| Name              | Description                                           |
| ----------------- | ----------------------------------------------------- |
| [`entry.create`](#entrycreate)   | Triggered when a Content Type entry is created.       |
| [`entry.update`](#entryupdate)    | Triggered when a Content Type entry is updated.       |
| [`entry.delete`](#entrydelete)    | Triggered when a Content Type entry is deleted.       |
| [`entry.publish`](#entrypublish)   | Triggered when a Content Type entry is published.\*   |
| [`entry.unpublish`](#entryunpublish) | Triggered when a Content Type entry is unpublished.\* |
| [`media.create`](#mediacreate)    | Triggered when a media is created.                    |
| [`media.update`](#mediaupdate)    | Triggered when a media is updated.                    |
| [`media.delete`](#mediadelete)    | Triggered when a media is deleted.                    |
| [`review-workflows.updateEntryStage`](#review-workflowsupdateentrystage) | Triggered when content is moved between review stages (see [review workflows](/cms/features/review-workflows#configuration)).<br />This event is only available with the <EnterpriseBadge /> edition of Strapi. |
| [`releases.publish`](#releases-publish) | Triggered when a Release is published (see [Releases](/cms/features/releases)).<br />This event is only available with the <GrowthBadge /> or <EnterpriseBadge /> plan of Strapi CMS. |

\*only when `draftAndPublish` is enabled on this Content Type.

## Payloads

:::tip NOTE
Private fields and s are not sent in the payload.
:::

### Headers

When a payload is delivered to your webhook's URL, it will contain specific headers:

| Header           | Description                                |
| ---------------- | ------------------------------------------ |
| `X-Strapi-Event` | Name of the event type that was triggered. |

### `entry.create`

This event is triggered when a new entry is created.

**Example payload**

```json
{
  "event": "entry.create",
  "createdAt": "2020-01-10T08:47:36.649Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:47:36.264Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.update`

This event is triggered when an entry is updated.

**Example payload**

```json
{
  "event": "entry.update",
  "createdAt": "2020-01-10T08:58:26.563Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.delete`

This event is triggered when an entry is deleted.

**Example payload**

```json
{
  "event": "entry.delete",
  "createdAt": "2020-01-10T08:59:35.796Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.publish`

This event is triggered when an entry is published.

**Example payload**

```json
{
  "event": "entry.publish",
  "createdAt": "2020-01-10T08:59:35.796Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "publishedAt": "2020-08-29T14:20:12.134Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.unpublish`

This event is triggered when an entry is unpublished.

**Example payload**

```json
{
  "event": "entry.unpublish",
  "createdAt": "2020-01-10T08:59:35.796Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "publishedAt": null,
    "cover": null,
    "images": []
  }
}
```

### `media.create`

This event is triggered when you upload a file on entry creation or through the media interface.

**Example payload**

```json
{
  "event": "media.create",
  "createdAt": "2020-01-10T10:58:41.115Z",
  "media": {
    "id": 1,
    "name": "image.png",
    "hash": "353fc98a19e44da9acf61d71b11895f9",
    "sha256": "huGUaFJhmcZRHLcxeQNKblh53vtSUXYaB16WSOe0Bdc",
    "ext": ".png",
    "mime": "image/png",
    "size": 228.19,
    "url": "/uploads/353fc98a19e44da9acf61d71b11895f9.png",
    "provider": "local",
    "provider_metadata": null,
    "createdAt": "2020-01-10T10:58:41.095Z",
    "updatedAt": "2020-01-10T10:58:41.095Z",
    "related": []
  }
}
```

### `media.update`

This event is triggered when you replace a media or update the metadata of a media through the media interface.

**Example payload**

```json
{
  "event": "media.update",
  "createdAt": "2020-01-10T10:58:41.115Z",
  "media": {
    "id": 1,
    "name": "image.png",
    "hash": "353fc98a19e44da9acf61d71b11895f9",
    "sha256": "huGUaFJhmcZRHLcxeQNKblh53vtSUXYaB16WSOe0Bdc",
    "ext": ".png",
    "mime": "image/png",
    "size": 228.19,
    "url": "/uploads/353fc98a19e44da9acf61d71b11895f9.png",
    "provider": "local",
    "provider_metadata": null,
    "createdAt": "2020-01-10T10:58:41.095Z",
    "updatedAt": "2020-01-10T10:58:41.095Z",
    "related": []
  }
}
```

### `media.delete`

This event is triggered only when you delete a media through the media interface.

**Example payload**

```json
{
  "event": "media.delete",
  "createdAt": "2020-01-10T11:02:46.232Z",
  "media": {
    "id": 11,
    "name": "photo.png",
    "hash": "43761478513a4c47a5fd4a03178cfccb",
    "sha256": "HrpDOKLFoSocilA6B0_icA9XXTSPR9heekt2SsHTZZE",
    "ext": ".png",
    "mime": "image/png",
    "size": 4947.76,
    "url": "/uploads/43761478513a4c47a5fd4a03178cfccb.png",
    "provider": "local",
    "provider_metadata": null,
    "createdAt": "2020-01-07T19:34:32.168Z",
    "updatedAt": "2020-01-07T19:34:32.168Z",
    "related": []
  }
}
```

### `review-workflows.updateEntryStage`
<EnterpriseBadge/>

This event is only available with the <EnterpriseBadge/> plan of Strapi.<br />The event is triggered when content is moved to a new review stage (see [Review Workflows](/cms/features/review-workflows#configuration)).

**Example payload**

```json
{
  "event": "review-workflows.updateEntryStage",
  "createdAt": "2023-06-26T15:46:35.664Z",
  "model": "model",
  "uid": "uid",
  "entity": {
    "id": 2
  },
  "workflow": {
    "id": 1,
    "stages": {
      "from": {
        "id": 1,
        "name": "Stage 1"
      },
      "to": {
        "id": 2,
        "name": "Stage 2"
      }
    }
  }
}
```

### `releases.publish`  {#releases-publish}
<GrowthBadge/><EnterpriseBadge/>

The event is triggered when a [release](/cms/features/releases) is published.

**Example payload**

```json

{
  "event": "releases.publish",
  "createdAt": "2024-02-21T16:45:36.877Z",
  "isPublished": true,
  "release": {
    "id": 2,
    "name": "Fall Winter highlights",
    "releasedAt": "2024-02-21T16:45:36.873Z",
    "scheduledAt": null,
    "timezone": null,
    "createdAt": "2024-02-21T15:16:22.555Z",
    "updatedAt": "2024-02-21T16:45:36.875Z",
    "actions": {
      "count": 1
    }
  }
}
```

## Best practices for webhook handling

- Validate incoming requests by checking headers and payload signatures.
- Implement retries for failed webhook requests to handle transient errors.
- Log webhook events for debugging and monitoring.
- Use secure, HTTPS endpoints for receiving webhooks.
- Set up rate limiting to avoid being overwhelmed by multiple webhook requests.

 This is the content for the doc docusaurus/docs/cms/cli.md 

 ---
title: Command Line Interface
displayed_sidebar: cmsSidebar
description: Strapi comes with a full featured Command Line Interface (CLI) which lets you scaffold and manage your project in seconds.
sidebar_label: Strapi CLI
tags:
  - Command Line Interface (CLI)
  - strapi develop
  - strapi start
  - strapi build
  - strapi export
  - strapi import
  - strapi transfer
  - strapi report
---

# Command Line Interface (CLI)

Strapi comes with a full featured Command Line Interface (CLI) which lets you scaffold and manage your project in seconds. The CLI works with both the `yarn` and `npm` package managers.

:::caution
Interactive commands such as `strapi admin:create-user` don't display prompts with `npm`. A fix for the `npm` package manager is anticipated by March 2023. In the meantime, consider using the `yarn` package manager.
:::

:::note
It is recommended to install Strapi locally only, which requires prefixing all of the following `strapi` commands with the package manager used for the project setup (e.g `npm run strapi help` or `yarn strapi help`) or a dedicated node package executor (e.g. `npx strapi help`).

To pass options with `npm` use the syntax: `npm run strapi <command> -- --<option>`.

To pass options with `yarn` use the syntax: `yarn strapi <command> --<option>`
:::

<details>
<summary>‚ÑπÔ∏è Strapi v4 CLI commands removed from Strapi 5:</summary>

The `strapi install`, `strapi uninstall`, `strapi new`, and `strapi watch-admin` commands from Strapi v4 have been removed in Strapi 5:

| Strapi v4 command         | Strapi 5 equivalent                                                                                                                                                                                |
| ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `strapi install [plugin]` | Use the npx command corresponding to the plugin (found on the Marketplace, see [Marketplace](/cms/plugins/installing-plugins-via-marketplace))                                                |
| `strapi new`              | Use the equivalent yarn or npx command to create a new Strapi project (see [CLI installation guide](/cms/installation/cli))                                                                   |
| `strapi watch-admin`      | `yarn develop` or `npm run develop` always starts the Strapi server in "watch-admin" mode. To disable this in Strapi 5, run `yarn develop --no-watch-admin` or `npm run develop --no-watch-admin`. |

</details>

## strapi develop

**Alias**: `dev`

Start a Strapi application with auto-reloading enabled.

Strapi modifies/creates files at runtime and needs to restart when new files are created. To achieve this, `strapi develop` adds a file watcher and restarts the application when necessary.

Strapi also adds middlewares to support HMR (Hot Module Replacement) for the administration panel. This allows you to customize the administration panel without having to restart the application or run a separate server.

```shell
strapi develop
options: [--no-build |--no-watch-admin |--browser |--debug |--silent]
```

- **strapi develop --open**<br/>
  Starts your application with auto-reloading enabled & open your default browser with the administration panel running.
- **strapi develop --no-watch-admin**<br/>
  Prevents the server from auto-reload when changes are made to the admin panel code.
- [DEPRECATED] **strapi develop --no-build**<br/>
  Starts your application with the auto-reloading enabled and skip the administration panel build process
- [DEPRECATED] **strapi develop --watch-admin**<br/>
  Starts your application with the auto-reloading enabled and the front-end development server. It allows you to customize the administration panel.
- [DEPRECATED] **strapi develop --watch-admin --browser 'google chrome'**<br/>
  Starts your application with the auto-reloading enabled and the front-end development server. It allows you to customize the administration panel. Provide a browser name to use instead of the default one, `false` means stop opening the browser.

:::warning
You should never use this command to run a Strapi application in production.
:::

## strapi start

Start a Strapi application with auto-reloading disabled.

This command is to run a Strapi application without restarts and file writes, primarily for use in production.
Certain features such as the Content-type Builder are disabled in the `strapi start` mode because they require application restarts. The `start` command can be prefaced with [environment variables](/cms/configurations/environment#strapi) to customize the application start.

## strapi build

Builds your admin panel.

```bash
strapi build
```

| Option              | Type | Description                                              |
| ------------------- | :--: | -------------------------------------------------------- |
| `-d, --debug`       |  -   | Enable debugging mode with verbose logs (default: false) |
| `--minify`          |  -   | Minify the output (default: true)                        |
| `--no-optimization` |  -   | [DEPRECATED]: use minify instead                         |
| `--silent`          |  -   | Don't log anything (default: false)                      |
| `--sourcemaps`      |  -   | Produce sourcemaps (default: false)                      |
| `--stats`           |  -   | Print build statistics to the console (default: false)   |

## strapi login

Logs in to Strapi Cloud (see [Cloud CLI](/cloud/cli/cloud-cli#strapi-login) documentation).

## strapi logout

Logs out from Strapi Cloud (see [Cloud CLI](/cloud/cli/cloud-cli#strapi-logout) documentation).

## strapi deploy

Deploys to Strapi Cloud (see [Cloud CLI](/cloud/cli/cloud-cli#strapi-deploy) documentation).

## strapi export

[Exports your project data](/cms/features/data-management). The default settings create a `.tar` file, compressed using `gzip` and encrypted using `aes-128-ecb`.

```bash
strapi export
```

The exported file is automatically named using the format `export_YYYYMMDDHHMMSS` with the current date and timestamp. Alternately, you can specify the filename using the `-f` or `--file` flag. The following table provides all of the available options as command line flags:

| Option              |  Type  | Description                                                                                                                |
| ------------------- | :----: | -------------------------------------------------------------------------------------------------------------------------- |
| `--no-encrypt`      |   -    | Disables file encryption and disables the `key` option.   |
| `--no-compress`     |   -    | Disables file compression.      |
| `-k`, <br/>`--key`  | string | Passes the encryption key as part of the `export` command. <br/> The `--key` option can't be combined with `--no-encrypt`. |
| `-f`, <br/>`--file` | string | Specifies the export filename. Do not include a file extension.                                                            |
| `--exclude`         | string | Exclude data using comma-separated data types. The available types are: `content`, `files`, and `config`.                  |
| `--only`            | string | Include only these data. The available types are: `content`, `files`, and `config`.                                        |
| `-h`, <br/>`--help` |   -    | Displays help for the `strapi export` command.                                                                             |

**Examples**

```bash title="Examples of strapi export:"
# export your data with the default options and the filename myData, which results in a file named myData.tar.gz.enc.
strapi export -f myData

# export your data without encryption.
strapi export --no-encrypt
```

## strapi import

[Imports data](/cms/features/data-management) into your project. The imported data must originate from another Strapi application. You must pass the `--file` option to specify the filename and location for the import action.

```bash
strapi import
```

| Option         | Type   | Description                                                               |
| -------------- | ------ | ------------------------------------------------------------------------- |
| `-k,` `--key`  | string | Provide the encryption key in the command instead of a subsequent prompt. |
| `-f`, `--file` | string | Path and filename with extension for the data to be imported.             |
| `-h`, `--help` | -      | Display the `strapi import` help commands.                                |

**Examples**

```bash title="Example of strapi import:"

# import your data with the default parameters and pass an encryption key:
strapi import -f your-filepath-and-filename --key my-key
```

## strapi transfer

[Transfers data](/cms/data-management/transfer) between 2 Strapi instances. This command is primarily intended for use between a local instance and a remote instance or 2 remote instances. The `transfer` command requires a Transfer token, which is generated in the destination instance Admin panel. See the [User Guide](/cms/features/data-management#admin-panel-settings) for detailed documentation on creating Transfer tokens.

:::caution
The destination Strapi instance should be running with the `start` command and not the `develop` command.
:::

| Option                       | Description                                                                                                                                       |
| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
| `--to [destinationURL]`      | Full URL of the `/admin` endpoint on the destination Strapi instance<br />(e.g. `--to https://my-beautiful-strapi-website/admin`)                 |
| `--to-token [transferToken]` | Transfer token for the remote Strapi destination                                                                                                  |
| `--from [sourceURL]`         | Full URL of the `/admin` endpoint of the remote Strapi instance to pull data from<br />(e.g., `--from https://my-beautiful-strapi-website/admin`) |
| `‚Äë‚Äëfrom‚Äëtoken`               | Transfer token from the Strapi source instance.                                                                                                   |
| `--force`                    | Automatically answer "yes" to all prompts, including potentially destructive requests, and run non-interactively.                                 |
| `--exclude`                  | Exclude data using comma-separated data types. The available types are: `content`, `files`, and `config`.                                         |
| `--only`                     | Include only these data. The available types are: `content`, `files`, and `config`.                                                               |
| `-h`, `--help`               | Displays the commands for `strapi transfer`.                                                                                                      |

:::caution
Either `--to` or `--from` is required, but it's not currently allowed to enter both or neither.
:::

**Example**

```bash
strapi transfer --to http://example.com/admin --to-token my-transfer-token
```

## strapi report

Prints out debug information useful for debugging and required when reporting an issue.

| Option                 | Description                   |
| ---------------------- | ----------------------------- |
| `-u`, `--uuid`         | Includes the project UUID     |
| `-d`, `--dependencies` | Includes project dependencies |
| `--all`                | Logs all the data             |

**Examples**

To include the project UUID and dependencies in the output:

```bash
strapi report --uuid --dependencies
```

To log everything, use the `--all` option:

```bash
strapi report --all
```

## strapi configuration:dump

**Alias**: `config:dump`

Dumps configurations to a file or stdout to help you migrate to production.

The dump format will be a JSON array.

```bash title="strapi configuration:dump"

Options:
  -f, --file <file>  Output file, default output is stdout
  -p, --pretty       Format the output JSON with indentation and line breaks (default: false)
```

**Examples**

- `strapi configuration:dump -f dump.json`
- `strapi config:dump --file dump.json`
- `strapi config:dump > dump.json`

All these examples are equivalent.

:::caution
When configuring your application you often enter credentials for third party services (e.g authentication providers). Be aware that those credentials will also be dumped into the output of this command.
In case of doubt, you should avoid committing the dump file into a versioning system. Here are some methods you can explore:

- Copy the file directly to the environment you want and run the restore command there.
- Put the file in a secure location and download it at deploy time with the right credentials.
- Encrypt the file before committing and decrypt it when running the restore command.

:::

## strapi configuration:restore

**Alias**: `config:restore`

Restores a configuration dump into your application.

The input format must be a JSON array.

```bash
strapi configuration:restore

Options:
  -f, --file <file>          Input file, default input is stdin
  -s, --strategy <strategy>  Strategy name, one of: "replace", "merge", "keep". Defaults to: "replace"
```

**Examples**

- `strapi configuration:restore -f dump.json`
- `strapi config:restore --file dump.json -s replace`
- `cat dump.json | strapi config:restore`
- `strapi config:restore < dump.json`

All these examples are equivalent.

**Strategies**

When running the restore command, you can choose from three different strategies:

- **replace**: Will create missing keys and replace existing ones.
- **merge**: Will create missing keys and merge existing keys with their new value.
- **keep**: Will create missing keys and keep existing keys as is.

## strapi admin:create-user

**Alias** `admin:create`

Creates an administrator.
Administrator's first name, last name, email, and password can be:

- passed as options
- or set interactively if you call the command without passing any option.

**Example**

```bash

strapi admin:create-user --firstname=Kai --lastname=Doe --email=chef@strapi.io --password=Gourmet1234
```

**Options**

| Option          | Type   | Description                        | Required |
| --------------- | ------ | ---------------------------------- | -------- |
| -f, --firstname | string | The administrator's first name     | Yes      |
| -l, --lastname  | string | The administrator's last name      | No       |
| -e, --email     | string | The administrator's email          | Yes      |
| -p, --password  | string | New password for the administrator | No       |
| -h, --help      |        | display help for command           |          |

## strapi admin:reset-user-password

**Alias** `admin:reset-password`

Reset an admin user's password.
You can pass the email and new password as options or set them interactively if you call the command without passing the options.

**Example**

```bash

strapi admin:reset-user-password --email=chef@strapi.io --password=Gourmet1234
```

**Options**

| Option         | Type   | Description               |
| -------------- | ------ | ------------------------- |
| -e, --email    | string | The user email            |
| -p, --password | string | New password for the user |
| -h, --help     |        | display help for command  |

## strapi generate

Run a fully interactive CLI to generate APIs, [controllers](/cms/backend-customization/controllers), [content-types](/cms/backend-customization/models), [plugins](/cms/plugins-development/create-a-plugin), [policies](/cms/backend-customization/policies), [middlewares](/cms/backend-customization/middlewares) and [services](/cms/backend-customization/services), and [migrations](/cms/database-migrations).

```bash
strapi generate
```

## strapi templates:generate

Create a template from the current Strapi project.

```bash
strapi templates:generate <path>
```

- **strapi templates:generate &#60;path&#62;**<br/>
  Generates a Strapi template at `<path>`

  Example: `strapi templates:generate ../strapi-template-name` will copy the required files and folders to a `template` directory inside `../strapi-template-name`

## strapi ts:generate-types

Generate [TypeScript](/cms/typescript) typings for the project schemas.

```bash
strapi ts:generate-types
```

- **strapi ts:generate-types --debug**<br />
  Generate typings with the debug mode enabled, displaying a detailed table of the generated schemas.
- **strapi ts:generate-types --silent** or **strapi ts:generate-types -s**<br/>
  Generate typings with the silent mode enabled, completely removing all the logs in the terminal. Cannot be combined with `debug`
- **strapi ts:generate-types --out-dir &#60;path&#62;** or **strapi ts:generate-types -o &#60;path&#62;**<br/>
  Generate typings specifying the output directory in which the file will be created.

:::caution
Strapi requires the project types to be generated in the `types` directory for them to work. The `--out-dir` option should not be used for most cases. However, it can be useful for cases such as generating a second copy to compare the difference between your existing and updated types after changing your content structure.
:::

## strapi routes:list

Display a list of all the available [routes](/cms/backend-customization/routes).

```bash
strapi routes:list
```

## strapi policies:list

Display a list of all the registered [policies](/cms/backend-customization/policies).

```bash
strapi policies:list
```

## strapi middlewares:list

Display a list of all the registered [middlewares](/cms/backend-customization/middlewares).

```bash
strapi middlewares:list
```

## strapi content-types:list

Display a list of all the existing [content-types](/cms/backend-customization/models).

```bash
strapi content-types:list
```

## strapi hooks:list

Display a list of all the available hooks.

```bash
strapi hooks:list
```

## strapi controllers:list

Display a list of all the registered [controllers](/cms/backend-customization/controllers).

```bash
strapi controllers:list
```

## strapi services:list

Display a list of all the registered [services](/cms/backend-customization/services).

```bash
strapi services:list
```

## strapi telemetry:disable

Disable data collection for the project (see [Usage Information](/cms/usage-information)).

```bash
strapi telemetry:disable
```

## strapi telemetry:enable

Re-enable data collection for the project after it was disabled (see [Usage Information](/cms/usage-information)).

```bash
strapi telemetry:enable
```

## strapi console

Start the server and eval commands in your application in real time.

```bash
strapi console
```

## strapi version

Print the currently installed Strapi version.
It will output the current globally installed version if this command is strapi is installed globally, or the current version of Strapi within a Strapi project if the command is run from a given folder containing a Strapi project.

```bash
strapi version
```

## strapi help

List CLI commands.

```bash
strapi help
```


 This is the content for the doc docusaurus/docs/cms/community.md 

 ---
tags:
- contribution
- community
- support
- feature request
- bug report
- pull request
---



# Community & Support 

Strapi is an open-source project (see <ExternalLink to="https://github.com/strapi/strapi/blob/master/LICENSE" text="LICENSE"/> file for more information). The core project, as well as the documentation and any related tool can be found in the <ExternalLink to="https://github.com/strapi" text="Strapi"/> GitHub organization.

## Open-source & Contribution

As it goes hand in hand with the open-source ecosystem, Strapi is open to contributions. The Strapi team appreciates every contribution, be it a feature request, bug report, or pull request. The following GitHub repositories are open-source and contributions-friendly:

- <ExternalLink to="https://github.com/strapi/strapi" text="`strapi/strapi`"/>: main repository of Strapi, which contains the core of the project. You can find the admin panel, core plugins, plugin providers, and the whole code that runs your Strapi application. Please read the <ExternalLink to="https://github.com/strapi/strapi/blob/master/CONTRIBUTING.md" text="`CONTRIBUTING.md`"/> file to have more information about contributions to the main repository.
- <ExternalLink to="https://github.com/strapi/documentation" text="`strapi/documentation`"/>: contains the whole documentation of Strapi. Please read the <ExternalLink to="https://github.com/strapi/documentation/blob/main/CONTRIBUTING.md" text="contribution guide"/> to have more information about contributions to the Strapi documentation.
- <ExternalLink to="https://github.com/strapi/design-system" text="`strapi/design-system`"/>: is the design system that is used in the admin panel. It brings consistency between the different admin plugins.
- <ExternalLink to="https://github.com/strapi/awesome-strapi" text="`strapi-community/awesome-strapi`"/>: contains everything the community built and all managed plugins. It is used as a central place to find and submit new packages such as plugins, middlewares, hooks, and general enhancements to the core of Strapi.

## Strapi Community

Strapi is a community-oriented project with an emphasis on transparency. The Strapi team has at heart to share their vision and build the future of Strapi with the Strapi community. This is why the <ExternalLink to="https://feedback.strapi.io" text="roadmap"/> is open: as all insights are very important and will help steer the project in the right direction, any community member is most welcome to share ideas and opinions there.

Community members also take great part in providing the whole community a plethora of resources about Strapi. You can find <ExternalLink to="https://strapi.io/tutorials/" text="tutorials"/> on the Strapi website, where you can also create your own. Also, as an open-source project, the documentation of Strapi is open to contributions (see [Open-source & Contribution](#open-source--contribution)).

:::strapi Want to join the community?
You can join <ExternalLink to="https://github.com/strapi/strapi" text="GitHub"/>, the <ExternalLink to="https://forum.strapi.io/" text="Forum"/>, and the <ExternalLink to="https://discord.strapi.io" text="Discord"/> to share your ideas and opinions with other community members and members of the Strapi team. If you're looking for news and updates about Strapi, <ExternalLink to="https://twitter.com/strapijs" text="Twitter"/> and the <ExternalLink to="https://strapi.io/blog" text="blog"/> are pretty good places to start!
:::

## Support

Strapi's Community plan is a free and open-source option for users who wish to self-host the software. If you have an issue or a question, the <ExternalLink to="https://forum.strapi.io" text="forum"/> is great first place to reach out for help. Both the Strapi community and core developers often check this platform and answer posts.

For customers on our paid plans, you can reference our <ExternalLink to="https://support.strapi.io/support/home" text="Support platform"/> to determine your support level and check out our Support platform for more information. Please note that you must have an active <GrowthBadge /> or <EnterpriseBadge /> plan to submit a ticket.


 This is the content for the doc docusaurus/docs/cms/configurations.md 

 ---
title: Configurations
description: Learn how you can manage and customize the configuration of your Strapi application.
displayed_sidebar: cmsSidebar
sidebar_label: Introduction
pagination_prev: cms/installation
pagination_next: cms/configurations/admin-panel
tags:
- introduction
- configuration
- base configuration 
- additional configuration 
---

import ProjectStructureConfigFiles from '@site/src/components/ProjectStructureConfigFiles'

# Configuration

The configuration of a Strapi project lives in the `/config` folder:

<ProjectStructureConfigFiles />

<em style={{fontSize: '12px'}}>The block above is an excerpt from the project structure. You can click on any file name in purple to read the corresponding documentation. Visit the <a href="/cms/project-structure">project structure page</a> for the full version.</em>

## Base configurations

From the `/config` folder, you can find and define the following base configurations:

| Configuration topic | File path | Required or optional |
|-----|----|----|
| [Database](/cms/configurations/database) | `config/database` | Required |
| [Server](/cms/configurations/server) | `config/server` | Required
| [Admin panel](/cms/configurations/admin-panel) | `config/admin` | Required |
| [Middlewares](/cms/configurations/middlewares) | `config/middlewares` | Required |
| [API calls](/cms/configurations/api) | `config/api` | Optional, used to define some general settings for responses and other REST-related parameters. |

## Additional configuration for specific features

Some specific features require additional configuration:

| Feature | Location | Required or optional |
|---------|------|------|
| [Plugins](/cms/configurations/plugins) | In the `config/plugins` file | <ul><li>Optional if using only built-in plugins with default presets.</li><li>Required to enable, configure, or disable plugins.</li></ul>Can also be used to configure the Upload plugin (which handles the Media Library feature) and GraphQL. |
| [TypeScript](/cms/configurations/typescript) | <ul><li>In `tsconfig.json` for general [TypeScript-related configuration](/cms/configurations/typescript#project-structure-and-typescript-specific-configuration-files)</li><li>In the `config/typescript` file for [dedicated TypeScript features](/cms/configurations/typescript#strapi-specific-configuration-for-typescript) specific to Strapi</li></ul> | Required to use TypeScript efficiently |
| [API tokens](/cms/features/api-tokens) | In the `config/admin` file | Required if using API tokens for authentication instead of the [Users & Permissions plugin](/cms/features/users-permissions) |
| [Lifecycle functions](/cms/configurations/functions) | In the `/src/index` file | Optionally used to perform various actions that happen during the server lifecycle. Includes the `register`, `bootstrap`, and `destroy` functions. |
| [Cron jobs](/cms/configurations/cron) | <ul><li>In the `/config/server` file to enable the feature</li><li>In a dedicated, optional `cron-tasks` file that can be used to declare the jobs</li></ul> | Required to setup CRON jobs for the server. |
| [Environment variables](/cms/configurations/environment) | In dedicated files and folders for the environment (e.g., `config/env/production/server`) | Optionally used to define different environments and their variables. |
| [Single Sign-On (SSO)](/cms/configurations/guides/configure-sso) <EnterpriseBadge /> <SsoBadge /> | In the `config/admin` file | Required to use the SSO feature if enabled on your project. |
| [Feature flags](/cms/configurations/features) | In the `config/features` file | Optional for a typical, stable Strapi application.<br/>Only required to enable [future flags](/cms/configurations/features).|

## Guides

The following guides will help you address specific use cases related to the Strapi configuration:

<CustomDocCard small title="How to create custom conditions for Role-Based Access Control (RBAC)" link="/cms/configurations/guides/rbac" />

<CustomDocCard small title="How to access and cast environment variables" link="/cms/configurations/guides/access-cast-environment-variables" />

<CustomDocCard small title="How to access configuration values from the code" link="/cms/configurations/guides/access-configuration-values" />


 This is the content for the doc docusaurus/docs/cms/configurations/admin-panel.md 

 ---
title: Admin panel configuration
sidebar_label: Admin panel
displayed_sidebar: cmsSidebar
toc_max_heading_level: 2
description: Strapi's admin panel offers a single entry point file for its configuration.
tags:
- admin panel
- API token
- authentication
- base configuration
- configuration
- minimal configuration
- password
---

# Admin panel configuration

The `/config/admin` file is used to define the [admin panel](/cms/features/admin-panel) configuration for the Strapi application.

The present page acts as a reference for all the configuration parameters and values that you can find in the `/config/admin` file, grouped by topic. For additional information on how each feature works, please refer to links given in the introduction of each sub-section.

## Admin panel behavior

The admin panel behavior can be configured with the following parameters:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `autoOpen`                        | Enable or disable administration opening on start.                                                                                                                                                 | boolean       | `true`                                                                                                                              |
| `watchIgnoreFiles`                | Add custom files that should not be watched during development.<br/><br/> See more <ExternalLink to="https://github.com/paulmillr/chokidar#path-filtering" text="here" /> (property `ignored`).                                        | array(string) | `[]`                                                                                                                                |
| `serveAdminPanel`                 | If false, the admin panel won't be served.<br/><br/>Note: the `index.html` will still be served                                            | boolean       | `true`                                                                                                                              |

:::note config/admin vs. src/admin/app configurations
Some UI elements of the admin panel must be configured in the `src/admin/app` file:

**Tutorial videos**  
To disable the information box containing the tutorial videos, set the `config.tutorials` key to `false`.

**Releases notifications**  
To disable notifications about new Strapi releases, set the `config.notifications.releases` key to `false`.

```js title="/src/admin/app.js"
const config = {
  // ‚Ä¶ other customization options go here
  tutorials: false,
  notifications: { releases: false },
};

export default {
  config,
};
```

:::

## Admin panel server 

By default, Strapi's admin panel is exposed via `http://localhost:1337/admin`. For security reasons, the host, port, and path can be updated.


The server configuration for the admin panel can be configured with the following parameters:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `url`                             | Path to access the admin panel. If the URL is relative, it will be concatenated with the server URL.<br/><br/>Example: `/dashboard` makes the admin panel accessible at `http://localhost:1337/dashboard`.                                                                                | string        | `/admin`                                                                                                                            |
| `host`                            | Host for the admin panel server. | string        | `localhost`                                                                                                                         |
| `port`                            | Port for the admin panel server. | string        | `8000`                                                                                                                              |

:::note
If you add a path to the `url` option, it won't prefix your application. To do so, use a proxy server like Nginx (see [optional software deployment guides](/cms/deployment#additional-resources)).
:::

### Update the admin panel's path only

To make the admin panel accessible at another path, for instance at `http://localhost:1337/dashboard`, define or update the `url` property:

```js title="/config/admin.js"
module.exports = ({ env }) => ({
  // ‚Ä¶ other configuration properties
  url: "/dashboard",
});
```

Since by default the back-end server and the admin panel server run on the same host and port, only updating the `config/admin` file should work if you left the `host` and `port` property values untouched in the back-end [server configuration](/cms/configurations/server) file.

### Update the admin panel's host and port

If the admin panel server and the back-end server are not hosted on the same server, you will need to update the host and port of the admin panel. For example, to host the admin panel on `my-host.com:3000`:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/config/admin.js"
module.exports = ({ env }) => ({
  host: "my-host.com",
  port: 3000,
  // Additionally you can define another path instead of the default /admin one üëá
  // url: '/dashboard' 
});
```

</TabItem>
<TabItem value="ts" label="TypeScript">

```js title="/config/admin.ts"
export default ({ env }) => ({
  host: "my-host.com",
  port: 3000,
  // Additionally you can define another path instead of the default /admin one üëá
  // url: '/dashboard'
});
```

</TabItem>
</Tabs>

### Deploy on different servers {#deploy-on-different-servers}

Unless you chose to deploy Strapi's back-end server and admin panel server on different servers, by default:
- The back-end server and the admin panel server both run on the same host and port (`http://localhost:1337/`)
- The admin panel is accessible at the `/admin` path while the back-end server is accessible at the `/api` path

To deploy the admin panel and the back-end on completely different servers, you need to configure both the server (`/config/server`) and admin panel (`/config/admin-panel`) configurations.

The following example setup allows you to serve the admin panel from one domain while the API runs on another:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/config/server.js"
module.exports = ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
  url: "http://yourbackend.com",
});
```

```js title="/config/admin.js"
module.exports = ({ env }) => ({
  /**
   * Note: The administration will be accessible from the root of the domain 
   * (ex: http://yourfrontend.com/)
   */ 
  url: "/",
  serveAdminPanel: false, // http://yourbackend.com will not serve any static admin files
});
```

</TabItem>
<TabItem value="ts" label="TypeScript">

```js title="/config/server.ts"
export default ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
  url: "http://yourbackend.com",
});
```

```js title="/config/admin.ts"
export default ({ env }) => ({
  /**
   * Note: The administration will be accessible from the root of the domain 
   * (ex: http://yourfrontend.com/)
   */ 
  url: "/",
  serveAdminPanel: false, // http://yourbackend.com will not serve any static admin files
});
```

</TabItem>
</Tabs>

With this configuration:
- The admin panel will be accessible at `http://yourfrontend.com` 
- All API requests from the panel will be sent to `http://yourbackend.com`
- The backend server will not serve any static admin files due to `serveAdminPanel: false`

## API tokens

The [API tokens](/cms/features/api-tokens) feature can be configured with the following parameters:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `apiToken.salt`                   | Salt used to generate API tokens                                                                                                                            | string        | Random string                                                                                                                       |
| `apiToken.secrets.encryptionKey`   | Encryption key used to set API tokens visibility in the admin panel | string | Random string |

## Audit logs

The [Audit Logs](/cms/features/audit-logs) feature can be configured with the following parameters:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `auditLogs.enabled`               | Enable or disable the Audit Logs feature                                                                                                                         | boolean       | `true`                                                                                                                              |
| `auditLogs.retentionDays`         | How long Audit Logs are kept, in days.<br /><br />_The behavior differs for self-hosted vs. Strapi Cloud customers, see the note under the table._               | integer       | 90                                                                                                                                  |

:::note Retention days for self-hosted vs. Strapi Cloud users
For Strapi Cloud customers, the `auditLogs.retentionDays` value stored in the license information is used, unless a _smaller_ `retentionDays` value is defined in the `config/admin.js|ts` configuration file.
:::

## Authentication

The authentication system, including [SSO configuration](/cms/configurations/guides/configure-sso), can be configured with the following parameters:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `auth`                            | Authentication configuration                                                                                                                                                                       | object        | -                                                                                                                                   |
| `auth.secret`                     | Secret used to encode JWT tokens                                                                                                                                                                   | string        | `undefined`                                                                                                                         |
| `auth.domain`                     | Domain used within the cookie for SSO authentication <EnterpriseBadge /> <SsoBadge />)                                                                                                                             | string        | `undefined`                                                                                                                         |
| `auth.providers`                  | List of authentication providers used for SSO                                                                                           | array(object) | -                                                                                                                                   |
| `auth.options`                    | Options object passed to jsonwebtoken                                                                                                                | object        | -                                                                                                                                   |
| `auth.options.expiresIn`          | JWT expire time used in jsonwebtoken                                                                                                                 | object        | `30d`                                                                                                                               |
| `auth.events`                     | Record of all the events subscribers registered for the authentication                                                                                                                             | object        | `{}`                                                                                                                                |
| `auth.events.onConnectionSuccess` | Function called when an admin user log in successfully to the administration panel                                                                                                                 | function      | `undefined`                                                                                                                         |
| `auth.events.onConnectionError`   | Function called when an admin user fails to log in to the administration panel                                                                                                                     | function      | `undefined`                                                                                                                         |

## Feature flags

The feature flags can be configured with the following parameters:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `flags`                           | Settings to turn certain features or elements of the admin on or off                                                                                                                               | object        | {}                                                                                                                                  |
| `flags.nps`                       | Enable/Disable the Net Promoter Score popup                                                                                                                                                        | boolean       | `true`                                                                                                                              |
| `flags.promoteEE`                 | Enable/Disable the promotion of Strapi Enterprise features                                                                                                                                         | boolean       | `true`                                                                                                                              |

## Forgot password

The forgot password functionality, including [email templating](/cms/features/users-permissions#templating-emails), can be configured with the following parameters:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `forgotPassword`                  | Settings to customize the forgot password email                                                        | object        | {}                                                                                                                                  |
| `forgotPassword.emailTemplate`    | Email template as defined in email plugin                                                                                         | object        | Default template |
| `forgotPassword.from`             | Sender mail address                                                                                                                                                                                | string        | Default value defined in <br />your provider configuration                             |
| `forgotPassword.replyTo`          | Default address or addresses the receiver is asked to reply to                                                                                                                                     | string        | Default value defined in <br />your provider configuration                             |

## Rate limiting

The rate limiting for the admin panel's authentication endpoints can be configured with the following parameters. Additional configuration options come from the <ExternalLink text="koa2-ratelimit" to="https://www.npmjs.com/package/koa2-ratelimit"/> package:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `rateLimit`                       | Settings to customize the rate limiting of the admin panel's authentication endpoints | object        | {}                                                                                                                                  |
| `rateLimit.enabled`               | Enable or disable the rate limiter                                                                                                                                                                 | boolean       | `true`                                                                                                                              |
| `rateLimit.interval`              | Time window for requests to be considered as part of the same rate limiting bucket                                                                                                                 | object        | `{ min: 5 }`                                                                                                                        |
| `rateLimit.max`                   | Maximum number of requests allowed in the time window                                                                                                                                              | integer       | `5`                                                                                                                                 |
| `rateLimit.delayAfter`            | Number of requests allowed before delaying responses                                                                                                                                               | integer       | `1`                                                                                                                                 |
| `rateLimit.timeWait`              | Time to wait before responding to a request (in milliseconds)                                                                                                                                      | integer       | `3000`                                                                                                                              |
| `rateLimit.prefixKey`             | Prefix for the rate limiting key                                                                                                                                                                   | string        | `${userEmail}:${ctx.request.path}:${ctx.request.ip}`                                                                                |
| `rateLimit.whitelist`             | Array of IP addresses to whitelist from rate limiting                                                                                                                                              | array(string) | `[]`                                                                                                                                |
| `rateLimit.store`                 | Rate limiting storage location (Memory, Sequelize, or Redis). For more information see the koa2-ratelimit documentation               | object        | `MemoryStore`                                                                                                                       |

## Transfer tokens

Transfer tokens for the [Data transfer](/cms/data-management/transfer) feature can be configured with the following parameters:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `transfer.token.salt`             | Salt used to generate Transfer tokens.<br/><br/>If no transfer token salt is defined, transfer features will be disabled.               | string        | a random string                                                                                                                       |

:::note Retention days for self-hosted vs. Strapi Cloud users
For Strapi Cloud customers, the `auditLogs.retentionDays` value stored in the license information is used, unless a _smaller_ `retentionDays` value is defined in the `config/admin.js|ts` configuration file.
:::

## Configuration examples

The `/config/admin` file should at least include a minimal configuration with required parameters for [authentication](#authentication) and [API tokens](#api-tokens). Additional parameters can be included for a full configuration.

:::note
[Environmental configurations](/cms/configurations/environment.md) (i.e. using the `env()` helper) do not need to contain all the values so long as they exist in the default `/config/server`.
:::

<Tabs>
<TabItem value="minimal config" label="Minimal configuration">

The default configuration created with any new project should at least include the following:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"
module.exports = ({ env }) => ({
  apiToken: {
    salt: env('API_TOKEN_SALT', 'someRandomLongString'),
  },
  auditLogs: { // only accessible with an Enterprise plan
    enabled: env.bool('AUDIT_LOGS_ENABLED', true),
  },
  auth: {
    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),
  },
  transfer: { 
    token: { 
      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),
    } 
  },
});

```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

export default ({ env }) => ({
  apiToken: {
    salt: env('API_TOKEN_SALT', 'someRandomLongString'),
  },
   auditLogs: { // only accessible with an Enterprise plan
    enabled: env.bool('AUDIT_LOGS_ENABLED', true),
  },
  auth: {
    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),
  },
  transfer: { 
    token: { 
      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),
    } 
  },
});
```

</TabItem>

</Tabs>
</TabItem>

<TabItem value="full config" label="Full configuration">

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"

module.exports = ({ env }) => ({
  apiToken: {
    salt: env('API_TOKEN_SALT', 'someRandomLongString'),
    secrets: {
      encryptionKey: env('ENCRYPTION_KEY'),
    },
  },
  auditLogs: { // only accessible with an Enterprise plan
    enabled: env.bool('AUDIT_LOGS_ENABLED', true),
    retentionDays: 120,
  },
  auth: {
    events: {
      onConnectionSuccess(e) {
        console.log(e.user, e.provider);
      },
      onConnectionError(e) {
        console.error(e.error, e.provider);
      },
    },
    options: {
      expiresIn: '7d',
    },
    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),
  },
  url: env('PUBLIC_ADMIN_URL', '/dashboard'),
  autoOpen: false,
  watchIgnoreFiles: [
    './my-custom-folder', // Folder
    './scripts/someScript.sh', // File
  ],
  host: 'localhost',
  port: 8003,
  serveAdminPanel: env.bool('SERVE_ADMIN', true),
  forgotPassword: {
    from: 'no-reply@example.com',
    replyTo: 'no-reply@example.com',
  },
  rateLimit: {
    interval: { hour: 1, min: 30 },
    timeWait: 3*1000,
    max: 10,
  },
  transfer: { 
    token: { 
      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),
    } 
  },
});

```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

export default ({ env }) => ({
  apiToken: {
    salt: env('API_TOKEN_SALT', 'someRandomLongString'),
    secrets: {
      encryptionKey: env('ENCRYPTION_KEY'),
    },
  },
  auditLogs: { // only accessible with an Enterprise plan
    enabled: env.bool('AUDIT_LOGS_ENABLED', true),
    retentionDays: 120,
  },
  auth: {
    events: {
      onConnectionSuccess(e) {
        console.log(e.user, e.provider);
      },
      onConnectionError(e) {
        console.error(e.error, e.provider);
      },
    },
    options: {
      expiresIn: '7d',
    },
    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),
  },
  url: env('PUBLIC_ADMIN_URL', '/dashboard'),
  autoOpen: false,
  watchIgnoreFiles: [
    './my-custom-folder', // Folder
    './scripts/someScript.sh', // File
  ],
  host: 'localhost',
  port: 8003,
  serveAdminPanel: env.bool('SERVE_ADMIN', true),
  forgotPassword: {
    from: 'no-reply@example.com',
    replyTo: 'no-reply@example.com',
  },
  rateLimit: {
    interval: { hour: 1, min: 30 },
    timeWait: 3*1000,
    max: 10,
  },
  transfer: { 
    token: { 
      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),
    } 
  },
});
```

</TabItem>

</Tabs>
</TabItem>
</Tabs>

 This is the content for the doc docusaurus/docs/cms/configurations/api.md 

 ---
title: API calls configuration
sidebar_label: API calls
displayed_sidebar: cmsSidebar
description: Strapi's default API parameters can be configured.
tags:
- base configuration
- REST API
---

# API configuration

General settings for API calls can be set in the `./config/api.js` file:

| Property                      | Description                                                                                                                                                                                                                                          | Type         | Default |
| ----------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ | ------- |
| `responses`                   | Global API response configuration                                                                                                                                                                                                                    | Object       | -       |
| `responses.privateAttributes` | Set of globally defined attributes to be treated as private.                                                                                                                                                                                         | String array | `[]`    |
| `rest`                        | REST API configuration                                                                                                                                                                                                                               | Object       | -       |
| `rest.prefix`                 | The API prefix                       | String      | `/api`   |
| `rest.defaultLimit`           | Default `limit` parameter used in API calls (see [REST API documentation](/cms/api/rest/sort-pagination#pagination-by-offset))                                                                      | Integer      | `25`    |
| `rest.maxLimit`               | Maximum allowed number that can be requested as `limit` (see [REST API documentation](/cms/api/rest/sort-pagination#pagination-by-offset)). | Integer      | `100`   |

:::note 
If the `rest.maxLimit` value is less than the `rest.defaultLimit` value, `maxLimit` will be the limit used.
:::


**Example:**

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/api.js"

module.exports = ({ env }) => ({
  responses: {
    privateAttributes: ['_v', 'id', 'created_at'],
  },
  rest: {
    prefix: '/v1',
    defaultLimit: 100,
    maxLimit: 250,
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/api.ts"

export default ({ env }) => ({
  responses: {
    privateAttributes: ['_v', 'id', 'created_at'],
  },
  rest: {
    prefix: '/v1',
    defaultLimit: 100,
    maxLimit: 250,
  },
});
```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/cms/configurations/cron.md 

 ---
title: CRON jobs
displayed_sidebar: cmsSidebar
description: Strapi allows you to configure cron jobs for execution at specific dates and times, with optional reoccurrence rules.
tags:
- additional configuration
- configuration
- cron job
---

# Cron jobs

:::prerequisites
The `cron.enabled` configuration option should be set to `true` in the `./config/server.js` (or `./config/server.ts` for TypeScript projects) [file](/cms/configurations/server).
:::

`cron` allows scheduling arbitrary functions for execution at specific dates, with optional recurrence rules. These functions are named cron jobs. `cron` only uses a single timer at any given time, rather than reevaluating upcoming jobs every second/minute.

This feature is powered by the <ExternalLink to="https://www.npmjs.com/package/node-schedule" text="`node-schedule`"/> package.

The `cron` format consists of:

```

*    *    *    *    *    *
‚î¨    ‚î¨    ‚î¨    ‚î¨    ‚î¨    ‚î¨
‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ    |
‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ    ‚îî day of week (0 - 7) (0 or 7 is Sun)
‚îÇ    ‚îÇ    ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ month (1 - 12)
‚îÇ    ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of month (1 - 31)
‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hour (0 - 23)
‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ minute (0 - 59)
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ second (0 - 59, OPTIONAL)

```

To define cron jobs and have them run at the required times:

1. [Create](#creating-a-cron-job) the appropriate file.
2. [Enable](#enabling-cron-jobs) the cron jobs in the server configuration file.

:::tip
Optionally, cron jobs can be directly created in the `cron.tasks` key of the [server configuration file](/cms/configurations/server).
:::

## Creating a cron job

A cron job can be created using the [object format](#using-the-object-format) or [key format](#using-the-key-format).

### Using the object format

To define a cron job with the object format, create a file with the following structure:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/cron-tasks.js"
module.exports = {
  /**
   * Simple example.
   * Every monday at 1am.
   */

  myJob: {
    task: ({ strapi }) => {
      // Add your own logic here (e.g. send a queue of email, create a database backup, etc.).
    },
    options: {
      rule: "0 0 1 * * 1",
    },
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/cron-tasks.ts"
export default {
  /**
   * Simple example.
   * Every monday at 1am.
   */

  myJob: {
    task: ({ strapi }) => {
      // Add your own logic here (e.g. send a queue of email, create a database backup, etc.).
    },
    options: {
      rule: "0 0 1 * * 1",
    },
  },
};
```

</TabItem>

</Tabs>

<details>
<summary>Advanced example #1: Timezones</summary>

The following cron job runs on a specific timezone:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/cron-tasks.js"
module.exports = {
  /**
   * Cron job with timezone example.
   * Every Monday at 1am for Asia/Dhaka timezone.
   * List of valid timezones: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List
   */

  myJob: {
    task: ({ strapi }) => {
      /* Add your own logic here */
    },
    options: {
      rule: "0 0 1 * * 1",
      tz: "Asia/Dhaka",
    },
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/cron-tasks.ts"
export default {
  /**
   * Cron job with timezone example.
   * Every Monday at 1am for Asia/Dhaka timezone.
   * List of valid timezones: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List
   */

  myJob: {
    task: ({ strapi }) => {
      /* Add your own logic here */
    },
    options: {
      rule: "0 0 1 * * 1",
      tz: "Asia/Dhaka",
    },
  },
};
```

</TabItem>

</Tabs>

</details>

<details>
<summary>Advanced example #2: One-off cron jobs</summary>
The following cron job is run only once at a given time:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/cron-tasks.js"
module.exports = {
  myJob: {
    task: ({ strapi }) => {
      /* Add your own logic here */
    },
    // only run once after 10 seconds
    options: new Date(Date.now() + 10000),
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/cron-tasks.ts"
export default {
  myJob: {
    task: ({ strapi }) => {
      /* Add your own logic here */
    },
    // only run once after 10 seconds
    options: new Date(Date.now() + 10000),
  },
};
```

</TabItem>

</Tabs>

</details>

<details>
<summary>Advanced example #3: Start and end times</summary>

The following cron job uses start and end times:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/cron-tasks.js"
module.exports = {
  myJob: {
    task: ({ strapi }) => {
      /* Add your own logic here */
    },
    options: {
      rule: "* * * * * *",
      // start 10 seconds from now
      start: new Date(Date.now() + 10000),
      // end 20 seconds from now
      end: new Date(Date.now() + 20000),
    },
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/cron-tasks.ts"
export default {
  myJob: {
    task: ({ strapi }) => {
      /* Add your own logic here */
    },
    // only run once after 10 seconds
    options: {
      rule: "* * * * * *",
      // start 10 seconds from now
      start: new Date(Date.now() + 10000),
      // end 20 seconds from now
      end: new Date(Date.now() + 20000),
    },
  },
};
```

</TabItem>

</Tabs>

</details>

### Using the key format

:::warning
Using the key format creates an anonymous cron job which may cause issues when trying to disable the cron job or with some plugins. It is recommended to use the object format.
:::

To define a cron job with the key format, create a file with the following structure:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/cron-tasks.js"
module.exports = {
  /**
   * Simple example.
   * Every monday at 1am.
   */

  "0 0 1 * * 1": ({ strapi }) => {
    // Add your own logic here (e.g. send a queue of email, create a database backup, etc.).
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/cron-tasks.ts"
export default {
  /**
   * Simple example.
   * Every monday at 1am.
   */

  "0 0 1 * * 1": ({ strapi }) => {
    // Add your own logic here (e.g. send a queue of email, create a database backup, etc.).
  },
};
```

</TabItem>

</Tabs>

## Enabling cron jobs

To enable cron jobs, set `cron.enabled` to `true` in the [server configuration file](/cms/configurations/server) and declare the jobs:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/server.js"
const cronTasks = require("./cron-tasks");

module.exports = ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
  cron: {
    enabled: true,
    tasks: cronTasks,
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/server.ts"
import cronTasks from "./cron-tasks";

export default ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
  cron: {
    enabled: true,
    tasks: cronTasks,
  },
});
```

</TabItem>

</Tabs>

## Adding or removing cron jobs

Use `strapi.cron.add` anywhere in your custom code add CRON jobs to the Strapi instance:

```js title="./src/plugins/my-plugin/strapi-server.js"
module.exports = () => ({
  bootstrap({ strapi }) {
    strapi.cron.add({
      // runs every second
      myJob: {
        task: ({ strapi }) => {
          console.log("hello from plugin");
        },
        options: {
          rule: "* * * * * *",
        },
      },
    });
  },
});
```

Use `strapi.cron.remove` anywhere in your custom code to remove CRON jobs from the Strapi instance, passing in the key corresponding to the CRON job you want to remove:

```js
strapi.cron.remove("myJob");
```

:::note
Cron jobs that are using the [key as the rule](/cms/configurations/cron#using-the-key-format) can not be removed.
:::


## Listing cron jobs

Use `strapi.cron.jobs` anywhere in your custom code to list all the cron jobs that are currently running:

```js
strapi.cron.jobs
```


 This is the content for the doc docusaurus/docs/cms/configurations/database.md 

 ---
title: Database configuration
displayed_sidebar: cmsSidebar
description: Strapi offers a single entry point file to configure its databases.
tags:
- base configuration
- configuration
- database
- database connection
- database settings
- databases installation guides
- MySQL

---

import SupportedDatabases from '/docs/snippets/supported-databases.md'

# Database configuration

The `/config/database.js|ts` file is used to define database connections that will be used to store the application content.

:::strapi Supported databases
The following databases are supported by Strapi:
<SupportedDatabases components={props.components} />
:::

:::warning
 Strapi applications are not meant to be connected to a pre-existing database, not created by a Strapi application, nor connected to a Strapi v3 database. The Strapi team will not support such attempts. Attempting to connect to an unsupported database may, and most likely will, result in lost data.
:::

## Configuration structure

The `/config/database.js|ts` file accepts 2 main configuration objects:

- [`connection`](#connection-configuration-object) for database configuration options passed to <ExternalLink to="https://github.com/knex/knex" text="Knex.js"/>
- [`settings`](#settings-configuration-object) for Strapi-specific database settings

### `connection` configuration object

| Parameter                                                | Description                                                                                           | Type      | Default |
|----------------------------------------------------------|-------------------------------------------------------------------------------------------------------|-----------|---------|
| `client`                                                 | Database client to create the connection.<br/>Accepts the following values:<ul><li>`sqlite` for SQLite databases</li><li>`postgres` for PostgreSQL databases</li><li>`mysql` for MySQL databases</li></ul> | `String`  | -       |
| `connection`                                             | Database [connection information](#connection-parameters)                                             | `Object`  | -       |
| `debug`                                                  | Show database exchanges and errors.                                                                   | `Boolean` | `false` |
| `useNullAsDefault`<br/><br />_Optional, only for SQLite_ | Use `NULL` as a default value                                                                         | `Boolean` | `true`  |
| `pool`<br /><br />_Optional_                             | [Database pooling options](#database-pooling-options)                                                 | `Object`  | -       |
| `acquireConnectionTimeout`<br /><br />_Optional_         | How long knex will wait before throwing a timeout error when acquiring a connection (in milliseconds) | `Integer` | `60000` |

:::note
Strapi only supports the following client values, and will automatically rewrite the `client` value to the following options before passing the configuration to Knex:

| `client` value | Actual package used                                             |
|----------------|-----------------------------------------------------------------|
| sqlite         | <ExternalLink to="https://www.npmjs.com/package/better-sqlite3" text="better-sqlite3"/>  |
| mysql          | <ExternalLink to="https://www.npmjs.com/package/mysql2" text="mysql2"/>                  |
| postgres       | <ExternalLink to="https://www.npmjs.com/package/pg" text="pg"/>                          |
:::

#### Connection parameters

The `connection.connection` object found in `./config/database.js` (or `./config/database.ts` for TypeScript) is used to pass database connection information and accepts the following parameters:

| Parameter  | Description                                                                                                                   | Type                  |
|------------|-------------------------------------------------------------------------------------------------------------------------------|-----------------------|
| `connectionString`| Database connection string. When set, it overrides the other `connection.connection` properties. To disable use an empty string: `''`. <br/> **Available in `v4.6.2`+**           | `String`                  |
| `host`     | Database host name. Default value: `localhost`.                                                                               | `String`              |
| `port`     | Database port                                                                                                                 | `Integer`             |
| `database` | Database name.                                                                                                                | `String`              |
| `user`     | Username used to establish the connection                                                                                     | `String`              |
| `password` | Password used to establish the connection                                                                                     | `String`              |
| `timezone` | Set the default behavior for local time. Default value: `utc` <ExternalLink to="https://www.php.net/manual/en/timezones.php" text="Timezone options"/> | `String`              |
| `schema`   | Set the default database schema. **Used only for Postgres DB.**                                                               | `String`              |
| `ssl`      | For SSL database connection.<br/> Use an object to pass certificate files as strings.                                         | `Boolean` or `Object` |

:::note
Depending on the database client used, more parameters can be set (e.g., `charset` and `collation` for <ExternalLink to="https://github.com/mysqljs/mysql#connection-options" text="mysql"/>). Check the database client documentation to know what parameters are available, for instance the <ExternalLink to="https://node-postgres.com/apis/client#new-client" text="pg"/>, <ExternalLink to="https://github.com/mysqljs/mysql#connection-options" text="mysql"/>, and <ExternalLink to="https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md#new-databasepath-options" text="better-sqlite3"/> documentations.
:::

#### Database pooling options

The `connection.pool` object optionally found in `./config/database.js` (or `./config/database.ts` for TypeScript) is used to pass <ExternalLink to="https://github.com/vincit/tarn.js" text="Tarn.js"/> database pooling options and accepts the following parameters:

:::caution
When using Docker, change the pool `min` value to `0` as Docker will kill any idle connections, making it impossible to keep any open connections to the database (see the <ExternalLink to="https://knexjs.org/guide/#pool" text="Tarn.js pool"/> settings used by Knex.js for more information).
:::

| Parameter                   | Description                                                                                                                                                                                | Type       | Default |
|-----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|---------|
| `min`                       | Minimum number of database connections to keepalive                                                                                                                                        | `Integer`  | `2`     |
| `max`                       | Maximum number of database connections to keepalive                                                                                                                                        | `Integer`  | `10`    |
| `acquireTimeoutMillis`      | Time in milliseconds before timing out a database connection attempt                                                                                                                       | `Integer`  | `60000` |
| `createTimeoutMillis`       | Time in milliseconds before timing out a create query attempt                                                                                                                              | `Integer`  | `30000` |
| `destroyTimeoutMillis`      | Time in milliseconds before timing out a destroy query attempt                                                                                                                             | `Integer`  | `5000`  |
| `idleTimeoutMillis`         | Time in milliseconds before free database connections are destroyed                                                                                                                        | `Integer`  | `30000` |
| `reapIntervalMillis`        | Time in milliseconds to check for idle database connections to destroy                                                                                                                     | `Integer`  | `1000`  |
| `createRetryIntervalMillis` | Time in milliseconds to idle before retrying failed create actions                                                                                                                         | `Integer`  | `200`   |
| `afterCreate`               | Callback function to execute custom logic when the pool acquires a new connection.<br/><br/>See the <ExternalLink to="https://knexjs.org/#Installation-pooling" text="Knex.js documentation"/> for more information | `Function` | -       |

### `settings` configuration object

The `settings` object found in `./config/database.js` (or `./config/database.ts` for TypeScript) is used to configure Strapi-specific database settings and accepts the following parameters:

| Parameter        | Description                                                     | Type      | Default |
| ---------------- | --------------------------------------------------------------- | --------- | ------- |
| `forceMigration` | Enable or disable the forced database migration.                | `Boolean` | `true`  |
| `runMigrations`  | Enable or disable database migrations from running on start up. | `Boolean` | `true`  |

<!-- TODO: Open and track a feature request for autoMigration as it doesn't exist in v4 -->

### Configuration examples

<Tabs>

<TabItem value="PostgreSQL" label="PostgreSQL">

```js title="./config/database.js"
module.exports = ({ env }) => ({
  connection: {
    client: 'postgres',
    connection: {
      host: env('DATABASE_HOST', '127.0.0.1'),
      port: env.int('DATABASE_PORT', 5432),
      database: env('DATABASE_NAME', 'strapi'),
      user: env('DATABASE_USERNAME', 'strapi'),
      password: env('DATABASE_PASSWORD', 'strapi'),
      schema: env('DATABASE_SCHEMA', 'public'), // Not required
      ssl: {
        rejectUnauthorized: env.bool('DATABASE_SSL_SELF', false), // For self-signed certificates
      },
    },
    debug: false,
  },
});
```

:::caution
Strapi is aware that there is an issue regarding **SSL support for the server**.
In order to fix it, you have to set the `ssl:{}` object as a boolean in order to disable it. See below for example:

```js
module.exports = ({ env }) => ({
  connection: {
    client: 'postgres',
    connection: {
      ...
      ssl: env('DATABASE_SSL', false)
    },
  },
});
```

:::

Please note that if you need client side SSL CA verification you will need to use the `ssl:{}` object with the fs module to convert your CA certificate to a string. You can see an example below:

```js
const fs = require('fs');
module.exports = ({ env }) => ({
  connection: {
    client: 'postgres',
    connection: {
      ...
      ssl: {
        ca: fs.readFileSync(`${__dirname}/path/to/your/ca-certificate.crt`).toString(),
      },
    },
  },
});
```

</TabItem>

 <TabItem value="MySQL/MariaDB" label="MySQL/MariaDB">

```js title="./config/database.js"
module.exports = ({ env }) => ({
  connection: {
    client: 'mysql',
    connection: {
      host: env('DATABASE_HOST', '127.0.0.1'),
      port: env.int('DATABASE_PORT', 3306),
      database: env('DATABASE_NAME', 'strapi'),
      user: env('DATABASE_USERNAME', 'strapi'),
      password: env('DATABASE_PASSWORD', 'strapi'),
      ssl: {
        rejectUnauthorized: env.bool('DATABASE_SSL_SELF', false), // For self-signed certificates
      },
    },
    debug: false,
  },
});
```

</TabItem>

<TabItem value="SQLite" label="SQLite">

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/database.js"
module.exports = ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: env('DATABASE_FILENAME', '.tmp/data.db'),
    },
    useNullAsDefault: true,
    debug: false,
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/database.ts"
import path from 'path';
export default ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: path.join(
        __dirname,
        '..',
        '..',
        env('DATABASE_FILENAME', path.join('.tmp', 'data.db'))
      ),
    },
    useNullAsDefault: true,
  },
});
```

</TabItem>
</Tabs>

</TabItem>
</Tabs>

## Configuration in database

Configuration files are not multi-server friendly. To update configurations in production you can use a data store to get and set settings.

### Get settings

- `environment` (string): Sets the environment you want to store the data in. By default it's current environment (can be an empty string if your configuration is environment agnostic).
- `type` (string): Sets if your configuration is for an `api`, `plugin` or `core`. By default it's `core`.
- `name` (string): You have to set the plugin or api name if `type` is `api` or `plugin`.
- `key` (string, required): The name of the key you want to store.

```js
// strapi.store(object).get(object);
// create reusable plugin store variable
const pluginStore = strapi.store({
  environment: strapi.config.environment,
  type: 'plugin',
  name: 'users-permissions',
});
await pluginStore.get({ key: 'grant' });
```

### Set settings

- `value` (any, required): The value you want to store.

```js
// strapi.store(object).set(object);
// create reusable plugin store variable
const pluginStore = strapi.store({
  environment: strapi.config.environment,
  type: 'plugin',
  name: 'users-permissions'
});
await pluginStore.set({
  key: 'grant',
  value: {
    ...
  }
});
```

## Environment variables in database configurations

Strapi version `v4.6.2` and higher includes the database configuration options in the `./config/database.js` or `./config/database.ts` file. When a new project is created the environment variable `DATABASE_CLIENT` with the value `mysql`, `postgres`, or `sqlite` is automatically added to the `.env` file depending on which database you choose during project creation. Additionally, all of the environment variables necessary to connect to your local development database are also added to the `.env` file.  The following is an example of the generated configuration file:

<Tabs groupId="js-ts">
<TabItem value="javascript" label="JavaScript">

```js
const path = require('path');

module.exports = ({ env }) => {
  const client = env('DATABASE_CLIENT', 'sqlite');

  const connections = {
    mysql: {
      connection: {
        connectionString: env('DATABASE_URL'),
        host: env('DATABASE_HOST', 'localhost'),
        port: env.int('DATABASE_PORT', 3306),
        database: env('DATABASE_NAME', 'strapi'),
        user: env('DATABASE_USERNAME', 'strapi'),
        password: env('DATABASE_PASSWORD', 'strapi'),
        ssl: env.bool('DATABASE_SSL', false) && {
          key: env('DATABASE_SSL_KEY', undefined),
          cert: env('DATABASE_SSL_CERT', undefined),
          ca: env('DATABASE_SSL_CA', undefined),
          capath: env('DATABASE_SSL_CAPATH', undefined),
          cipher: env('DATABASE_SSL_CIPHER', undefined),
          rejectUnauthorized: env.bool(
            'DATABASE_SSL_REJECT_UNAUTHORIZED',
            true
          ),
        },
      },
      pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },
    },
    postgres: {
      connection: {
        connectionString: env('DATABASE_URL'),
        host: env('DATABASE_HOST', 'localhost'),
        port: env.int('DATABASE_PORT', 3306),
        database: env('DATABASE_NAME', 'strapi'),
        user: env('DATABASE_USERNAME', 'strapi'),
        password: env('DATABASE_PASSWORD', 'strapi'),
        ssl: env.bool('DATABASE_SSL', false) && {
          key: env('DATABASE_SSL_KEY', undefined),
          cert: env('DATABASE_SSL_CERT', undefined),
          ca: env('DATABASE_SSL_CA', undefined),
          capath: env('DATABASE_SSL_CAPATH', undefined),
          cipher: env('DATABASE_SSL_CIPHER', undefined),
          rejectUnauthorized: env.bool(
            'DATABASE_SSL_REJECT_UNAUTHORIZED',
            true
          ),
        },
        schema: env('DATABASE_SCHEMA', 'public'),
      },
      pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },
    },
    sqlite: {
      connection: {
        filename: path.join(
          __dirname,
          '..',
          env('DATABASE_FILENAME', 'data.db')
        ),
      },
      useNullAsDefault: true,
    },
  };

  return {
    connection: {
      client,
      ...connections[client],
      acquireConnectionTimeout: env.int('DATABASE_CONNECTION_TIMEOUT', 60000),
    },
  };
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts
import path from 'path';

export default = ({ env }) => {
  const client = env('DATABASE_CLIENT', 'sqlite');

  const connections = {
    mysql: {
      connection: {
        connectionString: env('DATABASE_URL'),
        host: env('DATABASE_HOST', 'localhost'),
        port: env.int('DATABASE_PORT', 3306),
        database: env('DATABASE_NAME', 'strapi'),
        user: env('DATABASE_USERNAME', 'strapi'),
        password: env('DATABASE_PASSWORD', 'strapi'),
        ssl: env.bool('DATABASE_SSL', false) && {
          key: env('DATABASE_SSL_KEY', undefined),
          cert: env('DATABASE_SSL_CERT', undefined),
          ca: env('DATABASE_SSL_CA', undefined),
          capath: env('DATABASE_SSL_CAPATH', undefined),
          cipher: env('DATABASE_SSL_CIPHER', undefined),
          rejectUnauthorized: env.bool(
            'DATABASE_SSL_REJECT_UNAUTHORIZED',
            true
          ),
        },
      },
      pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },
    },
    postgres: {
      connection: {
        connectionString: env('DATABASE_URL'),
        host: env('DATABASE_HOST', 'localhost'),
        port: env.int('DATABASE_PORT', 3306),
        database: env('DATABASE_NAME', 'strapi'),
        user: env('DATABASE_USERNAME', 'strapi'),
        password: env('DATABASE_PASSWORD', 'strapi'),
        ssl: env.bool('DATABASE_SSL', false) && {
          key: env('DATABASE_SSL_KEY', undefined),
          cert: env('DATABASE_SSL_CERT', undefined),
          ca: env('DATABASE_SSL_CA', undefined),
          capath: env('DATABASE_SSL_CAPATH', undefined),
          cipher: env('DATABASE_SSL_CIPHER', undefined),
          rejectUnauthorized: env.bool(
            'DATABASE_SSL_REJECT_UNAUTHORIZED',
            true
          ),
        },
        schema: env('DATABASE_SCHEMA', 'public'),
      },
      pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },
    },
    sqlite: {
      connection: {
        filename: path.join(
          __dirname,
          '..',
          env('DATABASE_FILENAME', 'data.db')
        ),
      },
      useNullAsDefault: true,
    },
  };

  return {
    connection: {
      client,
      ...connections[client],
      acquireConnectionTimeout: env.int('DATABASE_CONNECTION_TIMEOUT', 60000),
    },
  };
};
```

</TabItem>
</Tabs>

The following are examples of the corresponding `.env` file database-related keys for each of the possible databases:

<Tabs>
<TabItem value="mysql"label="MySQL or MariaDB">

```bash

# Database
DATABASE_CLIENT=mysql
DATABASE_HOST=127.0.0.1
DATABASE_PORT=3306
DATABASE_NAME=strapi
DATABASE_USERNAME=strapi
DATABASE_PASSWORD=strap1
DATABASE_SSL=false
```

</TabItem>

<TabItem value="postgres" label="PostgreSQL">

```bash

# Database
DATABASE_CLIENT=postgres
DATABASE_HOST=127.0.0.1
DATABASE_PORT=5432
DATABASE_NAME=strapi
DATABASE_USERNAME=strapi
DATABASE_PASSWORD=strapi
DATABASE_SSL=false
```

</TabItem>

<TabItem value="sqlite" label="SQLite">

```bash

# Database
DATABASE_CLIENT=sqlite
DATABASE_FILENAME=.tmp/data.db
```

</TabItem>
</Tabs>

### Environment variables for Strapi applications before `v4.6.2`

If you started your project with a version prior to `v4.6.2` you can convert your `database.js|database.ts` configuration file following this procedure:

1. Update your application to `v4.6.2` or a later version. See the [upgrades](/cms/upgrades) documentation.
2. Replace the contents of your `./config/database.js` or `./config/database.ts` file with the preceding JavaScript or TypeScript code.
3. Add the environment variables from the preceding code example to your `.env` file.
4. (_optional_) Add additional environment variables such as `DATABASE_URL` and the properties of the `ssl` object.
5. Save the changes and restart your application.
:::caution
Do not overwrite the environment variables: `HOST`, `PORT`, `APP_KEYS`, `API_TOKEN_SALT`, and `ADMIN_JWT_SECRET`.
:::

### Database connections using `connectionString`

Many managed database solutions use the property `connectionString` to connect a database to an application. Strapi `v4.6.2` and later versions include the `connectionString` property. The `connectionString` is a concatenation of all the database properties in the `connection.connection` object. The `connectionString`:

- overrides the other `connection.connection` properties such as `host` and `port`,
- can be disabled by setting the property to an empty string: `''`.

### Database management by environment

Development of a Strapi application commonly includes customization in the local development environment with a local development database, such as `SQLite`. When the application is ready for another environment such as production or staging the application is deployed with a different database instance, usually `MySQL`, `MariaDB`, or `PostgreSQL`. Database environment variables allow you to switch the attached database. To switch the database connection:

* set a minimum of the `DATABASE_CLIENT` and `DATABASE_URL` for `MySQL`, `MariaDB`, and `PostgreSQL`,
* or set a minimum of `DATABASE_CLIENT` and `DATABASE_FILENAME` for `SQLite`.

For deployed versions of your application the database environment variables should be stored wherever your other secrets are stored. The following table gives examples of where the database environment variables should be stored:

| Hosting option                                        | environment variable storage    |
|-------------------------------------------------------|---------------------------------|
| Virtual private server/virtual machine (e.g. AWS EC2) | `ecosystem.config.js` or `.env` |
| DigitalOcean App Platform                             | `Environment Variables` table   |
| Heroku                                                | `Config vars` table                   |

## Databases installation

Strapi gives you the option to choose the most appropriate database for your project. Strapi supports PostgreSQL, SQLite, or MySQL.

### SQLite

SQLite is the default (see [Quick Start Guide](/cms/quick-start)) and recommended database to quickly create an application locally.

#### Install SQLite during application creation

Use one of the following commands:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn create strapi-app my-project --quickstart
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npx create-strapi-app@latest my-project --quickstart
```

</TabItem>

</Tabs>

This will create a new project and launch it in the browser.

#### Install SQLite manually

In a terminal, run the following command:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn add better-sqlite3
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm install better-sqlite3
```

</TabItem>

</Tabs>

Add the following code to your `/config/database.ts|js` file:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/database.js"
module.exports = ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: path.join(__dirname, '..', env('DATABASE_FILENAME', '.tmp/data.db')),
    },
    useNullAsDefault: true,
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/database.ts"
import path from 'path';

export default ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: path.join(__dirname, '..', '..', env('DATABASE_FILENAME', '.tmp/data.db')),
    },
    useNullAsDefault: true,
  },
});
```

</TabItem>

</Tabs>

### PostgreSQL

When connecting Strapi to a PostgreSQL database, the database user requires SCHEMA permissions. While the database admin has this permission by default, a new database user explicitly created for the Strapi application will not. This would result in a 500 error when trying to load the admin console.

To create a new PostgreSQL user with the SCHEMA permission, use the following steps:

```shell
# Create a new database user with a secure password
$ CREATE USER my_strapi_db_user WITH PASSWORD 'password';
# Connect to the database as the PostgreSQL admin
$ \c my_strapi_db_name admin_user
# Grant schema privileges to the user
$ GRANT ALL ON SCHEMA public TO my_strapi_db_user;
```


 This is the content for the doc docusaurus/docs/cms/configurations/environment.md 

 ---
title: Environment variables configuration
sidebar_label: Environment variables
displayed_sidebar: cmsSidebar
tags:
- additional configuration
- configuration
- environment
---

# Environment configuration and variables

Strapi provides specific environment variable names. Defining them in an environment file (e.g., `.env`) will make these variables and their values available in your code.

:::tip
An `env()` utility can be used to [retrieve the value of environment variables](/cms/configurations/guides/access-cast-environment-variables#accessing-environment-variables) and [cast variables to different types](/cms/configurations/guides/access-cast-environment-variables).
:::

Additionally, specific [configurations for different environments](#environment-configurations) can be created.

## Strapi's environment variables {#strapi}

Strapi provides the following environment variables:

 Setting                                                    | Description                                                                                                                                                                                                                                                                   | Type      | Default value   |
|------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------------|
| `STRAPI_TELEMETRY_DISABLED`                                | Don't send telemetry usage data to Strapi                                                                                                                                                                                                                                     | `Boolean` | `false`         |
| `STRAPI_LICENSE`                                           | The license key to activate the Enterprise Edition                                                                                                                                                                                                                            | `String`  | `undefined`     |
| `NODE_ENV` | Type of environment where the application is running.<br/><br/>`production` enables specific behaviors (see <ExternalLink to="https://nodejs.org/en/learn/getting-started/nodejs-the-difference-between-development-and-production" text="Node.js documentation"/> for details) | `String` | `'development'` |
| `BROWSER`                                                  | Open the admin panel in the browser after startup                                                                                                                                                                                                                             | `Boolean` | `true`          |
| `ENV_PATH`                                                 | Path to the file that contains your environment variables                                                                                                                                                                                                                     | `String`  | `'./.env'`      |
| `STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE` <br/><br/>_Optional_ | Initialization locale for the application, if the [Internationalization (i18n) plugin](/cms/features/internationalization) is installed and enabled on Content-Types (see [Configuration of i18n in production environments](/cms/features/internationalization#configuration)) | `String`  | `'en'`          |
| `STRAPI_ENFORCE_SOURCEMAPS`                                | Forces the bundler to emit source-maps, which is helpful for debugging errors in the admin app.  | `boolean` | `false`          |
| `FAST_REFRESH`                                             | _(Only applies to webpack)_<br/>Use <ExternalLink to="https://github.com/pmmmwh/react-refresh-webpack-plugin" text="react-refresh"/> to enable "Fast Refresh" for near-instant feedback while developing the Strapi admin panel.                                                                                                       | `boolean` | `true`          |

:::tip
Prefixing an environment variable name with `STRAPI_ADMIN_` exposes the variable to the admin front end (e.g., `STRAPI_ADMIN_MY_PLUGIN_VARIABLE` is accessible through `process.env.STRAPI_ADMIN_MY_PLUGIN_VARIABLE`).
:::

## Environment configurations

Configurations can be created with the following naming and structure conventions: `./config/env/{environment}/{filename}`. This is useful when you need specific static configurations for specific environments and using environment variables is not the best solution.

These configurations will be merged into the base configurations defined in the `./config` folder.
The environment is based on the `NODE_ENV` environment variable, which defaults to `development`.

When starting Strapi with `NODE_ENV=production` it will load the configuration from `./config/*` and `./config/env/production/*`. Everything defined in the production configuration will override the default configuration. In combination with environment variables this pattern becomes really powerful.

For instance, using the following configuration files will give you various options to start the server:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/server.js"

module.exports = {
  host: '127.0.0.1',
};
```

```js title="./config/env/production/server.js"

module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/server.ts"

export default ({ env }) => ({
  host: '127.0.0.1',
});
```

```js title="./config/env/production/server.ts"

export default ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
});
```

</TabItem>

</Tabs>

With these configuration files the server will start on various ports depending on the environment variables passed:

```bash
yarn start                                   # uses host 127.0.0.1
NODE_ENV=production yarn start               # uses host defined in .env. If not defined, uses 0.0.0.0
HOST=10.0.0.1 NODE_ENV=production yarn start # uses host 10.0.0.1
```

<br/>

To learn deeper about how to use environment variables in your code, please refer to the following guide:

<CustomDocCardsWrapper>
<CustomDocCard icon="chalkboard-simple" title="Access and cast variables" description="Learn how to access and cast environment variables with the env() utility." link="/cms/configurations/guides/access-cast-environment-variables" />
</CustomDocCardsWrapper>

 This is the content for the doc docusaurus/docs/cms/configurations/features.md 

 ---
title: Features configuration
sidebar_label: Features
description: Enable experimental Strapi features
displayed_sidebar: cmsSidebar
tags:
- additional configuration
- configuration
- features configuration
- future flag
---

# Features configuration

The `config/features.js|ts` file is used to enable feature flags. Currently this file only includes a `future` object used to enable experimental features through **future flags**.

Some incoming Strapi features are not yet ready to be shipped to all users, but Strapi still offers community users the opportunity to provide early feedback on these new features or changes. With these experimental features, developers have the flexibility to choose and integrate new features and changes into their Strapi applications as they become available in the current major version as well as assist us in shaping these new features.

Such experimental features are indicated by a <FeatureFlagBadge /> badge throughout the documentation, where the name of the feature flag to use is included in the badge (e.g., <FeatureFlagBadge feature="FeatureFlagName" />). Enabling these features requires enabling the corresponding future flags. Future flags differ from features that are in alpha in that future flags are disabled by default.

:::danger
Enable future flags at your own risk. Experimental features may be subject to change or removal, may contain breaking changes, may be unstable or not fully ready for use, and some parts may still be under development or using mock data.
:::

<!-- ! Commented out as not relevant for now -->
<!-- Future flags can also be utilized for enabling coming breaking changes in upcoming versions (when prefixed by `vX`, with 'X' being the target version). In this scenario, if you decide to enable a future flag for a breaking change, you will need to migrate your application to adapt to this breaking change. The benefit of this approach however, is that changes can be adopted incrementally as opposed to one large migration when the next major release occurs. Some of these flags may have started out as regular unstable but development showed the need for breaking changes. Finally, the aim of this is to empower developers to be able to smoothly transition to new major versions without the need to modify their existing application code where possible. -->

## Enabling a future flag

To enable a future flag:

1. (_optional_) If the server is running, stop it with `Ctrl-C`.
2. Open the `config/features.js|ts` file or create it if the file does not exist yet. The file will export a `future` object with all the future flags to enable.
3. To enable a future flag, add its property name (see [full list](#available-future-flags)) to the `future` object and ensure the property's value is set to `true`. The following example shows how to enable the `contentReleasesScheduling` future flag:

  <Tabs groupId='js-ts'>

  <TabItem value="js" label="JavaScript">

  ```ts title="/config/features.ts"
  module.export = ({ env }) => ({
    future: {
      // You could also simply write: contentReleases: true
      contentReleasesScheduling: env.bool('STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING', false),
    },
  })

  ```

  This example assumes that you have an `.env` environment file at the root of your application and that the file includes the following line:

  ```json title=".env"
  STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING=true
  ```

  If your environment file does not include this value, the `contentReleasesScheduling` future flag property value  will default to `false` and the experimental feature will not be enabled.

  </TabItem>

  <TabItem value="ts" label="TypeScript">

  ```ts title="/config/features.ts"
  export default {
    future: {
      // You could also simply write: contentReleases: true
      contentReleasesScheduling: env.bool('STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING', false),
    },
  };
  ```

  This example assumes that you have an `.env` environment file at the root of your application and that the file includes the following line:

  ```json title=".env"
  STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING=true
  ```

  If your environment file does not include this value, the `contentReleases` future flag property value will default to `false` and the experimental feature will not be enabled.

  </TabItem>
  </Tabs>

4. Rebuild the admin panel and restart the server:

  <Tabs groupId="yarn-npm">
  <TabItem value="yarn" label="Yarn">
  
    ```sh
      yarn develop
    ```
  </TabItem>
  <TabItem value="npm" label="NPM">

    ```sh
      npm run develop
    ```

  </TabItem>
  </Tabs>

## Future flags API

Developers can use the following APIs to interact with future flags:

- Features configuration is part of the `config` object and can be read with `strapi.config.get('features')` or with `strapi.features.config`.

- `strapi.features.future` returns the `isEnabled()` that can be used to determine if a future flag is enabled, using the following method: `strapi.features.future.isEnabled('featureName')`.

## Available future flags

There are currently no available future flags. This section will be updated once new experimental features are available for testing.

<!-- The following future flags are currently available and can be used in the `future` object of the `config/features` configuration file:

| Property name     | Related feature                              | Suggested environment variable name       |
| ----------------- | -------------------------------------------- | ----------------------------------------- |
| `contentReleasesScheduling` | [Releases Scheduling](/cms/features/releases#usage) | `STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING` | -->


 This is the content for the doc docusaurus/docs/cms/configurations/functions.md 

 ---
title: Lifecycle functions
displayed_sidebar: cmsSidebar
description: Strapi includes lifecycle functions (e.g. register, bootstrap and destroy) that control the flow of your application.
tags:
- additional configuration
- asynchronous function
- bootstrap function
- configuration
- destroy function
- lifecycle function
- register function
- synchronous function

---

# Functions

<div className="dont_hide_secondary_bar">

The `./src/index.js` file (or `./src/index.ts` file in a [TypeScript-based](/cms/typescript) project) includes global [register](#register), [bootstrap](#bootstrap) and [destroy](#destroy) functions that can be used to add dynamic and logic-based configurations.

The functions can be synchronous, asynchronous, or return a promise.

<MermaidWithFallback
    chartFile="/diagrams/functions.mmd"
    fallbackImage="/img/assets/diagrams/functions.png"
    fallbackImageDark="/img/assets/diagrams/functions_DARK.png"
    alt="Lifecycle functions diagram"
/>

</div>

## Synchronous function

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js
module.exports = {
  register() {
    // some sync code
  },
  bootstrap() {
    // some sync code
  },
  destroy() {
    // some sync code
  }
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts
export default {
  register() {
    // some sync code
  },
  bootstrap() {
    // some sync code
  },
  destroy() {
    // some sync code
  }
};
```

</TabItem>

</Tabs>

## Asynchronous function

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js
module.exports = {
  async register() {
    // some async code
  },
  async bootstrap() {
    // some async code
  },
  async destroy() {
    // some async code
  }
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts
export default {
  async register() {
    // some async code
  },
  async bootstrap() {
    // some async code
  },
  async destroy() {
    // some async code
  }
};
```

</TabItem>

</Tabs>

## Function returning a promise

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js
module.exports = {
  register() {
    return new Promise(/* some code */);
  },
  bootstrap() {
    return new Promise(/* some code */);
  },
  destroy() {
    return new Promise(/* some code */);
  }
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts
export default {
  register() {
    return new Promise(/* some code */);
  },
  bootstrap() {
    return new Promise(/* some code */);
  },
  destroy() {
    return new Promise(/* some code */);
  }
};
```

</TabItem>

</Tabs>

## Register

The `register` lifecycle function, found in `./src/index.js` (or in `./src/index.ts`), is an asynchronous function that runs before the application is initialized.
It can be used to:

- [extend plugins](/cms/plugins-development/plugins-extension#extending-a-plugins-interface)
- extend [content-types](/cms/backend-customization/models) programmatically
- load some [environment variables](/cms/configurations/environment)
- register a [custom field](/cms/features/custom-fields) that would be used only by the current Strapi application,
- register a [custom provider for the Users & Permissions plugin](/cms/configurations/users-and-permissions-providers/new-provider-guide).

`register()` is the very first thing that happens when a Strapi application is starting. This happens _before_ any setup process and you don't have any access to database, routes, policies, or any other backend server elements within the `register()` function.

## Bootstrap

The `bootstrap` lifecycle function, found in `./src/index.js` (or in `./src/index.ts`), is called at every server start.

It can be used to:

- create an admin user if there isn't one
- fill the database with some necessary data
- declare custom conditions for the [Role-Based Access Control (RBAC)](/cms/configurations/guides/rbac) feature

The `bootstrapi()` function is run _before_ the back-end server starts but _after_ the Strapi application has setup, so you have access to anything from the `strapi` object.

:::tip
You can run `yarn strapi console` (or `npm run strapi console`) in the terminal and interact with the `strapi` object.
:::

## Destroy

The `destroy` function, found in `./src/index.js` (or in `./src/index.ts`), is an asynchronous function that runs before the application gets shut down.

It can be used to gracefully:

- stop [services](/cms/backend-customization/services) that are running
- [clean up plugin actions](/cms/plugins-development/server-api#destroy) (e.g. close connections, remove listeners, etc.)

:::strapi Additional information
You might find additional information in <ExternalLink to="https://strapi.io/blog/how-to-use-register-function-to-customize-your-strapi-app" text="this blog article"/> about registering lifecycle functions.
:::

 This is the content for the doc docusaurus/docs/cms/configurations/guides/access-cast-environment-variables.md 

 ---
title: Access and cast env variables
description: Learn how to cast environment variables in Strapi 5 with the env() utility.
displayed_sidebar: cmsSidebar
tags:
- casting values
- configuration
- configuration guide
- database credentials
- environment 
---

# How to access and cast environment variables

In most use cases there will be different configurations between environments (e.g. database credentials).

Instead of writing those credentials into configuration files, variables can be defined in a `.env` file at the root of the application:

```sh
# path: .env

DATABASE_PASSWORD=acme
```

To customize the path of the `.env` file to load, set an environment variable called `ENV_PATH` before starting the application:

```sh
ENV_PATH=/absolute/path/to/.env npm run start
```

## Accessing environment variables

Variables defined in the `.env` file are accessible using `process.env.{variableName}` anywhere in configuration and application files.

In configuration files, a `env()` utility allows defining defaults and [casting values](/cms/configurations/guides/access-cast-environment-variables#casting-environment-variables):

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/database.js"

module.exports = ({ env }) => ({
  connections: {
    default: {
      settings: {
        password: env('DATABASE_PASSWORD'),
      },
    },
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```js title="./config/database.ts"

export default ({ env }) => ({
  connections: {
    default: {
      settings: {
        password: env('DATABASE_PASSWORD'),
      },
    },
  },
});
```

</TabItem>

</Tabs>

:::note
The syntax `property-name: env('VAR', 'default-value')` uses the value stored in the `.env` file. If there is no specified value in the `.env` file the default value is used.
:::

## Casting environment variables

The `env()` utility can be used to cast environment variables to different types:

```js
// Returns the env if defined without casting it
env('VAR', 'default');

// Cast to integer (using parseInt)
env.int('VAR', 0);

// Cast to float (using parseFloat)
env.float('VAR', 3.14);

// Cast to boolean (check if the value is equal to 'true')
env.bool('VAR', true);

// Cast to JS object (using JSON.parse)
env.json('VAR', { key: 'value' });

// Cast to array (syntax: ENV_VAR=[value1, value2, value3] | ENV_VAR=["value1", "value2", "value3"])
env.array('VAR', [1, 2, 3]);

// Cast to date (using new Date(value))
env.date('VAR', new Date());

// Returns the env matching oneOf union types
env.oneOf('UPLOAD_PROVIDER', ['local', 'aws'], 'local')
```


 This is the content for the doc docusaurus/docs/cms/configurations/guides/access-configuration-values.md 

 ---
title: Access configuration values
description: Learn how to access Strapi 5 configuration values from the code.
displayed_sidebar: cmsSidebar
tags:
- configuration
- configuration guide
---

# How to access to configuration values from the code

All the [configuration files](/cms/configurations) are loaded on startup and can be accessed through the `strapi.config` configuration provider.

If the `/config/server.ts|js` file has the following configuration:

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

  ```js
  module.exports = {
    host: '0.0.0.0',
  };
  ```

</TabItem>

<TabItem value="ts" label="TypeScript">

  ```ts
  export default {
    host: '0.0.0.0',
  };
  ```

</TabItem>

</Tabs>

then the `server.host` key can be accessed as:

  ```js
  strapi.config.get('server.host', 'defaultValueIfUndefined');
  ```

Nested keys are accessible with the <ExternalLink to="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#dot_notation" text="dot notation"/>.

:::note
The filename is used as a prefix to access the configurations.
:::

Configuration files can either be `.js`, `.ts`, or `.json` files.

When using a `.js` or `.ts` file, the configuration can be exported:

- either as an object:

  <Tabs groupId="js-ts">

  <TabItem value="js" label="JavaScript">

  ```js
  module.exports = {
    mySecret: 'someValue',
  };
  ```

  </TabItem>

  <TabItem value="ts" label="TypeScript">

  ```ts
  export default {
    mySecret: 'someValue',
  };
  ```

  </TabItem>

  </Tabs>

- or as a function returning a configuration object (recommended usage). The function will get access to the [`env` utility](/cms/configurations/guides/access-cast-environment-variables):

  <Tabs groupId="js-ts">

  <TabItem value="js" label="JavaScript">

  ```js
  module.exports = ({ env }) => {
    return {
      mySecret: env('MY_SECRET_KEY', 'defaultSecretValue'),
    };
  };
  ```

  </TabItem>

  <TabItem value="ts" label="TypeScript">

  ```ts
  export default ({ env }) => {
    return {
      mySecret: env('MY_SECRET_KEY', 'defaultSecretValue'),
    };
  };
  ```

  </TabItem>

  </Tabs>


 This is the content for the doc docusaurus/docs/cms/configurations/guides/configure-sso.md 

 ---
title: SSO configuration
sidebar_label: How to configure SSO
displayed_sidebar: cmsSidebar
toc_max_heading_level: 6
description: Strapi's SSO allows you to configure additional sign-in and sign-up methods for your administration panel. It requires an Enterprise Edition with a Gold plan.
canonicalUrl: https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/configurations/optional/sso.html
tags:
- additional configuration
- admin panel
- configuration
- Enterprise feature
- SSO 
---

import NotV5 from '/docs/snippets/_not-updated-to-v5.md'

# How to configure SSO providers
<EnterpriseBadge/> <SsoBadge />

[Single Sign-On (SSO)](/cms/features/sso) on Strapi allows you to configure additional sign-in and sign-up methods for the Strapi admin panel.

:::prerequisites

- To configure SSO on your application, you will need an <EnterpriseBadge /> plan or the <SsoBadge /> add-on.
- Make sure Strapi is part of the applications you can access with your provider. For example, with Microsoft (Azure) Active Directory, you must first ask someone with the right permissions to add Strapi to the list of allowed applications. Please refer to your provider(s) documentation to learn more about that.
:::

:::caution
- It is currently not possible to associate a unique SSO provider to an email address used for a Strapi account, meaning that the access to a Strapi account cannot be restricted to only one SSO provider. For more information and workarounds to solve this issue, <ExternalLink to="https://github.com/strapi/strapi/issues/9466#issuecomment-783587648" text="please refer to the dedicated GitHub issue"/>.
- Deploying the admin and backend on entirely different unrelated domains is not possible at this time when using SSO.
:::

## Accessing the configuration

The SSO configuration lives in the `/config/admin` file.

The providers' configuration should be written in the `auth.providers` path of the admin panel as an array of [provider configurations](#setting-up-provider-configuration):

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"

module.exports = ({ env }) => ({
  // ...
  auth: {
    providers: [], // The providers' configuration lives there
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

export default ({ env }) => ({
  // ...
  auth: {
    providers: [], // The providers' configuration lives there
  },
});
```

</TabItem>

</Tabs>

## Setting up provider configuration

A provider's configuration is a JavaScript object built with the following properties:

| Name             | Required | Type     | Description                                                                                                            |
|------------------|----------|----------|------------------------------------------------------------------------------------------------------------------------|
| `uid`            | Yes     | String   | The UID of the strategy. It must match the strategy's name.                                                             |
| `displayName`    | Yes     | String   | The name that will be used on the login page to reference the provider.                                                |
| `createStrategy` | Yes     | Function | A factory that will build and return a new passport strategy for your provider. Takes the strapi instance as parameter. |
| `icon`           | No    | String   | An image URL. If specified, it will replace the displayName on the login page.                                          |

:::note
The `uid` property is the unique identifier of each strategy and is generally found in the strategy's package. If you are not sure of what it refers to, please contact the maintainer of the strategy.
:::

### Displaying providers logos

By default, Strapi security policy does not allow loading images from external URLs, so provider logos will not show up on the [login screen](/cms/features/admin-panel#usage) of the admin panel unless [a security exception is added through middlewares configuration](/cms/configurations/middlewares#security), as in the following example:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/config/middlewares.js"
module.exports = [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'dl.airtable.com',
            'www.okta.com', // Base URL of the provider's logo
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'dl.airtable.com',
            'www.okta.com', // Base URL of the provider's logo
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="/config/middlewares.ts"
export default [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'dl.airtable.com',
            'www.okta.com', // Base URL of the provider's logo
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'dl.airtable.com',
            'www.okta.com', // Base URL of the provider's logo
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
]
```

  </TabItem>
</Tabs>

### Setting common domain for cookies

When deploying the admin panel to a different location or on a different subdomain, an additional configuration is required to set the common domain for the cookies. This is required to ensure the cookies are shared across the domains.

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/config/admin.js"
module.exports = ({ env }) => ({
  auth: {
    domain: env("ADMIN_SSO_DOMAIN", ".test.example.com"),
    providers: [
      // ...
    ],
  },
  url: env("ADMIN_URL", "http://admin.test.example.com"),
  // ...
});
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="/config/admin.ts"
export default ({ env }) => ({
  auth: {
    domain: env("ADMIN_SSO_DOMAIN", ".test.example.com"),
    providers: [
      // ...
    ],
  },
  url: env("ADMIN_URL", "http://admin.test.example.com"),
  // ...
});
```

</TabItem>
</Tabs>

### The `createStrategy` Factory

A passport strategy is usually built by instantiating it using 2 parameters: the configuration object, and the verify function.

#### Configuration object

The configuration object depends on the strategy needs, but often asks for a callback URL to be redirected to once the connection has been made on the provider side.

A specific callback URL can be generated for your provider using the `getStrategyCallbackURL` method. This URL also needs to be written on the provider side in order to allow redirection from it.

The format of the callback URL is the following: `/admin/connect/<provider_uid>`.

:::tip
`strapi.admin.services.passport.getStrategyCallbackURL` is a Strapi helper you can use to get a callback URL for a specific provider. It takes a provider name as a parameter and returns a URL.
:::

If needed, this is also where you will put your client ID and secret key for your OAuth2 application.

#### Verify function

The verify function is used here as a middleware allowing the user to transform and make extra processing on the data returned from the provider API.

This function always takes a `done` method as last parameter which is used to transfer needed data to the Strapi layer of SSO.

Its signature is the following: `void done(error: any, data: object);` and it follows the following rules:

- If `error` is not set to `null`, then the data sent is ignored, and the controller will throw an error.
- If the SSO's auto-registration feature is disabled, then the `data` object only need to be composed of an `email` property.
- If the SSO's auto-registration feature is enabled, then you will need to define (in addition to the `email`) either a `username` property or both `firstname` and `lastname` within the `data` object.

### Adding a provider

Adding a new provider means adding a new way for your administrators to log-in.

Strapi uses <ExternalLink to="http://www.passportjs.org/" text="Passport.js"/>, which enables a large selection of providers. Any valid passport strategy that doesn't need additional custom data should therefore work with Strapi.

:::caution
Strategies such as <ExternalLink to="https://github.com/vesse/passport-ldapauth" text="ldapauth"/> don't work out of the box since they require extra data to be sent from the admin panel.
If you want to add an LDAP provider to your application, you will need to write a <ExternalLink to="http://www.passportjs.org/packages/passport-custom/" text="custom strategy"/>.
You can also use services such as Okta and Auth0 as bridge services.
:::

### Configuring the provider

To configure a provider, follow the procedure below:

1. Make sure to import your strategy in your admin configuration file, either from an installed package or a local file.
2. Add a new item to the `auth.providers` array in your admin panel configuration that matches the [format given above](#setting-up-provider-configuration).
3. Rebuild and restart your application with `yarn build && yarn develop` or `npm run build && npm run develop`. The provider should appear on your admin login page.

#### Provider configuration examples

The following examples show how SSO is configured for the most common providers:

<CustomDocCardsWrapper>
<CustomDocCard icon="plugs-connected" title="Google" description="Learn how to configure SSO with Google and Strapi." link="/cms/configurations/sso-providers/google" />
<CustomDocCard icon="plugs-connected" title="GitHub" description="Learn how to configure SSO with GitHub and Strapi." link="/cms/configurations/sso-providers/github" />
<CustomDocCard icon="plugs-connected" title="Discord" description="Learn how to configure SSO with Discord and Strapi." link="/cms/configurations/sso-providers/discord" />
<CustomDocCard icon="plugs-connected" title="Microsoft" description="Learn how to configure SSO with Microsoft and Strapi." link="/cms/configurations/sso-providers/microsoft" />
<CustomDocCard icon="plugs-connected" title="Keycloak" description="Learn how to configure SSO with Keycloak and Strapi." link="/cms/configurations/sso-providers/keycloak" />
<CustomDocCard icon="plugs-connected" title="Okta" description="Learn how to configure SSO with Okta and Strapi." link="/cms/configurations/sso-providers/okta" />
</CustomDocCardsWrapper>

## Performing advanced customization

### Admin panel URL

If the administration panel lives on a host/port different from the Strapi server, the admin panel URL needs to be updated: Update the `url` key in [the `/config/admin` file](/cms/admin-panel-customization/host-port-path).

### Custom logic

In some scenarios, you will want to write additional logic for your connection workflow such as:

- restricting connection and registration for a specific domain
- triggering actions on connection attempt
- adding analytics

The easiest way to do so is to plug into the verify function of your strategy and write some code.

For example, if you want to allow only people with an official `strapi.io` email address, you can instantiate your strategy like follows:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"

const strategyInstance = new Strategy(configuration, ({ email, username }, done) => {
  // If the email ends with @strapi.io
  if (email.endsWith('@strapi.io')) {
    // then we continue with the data given by the provider
    return done(null, { email, username });
  }

  // Otherwise, we continue by sending an error to the done function
  done(new Error('Forbidden email address'));
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

const strategyInstance = new Strategy(configuration, ({ email, username }, done) => {
  // If the email ends with @strapi.io
  if (email.endsWith('@strapi.io')) {
    // then we continue with the data given by the provider
    return done(null, { email, username });
  }

  // Otherwise, we continue by sending an error to the done function
  done(new Error('Forbidden email address'));
});
```

</TabItem>

</Tabs>

### Authentication events

The SSO feature adds a new [authentication event](/cms/configurations/admin-panel#authentication): `onSSOAutoRegistration`.

This event is triggered whenever a user is created using the auto-register feature added by SSO.
It contains the created user (`event.user`), and the provider used to make the registration (`event.provider`).

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"

module.exports = () => ({
    auth: {
      // ...
      events: {
        onConnectionSuccess(e) {},
        onConnectionError(e) {},
        // ...
        onSSOAutoRegistration(e) {
          const { user, provider } = e;

          console.log(
            `A new user (${user.id}) has been automatically registered using ${provider}`
          );
        },
      },
    },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

export default () => ({
    auth: {
      // ...
      events: {
        onConnectionSuccess(e) {},
        onConnectionError(e) {},
        // ...
        onSSOAutoRegistration(e) {
          const { user, provider } = e;

          console.log(
            `A new user (${user.id}) has been automatically registered using ${provider}`
          );
        },
      },
    },
});
```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/cms/configurations/guides/rbac.md 

 ---
title: Create new Role-Based Access Control (RBAC) conditions
sidebar_label: Configure RBAC conditions
displayed_sidebar: cmsSidebar
description: In Strapi, RBAC is an approach to restricting access to some features of the admin panel to some users. The Community Edition of Strapi offers 3 default roles.
tags:
- administrator
- admin panel
- configuration
- configuration guide
- guides
- RBAC (Role-Based Access Control)
- Users, Roles & Permissions
---

# How to create custom conditions for Role-Based Access Control (RBAC)

Role-Based Access Control (RBAC) is an approach to restricting access to some users. In a Strapi application, users of the admin panel are administrators. Their roles and permissions are [configured in the admin panel](/cms/features/rbac).

## Declaring new conditions

Declare a single condition as an object, and multiple conditions as an array of objects. Each condition object can have 5 possible properties:

- `displayName` (string): the condition name as shown in the admin panel,
- `name` (string): the condition name, kebab-cased,
- `category` (string, _optional_): conditions can be grouped into categories available [in the admin panel](/cms/features/rbac#setting-custom-conditions-for-permissions); if undefined, the condition will appear under the "Default" category,
- `plugin` (string, _optional_): if the condition is created by a plugin, should be the plugin's name, kebab-cased (e.g `content-manager`),
- `handler`: a function used to verify the condition (see [using the condition handler](#using-the-condition-handler))

Declare and register conditions in the global [`bootstrap` function](/cms/configurations/functions#bootstrap) found in `/src/index.js` (see [Registering conditions](#registering-conditions)).

:::note
The condition `name` property acts as a unique id within its namespace, that is either the plugin if the `plugin` property is defined, or the root namespace.
:::

## Using the condition handler

A condition can be applied to any permission, and the condition `handler` is used to verify the condition. The `handler` is a function returning a query object or a boolean value.

Query objects are useful to verify conditions on the entities you read, create, update, delete or publish. They use the <ExternalLink to="https://github.com/crcn/sift.js" text="sift.js"/> library, but only with the following supported operators:

- `$or`
- `$and`
- `$eq`
- `$eqi`
- `$ne`
- `$in`
- `$nin`
- `$lt`
- `$lte`
- `$gt`
- `$gte`
- `$exists`
- `$elemMatch`

The condition `handler` can be a synchronous or asynchronous function that:

- receives the authenticated user making the request,
- and returns `true`, `false`, or a query object.

Returning `true` or `false` is useful to verify an external condition or a condition on the authenticated user.
For instance, a condition that allows access to a page in the admin panel only if server time is 5pm could use this handler:

```js
handler: () => new Date().getHours() === 17;
```

The `handler` function receives the authenticated user, so it can verify conditions on the user:

```js
const condition = {
  displayName: 'Email address from strapi.io',
  name: 'email-strapi-dot-io',
  async handler(user) {
    return user.email.includes('@strapi.io');
  },
};
```

For more granular control, the `handler` function can also return a query object:

```js
const condition = {
  displayName: 'price greater than 50',
  name: 'price-gt-50',
  async handler(user) {
    return { price: { $gt: 50 } };
  },
};
```

## Registering conditions

To be available in the admin panel, conditions should be declared and registered in the global [`bootstrap` function](/cms/configurations/functions#bootstrap) found in `/src/index`. Register a single condition with the `conditionProvider.register()` method:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/src/index.js"

module.exports = async () => {
  await strapi.admin.services.permission.conditionProvider.register({
    displayName: 'Billing amount under 10K',
    name: 'billing-amount-under-10k',
    plugin: 'admin',
    handler: { amount: { $lt: 10000 } },
  });
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/src/index.ts"

export default async () => {
  await strapi.admin.services.permission.conditionProvider.register({
    displayName: 'Billing amount under 10K',
    name: 'billing-amount-under-10k',
    plugin: 'admin',
    handler: { amount: { $lt: 10000 } },
  });
};
```

</TabItem>

</Tabs>

To register multiple conditions, defined as an array of [condition objects](#declaring-new-conditions), use `conditionProvider.registerMany()`:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/src/index.js"

const conditions = [
  {
    displayName: "Entity has same name as user",
    name: "same-name-as-user",
    plugin: "name of a plugin if created in a plugin",
    handler: (user) => {
      return { name: user.name };
    },
  },
  {
    displayName: "Email address from strapi.io",
    name: "email-strapi-dot-io",
    async handler(user) {
      return user.email.includes('@strapi.io');
    },
  }
];

module.exports = {
  async bootstrap(/*{ strapi }*/) {
  // do your boostrap

    await strapi.admin.services.permission.conditionProvider.registerMany(conditions);
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/src/index.ts"

const conditions = [
  {
    displayName: "Entity has same name as user",
    name: "same-name-as-user",
    plugin: "name of a plugin if created in a plugin"
    handler: (user) => {
      return { name: user.name };
    },
  },
  {
    displayName: "Email address from strapi.io",
    name: "email-strapi-dot-io",
    async handler(user) {
      return user.email.includes('@strapi.io');
    },
  }
];

export default async () => {
  // do your boostrap

  await strapi.admin.services.permission.conditionProvider.registerMany(conditions);
};
```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/cms/configurations/media-library-providers.md 

 ---
title: Media Library providers
description: Learn how to configure 3rd-party providers for the Media Library feature, or create your own.
displayed_sidebar: cmsSidebar
tags:
- media library
- customization
---

import MediaLibraryProvidersList from '/docs/snippets/media-library-providers-list.md';

# Media Library providers

The [Media Library](/cms/features/media-library) feature is powered by a back-end server package called Upload which leverages the use of providers.

<MediaLibraryProvidersList />

Providers add an extension to the core capabilities of the plugin, for example to upload media files to AWS S3 instead of the local server, or using Amazon SES for emails instead of Sendmail.

There are both official providers maintained by Strapi ‚Äî discoverable via the [Marketplace](/cms/plugins/installing-plugins-via-marketplace) ‚Äî and many community maintained providers available via <ExternalLink to="https://www.npmjs.com/" text="npm"/>.

A provider can be configured to be [private](#private-providers) to ensure asset URLs will be signed for secure access.

## Installing providers

New providers can be installed using `npm` or `yarn` using the following format `@strapi/provider-<plugin>-<provider> --save`.

For example, to install the AWS S3 provider for the Upload (Media Library) feature::

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="Yarn">

```bash
yarn add @strapi/provider-upload-aws-s3
```

</TabItem>

<TabItem value="npm" label="NPM">

```bash
npm install @strapi/provider-upload-aws-s3 --save
```

</TabItem>

</Tabs>

## Configuring providers

Newly installed providers are enabled and configured in [the `/config/plugins` file](/cms/configurations/plugins). If this file does not exist you must create it.

Each provider will have different configuration settings available. Review the respective entry for that provider in the [Marketplace](/cms/plugins/installing-plugins-via-marketplace) or <ExternalLink to="https://www.npmjs.com/" text="npm"/> to learn more.

The following is an example configuration for an AWS S3 Media Library provider:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"

module.exports = ({ env }) => ({
  // ...
  upload: {
    config: {
      provider: 'aws-s3',
      providerOptions: {
        baseUrl: env('CDN_URL'),
        rootPath: env('CDN_ROOT_PATH'),
        s3Options: {
          credentials: {
            accessKeyId: env('AWS_ACCESS_KEY_ID'),
            secretAccessKey: env('AWS_ACCESS_SECRET'),
          },
          region: env('AWS_REGION'),
          params: {
            ACL: env('AWS_ACL', 'public-read'),
            signedUrlExpires: env('AWS_SIGNED_URL_EXPIRES', 15 * 60),
            Bucket: env('AWS_BUCKET'),
          },
        },
      },
      actionOptions: {
        upload: {},
        uploadStream: {},
        delete: {},
      },
    },
  },
  // ...
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/plugins.ts"

export default ({ env }) => ({
  // ...
  upload: {
    config: {
      provider: 'aws-s3', // For community providers pass the full package name (e.g. provider: 'strapi-provider-upload-google-cloud-storage')
      providerOptions: {
        accessKeyId: env('AWS_ACCESS_KEY_ID'),
        secretAccessKey: env('AWS_ACCESS_SECRET'),
        region: env('AWS_REGION'),
        params: {
          ACL: env('AWS_ACL', 'public-read'), // 'private' if you want to make the uploaded files private
          Bucket: env('AWS_BUCKET'),
        },
      },
    },
  },
  // ...
});
```

</TabItem>

</Tabs>

:::note Notes
* Strapi has a default [`security` middleware](/cms/configurations/middlewares#security) that has a very strict `contentSecurityPolicy` that limits loading images and media to `"'self'"` only, see the example configuration on the <ExternalLink to="https://www.npmjs.com/package/@strapi/provider-upload-aws-s3" text="provider page"/> or the [middleware documentation](/cms/configurations/middlewares#security) for more information.
* When using a different provider per environment, specify the correct configuration in `/config/env/${yourEnvironment}/plugins.js|ts` (See [Environments](/cms/configurations/environment)).
* Only one email provider will be active at a time. If the email provider setting isn't picked up by Strapi, verify the `plugins.js|ts` file is in the correct folder.
* When testing the new email provider with those two email templates created during strapi setup, the _shipper email_ on the template defaults to `no-reply@strapi.io` and needs to be updated according to your email provider, otherwise it will fail the test (See [Configure templates locally](/cms/features/users-permissions#templating-emails)).

:::

### Configuration per environment

When configuring your provider you might want to change the configuration based on the `NODE_ENV` environment variable or use environment specific credentials.

You can set a specific configuration in the `/config/env/{env}/plugins.js|ts` configuration file and it will be used to overwrite the default configuration.

## Creating providers

To implement your own custom provider you must <ExternalLink to="https://docs.npmjs.com/creating-node-js-modules" text="create a Node.js module"/>.

The interface that must be exported depends on the plugin you are developing the provider for. The following are templates for the Upload (Media Library) and Email features:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js
module.exports = {
  init(providerOptions) {
    // init your provider if necessary

    return {
      upload(file) {
        // upload the file in the provider
        // file content is accessible by `file.buffer`
      },
      uploadStream(file) {
        // upload the file in the provider
        // file content is accessible by `file.stream`
      },
      delete(file) {
        // delete the file in the provider
      },
      checkFileSize(file, { sizeLimit }) {
        // (optional)
        // implement your own file size limit logic
      },
      getSignedUrl(file) {
        // (optional)
        // Generate a signed URL for the given file.
        // The signed URL allows secure access to the file.
        // Only Content Manager assets will be signed.
        // Returns an object {url: string}.
      },
      isPrivate() {
        // (optional)
        // if it is private, file urls will be signed
        // Returns a boolean
      },
    };
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts
export default {
  init(providerOptions) {
    // init your provider if necessary

    return {
      upload(file) {
        // upload the file in the provider
        // file content is accessible by `file.buffer`
      },
      uploadStream(file) {
        // upload the file in the provider
        // file content is accessible by `file.stream`
      },
      delete(file) {
        // delete the file in the provider
      },
      checkFileSize(file, { sizeLimit }) {
        // (optional)
        // implement your own file size limit logic
      },
      getSignedUrl(file) {
        // (optional)
        // Generate a signed URL for the given file.
        // The signed URL allows secure access to the file.
        // Only Content Manager assets will be signed.
        // Returns an object {url: string}.
      },
      isPrivate() {
        // (optional)
        // if it is private, file urls will be signed
        // Returns a boolean
      },
    };
  },
};
```

</TabItem>

</Tabs>

In the send function you will have access to:

* `providerOptions` that contains configurations written in `plugins.js|ts`
* `settings` that contains configurations written in `plugins.js|ts`
* `options` that contains options you send when you call the send function from the email plugin service

You can review the <ExternalLink to="https://github.com/strapi/strapi/tree/master/packages/providers" text="Strapi-maintained providers"/> for example implementations.

After creating your new provider you can <ExternalLink to="https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages" text="publish it to npm"/> to share with the community or [use it locally](#local-providers) for your project only.

### Local providers

If you want to create your own provider without publishing it on npm you can follow these steps:

1. Create a `providers` folder in your application.
2. Create your provider (e.g. `/providers/strapi-provider-<plugin>-<provider>`)
3. Then update your `package.json` to link your `strapi-provider-<plugin>-<provider>` dependency to the <ExternalLink to="https://docs.npmjs.com/files/package.json#local-paths" text="local path"/> of your new provider.

```json
{
  ...
  "dependencies": {
    ...
    "strapi-provider-<plugin>-<provider>": "file:providers/strapi-provider-<plugin>-<provider>",
    ...
  }
}
```

4. Update your `/config/plugins.js|ts` file to [configure the provider](#configuring-providers).
5. Finally, run `yarn` or `npm install` to install your new custom provider.

### Private providers

You can set up a private provider, meaning that every asset URL displayed in the Content Manager will be signed for secure access.

To enable private providers, you must implement the `isPrivate()` method and return `true`.

In the backend, Strapi generates a signed URL for each asset using the `getSignedUrl(file)` method implemented in the provider. The signed URL includes an encrypted signature that allows the user to access the asset (but normally only for a limited time and with specific restrictions, depending on the provider).

Note that for security reasons, the content API will not provide any signed URLs. Instead, developers using the API should sign the urls themselves.

**Example**

To create a private `aws-s3` provider:

1. Create a `/providers/aws-s3` folder in your application. See [Local Providers](#local-providers) for more information.
2. Implement the `isPrivate()` method in the `aws-s3` provider to return `true`.
3. Implement the `getSignedUrl(file)` method in the `aws-s3` provider to generate a signed URL for the given file.

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/providers/aws-s3/index.js"
// aws-s3 provider

module.exports = {
  init: (config) => {
    const s3 = new AWS.S3(config);

    return {
      async upload(file) {
        // code to upload file to S3
      },

      async delete(file) {
        // code to delete file from S3
      },

      async isPrivate() {
        return true;
      },

      async getSignedUrl(file) {
        const params = {
          Bucket: config.params.Bucket,
          Key: file.path,
          Expires: 60, // URL expiration time in seconds
        };

        const signedUrl = await s3.getSignedUrlPromise("getObject", params);
        return { url: signedUrl };
      },
    };
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="/providers/aws-s3/index.ts"
// aws-s3 provider

export = {
  init: (config) => {
    const s3 = new AWS.S3(config);

    return {
      async upload(file) {
        // code to upload file to S3
      },

      async delete(file) {
        // code to delete file from S3
      },

      async isPrivate() {
        return true;
      },

      async getSignedUrl(file) {
        const params = {
          Bucket: config.params.Bucket,
          Key: file.path,
          Expires: 60, // URL expiration time in seconds
        };

        const signedUrl = await s3.getSignedUrlPromise("getObject", params);
        return { url: signedUrl };
      },
    };
  },
};
```

</TabItem>

</Tabs>

 This is the content for the doc docusaurus/docs/cms/configurations/middlewares.md 

 ---
title: Middlewares configuration
sidebar_label: Middlewares
displayed_sidebar: cmsSidebar
description: Strapi offers a single entry point file for its middlewares configurations.
tags:
- base configuration
- body middleware
- configuration
- global middlewares
- internal middleware
- middlewares
- middlewares customization
- middleware type
- route middlewares
---

import MiddlewareTypes from '/docs/snippets/middleware-types.md'

# Middlewares configuration

<MiddlewareTypes />

The `./config/middlewares.js` file is used to define all the global middlewares that should be applied by the Strapi server.

Only the middlewares present in `./config/middlewares.js` are applied. Loading middlewares happens in a specific [loading order](#loading-order), with some [naming conventions](#naming-conventions) and an [optional configuration](#optional-configuration) for each middleware.

Strapi pre-populates the `./config/middlewares.js` file with built-in, internal middlewares that all have their own [configuration options](#internal-middlewares-configuration-reference).

## Loading order

The `./config/middlewares.js` file exports an array, where order matters and controls the execution order of the middleware stack:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // The array is pre-populated with internal, built-in middlewares, prefixed by `strapi::`
  'strapi::logger',
  'strapi::errors',
  'strapi::security',
  'strapi::cors',

  // custom middleware that does not require any configuration
  'global::my-custom-node-module', 

  // custom name to find a package or a path
  {
    name: 'my-custom-node-module',
    config: {
      foo: 'bar',
    },
  },

  // custom resolve to find a package or a path
  {
    resolve: '../some-dir/custom-middleware',
    config: {
      foo: 'bar',
    },
  },

  // custom configuration for internal middleware
  {
    name: 'strapi::poweredBy',
    config: {
      poweredBy: 'Some awesome company',
    },
  },

  // remaining internal & built-in middlewares
  'strapi::query',
  'strapi::body',
  'strapi::session',
  'strapi::favicon',
  'strapi::public',
];
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // The array is pre-populated with internal, built-in middlewares, prefixed by `strapi::`
  'strapi::logger',
  'strapi::cors',
  'strapi::body',
  'strapi::errors',
  // ...
  'my-custom-node-module', // custom middleware that does not require any configuration
  {
    // custom name to find a package or a path
    name: 'my-custom-node-module',
    config: {
      foo: 'bar',
    },
  },
  {
    // custom resolve to find a package or a path
    resolve: '../some-dir/custom-middleware',
    config: {
      foo: 'bar',
    },
  },
];
```

</TabItem>

</Tabs>

:::tip
If you aren't sure where to place a middleware in the stack, add it to the end of the list.
:::

## Naming conventions

Global middlewares can be classified into different types depending on their origin, which defines the following naming conventions:

| Middleware type   | Origin                                                                                                                                                                                                                                  | Naming convention                                                                                                    |
|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|
| Internal          | Built-in middlewares (i.e. included with Strapi), automatically loaded                                                                                                                                                                  | `strapi::middleware-name`                                                                                            |
| Application-level | Loaded from the `./src/middlewares` folder                                                                                                                                                                                              | `global::middleware-name`                                                                                            |
| API-level         | Loaded from the `./src/api/[api-name]/middlewares` folder                                                                                                                                                                               | `api::api-name.middleware-name`                                                                                      |
| Plugin            | Exported from `strapi-server.js` in the [`middlewares` property of the plugin interface](/cms/plugins-development/server-api#middlewares)                                                                                               | `plugin::plugin-name.middleware-name`                                                                                |
| External          | Can be:<ul><li>either node modules installed with <ExternalLink to="https://www.npmjs.com/search?q=strapi-middleware" text="npm"/></li><li>or local middlewares (i.e. custom middlewares created locally and configured in `./config/middlewares.js`.)</li></ul> | -<br/><br/>As they are directly configured and resolved from the configuration file, they have no naming convention. |

## Optional configuration

Middlewares can have an optional configuration with the following parameters:

| Parameter | Description                                                       | Type     |
|-----------|-------------------------------------------------------------------|----------|
| `config`  | Used to define or override the middleware configuration           | `Object` |
| `resolve` | Path to the middleware's folder (useful for external middlewares) | `String` |

## Internal middlewares configuration reference

Strapi's core includes the following internal middlewares, mostly used for performances, security and error handling:

| Middleware                                                         | Added by Default | Required |
|--------------------------------------------------------------------|------------------|----------|
| [body](#body)                                                      | Yes              | Yes      |
| [compression](#compression)                                        | No               | No       |
| [cors](#cors)                                                      | Yes              | Yes      |
| [errors](#errors)                                                  | Yes              | Yes      |
| [favicon](#favicon)                                                | Yes              | Yes      |
| [ip](#ip)                                                          | No               | No       |
| [logger](#logger)                                                  | Yes              | No       |
| [poweredBy](#poweredby)                                            | Yes              | No       |
| [query](#query)                                                    | Yes              | Yes      |
| [response-time](#response-time)                                    | No               | No       |
| [responses](/cms/backend-customization/requests-responses.md) | Yes              | Yes      |
| [public](#public)                                                  | Yes              | Yes      |
| [security](#security)                                              | Yes              | Yes      |
| [session](#session)                                                | Yes              | No       |

### `body`

The `body` middleware is based on <ExternalLink to="https://github.com/koajs/koa-body" text="koa-body"/>. Tt uses the <ExternalLink to="https://github.com/felixge/node-formidable" text="`node-formidable`"/> library to process files. `body` accepts the following options:

| Option       | Description                                                                                                                             | Type                  | Default     |
|--------------|-----------------------------------------------------------------------------------------------------------------------------------------|-----------------------|-------------|
| `multipart`  | Parse multipart bodies                                                                                                                  | `Boolean`             | `true`      |
| `patchKoa`   | Patch request body to Koa's `ctx.request`                                                                                               | `Boolean`             | `true`      |
| `jsonLimit`  | The byte (if integer) limit of the JSON body                                                                                            | `String` or `Integer` | `1mb`       |
| `formLimit`  | The byte (if integer) limit of the form body                                                                                            | `String` or `Integer` | `56kb`      |
| `textLimit`  | The byte (if integer) limit of the text body                                                                                            | `String` or `Integer` | `56kb`      |
| `encoding`   | Sets encoding for incoming form fields                                                                                                  | `String`              | `utf-8`     |
| `formidable` | Options to pass to the `formidable` multipart parser (see <ExternalLink to="https://github.com/felixge/node-formidable" text="node-formidable documentation"/>). | `Object`              | `undefined` |

For a full list of available options for `koa-body`, check the <ExternalLink to="https://github.com/koajs/koa-body#options" text="koa-body documentation"/>.

<details>
<summary> Example: Custom configuration for the body middleware </summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // ...
  {
    name: 'strapi::body',
    config: {
      jsonLimit: '3mb',
      formLimit: '10mb',
      textLimit: '256kb',
      encoding: 'gbk',
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::body',
    config: {
      jsonLimit: '3mb',
      formLimit: '10mb',
      textLimit: '256kb',
      encoding: 'gbk',
    },
  },
  // ...
]
```

</TabItem>

</Tabs>

</details>

### `compression`

The `compression` middleware is based on <ExternalLink to="https://github.com/koajs/compress" text="koa-compress"/>. It accepts the following options:

| Option            | Description                                                                | Type                  | Default    |
|-------------------|----------------------------------------------------------------------------|-----------------------|------------|
| `threshold`       | Minimum response size in bytes to compress                                 | `String` or `Integer` | `1kb`      |
| `br`              | Toggle Brotli compression                                                  | `Boolean`             | `true`     |
| `gzip`            | Toggle gzip compression                                                    | `Boolean`             | `false`    |
| `deflate`         | Toggle deflate compression                                                 | `Boolean`             | `false`    |
| `defaultEncoding` | Specifies what encoders to use for requests without Accept-Encoding header | `String`              | `identity` |

<details> 
<summary>Example: Custom configuration for the compression middleware</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // ...
  {
    name: 'strapi::compression',
    config: {
      br: false
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::compression',
    config: {
      br: false
    },
  },
  // ...
]
```

</TabItem>

</Tabs>

</details>

### `cors`

This security middleware is about cross-origin resource sharing (CORS) and is based on <ExternalLink to="https://github.com/koajs/cors" text="@koa/cors"/>. It accepts the following options:

| Option              | Type                                                      | Description          | Default value                                              |
|---------------------|-----------------------------------------------------------|----------------------|------------------------------------------------------------|
| `origin`            | Configure the `Access-Control-Allow-Origin` header        | `String` or `Array` or `Function`  | `'*'`                                                      |
| `maxAge`            | Configure the `Access-Control-Max-Age` header, in seconds | `String` or `Number` | `31536000`                                                 |
| `credentials`       | Configure the `Access-Control-Allow-Credentials` header   | `Boolean`            | `true`                                                     |
| `methods`           | Configure the `Access-Control-Allow-Methods` header       | `Array` or `String`  | `['GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'OPTIONS']`      |
| `headers`           | Configure the `Access-Control-Allow-Headers` header       | `Array` or `String`  | Request headers passed in `Access-Control-Request-Headers` |
| `keepHeaderOnError` | Add set headers to `err.header` if an error is thrown     | `Boolean`            | `false`                                                    |


<details>
<summary> Example: Custom configuration for the cors middleware</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // ...
  {
    name: 'strapi::cors',
    config: {
      origin: ['https://example.com', 'https://subdomain.example.com', 'https://someotherwebsite.org'],
      methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
      headers: ['Content-Type', 'Authorization', 'Origin', 'Accept'],
      keepHeaderOnError: true,
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::cors',
    config: {
      origin: ['https://example.com', 'https://subdomain.example.com', 'https://someotherwebsite.org'],
      methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
      headers: ['Content-Type', 'Authorization', 'Origin', 'Accept'],
      keepHeaderOnError: true,
    },
  },
  // ...
]
```

</TabItem>

</Tabs>



</details>

<details>
<summary> Example: Custom configuration for the cors middleware within a function as parameter</summary>

`origin` can take a Function as parameter following this signature 

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::cors',
    config: {
      origin: (ctx): string | string[] => {
        const origin = ctx.request.header.origin;
        if (origin === 'http://localhost:3000') {
          return origin; // The returns will be part of the Access-Control-Allow-Origin header
        }
        
        return ''; // Fail cors check
      }
    },
  },
  // ...
]
```

</details>

### `errors`

The errors middleware handles [errors](/cms/error-handling.md) thrown by the code. Based on the type of error it sets the appropriate HTTP status to the response. By default, any error not supposed to be exposed to the end user will result in a 500 HTTP response.

The middleware doesn't have any configuration options.

### `favicon`

The `favicon` middleware serves the favicon and is based on <ExternalLink to="https://github.com/koajs/favicon" text="koa-favicon"/>. It accepts the following options:

| Option   | Description                                      | Type      | Default value   |
|----------|--------------------------------------------------|-----------|-----------------|
| `path`   | Path to the favicon file                         | `String`  | `'favicon.ico'` |
| `maxAge` | Cache-control max-age directive, in milliseconds | `Integer` | `86400000`      |

<details>
<summary> Example: Custom configuration for the favicon middleware</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // ...
  {
    name: 'strapi::favicon',
    config: {
      path: './public/uploads/custom-fav-abc123.ico'
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::favicon',
    config: {
      path: './public/uploads/custom-fav-abc123.ico'
    },
  },
  // ...
]
```

</TabItem>

</Tabs>

</details>

#### `ip`

The `ip` middleware is an IP filter middleware based on <ExternalLink to="https://github.com/nswbmw/koa-ip" text="koa-ip"/>. It accepts the following options:

| Option      | Description     | Type    | Default value |
|-------------|-----------------|---------|---------------|
| `whitelist` | Whitelisted IPs | `Array` | `[]`          |
| `blacklist` | Blacklisted IPs | `Array` | `[]`          |

:::tip
The `whitelist` and `blacklist` options support wildcards (e.g. `whitelist: ['192.168.0.*', '127.0.0.*']`) and spreads (e.g. `whitelist: ['192.168.*.[3-10]']`).
:::

 <details>
 <summary> Example: Custom configuration for the ip middleware</summary>

 <Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // ...
  {
    name: 'strapi::ip',
    config: {
      whitelist: ['192.168.0.*', '192.168.1.*', '123.123.123.123'],
      blacklist: ['1.116.*.*', '103.54.*.*'],
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::ip',
    config: {
      whitelist: ['192.168.0.*', '192.168.1.*', '123.123.123.123'],
      blacklist: ['1.116.*.*', '103.54.*.*'],
    },
  },
  // ...
]
```

</TabItem>

</Tabs>

</details>

### `logger`

The `logger` middleware is used to log requests.

To define a custom configuration for the `logger` middleware, create a dedicated configuration file (`./config/logger.js`). It should export an object that must be a complete or partial <ExternalLink to="https://github.com/winstonjs/winston" text="winstonjs"/> logger configuration. The object will be merged with Strapi's default logger configuration on server start.

<details>
<summary> Example: Custom configuration for the logger middleware</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/logger.js"

'use strict';

const {
  winston,
  formats: { prettyPrint, levelFilter },
} = require('@strapi/logger');

module.exports = {
  transports: [
    new winston.transports.Console({
      level: 'http',
      format: winston.format.combine(
        levelFilter('http'),
        prettyPrint({ timestamps: 'YYYY-MM-DD hh:mm:ss.SSS' })
      ),
    }),
  ],
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/logger.ts"

'use strict';

const {
  winston,
  formats: { prettyPrint, levelFilter },
} = require('@strapi/logger');

export default {
  transports: [
    new winston.transports.Console({
      level: 'http',
      format: winston.format.combine(
        levelFilter('http'),
        prettyPrint({ timestamps: 'YYYY-MM-DD hh:mm:ss.SSS' })
      ),
    }),
  ],
};
```

</TabItem>

</Tabs>

</details>

### `poweredBy`

The `poweredBy` middleware adds a `X-Powered-By` parameter to the response header. It accepts the following options:

| Option      | Description                        | Type     | Default value          |
|-------------|------------------------------------|----------|------------------------|
| `poweredBy` | Value of the `X-Powered-By` header | `String` | `'Strapi <strapi.io>'` |

<details>
<summary> details Example: Custom configuration for the poweredBy middleware</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // ...
  {
    name: 'strapi::poweredBy',
    config: {
      poweredBy: 'Some Awesome Company <example.com>'
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::poweredBy',
    config: {
      poweredBy: 'Some Awesome Company <example.com>'
    },
  },
  // ...
]
```

</TabItem>

</Tabs>

</details>

### `query`

The `query` middleware is a query parser based on <ExternalLink to="https://github.com/ljharb/qs" text="qs"/>. It accepts the following options:

| Option               | Description                                                                                                                      | Type      | Default value |
|----------------------|----------------------------------------------------------------------------------------------------------------------------------|-----------|---------------|
| `strictNullHandling` | Distinguish between null values and empty strings (see <ExternalLink to="https://github.com/ljharb/qs#handling-of-null-values" text="qs documentation"/>) | `Boolean` | `true`        |
| `arrayLimit`         | Maximum index limit when parsing arrays (see <ExternalLink to="https://github.com/ljharb/qs#parsing-arrays" text="qs documentation"/>)                    | `Number`  | `100`         |
| `depth`              | Maximum depth of nested objects when parsing objects (see <ExternalLink to="https://github.com/ljharb/qs#parsing-objects" text="qs documentation"/>)      | `Number`  | `20`          |

<details>
<summary> Example: Custom configuration for the query middleware </summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // ...
  {
    name: 'strapi::query',
    config: {
      arrayLimit: 50,
      depth: 10,
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::query',
    config: {
      arrayLimit: 50,
      depth: 10,
    },
  },
  // ...
]
```

</TabItem>

</Tabs>

</details>

### `response-time`

The `response-time` middleware enables the `X-Response-Time` (in milliseconds) for the response header.

The middleware doesn't have any configuration options.

### `public`

The `public` middleware is a static file serving middleware, based on <ExternalLink to="https://github.com/koajs/static" text="koa-static"/>. It accepts the following options:

| Option         | Description                                         | Type      | Default value |
|----------------|-----------------------------------------------------|-----------|---------------|
| `maxAge`       | Cache-control max-age directive, in milliseconds    | `Integer` | `60000`       |

:::tip
You can customize the path of the public folder by editing the [server configuration file](/cms/configurations/server.md#available-options).
:::

<details>
<summary>Example: Custom configuration for the public middleware</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // ...
  {
    name: 'strapi::public',
    config: {
      defer: true,
      index: env('INDEX_PATH', 'index-dev.html')
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::public',
    config: {
      defer: true,
      index: env('INDEX_PATH', 'index-dev.html')
    },
  },
  // ...
]
```

</TabItem>

</Tabs>

</details>

### `security`

The security middleware is based on <ExternalLink to="https://helmetjs.github.io/" text="koa-helmet"/>. It accepts the following options:

| Option                      | Description                                                                                   | Type                  | Default value |
|-----------------------------|-----------------------------------------------------------------------------------------------|-----------------------|---------------|
| `crossOriginEmbedderPolicy` | Set the `Cross-Origin-Embedder-Policy` header to `require-corp`                               | `Boolean`             | `false`       |
| `crossOriginOpenerPolicy`   | Set the `Cross-Origin-Opener-Policy` header                                                   | `Boolean`             | `false`       |
| `crossOriginResourcePolicy` | Set the `Cross-Origin-Resource-Policy` header                                                 | `Boolean`             | `false`       |
| `originAgentCluster`        | Set the `Origin-Agent-Cluster` header                                                         | `Boolean`             | `false`       |
| `contentSecurityPolicy`     | Set the `Content-Security-Policy` header                                                      | `Object`              | `-`           |
| `xssFilter`                 | Disable browsers' cross-site scripting filter by setting the `X-XSS-Protection` header to `0` | `Boolean`             | `false`       |
| `hsts`                      | Set options for the HTTP Strict Transport Security (HSTS) policy.                             | `Object`              | -             |
| `hsts.maxAge`               | Number of seconds HSTS is in effect                                                           | `Integer`             | `31536000`    |
| `hsts.includeSubDomains`    | Applies HSTS to all subdomains of the host                                                    | `Boolean`             | `true`        |
| `frameguard`                | Set `X-Frame-Options` header to help mitigate clickjacking attacks, set to `false` to disable | `Boolean` or `Object` | -             |
| `frameguard.action`         | Value must be either `deny` or `sameorigin`                                                   | `String`              | `sameorigin`  |

:::tip
When using any 3rd party upload provider, generally it's required to set a custom configuration here. Please see the provider documentation for which configuration options are required.
:::

:::note
The default directives include a `market-assets.strapi.io` value. This value is set for the [in-app market](/cms/plugins/installing-plugins-via-marketplace) and is safe to keep.
:::

<details>
<summary> Example: Custom configuration for the security middleware for using the AWS-S3 provider</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
]
```

</TabItem>

</Tabs>


</details>

### `session`

The `session` middleware allows the use of cookie-based sessions, based on <ExternalLink to="https://github.com/koajs/session" text="koa-session"/>. It accepts the following options:

| Option       | Description                                                                                                            | Type                     | Default value                           |
|--------------|------------------------------------------------------------------------------------------------------------------------|--------------------------|-----------------------------------------|
| `key`        | Cookie key                                                                                                             | `String`                 | `'koa.sess'`                            |
| `maxAge`     | Maximum lifetime of the cookies, in milliseconds. Using `'session'` will expire the cookie when the session is closed. | `Integer` or `'session'` | `86400000`                              |
| `autoCommit` | Automatically commit headers                                                                                           | `Boolean`                | `true`                                  |
| `overwrite`  | Can overwrite or not                                                                                                   | `Boolean`                | `true`                                  |
| `httpOnly`   | Is httpOnly or not. Using `httpOnly` helps mitigate cross-site scripting (XSS) attacks.                                | `Boolean`                | `true`                                  |
| `signed`     | Sign the cookies                                                                                                       | `Boolean`                | `true`                                  |
| `rolling`    | Force a session identifier cookie to be set on every response.                                                         | `Boolean`                | `false`                                 |
| `renew`      | Renew the session when the session is nearly expired, so the user keeps being logged in.                               | `Boolean`                | `false`                                 |
| `secure`     | Force the use of HTTPS                                                                                                 | `Boolean`                | `true` in production, `false` otherwise |
| `sameSite`   | Restrict the cookies to a first-party or same-site context                                                             | `String`                 | `null`                                  |

<details>
<summary> Example: Custom configuration for the session middleware </summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/middlewares.js"

module.exports = [
  // ...
  {
    name: 'strapi::session',
    config: {
      rolling: true,
      renew: true
    },
  },
  // ...
]
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/middlewares.ts"

export default [
  // ...
  {
    name: 'strapi::session',
    config: {
      rolling: true,
      renew: true
    },
  },
  // ...
]
```

</TabItem>

</Tabs>



</details>


 This is the content for the doc docusaurus/docs/cms/configurations/plugins.md 

 ---
title: Plugins configuration
sidebar_label: Plugins
displayed_sidebar: cmsSidebar
description: Strapi plugins have a single entry point file to define their configurations.
tags:
- additional configuration
- configuration
- GraphQL
- GraphQL configuration
- plugins
- Upload configuration
- Upload plugin

---

# Plugins configuration

Plugin configurations are stored in `/config/plugins.js|ts` (see [project structure](/cms/project-structure)). Each plugin can be configured with the following available parameters:

| Parameter                  | Description                                                                                                                                                            | Type    |
| -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
| `enabled`                  | Enable (`true`) or disable (`false`) an installed plugin                                                                                                               | Boolean |
| `config`<br/><br/>_Optional_ | Used to override default plugin configuration ([defined in strapi-server.js](/cms/plugins-development/server-api#configuration)) | Object  |
| `resolve`<br/> _Optional, only required for local plugins_             | Path to the plugin's folder                                                                                                                                            | String  |

:::note
Some features of Strapi are provided by plugins and the following plugins can also have specific configuration options: the [GraphQL](/cms/plugins/graphql#code-based-configuration) plugin and the [Upload](/cms/features/media-library#available-options) package which powers the Media Library.
:::

**Basic example custom configuration for plugins:**

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/plugins.js"

module.exports = ({ env }) => ({
  // enable a plugin that doesn't require any configuration
  i18n: true,

  // enable a custom plugin
  myplugin: {
    // my-plugin is going to be the internal name used for this plugin
    enabled: true,
    resolve: './src/plugins/my-local-plugin',
    config: {
      // user plugin config goes here
    },
  },

  // disable a plugin
  'my-other-plugin': {
    enabled: false, // plugin installed but disabled
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/plugins.ts"

export default ({ env }) => ({
  // enable a plugin that doesn't require any configuration
  i18n: true,

  // enable a custom plugin
  myplugin: {
    // my-plugin is going to be the internal name used for this plugin
    enabled: true,
    resolve: './src/plugins/my-local-plugin',
    config: {
      // user plugin config goes here
    },
  },

  // disable a plugin
  'my-other-plugin': {
    enabled: false, // plugin installed but disabled
  },
});
```

</TabItem>

</Tabs>

:::tip
If no specific configuration is required, a plugin can also be declared with the shorthand syntax `'plugin-name': true`.
:::


 This is the content for the doc docusaurus/docs/cms/configurations/server.md 

 ---
title: Server configuration
sidebar_label: Server
description: Strapi offers a single entry point file for its server configuration.
displayed_sidebar: cmsSidebar
tags:
  - app keys
  - base configuration
  - configuration
  - cron job
  - host
  - port
---

# Server configuration

The `/config/server.js` file is used to define the server configuration for a Strapi application.

:::caution
Changes to the `server.js` file require rebuilding the admin panel. After saving the modified file run either `yarn build` or `npm run build` in the terminal to implement the changes.
:::

## Available options

The `./config/server.js` file can include the following parameters:

<!-- TODO: add admin jwt config option -->
<!-- TODO: sort options alphabetically in the table below  -->

| Parameter                           | Description                                                                                                                                                                                                                                                                                                                                                                 | Type                                                                                              | Default             |
| ----------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- | ------------------- |
| `host`<br/><br/>‚ùóÔ∏è _Mandatory_     | Host name                                                                                                                                                                                                                                                                                                                                                                   | string                                                                                            | `localhost`         |
| `port`<br/><br/>‚ùóÔ∏è _Mandatory_     | Port on which the server should be running.                                                                                                                                                                                                                                                                                                                                 | integer                                                                                           | `1337`              |
| `app.keys`<br/><br/>‚ùóÔ∏è _Mandatory_ | Declare session keys (based on <ExternalLink to="https://github.com/koajs/session/blob/master/Readme.md" text="Koa session"/>), which is used by the `session` middleware for the Users & Permissions plugin and the Documentation plugin.                                                                                                                                                           | array of strings                                                                                  | `undefined`         |
| `socket`                            | Listens on a socket. Host and port are cosmetic when this option is provided and likewise use `url` to generate proper urls when using this option. This option is useful for running a server without exposing a port and using proxy servers on the same machine (e.g <ExternalLink to="https://github.com/heroku/heroku-buildpack-nginx#requirements-proxy-mode" text="Heroku nginx buildpack"/>) | string \| integer                                                                                 | `/tmp/nginx.socket` |
| `emitErrors`                        | Enable errors to be emitted to `koa` when they happen in order to attach custom logic or use error reporting services.                                                                                                                                                                                                                                                      | boolean                                                                                           | `false`             |
| `url`                               | Public url of the server. Required for many different features (ex: reset password, third login providers etc.). Also enables proxy support such as Apache or Nginx, example: `https://mywebsite.com/api`. The url can be relative, if so, it is used with `http://${host}:${port}` as the base url. An absolute url is however recommended.                                | string                                                                                            | `''`                |
| `proxy`                             | Proxy configuration                                                                                                                                                                                                                                                                                                                                                         | object                                                                                            |                     |
| `proxy.global`                      | Defines the proxy agent for all external requests. To be used if the Strapi project is behind a forward proxy.                                                                                                                                                                                                                                                              | string                                                                                            |                     |
| `proxy.fetch`                       | The proxy for all requests made within `strapi.fetch` (used for licenses check, telemetry and webhooks)                                                                                                                                                                                                                                                                     | string \| <ExternalLink to="https://github.com/nodejs/undici/blob/main/types/proxy-agent.d.ts" text="ProxyAgent.Options"/> |                     |
| `proxy.http`                        | The proxy for all (non-fetch) http requests                                                                                                                                                                                                                                                                                                                                 | string                                                                                            |                     |
| `proxy.https`                       | The proxy for all (non-fetch) https requests                                                                                                                                                                                                                                                                                                                                | string                                                                                            |                     |
| `proxy.koa`                         | Set the koa variable `app.proxy`. When `true`, proxy header fields will be trusted.                                                                                                                                                                                                                                                                                         | boolean                                                                                           | `false`             |
| `cron`                              | Cron configuration (powered by <ExternalLink to="https://github.com/node-schedule/node-schedule" text="`node-schedule`"/>)                                                                                                                                                                                                                                                                           | object                                                                                            |                     |
| `cron.enabled`                      | Enable or disable [CRON jobs](/cms/configurations/cron.md) to schedule jobs at specific dates.                                                                                                                                                                                                                                                                         | boolean                                                                                           | `false`             |
| `cron.tasks`                        | Declare [CRON jobs](/cms/configurations/cron.md) to be run at specific dates.                                                                                                                                                                                                                                                                                          | object                                                                                            |                     |
| `dirs`                              | Path configuration of different directories Strapi uses.                                                                                                                                                                                                                                                                                                                    | object                                                                                            |                     |
| `dirs.public`                       | Customize the path of the public folder.                                                                                                                                                                                                                                                                                                                                    | string                                                                                            | `./public`          |
| `http`                              | Configuration of the http server used by Strapi                                                                                                                                                                                                                                                                                                                             | object                                                                                            |                     |
| `http.serverOptions`                | Options passed to http `createServer`                                                                                                                                                                                                                                                                                                                                       | <ExternalLink to="https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener" text="http.serverOptions"/>    | {}                  |
| `transfer.remote.enabled`           | Toggle the ability to use the [transfer feature](/cms/data-management/transfer)                                                                                                                                                                                                                                                                | boolean                                                                                           | `true`              |
| `logger.startup.enabled`            | Toggle the the startup message in the terminal                                                                                                                                                                                                                                                                                                                              | boolean                                                                                           | `true`              |
| `logger.updates.enabled`            | Toggle the notification message about updating strapi in the terminal                                                                                                                                                                                                                                                                                                       | boolean                                                                                           | `true`              |

## Configurations

The `./config/server.js` minimal configuration requires the `host` and `port` parameters for development. Additional parameters can be included for a full configuration.

:::note
[Environmental configurations](/cms/configurations/environment.md) (i.e. using the `env()` helper) do not need to contain all the values so long as they exist in the default `./config/server.js`.
:::

The default configuration created with any new project should at least include the following:
<Tabs>
<TabItem value="minimal configuration" label="Minimal configuration">

<Tabs groupId="js-ts">
<TabItem value="javascript" label="JavaScript">

```js title="./config/server.js"
module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  app: {
    keys: env.array('APP_KEYS'),
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/server.ts"
export default ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  app: {
    keys: env.array('APP_KEYS'),
  },
});
```

</TabItem>
</Tabs>

</TabItem>

 <TabItem value="Full configuration" label="Full configuration">

The following is an example of a full configuration file. Not all of these keys are required (see [available options](#available-options)).

<Tabs groupId="js-ts">
<TabItem value="javascript" label="JavaScript">

```js title="./config/server.js"
module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  app: {
    keys: env.array('APP_KEYS'),
  },
  socket: '/tmp/nginx.socket', // only use if absolutely required
  emitErrors: false,
  url: env('PUBLIC_URL', 'https://api.example.com'),
  proxy: env.bool('IS_PROXIED', true),
  cron: {
    enabled: env.bool('CRON_ENABLED', false),
  },
  transfer: {
    remote: {
      enabled: false,
    },
  },
  logger: {
    updates: {
      enabled: false,
    },
    startup: {
      enabled: false,
    },
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```js title="./config/server.ts"
export default ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  app: {
    keys: env.array('APP_KEYS'),
  },
  socket: '/tmp/nginx.socket', // only use if absolutely required
  emitErrors: false,
  url: env('PUBLIC_URL', 'https://api.example.com'),
  proxy: env.bool('IS_PROXIED', true),
  cron: {
    enabled: env.bool('CRON_ENABLED', false),
  },
  transfer: {
    remote: {
      enabled: false,
    },
  },
  logger: {
    updates: {
      enabled: false,
    },
    startup: {
      enabled: false,
    },
  },
});
```

</TabItem>
</Tabs>

</TabItem>
</Tabs>


 This is the content for the doc docusaurus/docs/cms/configurations/sso-providers/discord.md 

 ---
title: Discord SSO provider
description: Learn how to configure the SSO provider to sign in and sign up into your Strapi application through Discord.
displayed_sidebar: cmsSidebar
tags: 
- SSO
- providers
- configuration
---

# Discord provider SSO configuration

The present page explains how to setup the Discord provider for the [Single Sign-On (SSO) feature](/cms/features/sso).

:::prerequisites
You have read the [How to configure SSO guide](/cms/configurations/guides/configure-sso).
:::

## Installation

Install <ExternalLink to="https://github.com/nicholastay/passport-discord#readme" text="passport-discord"/>:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```sh
yarn add passport-discord
```

</TabItem>

<TabItem value="npm" label="npm">

```sh
npm install --save passport-discord
```

</TabItem>

</Tabs>

## Configuration example

The Discord SSO provider is configured in the `auth.providers` array of [the `config/admin` file](/cms/configurations/admin-panel):

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```jsx title="/config/admin.js"

const DiscordStrategy = require("passport-discord");

module.exports = ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "discord",
        displayName: "Discord",
        icon: "https://cdn0.iconfinder.com/data/icons/free-social-media-set/24/discord-512.png",
        createStrategy: (strapi) =>
          new DiscordStrategy(
            {
              clientID: env("DISCORD_CLIENT_ID"),
              clientSecret: env("DISCORD_SECRET"),
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL(
                  "discord"
                ),
              scope: ["identify", "email"],
            },
            (accessToken, refreshToken, profile, done) => {
              done(null, {
                email: profile.email,
                username: `${profile.username}#${profile.discriminator}`,
              });
            }
          ),
      },
    ],
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

import { Strategy as DiscordStrategy } from "passport-discord";


export default ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "discord",
        displayName: "Discord",
        icon: "https://cdn0.iconfinder.com/data/icons/free-social-media-set/24/discord-512.png",
        createStrategy: (strapi) =>
          new DiscordStrategy(
            {
              clientID: env("DISCORD_CLIENT_ID"),
              clientSecret: env("DISCORD_SECRET"),
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL(
                  "discord"
                ),
              scope: ["identify", "email"],
            },
            (accessToken, refreshToken, profile, done) => {
              done(null, {
                email: profile.email,
                username: `${profile.username}#${profile.discriminator}`,
              });
            }
          ),
      },
    ],
  },
});
```

</TabItem>

</Tabs>




 This is the content for the doc docusaurus/docs/cms/configurations/sso-providers/github.md 

 ---
title: GitHub SSO provider
description: Learn how to configure the SSO provider to sign in and sign up into your Strapi application through GitHub.
displayed_sidebar: cmsSidebar
tags: 
- SSO
- providers
- configuration
---

# GitHub provider SSO configuration

The present page explains how to setup the GitHub provider for the [Single Sign-On (SSO) feature](/cms/features/sso).

:::prerequisites
You have read the [How to configure SSO guide](/cms/configurations/guides/configure-sso).
:::

## Installation

Install <ExternalLink to="https://github.com/cfsghost/passport-github" text="passport-github"/>:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```sh
yarn add passport-github2
```

</TabItem>

<TabItem value="npm" label="npm">

```sh
npm install --save passport-github2
```

</TabItem>

</Tabs>

## Configuration example

The GitHub SSO provider is configured in the `auth.providers` array of [the `config/admin` file](/cms/configurations/admin-panel):

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"

const GithubStrategy = require("passport-github2");

module.exports = ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "github",
        displayName: "Github",
        icon: "https://cdn1.iconfinder.com/data/icons/logotypes/32/github-512.png",
        createStrategy: (strapi) =>
          new GithubStrategy(
            {
              clientID: env("GITHUB_CLIENT_ID"),
              clientSecret: env("GITHUB_CLIENT_SECRET"),
              scope: ["user:email"],
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL("github"),
            },
            (accessToken, refreshToken, profile, done) => {
              done(null, {
                email: profile.emails[0].value,
                username: profile.username,
              });
            }
          ),
      },
    ],
  },
});

```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

import { Strategy as GithubStrategy } from "passport-github2";

export default ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "github",
        displayName: "Github",
        icon: "https://cdn1.iconfinder.com/data/icons/logotypes/32/github-512.png",
        createStrategy: (strapi) =>
          new GithubStrategy(
            {
              clientID: env("GITHUB_CLIENT_ID"),
              clientSecret: env("GITHUB_CLIENT_SECRET"),
              scope: ["user:email"],
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL("github"),
            },
            (accessToken, refreshToken, profile, done) => {
              done(null, {
                email: profile.emails[0].value,
                username: profile.username,
              });
            }
          ),
      },
    ],
  },
});

```

</TabItem>

</Tabs>



 This is the content for the doc docusaurus/docs/cms/configurations/sso-providers/google.md 

 ---
title: Google SSO provider
description: Learn how to configure the SSO provider to sign in and sign up into your Strapi application through Google.
displayed_sidebar: cmsSidebar
tags: 
- SSO
- providers
- configuration
---

# Google provider SSO configuration

The present page explains how to setup the Google provider for the [Single Sign-On (SSO) feature](/cms/features/sso).

:::prerequisites
You have read the [How to configure SSO guide](/cms/configurations/guides/configure-sso).
:::

## Installation

Install <ExternalLink to="https://github.com/mstade/passport-google-oauth2" text="passport-google-oauth2"/>:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```sh
yarn add passport-google-oauth2
```

</TabItem>

<TabItem value="npm" label="npm">

```sh
npm install --save passport-google-oauth2
```

</TabItem>

</Tabs>

## Configuration example

The Google SSO provider is configured in the `auth.providers` array of [the `config/admin` file](/cms/configurations/admin-panel):

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"

const GoogleStrategy = require("passport-google-oauth2");

module.exports = ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "google",
        displayName: "Google",
        icon: "https://cdn2.iconfinder.com/data/icons/social-icons-33/128/Google-512.png",
        createStrategy: (strapi) =>
          new GoogleStrategy(
            {
              clientID: env("GOOGLE_CLIENT_ID"),
              clientSecret: env("GOOGLE_CLIENT_SECRET"),
              scope: [
                "https://www.googleapis.com/auth/userinfo.email",
                "https://www.googleapis.com/auth/userinfo.profile",
              ],
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL("google"),
            },
            (request, accessToken, refreshToken, profile, done) => {
              done(null, {
                email: profile.email,
                firstname: profile.given_name,
                lastname: profile.family_name,
              });
            }
          ),
      },
    ],
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

import {Strategy as GoogleStrategy } from "passport-google-oauth2";

export default ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "google",
        displayName: "Google",
        icon: "https://cdn2.iconfinder.com/data/icons/social-icons-33/128/Google-512.png",
        createStrategy: (strapi) =>
          new GoogleStrategy(
            {
              clientID: env("GOOGLE_CLIENT_ID"),
              clientSecret: env("GOOGLE_CLIENT_SECRET"),
              scope: [
                "https://www.googleapis.com/auth/userinfo.email",
                "https://www.googleapis.com/auth/userinfo.profile",
              ],
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL("google"),
            },
            (request, accessToken, refreshToken, profile, done) => {
              done(null, {
                email: profile.email,
                firstname: profile.given_name,
                lastname: profile.family_name,
              });
            }
          ),
      },
    ],
  },
});
```

</TabItem>

</Tabs>



 This is the content for the doc docusaurus/docs/cms/configurations/sso-providers/keycloak.md 

 ---
title: Keycloak SSO provider
description: Learn how to configure the SSO provider to sign in and sign up into your Strapi application through Keycloak.
displayed_sidebar: cmsSidebar
tags: 
- SSO
- providers
- configuration
---

# Keycloak (OpenID Connect) provider SSO configuration

The present page explains how to setup the Keycloak provider for the [Single Sign-On (SSO) feature](/cms/features/sso).

:::prerequisites
You have read the [How to configure SSO guide](/cms/configurations/guides/configure-sso).
:::

## Installation

Install <ExternalLink to="https://www.npmjs.com/package/passport-keycloak-oauth2-oidc" text="passport-keycloak-oauth2-oidc"/>:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```sh
yarn add passport-keycloak-oauth2-oidc
```

</TabItem>

<TabItem value="npm" label="npm">

```sh
npm install --save passport-keycloak-oauth2-oidc
```

</TabItem>

</Tabs>

## Configuration example

The Keycloak SSO provider is configured in the `auth.providers` array of [the `config/admin` file](/cms/configurations/admin-panel):

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"

const KeyCloakStrategy = require("passport-keycloak-oauth2-oidc");

module.exports = ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "keycloak",
        displayName: "Keycloak",
        icon: "https://raw.githubusercontent.com/keycloak/keycloak-admin-ui/main/themes/keycloak/logo.svg",
        createStrategy: (strapi) =>
          new KeyCloakStrategy(
            {
              clientID: env("KEYCLOAK_CLIENT_ID", ""),
              realm: env("KEYCLOAK_REALM", ""),
              publicClient: env.bool("KEYCLOAK_PUBLIC_CLIENT", false),
              clientSecret: env("KEYCLOAK_CLIENT_SECRET", ""),
              sslRequired: env("KEYCLOAK_SSL_REQUIRED", "external"),
              authServerURL: env("KEYCLOAK_AUTH_SERVER_URL", ""),
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL(
                  "keycloak"
                ),
            },
            (accessToken, refreshToken, profile, done) => {
              done(null, {
                email: profile.email,
                username: profile.username,
              });
            }
          ),
      },
    ],
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

import { Strategy as KeyCloakStrategy } from "passport-keycloak-oauth2-oidc";

export default ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "keycloak",
        displayName: "Keycloak",
        icon: "https://raw.githubusercontent.com/keycloak/keycloak-admin-ui/main/themes/keycloak/logo.svg",
        createStrategy: (strapi) =>
          new KeyCloakStrategy(
            {
              clientID: env("KEYCLOAK_CLIENT_ID", ""),
              realm: env("KEYCLOAK_REALM", ""),
              publicClient: env.bool("KEYCLOAK_PUBLIC_CLIENT", false),
              clientSecret: env("KEYCLOAK_CLIENT_SECRET", ""),
              sslRequired: env("KEYCLOAK_SSL_REQUIRED", "external"),
              authServerURL: env("KEYCLOAK_AUTH_SERVER_URL", ""),
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL(
                  "keycloak"
                ),
            },
            (accessToken, refreshToken, profile, done) => {
              done(null, {
                email: profile.email,
                username: profile.username,
              });
            }
          ),
      },
    ],
  },
});
```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/cms/configurations/sso-providers/microsoft.md 

 ---
title: Microsoft SSO provider
description: Learn how to configure the SSO provider to sign in and sign up into your Strapi application through Microsoft.
displayed_sidebar: cmsSidebar
tags: 
- SSO
- providers
- configuration
---

# Microsoft provider SSO configuration

The present page explains how to setup the Microsoft provider for the [Single Sign-On (SSO) feature](/cms/features/sso).

:::prerequisites
You have read the [How to configure SSO guide](/cms/configurations/guides/configure-sso).
:::

## Installation

Install <ExternalLink to="https://github.com/auth0/passport-azure-ad-oauth2#readme" text="passport-azure-ad-oauth2"/>:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```sh
yarn add passport-azure-ad-oauth2 jsonwebtoken
```

</TabItem>

<TabItem value="npm" label="npm">

```sh
npm install --save passport-azure-ad-oauth2 jsonwebtoken
```

</TabItem>

</Tabs>

## Configuration example

The Microsoft SSO provider is configured in the `auth.providers` array of [the `config/admin` file](/cms/configurations/admin-panel):

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"

const AzureAdOAuth2Strategy = require("passport-azure-ad-oauth2");
const jwt = require("jsonwebtoken");

module.exports = ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "azure_ad_oauth2",
        displayName: "Microsoft",
        icon: "https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Microsoft_logo_%282012%29.svg/320px-Microsoft_logo_%282012%29.svg.png",
        createStrategy: (strapi) =>
          new AzureAdOAuth2Strategy(
            {
              clientID: env("MICROSOFT_CLIENT_ID", ""),
              clientSecret: env("MICROSOFT_CLIENT_SECRET", ""),
              scope: ["user:email"],
              tenant: env("MICROSOFT_TENANT_ID", ""),
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL(
                  "azure_ad_oauth2"
                ),
            },
            (accessToken, refreshToken, params, profile, done) => {
              let waadProfile = jwt.decode(params.id_token, "", true);
              done(null, {
                email: waadProfile.email,
                username: waadProfile.email,
                firstname: waadProfile.given_name, // optional if email and username exist
                lastname: waadProfile.family_name, // optional if email and username exist
              });
            }
          ),
      },
    ],
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

import { Strategy as AzureAdOAuth2Strategy} from "passport-azure-ad-oauth2";
import jwt from "jsonwebtoken";

export default ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "azure_ad_oauth2",
        displayName: "Microsoft",
        icon: "https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Microsoft_logo_%282012%29.svg/320px-Microsoft_logo_%282012%29.svg.png",
        createStrategy: (strapi) =>
          new AzureAdOAuth2Strategy(
            {
              clientID: env("MICROSOFT_CLIENT_ID", ""),
              clientSecret: env("MICROSOFT_CLIENT_SECRET", ""),
              scope: ["user:email"],
              tenant: env("MICROSOFT_TENANT_ID", ""),
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL(
                  "azure_ad_oauth2"
                ),
            },
            (accessToken, refreshToken, params, profile, done) => {
              let waadProfile = jwt.decode(params.id_token, "", true);
              done(null, {
                email: waadProfile.email,
                username: waadProfile.email,
                firstname: waadProfile.given_name, // optional if email and username exist
                lastname: waadProfile.family_name, // optional if email and username exist
              });
            }
          ),
      },
    ],
  },
});
```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/cms/configurations/sso-providers/okta.md 

 ---
title: Okta SSO provider
description: Learn how to configure the SSO provider to sign in and sign up into your Strapi application through Okta.
displayed_sidebar: cmsSidebar
tags: 
- SSO
- providers
- configuration
---

# Okta provider SSO configuration

The present page explains how to setup the Okta provider for the [Single Sign-On (SSO) feature](/cms/features/sso).

:::prerequisites
You have read the [How to configure SSO guide](/cms/configurations/guides/configure-sso).
:::

## Installation

Install <ExternalLink to="https://github.com/antoinejaussoin/passport-okta-oauth20/#readme" text="passport-okta-oauth20"/>:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```sh
yarn add passport-okta-oauth20
```

</TabItem>

<TabItem value="npm" label="npm">

```sh
npm install --save passport-okta-oauth20
```

</TabItem>

</Tabs>

## Configuration example

The Okta SSO provider is configured in the `auth.providers` array of [the `config/admin` file](/cms/configurations/admin-panel):

:::caution
When setting the `OKTA_DOMAIN` environment variable, make sure to include the protocol (e.g., `https://example.okta.com`). If you do not, you will end up in a redirect loop.
:::

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"

const OktaOAuth2Strategy = require("passport-okta-oauth20").Strategy;

module.exports = ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "okta",
        displayName: "Okta",
        icon: "https://www.okta.com/sites/default/files/Okta_Logo_BrightBlue_Medium-thumbnail.png",
        createStrategy: (strapi) =>
          new OktaOAuth2Strategy(
            {
              clientID: env("OKTA_CLIENT_ID"),
              clientSecret: env("OKTA_CLIENT_SECRET"),
              audience: env("OKTA_DOMAIN"),
              scope: ["openid", "email", "profile"],
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL("okta"),
            },
            (accessToken, refreshToken, profile, done) => {
              done(null, {
                email: profile.email,
                username: profile.username,
              });
            }
          ),
      },
    ],
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"

import { Strategy as OktaOAuth2Strategy } from "passport-okta-oauth20";

export default ({ env }) => ({
  auth: {
    // ...
    providers: [
      {
        uid: "okta",
        displayName: "Okta",
        icon: "https://www.okta.com/sites/default/files/Okta_Logo_BrightBlue_Medium-thumbnail.png",
        createStrategy: (strapi) =>
          new OktaOAuth2Strategy(
            {
              clientID: env("OKTA_CLIENT_ID"),
              clientSecret: env("OKTA_CLIENT_SECRET"),
              audience: env("OKTA_DOMAIN"),
              scope: ["openid", "email", "profile"],
              callbackURL:
                strapi.admin.services.passport.getStrategyCallbackURL("okta"),
            },
            (accessToken, refreshToken, profile, done) => {
              done(null, {
                email: profile.email,
                username: profile.username,
              });
            }
          ),
      },
    ],
  },
});
```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/cms/configurations/typescript.md 

 ---
title: TypeScript configuration
displayed_sidebar: cmsSidebar
description: How to configure Strapi for TypeScript development.
tags:
- additional configuration
- configuration
- types
- typescript
---

# TypeScript configuration

[TypeScript](/cms/typescript)-enabled Strapi projects have a specific project structure and handle TypeScript project configuration through [`tsconfig.json` files](#project-structure-and-typescript-specific-configuration-files).

Strapi also has dedicated TypeScript features that are configured [in the `config/typescript.js|ts` file](#strapi-specific-configuration-for-typescript).

## Project structure and TypeScript-specific configuration files

TypeScript-enabled Strapi applications have a specific [project structure](/cms/project-structure) with the following dedicated folders and configuration files:

| TypeScript-specific directories and files | Location         | Purpose                                                                                                                                          |
| ----------------------------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| `./dist` directory                        | application root | Adds the location for compiling the project JavaScript source code.                                                                              |
| `build` directory                         | `./dist`         | Contains the compiled administration panel JavaScript source code. The directory is created on the first `yarn build` or `npm run build` command |
| `tsconfig.json` file                      | application root | Manages TypeScript compilation for the server.                                                                                                   |
| `tsconfig.json` file                      | `./src/admin/`   | Manages TypeScript compilation for the admin panel.                                                                                              |

## Strapi-specific configuration for TypeScript

:::caution üöß This feature is considered experimental.
These settings are considered experimental and might have issues or break some features.
:::

Types generated by Strapi are based on the user project structure. Once the type definitions are emitted into their dedicated files, Strapi reads the type definitions to adapt the autocompletion results accordingly.

To avoid having to [manually generate types](/cms/typescript/development#generate-typings-for-content-types-schemas) every time the server restarts, an optional `config/typescript.js|ts` configuration file can be added, which currently accepts only one parameter:

| Parameter      | Description                                                    | Type      | Default |
| -------------- | -------------------------------------------------------------- | --------- | ------- |
| `autogenerate` | Enable or disable automatic types generation on server restart | `Boolean` | `false` |

**Example:**

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="./config/typescript.js"
module.exports = ({ env }) => ({
  autogenerate: true,
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/typescript.ts"
export default ({ env }) => ({
  autogenerate: true,
});
```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers.md 

 ---
title: Users & Permissions Providers
description: Learn how to setup providers for the Users & Permissions feature, or create your own.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

# Users & Permissions providers

Strapi comes with a predefined set of built-in providers for the [Users & Permissions feature](/cms/features/users-permissions). The present page explains how the login flow works, how to set up the server URL, and list many examples for common 3rd-party providers.

If you're looking to create your own custom provider, please refer to the [dedicated guide](/cms/configurations/users-and-permissions-providers/new-provider-guide).

## Understanding the login flow

<ExternalLink to="https://github.com/simov/grant" text="Grant"/> and <ExternalLink to="https://github.com/simov/purest" text="Purest"/> allow you to use OAuth and OAuth2 providers to enable authentication in your application.

For a better understanding, review the following description of the login flow. The example uses `github` as the provider but it works the same for other providers.

Let's say that:
* Strapi's backend is located at: `strapi.website.com`, and
* Your app frontend is located at: `website.com`

1. The user goes on your frontend app (`https://website.com`) and clicks on your button `connect with Github`.
2. The frontend redirects the tab to the backend URL: `https://strapi.website.com/api/connect/github`.
3. The backend redirects the tab to the GitHub login page where the user logs in.
4. Once done, Github redirects the tab to the backend URL:`https://strapi.website.com/api/connect/github/callback?code=abcdef`.
5. The backend uses the given `code` to get an `access_token` from Github that can be used for a period of time to make authorized requests to Github to get the user info.
6. Then, the backend redirects the tab to the url of your choice with the param `access_token` (example: `http://website.com/connect/github/redirect?access_token=eyfvg`).
7. The frontend (`http://website.com/connect/github/redirect`) calls the backend with `https://strapi.website.com/api/auth/github/callback?access_token=eyfvg` that returns the Strapi user profile with its `jwt`. <br/> (Under the hood, the backend asks Github for the user's profile and a match is done on Github user's email address and Strapi user's email address).
8. The frontend now possesses the user's `jwt`, which means the user is connected and the frontend can make authenticated requests to the backend!

An example of a frontend app that handles this flow can be found here: <ExternalLink to="https://github.com/strapi/strapi-examples/tree/master/examples/login-react" text="react login example application"/>.

## Setting up the server URL

Before setting up a provider you must specify the absolute URL of your backend in `/config/server`:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/server.js"
module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  url: env('', 'http://localhost:1337'),
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/server.ts"
export default ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  url: env('', 'http://localhost:1337'),
});
```

</TabItem>

</Tabs>

:::tip
Later you will give this URL to your provider. <br/> For development, some providers accept the use of localhost urls but many don't. In this case we recommend to use <ExternalLink to="https://ngrok.com/docs" text="ngrok"/> (`ngrok http 1337`) that will make a proxy tunnel from a url it created to your localhost url (e.g., `url: env('', 'https://5299e8514242.ngrok.io'),`).
:::

## Setting up the provider - Examples

Instead of a generic explanation we decided to show an example for each provider. You can also [create your own custom provider](/cms/configurations/users-and-permissions-providers/new-provider-guide).

In the following examples, the frontend application will be the <ExternalLink to="https://github.com/strapi/strapi-examples/tree/master/examples/login-react" text="react login example application"/>  running on `http://localhost:3000`, while Strapi (i.e., the backend server) will be running on `http://localhost:1337`.

<CustomDocCardsWrapper>
<CustomDocCard icon="plugs-connected" title="Auth0" description="Configure authentication through the Users & Permissions feature with Auth0." link="/cms/configurations/users-and-permissions-providers/auth-zero" />
<CustomDocCard icon="plugs-connected" title="AWS Cognito" description="Configure authentication through the Users & Permissions feature with AWS Cognito." link="/cms/configurations/users-and-permissions-providers/aws-cognito" />
<CustomDocCard icon="plugs-connected" title="CAS" description="Configure authentication through the Users & Permissions feature with CAS." link="/cms/configurations/users-and-permissions-providers/cas" />
<CustomDocCard icon="plugs-connected" title="Discord" description="Configure authentication through the Users & Permissions feature with Discord." link="/cms/configurations/users-and-permissions-providers/discord" />
<CustomDocCard icon="plugs-connected" title="Facebook" description="Configure authentication through the Users & Permissions feature with Facebook." link="/cms/configurations/users-and-permissions-providers/facebook" />
<CustomDocCard icon="plugs-connected" title="GitHub" description="Configure authentication through the Users & Permissions feature with GitHub." link="/cms/configurations/users-and-permissions-providers/github" />
<CustomDocCard icon="plugs-connected" title="Google" description="Configure authentication through the Users & Permissions feature with Google." link="/cms/configurations/users-and-permissions-providers/google" />
<CustomDocCard icon="plugs-connected" title="Instagram" description="Configure authentication through the Users & Permissions feature with Instagram." link="/cms/configurations/users-and-permissions-providers/instagram" />
<CustomDocCard icon="plugs-connected" title="Keycloak" description="Configure authentication through the Users & Permissions feature with Keycloak." link="/cms/configurations/users-and-permissions-providers/keycloak" />
<CustomDocCard icon="plugs-connected" title="LinkedIn" description="Configure authentication through the Users & Permissions feature with LinkedIn." link="/cms/configurations/users-and-permissions-providers/linkedin" />
<CustomDocCard icon="plugs-connected" title="Patreon" description="Configure authentication through the Users & Permissions feature with Patreon." link="/cms/configurations/users-and-permissions-providers/patreon" />
<CustomDocCard icon="plugs-connected" title="Reddit" description="Configure authentication through the Users & Permissions feature with Reddit." link="/cms/configurations/users-and-permissions-providers/reddit" />
<CustomDocCard icon="plugs-connected" title="Twitch" description="Configure authentication through the Users & Permissions feature with Twitch." link="/cms/configurations/users-and-permissions-providers/twitch" />
<CustomDocCard icon="plugs-connected" title="Twitter" description="Configure authentication through the Users & Permissions feature with Twitter." link="/cms/configurations/users-and-permissions-providers/twitter" />
<CustomDocCard icon="plugs-connected" title="VK" description="Configure authentication through the Users & Permissions feature with VK." link="/cms/configurations/users-and-permissions-providers/vk" />
</CustomDocCardsWrapper>

If you want to create and add a new custom provider, please refer to the following guide:

<CustomDocCardsWrapper>
<CustomDocCard icon="plugs-connected" title="Custom provider guide" description="Learn how to create a custom Users & Permissions provider and add it to your Strapi application" link="/cms/configurations/users-and-permissions-providers/new-provider-guide" />
</CustomDocCardsWrapper>


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/auth-zero.md 

 ---
title: Auth0 provider setup for Users & Permissions
description: Learn how to setup the Auth0 provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# Auth0 provider setup for Users & Permissions

The present page explains how to setup the Auth0 provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## Auth0 configuration

:::note
AWS Cognito accepts the `localhost` urls. <br/>
The use of `ngrok` is not needed.
:::

1. Visit your Auth0 tenant dashboard
2. In API section, create a new API
3. In application, create a `machine-to-machine` application and select the API that you have just created
4. In settings of this app set these values:
   - **Allowed Callback URLs**: `http://localhost:1337/api/connect/auth0/callback`
   - **Allowed Logout URLs**: `http://localhost:3000`
   - **Allowed Web Origins**: `http://localhost:3000`
5. At the bottom of settings, show "Advanced Settings" and go to the "Grant Types". Ensure that these grants are checked/enabled:
   - Implicit
   - Authorization Code
   - Refresh Token
   - Client Credentials

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Auth0** provider
3. Fill the information:
   - Enable: `ON`
   - Client ID: `<Your Auth0 Client ID>`
   - Client Secret: `<Your Auth0 Client Secret>`
   - Subdomain: `<Your Auth0 tenant url>`, example it is the part in bold in the following url: https://**my-tenant.eu**.auth0.com/
   - The redirect URL to your front-end app: `http://localhost:3000/connect/auth0`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/aws-cognito.md 

 ---
title: AWS Cognito provider setup for Users & Permissions
description: Learn how to setup the AWS Cognito provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# AWS Cognito provider setup for Users & Permissions

The present page explains how to setup the AWS Cognito provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## AWS Cognito configuration

:::note
AWS Cognito accepts the `localhost` urls. <br/>
The use of `ngrok` is not needed.
:::

1. Visit the AWS Management Console <br/> <ExternalLink to="https://aws.amazon.com/console/" text="https://aws.amazon.com/console/"/>
2. If needed, select your **Region** in the top right corner next to the Support dropdown
3. Select the **Services** dropdown in the top left corner
4. Click on **Cognito** in the `Security, Identity & Compliance` section
5. Then click on the **Manage User Pools** button
6. If applicable either create or use an existing user pool. You will find hereafter a tutorial to create a User Pool <br/> <ExternalLink to="https://docs.aws.amazon.com/cognito/latest/developerguide/tutorial-create-user-pool.html" text="https://docs.aws.amazon.com/cognito/latest/developerguide/tutorial-create-user-pool.html"/>
7. Go to the **App clients** section in your cognito user pool and create a new client with the name `Strapi Auth` and set all the parameters and then click on **Create app client**
8. You should now have an **App client id** and by clicking on the button **Show Details** you will be able to see the **App client secret**. Do copy those two values **App client id** and **App client secret** somewhere for later use when configuring the AWS Cognito provider in Strapi.
9. Go to the **App integration section** and click on **App client settings**
10. Look for your app client named `Strapi Auth` and enable Cognito User Pool by checking it in the **Enabled Identity Providers** section of your newly created App client
11. Fill in your callback URL and Sign out URL with the value `http://localhost:1337/api/connect/cognito/callback` or the one provided by your AWS Cognito provider in Strapi
12. In the **Oauth 2.0** section select `Authorization code grant` and `Implicit grant` for the **Allowed OAuth Flows** and select `email`, `openid` and `profile` for the **Allowed OAuth Scopes**
13. You can now click on **Save changes** and if you have already configured your domain name then you should be able to see a link to the **Launch Hosted UI**. You can click on it in order to display the AWS Cognito login page. In case you haven't yet configured your domain name, use the link **Choose domain name** at the bottom right of the page in order to configure your domain name. On that page you will have an `Amazon Cognito Domain` section where a `Domain prefix` is already setup. Type a domain prefix to use for the sign-up and sign-in pages that are hosted by Amazon Cognito, this domain prefix together with the `.auth.YOUR_REGION.amazoncognito.com` will be the **Host URI (Subdomain)** value for your strapi configuration later on.

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Cognito** provider
3. Fill the information (replace with your own client ID and secret):
   - **Enable**: `ON`
   - **Client ID**: fill in the **App client id** (`5bd7a786qdupjmi0b3s10vegdt`)
   - **Client Secret**: fill in the **App client secret** (`19c5c78dsfsdfssfsdfhpdb4nkpb145vesdfdsfsffgh7vwd6g45jlipbpb`)
   - **Host URI (Subdomain)**: fill in the URL value that you copied earlier (`myapp67b50345-67b50b17-local.auth.eu-central-1.amazoncognito.com`)
   - **The redirect URL to your front-end app**: if you are using strapi react-login <ExternalLink to="https://github.com/strapi/strapi-examples/tree/master/examples/login-react/" text="https://github.com/strapi/strapi-examples/tree/master/examples/login-react/"/> use `http://localhost:3000/connect/cognito/redirect` but if you do not yet have a front-end app to test your Cognito configuration you can then use the following URL `http://localhost:1337/api/auth/cognito/callback`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/cas.md 

 ---
title: CAS provider setup for Users & Permissions
description: Learn how to setup the CAS provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# CAS provider setup for Users & Permissions

The present page explains how to setup the Auth0 provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## CAS configuration

:::note
A remote CAS server can be configured to accept `localhost` URLs or you can run your own CAS server locally that accepts them.

The use of `ngrok` is not needed.
:::

- <ExternalLink to="https://github.com/apereo/cas" text="CAS"/> is an SSO server that supports many different methods of verifying a users identity,
  retrieving attributes out the user and communicating that information to applications via protocols such as SAML, OIDC, and the CAS protocol. Strapi can use a CAS server for authentication if CAS is deployed with support for OIDC.
- <ExternalLink to="https://github.com/apereo/cas" text="CAS"/> could already be used by your company or organization or you can setup a local CAS server by cloning the <ExternalLink to="https://github.com/apereo/cas-overlay-template" text="CAS Overlay"/> project or using the newer <ExternalLink to="https://github.com/apereo/cas-initializr" text="CAS Initializr"/> to create an overlay project.
- The CAS server must be configured so it can act as an <ExternalLink to="https://apereo.github.io/cas/6.6.x/installation/OIDC-Authentication.html" text="OpenID Connect Provider"/>
- CAS version 6.3.x and higher is known to work with Strapi but older versions that support OIDC may work.
- Define a CAS OIDC service for Strapi and store it in whichever CAS service registry is being used.
- The CAS service definition might look something like this for a local strapi deployment:

```json
{
  "@class": "org.apereo.cas.services.OidcRegisteredService",
  "clientId": "thestrapiclientid",
  "clientSecret": "thestrapiclientsecret",
  "bypassApprovalPrompt": true,
  "serviceId": "^http(|s)://localhost:1337/.*",
  "name": "Local Strapi",
  "id": 20201103,
  "evaluationOrder": 50,
  "attributeReleasePolicy": {
    "@class": "org.apereo.cas.services.ReturnMappedAttributeReleasePolicy",
    "allowedAttributes": {
      "@class": "java.util.TreeMap",
      "strapiemail": "groovy { return attributes['mail'].get(0) }",
      "strapiusername": "groovy { return attributes['username'].get(0) }"
    }
  }
}
```

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/plugins/users-permissions/providers" text="http://localhost:1337/admin/plugins/users-permissions/providers"/>
2. Click on the **CAS** provider
3. Fill the information:
   - **Enable**: `ON`
   - **Client ID**: thestrapiclientid
   - **Client Secret**: thestrapiclientsecret
   - **The redirect URL to your front-end app**: `http://localhost:1337/api/connect/cas/redirect`
   - **The Provider Subdomain such that the following URLs are correct for the CAS deployment you are targeting:**
   ```
     authorize_url: https://[subdomain]/oidc/authorize
     access_url: https://[subdomain]/oidc/token
     profile_url: https://[subdomain]/oidc/profile
   ```
   For example, if running CAS locally with a login URL of: `https://localhost:8443/cas/login`, the value for the provider subdomain would be `localhost:8443/cas`.

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/discord.md 

 ---
title: Discord provider setup for Users & Permissions
description: Learn how to setup the Discord provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# Discord provider setup for Users & Permissions

The present page explains how to setup the Discord provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## Discord configuration

:::note
Discord accepts the `localhost` urls. <br/>
The use of `ngrok` is not needed.
:::

1. Visit the Apps list page on the developer portal at <ExternalLink to="https://discordapp.com/developers/applications/" text="https://discordapp.com/developers/applications/"/>
2. Click on **New application** button
3. Fill the **name** and create
4. Click on **OAuth2** in the left menu
5. And click on **Add redirect** button
6. Fill the **Redirect** input with `http://localhost:1337/api/connect/discord/callback` URL and save
7. Click on **General information** in the left menu
8. You should see your Application ID and secret, save them for later

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Discord** provider
3. Fill the information (replace with your own client ID and secret):
   - **Enable**: `ON`
   - **Client ID**: 665118465148846081
   - **Client Secret**: iJbr7mkyqyut-J2hGvvSDch_5Dw5U77J
   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/discord/redirect`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/facebook.md 

 ---
title: Facebook provider setup for Users & Permissions
description: Learn how to setup the Facebook provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# Facebook provider setup for Users & Permissions

The present page explains how to setup the Facebook provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## Facebook configuration

Facebook doesn't accept `localhost` urls. <br/>
Use <ExternalLink to="https://ngrok.com/docs" text="ngrok"/> to serve the backend app (`ngrok http 1337`) that will make a proxy tunnel from a url it created to your localhost url (e.g., `url: env('', 'https://5299e8514242.ngrok.io'),`).

```
ngrok http 1337
```

Don't forget to update the server url in the backend config file `config/server.js` and the server url in your frontend app (environment variable `REACT_APP_BACKEND_URL` if you use <ExternalLink to="https://github.com/strapi/strapi-examples/tree/master/examples/login-react" text="react login example app"/>) with the generated ngrok url.

1. Visit the Developer Apps list page at <ExternalLink to="https://developers.facebook.com/apps/" text="https://developers.facebook.com/apps/"/>
2. Click on **Add a New App** button
3. Fill the **Display Name** in the modal and create the app
4. Setup a **Facebook Login** product
5. Click on the **PRODUCTS > Facebook login > Settings** link in the left menu
6. Fill the information and save (replace with your own ngrok url):
   - **Valid OAuth Redirect URIs**: `https://65e60559.ngrok.io/api/connect/facebook/callback`
7. Then, click on **Settings** in the left menu
8. Then on **Basic** link
9. You should see your Application ID and secret, save them for later

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Facebook** provider
3. Fill the information (replace with your own client ID and secret):
   - **Enable**: `ON`
   - **Client ID**: 2408954435875229
   - **Client Secret**: 4fe04b740b69f31ea410b9391ff3b5b0
   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/facebook/redirect`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/github.md 

 ---
title: GitHub provider setup for Users & Permissions
description: Learn how to setup the GitHub provider for the Users & Permissions feature.o
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# GitHub provider setup for Users & Permissions

The present page explains how to setup the GitHub provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## GitHub configuration

:::note
Github doesn't accept `localhost` urls. <br/>
Use `ngrok` to serve the backend app.
```
ngrok http 1337
```
Don't forget to update the server url in the backend config file `config/server.js` and the server url in your frontend app (environment variable `REACT_APP_BACKEND_URL` if you use <ExternalLink to="https://github.com/strapi/strapi-examples/tree/master/examples/login-react" text="react login example app"/>) with the generated ngrok url.
:::

1. Visit the OAuth Apps list page <ExternalLink to="https://github.com/settings/developers" text="https://github.com/settings/developers"/>
2. Click on **New OAuth App** button
3. Fill the information (replace with your own ngrok url):
   - **Application name**: Strapi GitHub auth
   - **Homepage URL**: `https://65e60559.ngrok.io`
   - **Application description**: Strapi provider auth description
   - **Authorization callback URL**: `https://65e60559.ngrok.io/api/connect/github/callback`

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **GitHub** provider
3. Fill the information (replace with your own client ID and secret):
   - **Enable**: `ON`
   - **Client ID**: 53de5258f8472c140917
   - **Client Secret**: fb9d0fe1d345d9ac7f83d7a1e646b37c554dae8b
   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/github/redirect`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/google.md 

 ---
title: Google provider setup for Users & Permissions
description: Learn how to setup the Google provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# Google provider setup for Users & Permissions

The present page explains how to setup the Google provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## Google configuration

:::note
Google accepts the `localhost` urls. <br/>
The use of `ngrok` is not needed.
:::

1. Visit the Google Developer Console at <ExternalLink to="https://console.developers.google.com/" text="https://console.developers.google.com/"/>
2. Click on the **Select a project** dropdown in the top menu
3. Then click **NEW PROJECT** button
4. Fill the **Project name** input and create

Wait a few seconds while the application is created.

5. On the project dropdown, select your new project
6. Click on **Go to APIs overview** under the **APIs** card
7. Then click on the **Credentials** link in the left menu
8. Click on **OAuth consent screen** button
9. Choose **External** and click on **create**
10. Fill the **Application name** and save
11. Then click on **Create credentials** button
12. Choose **OAuth client ID** option
13. Fill the information:
    - **Name**: `Strapi Auth`
    - **Authorized redirect URIs**: `http://localhost:1337/api/connect/google/callback`
14. Click on **OAuth 2.0 Client IDs** name of the client you just created
15. You should see your Application ID and secret, save them for later

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Google** provider
3. Fill the information (replace with your own client ID and secret):
   - **Enable**: `ON`
   - **Client ID**: 226437944084-o2mojv5i4lfnng9q8kq3jkf5v03avemk.apps.googleusercontent.com
   - **Client Secret**: aiTbMoiuJQflSBy6uQrfgsni
   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/google/redirect`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/instagram.md 

 ---
title: Instagram provider setup for Users & Permissions
description: Learn how to setup the Instagram provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# Instagram provider setup for Users & Permissions

The present page explains how to setup the Instagram provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## Instagram configuration

:::note
Facebook doesn't accept `localhost` urls. <br/>
Use `ngrok` to serve the backend app.
```
ngrok http 1337
```
Don't forget to update the server url in the backend config file `config/server.js` and the server url in your frontend app (environment variable `REACT_APP_BACKEND_URL` if you use <ExternalLink to="https://github.com/strapi/strapi-examples/tree/master/login-react" text="react login example app"/>) with the generated ngrok url.
:::

1. Visit the Developer Apps list page at <ExternalLink to="https://developers.facebook.com/apps/" text="https://developers.facebook.com/apps/"/>
2. Click on **Add a New App** button
3. Fill the **Display Name** in the modal and create the app
4. Setup an **Instagram** product
5. Click on the **PRODUCTS > Instagram > Basic Display** link in the left menu
6. Then click on the **Create new application** button (and valid the modal)
7. Fill the information (replace with your own ngrok url):
   - **Valid OAuth Redirect URIs**: `https://65e60559.ngrok.io/api/connect/instagram/callback`
   - **Deauthorize**: `https://65e60559.ngrok.io`
   - **Data Deletion Requests**: `https://65e60559.ngrok.io`
8. On the **App Review for Instagram Basic Display** click on **Add to submission** for **instagram_graph_user_profile**.
9. You should see your Application ID and secret, save them for later

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Instagram** provider
3. Fill the information (replace with your own client ID and secret):
   - **Enable**: `ON`
   - **Client ID**: 563883201184965
   - **Client Secret**: f5ba10a7dd78c2410ab6b8a35ab28226
   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/instagram/redirect`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/keycloak.md 

 ---
title: Keycloak provider setup for Users & Permissions
description: Learn how to setup the Keycloak provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# Keycloak provider setup for Users & Permissions

The present page explains how to setup the Keycloak provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## Keycloak configuration

:::note
Keycloak accepts the `localhost` urls. <br/>
The use of `ngrok` is not needed.
:::

1. Visit your Keycloak admin dashboard
2. If you don't already have a realm, you'll want to create one
3. In the Clients section of your realm, create a new client
4. Under the capability config, ensure you set `Client Authentication` to on to ensure you can create a private key
5. Under the access settings, ensure you set the following values:
   - **Valid redirect URIs**: `http://localhost:1337/api/connect/keycloak/callback` and `http://localhost:1337/api/connect/keycloak`
   - **Allowed Web Origins**: `http://localhost:3000` and `http://localhost:1337`
6. In the Client Scopes section, ensure you have the `email` and `profile` scopes set to default
7. In the Client Scopes section, ensure you have the `openid` scope set to default, if you don't have this you will need to manually create it in the global Client Scopes

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Keycloak** provider
3. Fill the information:
   - Enable: `ON`
   - Client ID: `<Your Keycloak Client ID>`
   - Client Secret: `<Your Keycloak Client Secret>`
   - Subdomain: `<Your Keycloak realm url>`, example is either `keycloak.example.com/realms/strapitest` or `keycloak.example.com/auth/realms/strapitest` **without the protocol before it**
   - The redirect URL to your front-end app: `http://localhost:3000/connect/keycloak/redirect`
   - (Optional) Set the JWKS URL if you have a custom JWKS URL, example is like `https://keycloak.example.com/auth/realms/strapitest/protocol/openid-connect/certs`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/linkedin.md 

 ---
title: LinkedIn provider setup for Users & Permissions
description: Learn how to setup the LinkedIn provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# LinkedIn provider setup for Users & Permissions

The present page explains how to setup the LinkedIn provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## LinkedIn configuration

:::note
LinkedIn accepts the `localhost` urls. <br/>
The use of `ngrok` is not needed.
:::

1. Visit the Apps list page at <ExternalLink to="https://www.linkedin.com/developers/apps" text="https://www.linkedin.com/developers/apps"/>
2. Click on **Create app** button
3. Fill the information:
   - **App name**: Strapi auth
   - **LinkedIn Page**: Enter a LinkedIn page name to associate with the app or click **Create a new LinkedIn Page** to create a new one
   - **App Logo**: Upload a square image that is at least 100x100 pixels.
4. Click on the **Create app** to create the app
5. On the app page click on **Auth** tab
6. Fill the information:
   - **Authorized redirect URL**: `http://localhost:1337/api/connect/linkedin/callback`
7. On the app page click on **Products** tab.
8. Select `Sign In with LinkedIn` from the product list to enable it.

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **LinkedIn** provider
3. Fill the information:
   - **Enable**: `ON`
   - **Client ID**: 84witsxk641rlv
   - **Client Secret**: HdXO7a7mkrU5a6WN
   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/linkedin/redirect`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/new-provider-guide.md 

 ---
title: Creating and adding a custom Users & Permissions provider
description: todo
displayed_sidebar: cmsSidebar
tags:
- users & permissions
- providers
- configuration
- customization
---

# Creating and adding a custom Users & Permissions provider

Strapi provides a list of [built-in providers](/cms/configurations/users-and-permissions-providers#setting-up-the-provider---examples) for the [Users & Permissions feature](/cms/features/users-permissions). You can also create your own provider following this guide.

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers) and understood the login flow.
:::

## Creating a custom provider

You can use [the `register` lifecycle function](/cms/configurations/functions#register) to create your own custom provider in the `src/index.js|ts` file of your Strapi application. Use the following code example adjusted to your needs:

```js title="/src/index.js"
module.exports = {
  register({ strapi }) {
    strapi
      .plugin("users-permissions")
      .service("providers-registry")
      .add("example-provider-name", {
        icon: "",
        enabled: true,
        grantConfig: {
          key: "",
          secret: "",
          callback: `${strapi.config.server.url}/auth/example-provider-name/callback`,
          scope: ["email"],
          authorize_url: "https://awesome.com/authorize",
          access_url: "https://awesome.com/token",
          oauth: 2,
        },
        async authCallback({ accessToken, providers, purest }) {
          // use whatever you want here to get the user info
          return {
            username: "test",
            email: "test",
          };
        },
      });
  },
};
```

For additional information on parameters passed to `grantConfig`, please refer to the  <ExternalLink to="https://github.com/simov/grant" text="`grant` documentation"/>. For additional information about `purest` please refer to <ExternalLink to="https://github.com/simov/purest" text="`purest` documentation"/>.

### Frontend setup

Once you have configured Strapi and the provider, in your frontend application you must:

- Create a button that links to `GET STRAPI_BACKEND_URL/api/connect/${provider}` (e.g., `https://strapi.mywebsite/api/connect/github`).
- Create a frontend route like `FRONTEND_URL/connect/${provider}/redirect` that have to handle the `access_token` param and that have to request `STRAPI_BACKEND_URL/api/auth/${provider}/callback` with the `access_token` parameter.<br/>
  The JSON request response will be `{ "jwt": "...", "user": {...} }`.

Now you can make authenticated requests, as described in [token usage](/cms/features/users-permissions#token-usage).

:::caution Troubleshooting

- **Error 429**: It's most likely because your login flow fell into a loop. To make new requests to the backend, you need to wait a few minutes or restart the backend.
- **Grant: missing session or misconfigured provider**: It may be due to many things.
  - **The redirect url can't be built**: Make sure you have set the backend url in `config/server.js`: [Setting up the server url](/cms/configurations/users-and-permissions-providers#setting-up-the-server-url)
  - **A session/cookie/cache problem**: You can try again in a private tab.
  - **The incorrect use of a domain with ngrok**: Check your urls and make sure that you use the ngrok url instead of `http://localhost:1337`. Don't forget to check the backend url set in the example app at `src/config.js`.
- **You can't access your admin panel**: It's most likely because you built it with the backend url set with a ngrok url and you stopped/restarted ngrok. You need to replace the backend url with the new ngrok url and run `yarn build` or `npm run build` again.
:::

### Reset password

**Can only be used for users registered using the email provider.**

<Tabs>

<TabItem value="Forgot & Reset flow">

The assumed general flow:

1. The user goes to your **forgotten password page**.
2. The user enters their email address.
3. Your forgotten password page sends a request to the backend to send an email with the reset password link to the user.
4. The user receives the email and clicks on the special link.
5. The link redirects the user to your **reset password page**.
6. The user enters their new password.
7. The **reset password page** sends a request to the backend with the new password.
8. If the request contains the code contained in the link at step 3, the password is updated.
9. The user can log in with the new password.

The following section details steps 3 and 7.

#### Forgotten password: ask for the reset password link

This action sends an email to a user with the link to your reset password page. The link will be enriched with the url param `code` that is needed for the [reset password](#reset-password) at step 7.

First, you must specify the following:

- In the admin panel: _Settings > USERS & PERMISSIONS PLUGIN > Advanced Settings > Reset Password_ page, the `url` to your reset password page.
- In the admin panel: _Settings > USERS & PERMISSIONS PLUGIN > Email Template_ page, the _Shipper email_.

Then, your **forgotten password page** has to make the following request to your backend:

```js
import axios from 'axios';

// Request API.
axios
  .post('http://localhost:1337/api/auth/forgot-password', {
    email: 'user@strapi.io', // user's email
  })
  .then(response => {
    console.log('Your user received an email');
  })
  .catch(error => {
    console.log('An error occurred:', error.response);
  });
```

#### Reset Password: Send the new password

This action will update the user password.
This also works with the [GraphQL Plugin](/cms/plugins/graphql), with the `resetPassword` mutation.

Your **reset password page** has to make the following request to your backend:

```js
import axios from 'axios';

// Request API.
axios
  .post('http://localhost:1337/api/auth/reset-password', {
    code: 'privateCode', // code contained in the reset link of step 3.
    password: 'userNewPassword',
    passwordConfirmation: 'userNewPassword',
  })
  .then(response => {
    console.log("Your user's password has been reset.");
  })
  .catch(error => {
    console.log('An error occurred:', error.response);
  });
```

</TabItem>

<TabItem title="Change the password flow" value="Change the password flow">

You can also update an authenticated user password through the `/change-password` API endpoint:

```js
import axios from 'axios';

// Request API.
axios.post(
  'http://localhost:1337/api/auth/change-password',
  {
    currentPassword: 'currentPassword',
    password: 'userNewPassword',
    passwordConfirmation: 'userNewPassword',
  },
  {
    headers: {
      Authorization: 'Bearer <user jwt>',
    },
  }
);
```

</TabItem>

</Tabs>

### Email validation

:::note
In production, make sure the `url` config property is set. Otherwise the validation link will redirect to `localhost`. More info on the config [here](/cms/configurations/server).
:::

After registering, if you have set **Enable email confirmation** to **ON**, the user will receive a confirmation link by email. The user has to click on it to validate their registration.

Example of the confirmation link: `https://yourwebsite.com/api/auth/email-confirmation?confirmation=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaWF0IjoxNTk0OTgxMTE3LCJleHAiOjE1OTc1NzMxMTd9.0WeB-mvuguMyr4eY8CypTZDkunR--vZYzZH6h6sChFg`

If needed you can re-send the confirmation email by making the following request:

```js
import axios from 'axios';

// Request API.
axios
  .post(`http://localhost:1337/api/auth/send-email-confirmation`, {
    email: 'user@strapi.io', // user's email
  })
  .then(response => {
    console.log('Your user received an email');
  })
  .catch(error => {
    console.error('An error occurred:', error.response);
  });
```

## Adding a new provider to your Strapi application

:::info
This documentation might not up-to-date with Strapi 5 and is a work in progress. In the meantime, <ExternalLink to="https://github.com/strapi/documentation/blob/main/CONTRIBUTING.md" text="contributions"/> are most welcome.
:::

**<ExternalLink to="https://github.com/simov/grant" text="Grant"/> supplies configuration for a number of commonly used OAuth providers. <ExternalLink to="https://github.com/simov/grant#misc-custom-providers" text="Custom"/> providers are also supported**. <br/> You can view and try out the 200+ supported providers here: <ExternalLink to="https://grant.outofindex.com/" text="OAuth Playground"/>.

### Prepare your files

To add a new provider on Strapi, you will need to perform changes to the following files:

```
extensions/users-permissions/services/Providers.js
extensions/users-permissions/config/functions/bootstrap.js
```

If these files don't exist you will need to copy from your `node_modules` or the Strapi mono-repo. You can see [plugin extensions](/cms/plugins-development/plugins-extension) for more information on how it works.

We will go step by step.

### Configure your provider request

Configure the new provider in the `Provider.js` file at the `getProfile` function.

The `getProfile` takes three params:

- **provider**: The name of the used provider as a string.
- **query**: The query is the result of the provider callback.
- **callback**: The callback function who will continue the internal Strapi login logic.

Here is an example that uses the `discord` provider.

### Configure your OAuth generic information

```js
case 'discord': {
  const discord = new Purest({
    provider: 'discord',
    config: {
      'discord': {
        'https://discordapp.com/api/': {
          '__domain': {
            'auth': {
              'auth': {'bearer': '[0]'}
            }
          },
          '{endpoint}': {
            '__path': {
              'alias': '__default'
            }
          }
        }
      }
    }
  });
}
```

This code creates a `Purest` object that gives us a generic way to interact with the provider's REST API.

For more specs on using the `Purest` module, please refer to the <ExternalLink to="https://github.com/simov/purest" text="Official Purest Documentation"/>

You may also want to take a look onto the numerous already made configurations <ExternalLink to="https://github.com/simov/purest-providers/blob/master/config/providers.json" text="here"/>.

### Retrieve your user's information

For our Discord provider it will look like the following:

```js
  discord.query().get('users/@me').auth(access_token).request((err, res, body) => {
    if (err) {
      callback(err);
    } else {
      // Combine username and discriminator because discord username is not unique
      const username = `${body.username}#${body.discriminator}`;
      callback(null, {
        username,
        email: body.email
      });
    }
  });
  break;
}
```

Here is the next part of our switch. Now that we have properly configured our provider, we want to use it to retrieve
user information.

Here you see the real power of `purest`, you can simply make a get request on the desired URL, using the `access_token`
from the `query` parameter to authenticate.

That way, you should be able to retrieve the user info you need.

Now, you can simply call the `callback` function with the username and email of your user. That way, Strapi will be able
to retrieve your user from the database and log you in.

### Configure the new provider model onto database

Now, we need to configure our 'model' for our new provider. That way, our settings can be stored in the database, and
managed from the admin panel.

Open the file `packages/strapi-plugin-users-permissions/config/functions/bootstrap.js`

Add the fields your provider needs into the `grantConfig` object.
For our discord provider it will look like:

```js
discord: {
  enabled: false,  // make this provider disabled by default
  icon: 'comments', // The icon to use on the UI
  key: '',  // our provider app id (leave it blank, you will fill it with the Content Manager)
  secret: '', // our provider secret key (leave it blank, you will fill it with the Content Manager)
  callback: '/auth/discord/callback', // the callback endpoint of our provider
  scope: [  // the scope that we need from our user to retrieve information
    'identify',
    'email'
  ]
},
```


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/patreon.md 

 ---
title: Patreon provider setup for Users & Permissions
description: Learn how to setup the Patreon provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# Patreon provider setup for Users & Permissions

The present page explains how to setup the Patreon provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## Patreon configuration

:::note
Patreon does not accept `localhost` urls. <br/>
Use `ngrok` to serve the backend app.
```bash
ngrok http 1337
```
Don't forget to update the server url in the Strapi config file `./config/server.js` and the server URL in your frontend app (environment variable `REACT_APP_BACKEND_URL` if you use <ExternalLink to="https://github.com/strapi/strapi-examples/tree/master/examples/login-react" text="react login example app"/>) with the generated ngrok URL.
:::

1. You must be a Patreon Creator in order to register an Oauth client.
2. Go to the <ExternalLink to="https://www.patreon.com/portal" text="Patreon developer portal"/>
3. Click on <ExternalLink to="https://www.patreon.com/portal/registration/register-clients" text="Clients & API Keys"/>
4. Click on "Create Client"
5. Enter the details of your organization and website.
6. There is a drop-down for "App Category" but no explanation of what the different categories mean.
"Community" seems to work fine.
7. You can choose either version 1 or version 2 of the API - neither are actively developed.
Version 2 is probably the best choice. See their
<ExternalLink to="https://docs.patreon.com/#introduction" text="developer docs"/> for more detail.
8. Under "Redirect URI's" enter `https://your-site.com/api/connect/patreon/callback`
9. Save the client details and you will then see the Client ID and Client Secret.

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Patreon** provider
3. Fill the information:
   - Enable: `ON`
   - Client ID: `<Your Patreon Client ID>` - as above
   - Client Secret: `<Your Patreon Client Secret>` - as above

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/reddit.md 

 ---
title: Reddit provider setup for Users & Permissions
description: Learn how to setup the Reddit provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# Reddit provider setup for Users & Permissions

The present page explains how to setup the Reddit provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## Reddit configuration

:::note
Reddit accepts the `localhost` urls. <br/>
The use of `ngrok` is not needed.
:::

1. Visit the Reddit authorized applications preferences page at <ExternalLink to="https://www.reddit.com/prefs/apps" text="https://www.reddit.com/prefs/apps"/>
2. Click on the **create another app...** button near the bottom
3. Select **web app** for the type
4. Fill the **name** and **redirect uri** input in
5. Click the **create app** button
6. Note that the **Client ID** is located under the app type (web app)

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Reddit** provider
3. Fill the information (replace with your own client ID and secret):
   - **Enable**: `ON`
   - **Client ID**: hmxSBOit0SCjSQ
   - **Client Secret**: gwR9hCjK_PMYVYNGeDLS4WLB8g7xqg
   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/reddit/redirect`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/twitch.md 

 ---
title: Twitch provider setup for Users & Permissions
description: Learn how to setup the Twitch provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# Twitch provider setup for Users & Permissions

The present page explains how to setup the Twitch provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## Twitch configuration

:::note
Twitch accepts the `localhost` urls. <br/>
The use of `ngrok` is not needed.
:::

1. Visit the Apps list page on the developer console at <ExternalLink to="https://dev.twitch.tv/console/apps" text="https://dev.twitch.tv/console/apps"/>
2. Click on **Register Your Application** button
3. Fill the information:
   - **Name**: Strapi auth
   - **OAuth Redirect URLs**: `http://localhost:1337/api/connect/twitch/callback`
   - **Category**: Choose a category
4. Click on **Manage** button of your new app
5. Generate a new **Client Secret** with the **New Secret** button
6. You should see your Application ID and secret, save them for later

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Twitch** provider
3. Fill the information (replace with your own client ID and secret):
   - **Enable**: `ON`
   - **Client ID**: amuy279g8wt68qlht3u4gek4oykh5j
   - **Client Secret**: dapssh10uo97gg2l25qufr8wen3yr6
   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/twitch/redirect`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/twitter.md 

 ---
title: Twitter provider setup for Users & Permissions
description: Learn how to setup the Twitter provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# Twitter provider setup for Users & Permissions

The present page explains how to setup the Twitter provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## Twitter configuration

:::note
Twitter doesn't accept `localhost` urls. <br/>
Use `ngrok` to serve the backend app.
```
ngrok http 1337
```
Don't forget to update the server url in the backend config file `config/server.js` and the server url in your frontend app (environment variable `REACT_APP_BACKEND_URL` if you use <ExternalLink to="https://github.com/strapi/strapi-examples/tree/master/examples/login-react" text="react login example app"/>) with the generated ngrok url.
:::

1. Visit the Apps list page at <ExternalLink to="https://developer.twitter.com/en/apps" text="https://developer.twitter.com/en/apps"/>
2. Click on **Create an app** button
3. Fill the information (replace with your own ngrok url):
   - **App name**: Strapi Twitter auth
   - **Application description**: This is a demo app for Strapi auth
   - **Tell us how this app will be used**: - here write a message enough long -
4. At the end of the process you should see your Application ID and secret, save them for later
5. Go to you app setting and click on edit **Authentication settings**
6. Enable **3rd party authentication** AND **Request email address from users**
7. Fill the information (replace with your own ngrok url):
   - **Callback URLs**: `https://65e60559.ngrok.io/api/connect/twitter/callback`
   - **Website URL**: `https://65e60559.ngrok.io`
   - **Privacy policy**: `https://d73e70e88872.ngrok.io`
   - **Terms of service**: `https://d73e70e88872.ngrok.io`

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **Twitter** provider
3. Fill the information (replace with your own client ID and secret):
   - **Enable**: `ON`
   - **API Key**: yfN4ycGGmKXiS1njtIYxuN5IH
   - **Api Secret**: Nag1en8S4VwqurBvlW5OaFyKlzqrXFeyWhph6CZlpGA2V3VR3T
   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/twitter/redirect`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/configurations/users-and-permissions-providers/vk.md 

 ---
title: VK provider setup for Users & Permissions
description: Learn how to setup the VK provider for the Users & Permissions feature.
displayed_sidebar: cmsSidebar
tags:
- users and permissions
- providers
- configuration
- customization
---

import ConfigDone from '/docs/snippets/u-and-p-provider-config-done.md'

# VK provider setup for Users & Permissions

The present page explains how to setup the VK provider for the [Users & Permissions feature](/cms/features/users-permissions).

:::prerequisites
You have read the [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers).
:::

## VK configuration 

:::note
VK accepts the `localhost` urls. <br/>
The use of `ngrok` is not needed.
:::

1. Visit the Apps list page at <ExternalLink to="https://vk.com/apps?act=manage" text="https://vk.com/apps?act=manage"/>
2. Click on **Create app** button
3. Fill the information:
   - **Title**: Strapi auth
   - **Platform**: Choose **Website** option
   - **Website address**: `http://localhost:1337`
   - **Base domain**: `localhost`
4. Click on the **Settings** link in the left menu
5. Click on the **Open API** link to enable this option
6. Fill the information:
   - **Authorized redirect URL**: `http://localhost:1337/api/connect/vk/callback`

## Strapi configuration

1. Visit the User & Permissions provider settings page at <ExternalLink to="http://localhost:1337/admin/settings/users-permissions/providers" text="http://localhost:1337/admin/settings/users-permissions/providers"/>
2. Click on the **VK** provider
3. Fill the information:
   - **Enable**: `ON`
   - **Client ID**: 7276416
   - **Client Secret**: cFBUSghLXGuxqnCyw1N3
   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/vk/redirect`

<ConfigDone />


 This is the content for the doc docusaurus/docs/cms/customization.md 

 ---
title: Customization
description: Learn more about Strapi 5 customization possibilities
displayed_sidebar: cmsSidebar
pagination_next: cms/backend-customization
tags:
- admin panel
- admin panel customization
- backend customization
- backend server
- concepts
- Content-type Builder 
- Content Manager
- introduction
---

# Customization

Strapi includes 2 main components:

- The back-end part of Strapi is a **server** that receives requests and handles them to return responses that can surface the data you built and saved through the Content-Type Builder and Content Manager. The backend server is described in more details in the [Backend Customization introduction](/cms/backend-customization). Most of the parts of the backend server can be customized.

- The front-end, user-facing part of Strapi is called the **admin panel**. The admin panel is the graphical user interface (GUI) that you use to build a content structure, create and manage content, and perform various other actions that can be managed by built-in or 3rd-party plugins.  Some parts of the admin panel can be customized.

From a bigger picture, this is how Strapi integrates in a typical, generic setup: Strapi includes 2 parts, a back-end server and an admin panel, and interact with a database (which stores data) and an external, front-end application that displays your data. Both parts of Strapi can be customized to some extent.

<MermaidWithFallback
    chartFile="/diagrams/customization.mmd"
    fallbackImage="/img/assets/diagrams/customization.png"
    fallbackImageDark="/img/assets/diagrams/customization_DARK.png"
    alt="Customization diagram"
/>

<br />

Click on any of the following cards to learn more about customization possibilities:

<CustomDocCardsWrapper>
<CustomDocCard emoji="" title="Back-end customization" description="Customize the backend server (routes, policies, middlewares, controllers, services, and models)." link="/cms/backend-customization" />
<CustomDocCard emoji="" title="Admin panel customization" description="Customize the admin panel (logos, themes, menu, translations, and more)." link="/cms/admin-panel-customization" />
</CustomDocCardsWrapper>


:::info
Customizing the database or the external, front-end application are outside of the scope of the present documentation section.
- You can learn more about databases usage with Strapi by reading the installation documentation, which lists [supported databases](/cms/installation/cli#preparing-the-installation), and the configuration documentation, which describes how to [configure a database](/cms/configurations/database) with your project.
- You can learn more about how external front-end applications can interact with Strapi by reading the Strapi's <ExternalLink to="https://strapi.io/integrations" text="integration pages"/>.
:::


 This is the content for the doc docusaurus/docs/cms/data-management/export.md 

 ---
title: Data export
description: Export data using the Strapi CLI
displayed_sidebar: cmsSidebar
canonicalUrl: https://docs.strapi.io/cms/data-management/export.html
tags:
- configure data encryption
- data management system
- data export
- disable data compression
- exclude option
- metadata.json file
- relations
- strapi export
- tar.gz.enc file 
---

# Data export

<VersionBadge version="4.6.0" />

The `strapi export` command is part of the [Data Management feature](/cms/features/data-management) and used to export data from a local Strapi instance. By default, the `strapi export` command exports data as an encrypted and compressed `tar.gz.enc` file which includes:

- the project configuration,
- entities: all of your content,
- links: relations between your entities,
- assets: files stored in the uploads folder,
- schemas,
- the `metadata.json` file.

The following documentation details the available options to customize your data export. The export command and all of the available options are run using the [Strapi CLI](/cms/cli#strapi-export).

:::caution
* Admin users and API tokens are not exported.
* Media from a 3rd party provider (e.g., Cloudinary or AWS S3) are not included in the export as those files do not exist in the upload folders.
:::

## Name the export file

Exported data are contained in a `.tar` file that is automatically named using the format `export_YYYYMMDDHHMMSS`. You can optionally name the exported file by passing the `--file` or `-f` option with the `strapi export` command. Do not include a file extension as one will be set automatically depending on options provided.

### Example: Export data with a custom filename

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi export --file my-strapi-export
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi export -- --file my-strapi-export
```

</TabItem>

</Tabs>

## Configure data encryption

The default `strapi export` command encrypts your project data using `aes-128-ecb` encryption and adds the file extension `.enc`. To use encryption you need to pass an encryption key using the `-k` or `--key` option or enter an encryption key when prompted. The encryption key is a `string` with no minimum character count.

:::tip Encryption keys
Strong encryption keys are encouraged to protect sensitive data in your project. <ExternalLink to="https://www.openssl.org/" text="OpenSSL"/> is a resource for generating encryption keys. The following example commands generate encryption keys in a terminal:

<Tabs>

<TabItem value="mac" label="Mac/Linux">

```bash
openssl rand -base64 48
```

</TabItem>

<TabItem value="windows" label="Windows">

```bash
node -p "require('crypto').randomBytes(48).toString('base64');"
```

</TabItem>

</Tabs>

:::

To disable encryption, pass the `--no-encrypt` option with the `strapi export` command.

### Example: Export data without encryption

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi export --no-encrypt
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi export -- --no-encrypt
```

</TabItem>

</Tabs>

### Example: Export data with the encryption `--key` option

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi export --key my-encryption-key
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi export -- --key my-encryption-key
```

</TabItem>

</Tabs>

## Disable data compression

The default `strapi export` command compresses your project data using `gzip` compression and adds the `.gz` file extension.

To disable compression, pass the `--no-compress` option with the `strapi export` command.

### Example: Export data without compression

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi export --no-compress
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi export -- --no-compress
```

</TabItem>

</Tabs>

## Export only selected types of data

The default `strapi export` command exports your content (entities and relations), files (assets), project configuration, and schemas. The `--only` option allows you to export only the listed items by passing a comma-separated string  with no spaces between the types. The available values are `content`, `files`, and `config`. Schemas are always exported, as schema matching is used for `strapi import`.

:::note
Media such as images consist of the file (asset) and the entity in the database. If you use the `--only` flag to export `content`, the asset database records are still included, and could render as broken links.
:::

### Example: Export only entities and relations
<br/>

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi export --only content
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi export -- --only content
```

</TabItem>

</Tabs>

## Exclude items from export

The default `strapi export` command exports your content (entities and relations), files (assets), project configuration, and schemas. The `--exclude` option allows you to exclude content, files, and the project configuration by passing these items in a comma-separated string with no spaces between the types. You can't exclude the schemas, as schema matching is used for `strapi import`.

:::note
Media such as images consist of the file (asset) and the entity in the database. If you use the `--exclude` flag to remove assets, the database records are still included, and could render as broken links.
:::

### Example: Export data excluding assets, entities, and relations

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi export --exclude files,content
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi export -- --exclude files,content
```

</TabItem>

</Tabs>

<FeedbackPlaceholder />


 This is the content for the doc docusaurus/docs/cms/data-management/import.md 

 ---
title: Data import 
description: Import data using the Strapi CLI
displayed_sidebar: cmsSidebar
canonicalUrl: https://docs.strapi.io/cms/data-management/import.html
tags:
- data management system
- data import
- exclude option
- force option
- metadata.json file
- strapi import
- tar.gz.enc file 
---

# Data import

<VersionBadge version="4.6.0" />

The `strapi import` command is part of the [Data Management feature](/cms/features/data-management) and used to import data from a file. By default, the `strapi import` command imports data from an encrypted and compressed `tar.gz.enc` file which includes:

- the project configuration,
- entities: all of your content,
- links: relations between your entities,
- assets: files stored in the uploads folder,
- schemas,
- the `metadata.json` file.

The following documentation details the available options to customize your data import. The import command and all of the available options are run using the [Strapi CLI](/cms/cli#strapi-import).

:::warning

- `strapi import` deletes all existing data, including the database and uploads directory, before importing the backup file.
- The source and target schemas must match to successfully use `strapi import`, meaning all content types must be identical.
- Restored data does not include the `Admin users` table, which means that `createdBy` and `updatedBy` are empty in a restored instance.  

:::

## Specify the import file

To import data into a Strapi instance use the `strapi import` command in the destination project root directory. Specify the file to be imported using the `-f` or `--file` option. The filename, extension, and path are required. If the file is encrypted, you are prompted for the encryption key before the import starts.

### Example: Minimum command to import data from a file in the Strapi project root

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc
```

</TabItem>

</Tabs>

## Provide an encryption key

If you are importing data from an encrypted file the encryption key can be passed with the `strapi import` command by using the `-k` or `--key` option.

### Example: Pass the encryption key with the `strapi import` command

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --key my-encryption-key
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --key my-encryption-key
```

</TabItem>

</Tabs>

## Bypass all command line prompts

When using the `strapi import` command, you are required to confirm that the import will delete the existing database contents. The `--force` flag allows you to bypass this prompt. This option is useful for implementing `strapi import` programmatically. For programmatic use, you must also pass the `--key` option for encrypted files.

### Example of the `--force` option

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --force --key my-encryption-key
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --force --key my-encryption-key
```

</TabItem>

</Tabs>

## Exclude data types during import

The default `strapi import` command imports your content (entities and relations), files (assets), project configuration, and schemas. The `--exclude` option allows you to exclude content, files, and the project configuration by passing these items in a comma-separated string with no spaces between the types. You can't exclude the schemas, as schema matching is used for `strapi import`.

:::warning
Any types excluded from the import will be deleted in your target instance. For example, if you exclude `config` the project configuration in your target instance will be deleted.
:::

:::note
Media such as images consist of the file (asset) and the entity in the database. If you use the `--exclude` flag to remove assets, the database records are still included, and could render as broken links.
:::

### Example: exclude assets from an import

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --exclude files
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --exclude files
```

</TabItem>

</Tabs>

## Include only specified data types during import

The default `strapi import` command imports your content (entities and relations), files (assets), project configuration, and schemas. The `--only` option allows you to export only the listed items by passing a comma-separated string  with no spaces between the types. The available values are `content`, `files`, and `config`. Schemas are always imported, as schema matching is used for `strapi import`.

:::note
Media such as images consist of the file (asset) and the entity in the database. If you use the `--only` flag to import `content` the asset database records are still included, and could render as broken links.
:::

### Example: import only the project configuration

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --only config
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --only config
```

</TabItem>

</Tabs>

<FeedbackPlaceholder />


 This is the content for the doc docusaurus/docs/cms/data-management/transfer.md 

 ---
title: Data transfer
description: Transfer data using the Strapi CLI
displayed_sidebar: cmsSidebar
canonicalUrl: https://docs.strapi.io/cms/data-management/transfer.html
tags:
- data management system
- data transfer
- strapi transfer
- environment 
---

# Data transfer

The `strapi transfer` command is part of the [Data Management feature](/cms/features/data-management) and streams your data from one Strapi instance to another Strapi instance. The `transfer` command uses strict schema matching, meaning your two Strapi instances need to be exact copies of each other except for the contained data. The default `transfer` command transfers your content (entities and relations), files (assets), project configuration, and schemas. The command allows you to transfer data:

- from a local Strapi instance to a remote Strapi instance
- from a remote Strapi instance to a local Strapi instance

The following documentation details the available options to customize your data transfer. The transfer command and all of the available options are run using the [Strapi CLI](/cms/cli#strapi-transfer).

:::caution

* If you are using an SQLite database in the destination instance other database connections will be blocked while the `transfer` operation is running.
* Admin users and API tokens are not transferred.
* If you use websockets or Socket.io in your projects, the transfer command will fail. You will need to **temporarily disable websockets or Socket.io** or ensure that your websocket server is running on a different port than the Strapi server, or a on a specific route within Strapi to use the transfer command.

:::

The CLI command consists of the following arguments:

| Option         | Description                                                                                                                                  |
| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| `--to`         | Full URL of the `/admin` endpoint on the destination Strapi instance<br />(e.g. `--to https://my-beautiful-strapi-website/admin`)            |
| `‚Äë‚Äëto‚Äëtoken`   | Transfer token from the Strapi destination instance.                                                                                         |
| `--from`       | Full URL of the `/admin` endpoint of the remote Strapi instance to pull data from (e.g., `--from https://my-beautiful-strapi-website/admin`) |
| `‚Äë‚Äëfrom‚Äëtoken` | Transfer token from the Strapi source instance.                                                                                              |
| `--force`      | Automatically answer "yes" to all prompts, including potentially destructive requests, and run non-interactively.                            |
| `--exclude`    | Exclude data using comma-separated data types. The available types are: `content`, `files`, and `config`.                                    |
| `--only`       | Include only these data. The available types are: `content`, `files`, and `config`.                                                          |
| `--throttle` | Time in milliseconds to inject an artificial delay between the "chunks" during a transfer. |
| `--verbose` | Enable verbose logs. |

:::caution
Either `--to` or `--from` is required.
:::

:::tip Tips
* Data transfers are authorized by transfer tokens, which are [managed from the admin panel](/cms/features/data-management#admin-panel-settings). From the admin panel, you can manage role-based permissions to tokens including `view`, `create`, `read`, `regenerate` and `delete`.
* It might be convenient to store your transfer tokens into [environment variables](/cms/configurations/environment) to avoid copying/pasting. Just ensure that these tokens are not pushed to public repositories.
:::

:::warning
When using nginx and a server that proxies requests into a localhost, issues might occur. To prevent them, ensure all the headers are forwarded correctly by changing the configuration file in `/etc/nginx/sites-available/yourdomain` as follows:

```
server {
    listen 80;
    server_name <yourdomain>;
    location / {
        proxy_pass http://localhost:1337;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        include proxy_params;
    }
}
```

:::

## Generate a transfer token

:::prerequisites
A salt transfer token should be defined in the [admin panel configuration](/cms/configurations/admin-panel) file.
:::

The `strapi transfer` command requires a transfer token issued by the destination instance. To generate a transfer token in the admin panel use the instructions in the [User Guide](/cms/features/data-management#admin-panel-settings).

## Setup and run the data transfer

Initiating a data transfer depends on whether you want to push data to a remote instance or to pull data from the remote:

<Tabs>

<TabItem value="push" label="Push data to remote">

  1. Start the Strapi server for the destination instance.
  2. In a new terminal window, navigate to the root directory of the source instance.
  3. Run the following minimal command to initiate the transfer, ensuring `destinationURL` is the full URL to the admin panel (i.e., the URL includes the `/admin` part):

    <Tabs groupId="yarn-npm">

    <TabItem value="yarn" label="yarn">

    ```bash
    yarn strapi transfer --to destinationURL
    ```

    </TabItem>

    <TabItem value="npm" label="npm">

    ```bash
    npm run strapi transfer -- --to destinationURL
    ```

    </TabItem>

    </Tabs>
  
  4. Add the transfer token when prompted to do so.
  5. Answer **Yes** or **No** to the CLI prompt: "The transfer will delete all of the remote Strapi assets and its database. Are you sure you want to proceed?"

</TabItem>

<TabItem value="pull" label="Pull data from remote">

1. Start the Strapi server for the source instance.
2. In a new terminal window, navigate to the root directory of the destination instance.
  3. Run the following minimal command to initiate the transfer, ensuring `remoteURL` is the full URL to the admin panel (i.e., the URL includes the `/admin` part):

  <Tabs groupId="yarn-npm">

  <TabItem value="yarn" label="yarn">

  ```bash
  yarn strapi transfer --from remoteURL
  ```

  </TabItem>

  <TabItem value="npm" label="npm">

  ```bash
  npm run strapi transfer -- --from remoteURL
  ```

  </TabItem>

  </Tabs>

4. Add the transfer token when prompted to do so.
5. Answer **Yes** or **No** to the CLI prompt: "The transfer will delete all of the local Strapi assets and its database. Are you sure you want to proceed?".

</TabItem>
</Tabs>

## Bypass all `transfer` command line prompts

When using the `strapi transfer` command, you are required to confirm that the transfer will delete the existing database contents. The `--force` flag allows you to bypass this prompt. This option is useful for implementing `strapi transfer` programmatically. You must pass the `to-token` option with the transfer token if you use the `--force` option.

:::caution
The `--force` option bypasses all warnings about content deletion.
:::

### Example: bypass the `transfer` command line prompts with `--force`

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi transfer --to https://example.com/admin --to-token my-transfer-token --force
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi transfer -- --to https://example.com/admin --to-token my-transfer-token --force
```

</TabItem>

</Tabs>

## Include only specified data types during transfer

The default `strapi transfer` command transfers your content (entities and relations), files (assets), project configuration, and schemas. The `--only` option allows you to transfer only the listed items by passing a comma-separated string with no spaces between the types. The available values are `content`, `files`, and `config`. Schemas are always transferred, as schema matching is used for `strapi transfer`.

### Example: only transfer files

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi transfer --to https://example.com/admin --only files
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi transfer -- --to https://example.com/admin --only files
```

</TabItem>

</Tabs>

## Exclude data types during transfer

The default `strapi transfer` command transfers your content (entities and relations), files (assets), project configuration, and schemas. The `--exclude` option allows you to exclude content, files, and the project configuration by passing these items in a comma-separated string with no spaces between the types. You can't exclude the schemas, as schema matching is used for `strapi transfer`.

### Example: exclude files from transfer

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi transfer --to https://example.com/admin --exclude files
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi transfer -- --to https://example.com/admin --exclude files
```

</TabItem>

</Tabs>

:::warning
Any types excluded from the transfer will be deleted in your destination instance. For example, if you exclude `config` the project configuration in your destination instance will be deleted.
:::

## Manage data transfer with environment variables

The environment variable `STRAPI_DISABLE_REMOTE_DATA_TRANSFER` is available to disable remote data transfer. In addition to the [RBAC permissions](/cms/features/rbac#plugins-and-settings) in the admin panel this can help you secure your Strapi application. To use `STRAPI_DISABLE_REMOTE_DATA_TRANSFER` you can add it to your `.env` file or preface the `start` script. See the following example:

```bash
STRAPI_DISABLE_REMOTE_DATA_TRANSFER=true yarn start
```

Additional details on using environment variables in Strapi are available in the [Environment configurations documentation](/cms/configurations/environment).

## Test the transfer command locally

The `transfer` command is not intended for transferring data between two local instances. The [`export`](/cms/data-management/export) and [`import`](/cms/data-management/import) commands were designed for this purpose. However, you might want to test `transfer` locally on test instances to better understand the functionality before using it with a remote instance. The following documentation provides a fully-worked example of the `transfer` process.

### Create and clone a new Strapi project

1. Create a new Strapi project using the installation command:

   ```bash
   npx create-strapi-app@latest <project-name> --quickstart
   ```

2. Create at least 1 content type in the project. See the [Quick Start Guide](/cms/quick-start) if you need instructions on creating your first content type.

   :::caution
   Do not add any data to your project at this step.
   :::

3. Commit the project to a git repository:

   ```bash
   git init
   git add .
   git commit -m "first commit"
   ```

4. Clone the project repository:

   ```bash
   cd .. # move to the parent directory
   git clone <path to created git repository>.git/ <new-instance-name>
   ```

### Add data to the first Strapi instance

1. Return to the first Strapi instance and add data to the content type.
2. Stop the server on the first instance.

### Create a transfer token

1. Navigate to the second Strapi instance and run the `build` and `start` commands in the root directory:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn build && yarn start
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run build && npm run start
```

</TabItem>

</Tabs>

2. Register an admin user.
3. [Create and copy a transfer token](/cms/features/data-management#admin-panel-settings).
4. Leave the server running.

### Transfer your data

1. Return the the first Strapi instance.
2. In the terminal run the `strapi transfer` command:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn strapi transfer --to http://localhost:1337/admin
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run strapi transfer -- --to http://localhost:1337/admin
```

</TabItem>

</Tabs>

3. When prompted, apply the transfer token.
4. When the transfer is complete you can return to the second Strapi instance and see that the content is successfully transferred.

:::tip
In some cases you might receive a connection refused error targeting `localhost`. Try changing the address to <ExternalLink to="http://127.0.0.1:1337/admin" text="http://127.0.0.1:1337/admin"/>.
:::

<FeedbackPlaceholder />


 This is the content for the doc docusaurus/docs/cms/database-migrations.md 

 ---
title: Database migrations
description: Strapi database migrations are ways to modify the database
---

# Database migrations

Database migrations exist to run one-time queries against the database, typically to modify the tables structure or the data when upgrading the Strapi application. These migrations are run automatically when the application starts and are executed before the automated schema migrations that Strapi also performs on boot.

:::callout üöß  Experimental feature
Database migrations are experimental. This feature is still a work in progress and will continue to be updated and improved. In the meantime, feel free to ask for help on the <ExternalLink to="https://forum.strapi.io/" text="forum"/> or on the community <ExternalLink to="https://discord.strapi.io" text="Discord"/>.
:::

## Understanding database migration files

Migrations are run using JavaScript migration files stored in `./database/migrations`.

Strapi automatically detects migration files and run them once at the next startup in alphabetical order. Every new file is executed once. Migrations are run before the database tables are synced with the content-types schemas.

:::warning
* Currently Strapi does not support down migrations. This means that if you need to revert a migration, you will have to do it manually. It is planned to implement down migrations in the future but no timeline is currently available.

* Strapi will delete any unknown tables without warning. This means that database migrations can only be used to keep data when changing the Strapi schema. The `forceMigration` and `runMigrations` [database configuration parameters](/cms/configurations/database#settings-configuration-object) can be used to fine-tune the database migrations behavior.
:::

Migration files should export the function `up()`, which is used when upgrading (e.g. adding a new table `my_new_table`).

The `up()` function runs in a database transaction which means if a query fails during the migration, the whole migration is cancelled, and no changes are applied to the database. If another transaction is created within the migration function, it will act as a nested transaction.

:::note
There is no CLI to manually execute the database migrations.
:::

## Creating a migration file

To create a migration file:

1. In the `./database/migrations` folder, create a new file named after the date and the name of the migration (e.g. `2022.05.10T00.00.00.name-of-my-migration.js`). Make sure that the file name follows this naming pattern, because the alphabetical order of the files defines the order in which the migrations have to run.

2. Copy and paste the following template in the previously created file:

```jsx
'use strict'

async function up(knex) {}

module.exports = { up };
```

3. Fill in the template by adding actual migration code inside the `up()` function.
`up()` receives a <ExternalLink to="https://knexjs.org/" text="Knex instance"/>, already in a transaction state, that can be used to run the database queries.

<details>
<summary>Example of migration file</summary>

```jsx title="./database/migrations/2022.05.10T00.00.00.name-of-my-migration.js"

module.exports = {
  async up(knex) {
    // You have full access to the Knex.js API with an already initialized connection to the database

    // Example: renaming a table
    await knex.schema.renameTable('oldName', 'newName');

    // Example: renaming a column
    await knex.schema.table('someTable', table => {
      table.renameColumn('oldName', 'newName');
    });

    // Example: updating data
    await knex.from('someTable').update({ columnName: 'newValue' }).where({ columnName: 'oldValue' });
  },
};
```

</details>

### Using Strapi Instance for migrations

:::danger
If a user opts not to use Knex directly for migrations and instead utilizes the Strapi instance, it is important to wrap the migration code with `strapi.db.transaction()`. Failure to do so may result in migrations not rolling back if an error occurs.
:::

<details>
<summary>Example of migration file with Strapi instance</summary>

```jsx title="./database/migrations/2022.05.10T00.00.00.name-of-my-migration.js"
module.exports = {
  async up() {
    await strapi.db.transaction(async () => {
      // Your migration code here

      // Example: creating new entries
      await strapi.entityService.create('api::article.article', {
        data: {
          title: 'My Article',
        },
      });

      // Example: custom service method
      await strapi.service('api::article.article').updateRelatedArticles();
    });
  },
};
```

</details>

## Handling migrations with TypeScript code

By default Strapi looks for migration files in the source directory rather than the build directory when using TypeScript. This means that TypeScript migrations won't be found and executed properly unless you configure Strapi to look in the right place.

To enable TypeScript migrations in Strapi, you need to set the `useTypescriptMigrations` parameter to true in your database configuration. This setting tells Strapi to look for migrations in the build directory instead of the source directory.

Here's how to configure it in your database settings:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/config/database.js"
module.exports = ({ env }) => ({
  connection: {
    // Your database connection settings
  },
  settings: {
    useTypescriptMigrations: true
  }
});
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```tsx title="/config/database.ts"
export default ({ env }) => ({
  connection: {
    // Your database connection settings
  },
  settings: {
    useTypescriptMigrations: true
  }
});
```

</TabItem>
</Tabs>

Additionally, if you want to continue using existing JavaScript migrations alongside TypeScript migrations, you can set `allowJs: true` in your `tsconfig.json` file's compiler options, as mentioned in the [database configuration documentation](/cms/configurations/database#settings-configuration-object).


 This is the content for the doc docusaurus/docs/cms/database-transactions.md 

 ---
title: Database transactions
description: Conceptual guide to transactions in Strapi
tags:
  - database
  - experimental
---

# Database transactions

:::caution
This is an experimental feature and is subject to change in future versions.
:::

Strapi 5 provide an API to wrap a set of operations in a transaction that ensures the integrity of data.

Transactions are a set of operations that are executed together as a single unit. If any of the operations fail, the entire transaction fails and the data is rolled back to its previous state. If all operations succeed, the transaction is committed and the data is permanently saved to the database.

## Usage

Transactions are handled by passing a handler function into `strapi.db.transaction`:

```js
await strapi.db.transaction(async ({ trx, rollback, commit, onCommit, onRollback }) => {
  // It will implicitly use the transaction
  await strapi.entityService.create();
  await strapi.entityService.create();
});
```

After the transaction handler is executed, the transaction is committed if all operations succeed. If any of the operations throws, the transaction is rolled back and the data is restored to its previous state.

:::note
Every `strapi.entityService` or `strapi.db.query` operation performed in a transaction block will implicitly use the transaction.
:::

### Transaction handler properties

The handler function receives an object with the following properties:

| Property     | Description                                                                                 |
| ------------ | ------------------------------------------------------------------------------------------- |
| `trx`        | The transaction object. It can be used to perform knex queries within the transaction.      |
| `commit`     | Function to commit the transaction.                                                         |
| `rollback`   | Function to rollback the transaction.                                                       |
| `onCommit`   | Function to register a callback that will be executed after the transaction is committed.   |
| `onRollback` | Function to register a callback that will be executed after the transaction is rolled back. |

### Nested transactions

Transactions can be nested. When a transaction is nested, the inner transaction is committed or rolled back when the outer transaction is committed or rolled back.

```js
await strapi.db.transaction(async () => {
  // It will implicitly use the transaction
  await strapi.entityService.create();

  // Nested transactions will implicitly use the outer transaction
  await strapi.db.transaction(async ({}) => {
    await strapi.entityService.create();
  });
});
```

### onCommit and onRollback

The `onCommit` and `onRollback` hooks can be used to execute code after the transaction is committed or rolled back.

```js
await strapi.db.transaction(async ({ onCommit, onRollback }) => {
  // It will implicitly use the transaction
  await strapi.entityService.create();
  await strapi.entityService.create();

  onCommit(() => {
    // This will be executed after the transaction is committed
  });

  onRollback(() => {
    // This will be executed after the transaction is rolled back
  });
});
```

### Using knex queries

Transactions can also be used with knex queries, but in those cases `.transacting(trx)` must be explicitly called.

```js
await strapi.db.transaction(async ({ trx, rollback, commit }) => {
  await knex('users').where('id', 1).update({ name: 'foo' }).transacting(trx);
});
```

## When to use transactions

Transactions should be used in cases where multiple operations should be executed together and their execution is dependent on each other. For example, when creating a new user, the user should be created in the database and a welcome email should be sent to the user. If the email fails to send, the user should not be created in the database.

## When not to use transactions

Transactions should not be used for operations that are not dependent on each other since it can result in performance penalties.

## Potential problems of transactions

Performing multiple operations within a transaction can lead to locking, which can block the execution of transactions from other processes until the original transaction is complete.

Furthermore, transactions can stall if they are not committed or rolled back appropriately.

For example, if a transaction is opened but there is a path in your code that does not close it, the transaction will be left open indefinitely and could cause instability until your server is restarted and the connection is forced to close. These issues can be difficult to debug, so use transactions with care in the cases they are necessary.


 This is the content for the doc docusaurus/docs/cms/deployment.md 

 ---
title: Deployment
displayed_sidebar: cmsSidebar
description: Learn how to develop locally with Strapi and deploy Strapi with various hosting options.
tags:
- database deployment
- deployment
- project creation
- hosting provider
- hosting server
---

import DatabaseRequire from '/docs/snippets/database-require.md'
import HardwareRequire from '/docs/snippets/hardware-require.md'
import OperatingSystemRequire from '/docs/snippets/operating-system-require.md'
import InstallPrereq from '/docs/snippets/installation-prerequisites.md'

# Deployment

Strapi provides many deployment options for your project or application. Your Strapi applications can be deployed on traditional hosting servers or your preferred hosting provider.

The following documentation covers the basics of how to prepare Strapi for deployment on with several common hosting options.

:::strapi Strapi Cloud
You can use [Strapi Cloud](/cloud/intro) to quickly deploy and host your project.
:::

:::tip
If you already created a content structure with the Content-Type Builder and added some data through the Content Manager to your local (development) Strapi instance, you can leverage the [data management system](/cms/features/data-management) to transfer data from a Strapi instance to another one.

Another possible workflow is to first create the content structure locally, push your project to a git-based repository, deploy the changes to production, and only then add content to the production instance.
:::

## General guidelines

### Hardware and software requirements

To provide the best possible environment for Strapi the following requirements apply to development (local) and staging and production workflows.

<InstallPrereq />

- Standard build tools for your OS (the `build-essentials` package on most Debian-based systems)
- Hardware specifications for your server (CPU, RAM, storage):

  <HardwareRequire components={props.components} />

- A supported database version:
<DatabaseRequire components={props.components} />

:::strapi Database deployment
Deploying databases along with Strapi is covered in the [databases guide](/cms/configurations/database#databases-installation).
:::

- A supported operating system:

  <OperatingSystemRequire components={props.components} />

### Application Configuration

<br/>

#### 1. Configure

We recommend using environment variables to configure your application based on the environment, for example:

```js title="/config/server.js"

module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
});
```

Then you can create a `.env` file or directly set environment variables in your chosen deployment platform:

```
HOST=10.0.0.1
PORT=1338
```

:::tip
To learn more about configuration details, see the [configurations](/cms/configurations) documentation.
:::

#### 2. Launch the server

Before running your server in production you need to build your admin panel for production:

<Tabs groupId="yarn-npm-windows">

<TabItem value="yarn" label="yarn">

```bash
NODE_ENV=production yarn build
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
NODE_ENV=production npm run build
```

</TabItem>

<TabItem value="windows" label="windows">

```bash
npm install cross-env
```

Then in your `package.json` scripts section:

```bash
"build:win": "cross-env NODE_ENV=production npm run build",
```

And run:

```bash
npm run build:win
```

</TabItem>
</Tabs>

Run the server with the `production` settings:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
NODE_ENV=production yarn start
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
NODE_ENV=production npm run start
```

</TabItem>

<TabItem value="windows" label="windows">

```bash
npm install cross-env
```

Then in your `package.json` scripts section:

```bash
"start:win": "cross-env NODE_ENV=production npm start",
```

And run:

```bash
npm run start:win
```

</TabItem>

</Tabs>

:::caution
We highly recommend using <ExternalLink to="https://github.com/Unitech/pm2/" text="pm2"/> to manage your process.
:::

If you need a server.js file to be able to run `node server.js` instead of `npm run start` then create a `./server.js` file as follows:

```js title="path: ./server.js"

const strapi = require('@strapi/strapi');
strapi.createStrapi(/* {...} */).start();
```

:::caution

If you are developing a `TypeScript`-based project you must provide the `distDir` option to start the server.
For more information, consult the [TypeScript documentation](/cms/typescript/development#use-the-createstrapi-factory).
:::

### Advanced configurations

If you want to host the administration on another server than the API, [please take a look at this dedicated section](/cms/configurations/admin-panel#deploy-on-different-servers).

## Additional resources

:::prerequisites
* Your Strapi project is [created](/cms/installation) and its code is hosted on GitHub.
* You have read the [general deployment guidelines](/cms/deployment#general-guidelines).
:::

The <ExternalLink to="https://strapi.io/integrations" text="integrations page"/> of the Strapi website include information on how to integrate Strapi with many resources, including how to deploy Strapi on the following 3rd-party platforms:

<CustomDocCard emoji="üîó" small title="Deploy Strapi on AWS"  link="https://strapi.io/integrations/aws" />

<CustomDocCard emoji="üîó" small title="Deploy Strapi on Azure" link="https://strapi.io/integrations/azure" />

<CustomDocCard emoji="üîó" small title="Deploy Strapi on DigitalOcean App Platform"  link="https://strapi.io/integrations/digital-ocean" />

<CustomDocCard emoji="üîó" small title="Deploy Strapi on Heroku" link="https://strapi.io/integrations/heroku" />

<br/>

In addition, community-maintained guides for additional providers are available in the <ExternalLink to="https://forum.strapi.io/c/community-guides/28" text="Strapi Forum"/>. This includes the following guides:

<CustomDocCard emoji="üîó" small title="Proxying with Caddy" link="https://forum.strapi.io/t/caddy-proxying-with-strapi/" />
<CustomDocCard emoji="üîó" small title="Proxying with HAProxy" link="https://forum.strapi.io/t/haproxy-proxying-with-strapi/" />
<CustomDocCard emoji="üîó" small title="Proxying with NGinx" link="https://forum.strapi.io/t/nginx-proxing-with-strapi/" />
<CustomDocCard emoji="üîó" small title="Using the PM2 process manager" link="https://forum.strapi.io/t/how-to-use-pm2-process-manager-with-strapi/" />

<br/>

The following external guide(s), not officially maintained by Strapi, might also help deploy Strapi on various environments:

<CustomDocCard icon="arrow-square-out" small title="[Microsoft Community] Deploying on Azure" link="https://techcommunity.microsoft.com/blog/appsonazureblog/strapi-on-app-service-quick-start/4401398" />

:::strapi Multi-tenancy
If you're looking for multi-tenancy options, the Strapi Blog has a <ExternalLink text="comprehensive guide" to="https://strapi.io/blog/multi-tenancy-in-strapi-a-comprehensive-guide" />.
:::

 This is the content for the doc docusaurus/docs/cms/error-handling.md 

 ---
title: Error handling
displayed_sidebar: cmsSidebar
description: With Strapi's error handling feature it's easy to send and receive errors in your application.
tags:
- ctx
- GraphQL API
- GraphQL errorsa
- policies
- middlewares
- REST API
- REST errors
- throw errors
- strapi-utils
---

# Error handling

Strapi is natively handling errors with a standard format.

There are 2 use cases for error handling:

- As a developer querying content through the [REST](/cms/api/rest) or [GraphQL](/cms/api/graphql) APIs, you might [receive errors](#receiving-errors) in response to the requests.
- As a developer customizing the backend of your Strapi application, you could use controllers and services to [throw errors](#throwing-errors).

## Receiving errors

Errors are included in the response object with the `error` key and include information such as the HTTP status code, the name of the error, and additional information.

### REST errors

Errors thrown by the REST API are included in the [response](/cms/api/rest#requests) that has the following format:

```json
{
  "data": null,
  "error": {
    "status": "", // HTTP status
    "name": "", // Strapi error name ('ApplicationError' or 'ValidationError')
    "message": "", // A human readable error message
    "details": {
      // error info specific to the error type
    }
  }
}
```

### GraphQL errors

Errors thrown by the GraphQL API are included in the response that has the following format:

```json
{ "errors": [
    {
      "message": "", // A human reable error message
      "extensions": {
        "error": {
          "name": "", // Strapi error name ('ApplicationError' or 'ValidationError'),
          "message": "", // A human reable error message (same one as above);
          "details": {}, // Error info specific to the error type
        },
        "code": "" // GraphQL error code (ex: BAD_USER_INPUT)
      }
    }
  ],
  "data": {
    "graphQLQueryName": null
  }
}
```

## Throwing errors

<br/>

### Controllers and middlewares

The recommended way to throw errors when developing any custom logic with Strapi is to have the [controller](/cms/backend-customization/controllers) or [middleware](/cms/backend-customization/middlewares) respond with the correct status and body.

This can be done by calling an error function on the context (i.e. `ctx`). Available error functions are listed in the <ExternalLink to="https://github.com/jshttp/http-errors#list-of-all-constructors" text="http-errors documentation"/> but their name should be lower camel-cased to be used by Strapi (e.g. `badRequest`).

Error functions accept 2 parameters that correspond to the `error.message` and `error.details` attributes [received](#receiving-errors) by a developer querying the API:

- the first parameter of the function is the error `message`
- and the second one is the object that will be set as `details` in the response received

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js
// path: ./src/api/[api-name]/controllers/my-controller.js

module.exports = {
  renameDog: async (ctx, next) => {
    const newName = ctx.request.body.name;
    if (!newName) {
      return ctx.badRequest('name is missing', { foo: 'bar' })
    }
    ctx.body = strapi.service('api::dog.dog').rename(newName);
  }
}

// path: ./src/api/[api-name]/middlewares/my-middleware.js

module.exports = async (ctx, next) => {
  const newName = ctx.request.body.name;
  if (!newName) {
    return ctx.badRequest('name is missing', { foo: 'bar' })
  }
  await next();
}
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts
// path: ./src/api/[api-name]/controllers/my-controller.ts

export default {
  renameDog: async (ctx, next) => {
    const newName = ctx.request.body.name;
    if (!newName) {
      return ctx.badRequest('name is missing', { foo: 'bar' })
    }
    ctx.body = strapi.service('api::dog.dog').rename(newName);
  }
}

// path: ./src/api/[api-name]/middlewares/my-middleware.ts

export default async (ctx, next) => {
  const newName = ctx.request.body.name;
  if (!newName) {
    return ctx.badRequest('name is missing', { foo: 'bar' })
  }
  await next();
}
```

</TabItem>

</Tabs>

### Services and models lifecycles

Once you are working at a deeper layer than the controllers or middlewares there are dedicated error classes that can be used to throw errors. These classes are extensions of <ExternalLink to="https://nodejs.org/api/errors.html#errors_class_error" text="Node `Error` class"/> and are specifically targeted for certain use-cases.

These error classes are imported through the `@strapi/utils` package and can be called from several different layers. The following examples use the service layer but error classes are not just limited to services and model lifecycles. When throwing errors in the model lifecycle layer, it's recommended to use the `ApplicationError` class so that proper error messages are shown in the admin panel.

:::note
See the [default error classes](#default-error-classes) section for more information on the error classes provided by Strapi.
:::

#### Example: Throwing an error in a service**

This example shows wrapping a [core service](/cms/backend-customization/services#extending-core-services) and doing a custom validation on the `create` method:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="path: ./src/api/restaurant/services/restaurant.js"

const { errors } = require('@strapi/utils');
const { ApplicationError } = errors;
const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({
  async create(params) {
    let okay = false;

    // Throwing an error will prevent the restaurant from being created
    if (!okay) {
      throw new errors.ApplicationError('Something went wrong', { foo: 'bar' });
    }
  
    const result = await super.create(params);

    return result;
  }
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="path: ./src/api/[api-name]/policies/my-policy.ts"

import { errors } from '@strapi/utils';
import { factories } from '@strapi/strapi';

const { ApplicationError } = errors;

export default factories.createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({
  async create(params) {
    let okay = false;

    // Throwing an error will prevent the restaurant from being created
    if (!okay) {
      throw new errors.ApplicationError('Something went wrong', { foo: 'bar' });
    }
  
    const result = await super.create(params);

    return result;
  }
}));

```

</TabItem>

</Tabs>

#### Example: Throwing an error in a model lifecycle**

This example shows building a [custom model lifecycle](/cms/backend-customization/models#lifecycle-hooks) and being able to throw an error that stops the request and will return proper error messages to the admin panel. Generally you should only throw an error in `beforeX` lifecycles, not `afterX` lifecycles.

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="path: ./src/api/[api-name]/content-types/[api-name]/lifecycles.js"

const { errors } = require('@strapi/utils');
const { ApplicationError } = errors;

module.exports = {
  beforeCreate(event) {
    let okay = false;

    // Throwing an error will prevent the entity from being created
    if (!okay) {
      throw new errors.ApplicationError('Something went wrong', { foo: 'bar' });
    }
  },
};

```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="path: ./src/api/[api-name]/content-types/[api-name]/lifecycles.ts"

import { errors } from '@strapi/utils';
const { ApplicationError } = errors;

export default {
  beforeCreate(event) {
    let okay = false;

    // Throwing an error will prevent the entity from being created
    if (!okay) {
      throw new errors.ApplicationError('Something went wrong', { foo: 'bar' });
    }
  },
};
```

</TabItem>

</Tabs>

### Policies

[Policies](/cms/backend-customization/policies) are a special type of middleware that are executed before a controller. They are used to check if the user is allowed to perform the action or not. If the user is not allowed to perform the action and a `return false` is used then a generic error will be thrown. As an alternative, you can throw a custom error message using a nested class extensions from the Strapi `ForbiddenError` class, `ApplicationError` class (see [Default error classes](#default-error-classes) for both classes), and finally the <ExternalLink to="https://nodejs.org/api/errors.html#errors_class_error" text="Node `Error` class"/>.

The `PolicyError` class is available from `@strapi/utils` package and accepts 2 parameters:

- the first parameter of the function is the error `message`
- (optional) the second parameter is the object that will be set as `details` in the response received; a best practice is to set a `policy` key with the name of the policy that threw the error.

#### Example: Throwing a PolicyError in a custom policy

This example shows building a [custom policy](/cms/backend-customization/policies) that will throw a custom error message and stop the request.

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="path: ./src/api/[api-name]/policies/my-policy.js"

const { errors } = require('@strapi/utils');
const { PolicyError } = errors;

module.exports = (policyContext, config, { strapi }) => {
  let isAllowed = false;

  if (isAllowed) {
    return true;
  } else {
    throw new errors.PolicyError('You are not allowed to perform this action', {
      policy: 'my-policy',
      myCustomKey: 'myCustomValue',
    });
  }
}

```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="path: ./src/api/[api-name]/policies/my-policy.ts"

import { errors } from '@strapi/utils';
const { PolicyError } = errors;

export default (policyContext, config, { strapi }) => {
  let isAllowed = false;

  if (isAllowed) {
    return true;
  } else {
    throw new errors.PolicyError('You are not allowed to perform this action', {
      policy: 'my-policy',
      myCustomKey: 'myCustomValue',
    });
  }
};
```

</TabItem>

</Tabs>

### Default error classes

The default error classes are available from the `@strapi/utils` package and can be imported and used in your code. Any of the default error classes can be extended to create a custom error class. The custom error class can then be used in your code to throw errors.

<Tabs> 

<TabItem value="Application" label="Application">

The `ApplicationError` class is a generic error class for application errors and is generally recommended as the default error class. This class is specifically designed to throw proper error messages that the admin panel can read and show to the user. It accepts the following parameters:

| Parameter | Type | Description | Default |
| --- | --- | --- | --- |
| `message` | `string` | The error message | `An application error occured` |
| `details` | `object` | Object to define additional details | `{}` |

```js
throw new errors.ApplicationError('Something went wrong', { foo: 'bar' });
```

</TabItem>

<!-- Not sure if it's worth keeping this tab or not as it's very specific to Strapi internal use-cases -->
<!-- ::: tab Validation

The `ValidationError` and `YupValidationError` classes are specific error classes designed to be used with the built in validations system and specifically format the errors coming from <ExternalLink to="https://www.npmjs.com/package/yup" text="Yup"/>. The `ValidationError` does not accept any parameters but the `YupValidationError` accepts the following parameters:

| Parameter | Type | Description | Default |
| --- | --- | --- | --- |
| `message` | `string` | The error message | - |
| `details` | `object` | Object to define additional details | `{ yupErrors }` |

```js

```js
throw new PolicyError('Something went wrong', { policy: 'my-policy' });
```

::: -->

<TabItem value="Pagination" label="Pagination">

The `PaginationError` class is a specific error class that is typically used when parsing the pagination information from [REST](/cms/api/rest/sort-pagination#pagination), [GraphQL](/cms/api/graphql#pagination), or the [Document Service](/cms/api/document-service). It accepts the following parameters:

| Parameter | Type | Description | Default |
| --- | --- | --- | --- |
| `message` | `string` | The error message | `Invalid pagination` |

```js
throw new errors.PaginationError('Exceeded maximum pageSize limit');
```

</TabItem>

<TabItem value="NotFound" label="NotFound">

The `NotFoundError` class is a generic error class for throwing `404` status code errors. It accepts the following parameters:

| Parameter | Type | Description | Default |
| --- | --- | --- | --- |
| `message` | `string` | The error message | `Entity not found` |

```js
throw new errors.NotFoundError('These are not the droids you are looking for');
```

</TabItem>

<TabItem value="Forbidden" label="Forbidden">

The `ForbiddenError` class is a specific error class used when a user either doesn't provide any or the correct authentication credentials. It accepts the following parameters:

| Parameter | Type | Description | Default |
| --- | --- | --- | --- |
| `message` | `string` | The error message | `Forbidden access` |

```js
throw new errors.ForbiddenError('Ah ah ah, you didn\'t say the magic word');
```

</TabItem>

<TabItem value="Unauthorized" label="Unauthorized">

The `UnauthorizedError` class is a specific error class used when a user doesn't have the proper role or permissions to perform a specific action, but has properly authenticated. It accepts the following parameters:

| Parameter | Type | Description | Default |
| --- | --- | --- | --- |
| `message` | `string` | The error message | `Unauthorized` |

```js
throw new errors.UnauthorizedError('You shall not pass!');
```

</TabItem>

<TabItem value="NotImplemented" label="NotImplemented">

The `NotImplementedError` class is a specific error class used when the incoming request is attempting to use a feature that is not currently implemented or configured. It accepts the following parameters:

| Parameter | Type | Description | Default |
| --- | --- | --- | --- |
| `message` | `string` | The error message | `This feature isn't implemented` |

```js
throw new errors.NotImplementedError('This isn\'t implemented', { feature: 'test', implemented: false });
```

</TabItem>

<TabItem value="PayloadTooLarge" label="PayloadTooLarge">

The `PayloadTooLargeError` class is a specific error class used when the incoming request body or attached files exceed the limits of the server. It accepts the following parameters:

| Parameter | Type | Description | Default |
| --- | --- | --- | --- |
| `message` | `string` | The error message | `Entity too large` |

```js
throw new errors.PayloadTooLargeError('Uh oh, the file too big!');
```

</TabItem>

<TabItem value="Policy" label="Policy">

The `PolicyError` class is a specific error designed to be used with [route policies](/cms/backend-customization/policies). The best practice recommendation is to ensure the name of the policy is passed in the `details` parameter. It accepts the following parameters:

| Parameter | Type | Description | Default |
| --- | --- | --- | --- |
| `message` | `string` | The error message | `Policy Failed` |
| `details` | `object` | Object to define additional details | `{}` |

```js
throw new errors.PolicyError('Something went wrong', { policy: 'my-policy' });
```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/cms/faq.md 

 ---
title: FAQ
description: Find some answers and solutions to most common issues that you may experience when working with Strapi.
tags:
- content-type
- admin panel
- deployment
- migration
- Content Manager 
- serverless environment
- PaaS
- plugins
- dynamic zones
- UUID
- default ID type
- default ID name
- SSL
- typescript

---

# Frequently Asked Questions

Below are answers and solutions to most common issues that you may experience when working with Strapi.

## Why can't I create or update content-types in production/staging?

Strapi stores model configuration files (what defines the model schema) in files such as `./src/api/restaurant/content-types/restaurant/schema.json`. Due to how Node.js works, in order for changes to take effect, that would require Node to restart the server. This could potentially cause downtime of your production service and likewise these changes should be tracked in some kind of source control.

Generally your "flow" of development would follow the following path:

- Development - Develop your Strapi application locally on your host machine, then push changes into source control
- Staging - Deploy changes from source control to a "production-like" environment for testing
- Production - If no other changes are needed, deploy into production
- Repeat as needed, it is recommended that you properly version and test your application as you go

At this time and in the future there is no plan to allow model creating or updating while in a production environment, and there is currently no plans to move model settings into the database. There are no known nor recommended workarounds for this.

## Does Strapi handle deploying or migrating of content?

Strapi does offer a feature known as [Data Transfer](/cms/data-management/transfer) that allows you to export and import content from one Strapi instance to another or exporting and importing from a file archive. This is useful for migrating content from one environment to another.

## User can't login to the admin panel

With the release of the Strapi 3.0 beta version a fundamental change occurred in that the end users (REST and GraphQL users) were split from the Administrators (admin panel users) in such a way that normal users can not be given access to the admin panel. If you would like to read more on why this change was done, you can read the Strapi <ExternalLink to="https://strapi.io/blog/why-we-split-the-management-of-the-admin-users-and-end-users" text="blog post"/> about it.

Strapi has released the Admin & Permissions (RBAC - Role-Based Access Control) that does allow for some degree of control over what users can access within the admin panel and includes some field level permissions. You can also give roles specific permissions for things like content-types, single types, plugins, and settings.

## Why are my application's database and uploads resetting on PaaS-type services?

If you used `--quickstart` to create your Strapi project, by default this uses the SQLite database. PaaS systems (Heroku, DigitalOcean Apps, Google App Engine, etc.) file systems are typically <ExternalLink to="https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem" text="ephemeral"/> or read-only meaning that each time a dyno (container) is reset all filesystem changes are lost. And since both SQLite and local uploads are stored on the filesystem, any changes made to these since the last dyno reset will be deleted. Typically dynos are reset at least once a day, and in most cases multiple times per day or when new code is pushed to these services.

It is recommended you use a database add-on like Heroku's PostgreSQL. For file uploads, you will need to use one of the 3rd party providers such as Cloudinary or AWS S3.

## How can I upgrade my free Strapi Cloud project to a paid plan?

Whenever you're ready to upgrade your free project to one of the <ExternalLink to="https://strapi.io/pricing-cloud" text="paid plans"/>, please use the _Plans_ section of your Strapi Cloud project's settings (see [Cloud documentation](/cloud/projects/settings#upgrading-to-another-plan) for more details).

## Can Strapi be run in serverless environments?

Strapi is not well suited for serverless environments due to how the application is structured. Several actions happen while Strapi is booting that can take several seconds. Serverless deployment usually requires an application to cold boot very quickly. Strapi is designed to run as an always-on service, and we don't plan to decrease the cold boot time for the foreseeable future. Therefore, running Strapi in serverless environments is not a great experience, as every request will take seconds to respond to instead of milliseconds. Choosing between a cold boot or a warm boot is an architectural decision that many software developers need to take from a very early stage, so please consider this when choosing to use Strapi.

## Can I store my Content Manager layout configurations in the model settings?

Currently Strapi does not support this, a `config:dump` and `config:restore` command has been added to make migration of these settings easier when moving between different deployments and environments.

We don't offer the ability to store these configurations in the model settings for several reasons:

- It will create conflicts in case of content internationalization and translations in the admin interface.
- The layout might be different according to the roles and permissions.
- While the model is the same whatever the content created, the contribution interface can be different. For instance, we have an idea to create a mobile application for contributors only. The labels and layout configurations could be different according the device & interface.

For all these reasons, and others, we think it'll be a mistake and might confuse users if we store the configuration in the model settings file. The final solution is to make the migration and deployment across environment easier.

## How do I customize a plugin?

Strapi uses a system called [extension](/cms/plugins-development/plugins-extension) as plugins are stored in the `node_modules` folder. Due to this extensions work by Strapi utilizing programmatic hooks to override certain parts of the plugin.

## Can I add my own 3rd party auth provider?

Yes, you can either follow the following [documentation](/cms/configurations/users-and-permissions-providers/new-provider-guide) or you can take a look at the <ExternalLink to="https://github.com/strapi/strapi/tree/master/packages/plugins/users-permissions" text="users-permissions"/> code and submit a pull request to include the provider for everyone. Eventually Strapi does plan to move from the current grant/purest provider to a split natured system similar to the upload providers.

There is currently no ETA on this migration however.

## Does Strapi allow me to change the default ID type or name?

No, currently does not have the ability to allow for changing the default id name nor does it allow you to switch the data type (such as UUID in PostgreSQL), support for this is being looked at in future.

## Can you filter and/or deep filter on dynamic zones and polymorphic relations?

At this time we do not plan to allow for filtering on dynamic zones or polymorphic relations due to various complexity and performance issues that come from doing so.

## How do I setup SSL with Strapi?

Strapi implements no SSL solution natively, this is due to the fact that it is extremely insecure to directly offer a Node.js application to the public web on a low port.

On Linux based operating systems you need root permissions to bind to any port below 1024 and with typical SSL being port 443 you would need to run your application as root.

Likewise since Strapi is Node.js based, in order for changes with the SSL certificate to take place (say when it expires) you would need to restart your application for that change to take effect.

Due to these two issues, it is recommended you use a proxy application such as <ExternalLink to="https://forum.strapi.io/t/nginx-proxing-with-strapi/" text="Nginx"/>, <ExternalLink to="https://forum.strapi.io/t/caddy-proxying-with-strapi/40616" text="Caddy"/>, <ExternalLink to="https://forum.strapi.io/t/haproxy-proxying-with-strapi/" text="HAProxy"/>, Apache, Traefik, or many others to handle your edge routing to Strapi. There are settings in the environment [server.json](/cms/configurations/server) to handle upstream proxies. The proxy block requires all settings to be filled out and will modify any backend plugins such as authentication providers and the upload plugin to replace your standard `localhost:1337` with the proxy URL.

## Can I use TypeScript in a Strapi project?

TypeScript is supported in Strapi projects from v4.2.0-beta.1 TypeScript code examples are available throughout the core Developer Documentation and a [dedicated TypeScript support page](/cms/typescript).

## How to fix the build error `Error: Cannot find module @strapi/XXX`

:::caution
Before trying the fix below, ensure you've executed your package manager's install command in your project.
:::

Strapi in its current version requires dependency hoisting.

By default, most package managers enable hoisting, however, if it's not functioning as expected, you can try enforcing it via your package manager's configuration.

- If you are using npm or pnpm: Add `hoist=true` to your project's `.npmrc` file. Learn more about this from the <ExternalLink to="https://pnpm.io/npmrc#hoist" text="official pnpm documentation"/>
- If you are using Yarn: Set `nmHoistingLimits` in your `.yarnrc` file. More details can be found in the <ExternalLink to="https://yarnpkg.com/configuration/yarnrc#nmHoistingLimits" text="Yarn official documentation"/>

## Is X feature available yet?

You can see the <ExternalLink to="https://feedback.strapi.io/" text="public roadmap"/> to see which feature requests are currently being worked on and which have not been started yet, and to add new feature requests.


 This is the content for the doc docusaurus/docs/cms/features/admin-panel.md 

 ---
title: Admin panel
description: Learn to use the admin panel.
toc_max_heading_level: 5
tags:
- admin panel
- profile
- light mode
- dark mode
---

# Administration panel

The admin panel is the back office of your Strapi application. From the admin panel, you will be able to manage content-types and write their actual content, but also manage users, both administrators and end users of your Strapi application.

<ThemedImage
alt="Homepage of the Admin Panel"
sources={{
    light: '/img/assets/admin-homepage/admin-panel-homepage-with-tour.png',
    dark: '/img/assets/admin-homepage/admin-panel-homepage-with-tour_DARK.png',
  }}
/>

:::tip
You can [create your own widgets](/cms/admin-panel-customization/homepage) to customize the admin panel's homepage.
:::

## Overview

:::prerequisites
There are a few factors that you should keep in mind when using the admin panel, as they could modify the interface and your experience with it.

- **Development, Staging or Production Environment** <br/> Your content structure and application configuration change status: from development environment to production or staging environment once deployed. Some features are only available in development. Check the Identity Cards to know when features are usable.

- **License and Pricing Plans** <br/> Some features's availability or limits depend on whether your application is using the free Community Edition, the <ExternalLink to="https://strapi.io/pricing-self-hosted" text="Growth plan"/>, or the <ExternalLink to="https://strapi.io/pricing-self-hosted" text="Enterprise plan"/>. Look for the <GrowthBadge /> and <EnterpriseBadge /> badges in the docs.

- **Roles and Permissions** <br/> Some features and the content itself are ruled by a system of permissions that can be defined at a detailed level. Depending on your role and permissions, you may not be able to access all the features and options. Read the [RBAC feature documentation](/cms/features/rbac) for more information.

- **Future flags** <br/> Some incoming Strapi features are not yet ready to be shipped to all users, but Strapi still offers community users the opportunity to provide early feedback. These experimental features require enabling the corresponding future flags. Look for the <FeatureFlagBadge /> badge in the docs and read the [Feature flags documentation](/cms/configurations/features#enabling-a-future-flag) for more information.
:::

<Guideflow lightId="dkd2m1lsgr" darkId="dkd2mjlugr"/>

## Configuration

**Path to configure the admin panel:** Account name or initials (bottom left hand corner) > Profile

If you are a new administrator, we recommend making sure your profile is all set, before diving into your Strapi application. From your administrator profile, you are able to modify your user information (name, username, email, password). You can also choose the language and mode of the interface for your Strapi application.

<ThemedImage
alt="Homepage of the Admin Panel"
sources={{
    light: '/img/assets/getting-started/user-information-profile.png',
    dark: '/img/assets/getting-started/user-information-profile_DARK.png',
  }}
/>

There are many more configuration and customization options available. See the following pages for more details:

<CustomDocCardsWrapper>
  <CustomDocCard icon="panorama" title="Code-based configuration" description="Configure the appearance, security, and features of the Strapi admin panel via the /config/admin file." link="/cms/configurations/admin-panel" />
  <CustomDocCard icon="wrench" title="Customization" description="Match your branding, replace the WYSIWYG editor, configure the bundler, extend features, and more." link="/cms/admin-panel-customization" />
</CustomDocCardsWrapper>

### Modifying profile information (name, email, username)

1. Go to the *Profile* section of your profile.
2. Fill in the following options:

| Profile & Experience | Instructions                                      |
| -------------------- | ------------------------------------------------- |
| First name           | Write your first name in the textbox.             |
| Last name            | Write your last name in the textbox.              |
| Email                | Write your complete email address in the textbox. |
| Username             | (optional) Write a username in the textbox.       |

3. Click on the **Save** button.

### Changing account password

1. Go to the *Change password* section of your profile.
2. Fill in the following options:

| Password modification | Instructions                                |
| --------------------- | ------------------------------------------- |
| Current password      | Write your current password in the textbox. |
| Password              | Write the new password in the textbox.      |
| Password confirmation | Write the same new password in the textbox. |

3. Click on the **Save** button.

:::tip
You can click on the <Icon name="eye" /> icon for the passwords to be shown.
:::

### Choosing interface language

In the *Experience* section of your profile, select your preferred language using the *Interface language* dropdown.

:::note
Keep in mind that choosing an interface language only applies to your account on the admin panel. Other users of the same application's admin panel can use a different language.
:::

### Choosing interface mode (light, dark)

By default, the chosen interface mode is based on your browser's mode. You can however, in the *Experience* section of your profile, manually choose either the Light Mode or Dark Mode using the *Interface mode* dropdown.

:::note
Keep in mind that choosing an interface mode only applies to your account on the admin panel.
:::

### Customizing the logo

**Path to configure the admin panel:** <Icon name="gear-six" /> *Settings > Global settings > Overview*

The default Strapi logos, displayed in the main navigation of a Strapi application and the authentication pages, can be modified.

1. Click on the upload area for *Menu logo* or *Auth logo*.
2. Upload your chosen logo, either by browsing files, drag & dropping the file in the right area, or by using a URL. The logo shouldn't be more than 750x750px. 
3. Click on the **Upload logo** button in the upload window.
4. Click on the **Save** button in the top right corner.

Once uploaded, the new logo can be replaced with another one <Icon name="plus" classes="ph-bold"/>, or reset <Icon name="arrow-clockwise" classes="ph-bold"/> with the default Strapi logo or the logo set in the configuration files.

:::note
Both logos can also be customized programmatically via the Strapi application's configuration files (see [Admin panel customization](/cms/admin-panel-customization/logos)). However, the logos uploaded via the admin panel supersedes any logo set through the configuration files.
:::

<ThemedImage
  alt="Custom logo settings"
  sources={{
    light: '/img/assets/settings/settings_custom-logo.png',
    dark: '/img/assets/settings/settings_custom-logo_DARK.png',
  }}
/>

## Usage

:::caution
In order to access the admin panel, your Strapi application must be launched, and you must be aware of the URL to its admin panel (e.g. `api.example.com/admin`).
:::

To access the admin panel:

1. Go to the URL of your Strapi application's admin panel.
2. Enter your credentials to log in.
3. Click on the **Login** button. You should be redirected to the homepage of the admin panel.

:::note
If you prefer or are required to log in via an SSO provider, please refer to the [Single Sign-On documentation](/cms/features/sso).
:::

<ThemedImage
alt="Login page"
sources={{
    light: '/img/assets/getting-started/login-page-sso.png',
    dark: '/img/assets/getting-started/login-page_DARK.png',
  }}
/>


 This is the content for the doc docusaurus/docs/cms/features/api-tokens.md 

 ---
title: API Tokens
description: Learn how you can use API tokens to manage end-users authentication.
sidebar_position: 2
toc_max_heading_level: 5
tags:
  - api tokens
  - admin panel
  - authentication
  - users & permissions
  - features
---

# API Tokens

API tokens allow users to authenticate REST and GraphQL API queries (see [APIs introduction](/cms/api/content-api)).

<IdentityCard>
  <IdentityCardItem icon="layout" title="Plan">
    Free feature
  </IdentityCardItem>
  
  <IdentityCardItem icon="user" title="Role and permission">
    Minimum "Access the API tokens settings page" in Roles > Settings - API tokens
  </IdentityCardItem>
  
  <IdentityCardItem icon="toggle-right" title="Activation">
    Available by default
  </IdentityCardItem>
  
  <IdentityCardItem icon="desktop" title="Environment">
    Available in both Development & Production environment
  </IdentityCardItem>
</IdentityCard>

<ThemedImage
alt="API tokens"
sources={{
    light: '/img/assets/settings/settings_pregen-api-tokens.png',
    dark: '/img/assets/settings/settings_pregen-api-tokens_DARK.png',
  }}
/>

## Configuration

Most configuration options for API tokens are available in the admin panel, and your Strapi project's code can be used to alter how API tokens are generated.

### Admin panel settings

**Path to configure the feature:** <Icon name="gear-six" /> _Settings > Global settings > API Tokens_

The _API Tokens_ interface displays a table listing all of the created API tokens. More specifically, it displays each API token's name, description, date of creation, and date of last use.

From there, you have the possibility to:

- click on the <Icon name="pencil-simple" /> to edit an API token's name, description, type, duration or [regenerate the token](#regenerating-an-api-token).
- click on the <Icon name="trash" /> to delete an API token.

:::note
Strapi pre-generates 2 API tokens for you, a Full access one and a Read-only one. Since tokens can be only seen once without encryption configured, you may want to [regenerate](#regenerating-an-api-token) them after setting up an encryption key to make them permanently viewable.
:::

#### Creating a new API token

1. Click on the **Create new API Token** button.
2. In the API token edition interface, configure the new API token:
   | Setting name | Instructions |
   | -------------- | ------------------------------------------------------------------------ |
   | Name | Write the name of the API token. |
   | Description | (optional) Write a description for the API token. |
   | Token duration | Choose a token duration: _7 days_, _30 days_, _90 days_, or _Unlimited_. |
   | Token type | Choose a token type: _Read-only_, _Full access_, or _Custom_. |
3. (optional) For the _Custom_ token type, define specific permissions for your API endpoints by clicking on the content-type name and using checkboxes to enable or disable permissions.
4. Click on the **Save** button. The new API token will be displayed at the top of the interface, along with a copy button <Icon name="copy" />.

<ThemedImage
alt="Custom API token"
sources={{
    light: '/img/assets/settings/settings_api-token-custom.png',
    dark: '/img/assets/settings/settings_api-token-custom_DARK.png',
  }}
/>

:::info Viewable tokens
If an encryption key is configured in your Strapi project (`admin.secrets.encryptionKey`), the newly created and regenerated API tokens will be **viewable at any time** in the admin panel.

If no encryption key is set, tokens will only be viewable **once**, immediately after creation or regeneration.
:::

#### Regenerating an API token

1. Click on the API token's edit button.
2. Click on the **Regenerate** button.
3. Click on the **Regenerate** button to confirm in the dialog.
4. Copy the new API token displayed at the top of the interface.

### Code-based configuration

New API tokens are generated using a salt. This salt is automatically generated by Strapi and stored in environment variables (the `.env` file) as `API_TOKEN_SALT`.

The salt can be customized:

- either by updating the string value for `apiToken.salt` in [your `/config/admin` file](/cms/configurations/admin-panel)
- or by creating an `API_TOKEN_SALT` [environment variable](/cms/configurations/environment#strapi) in the `.env` file of the project

:::caution
Changing the salt invalidates all the existing API tokens.
:::

#### Ensuring API tokens are visible in the admin panel

To allow persistent visibility of API tokens in the admin panel, an encryption key must be provided in [your `/config/admin` file](/cms/configurations/admin-panel) under `apiToken.secrets.encryptionKey`:

<Tabs groupId="js-ts">
<TabItem label="JavaScript" value="js">

```js title="/config/admin.js"
module.exports = ({ env }) => ({
  // other config parameters
  apiToken: {
    secrets: {
      encryptionKey: env('ENCRYPTION_KEY'),
    },
  }
});
```

</TabItem>

<TabItem label="TypeScript" value="ts">

```js title="/config/admin.ts"
export default ({ env }) => ({
  // other config parameters
  apiToken: {
    secrets: {
      encryptionKey: env('ENCRYPTION_KEY'),
    },
  }
});
```

</TabItem>
</Tabs>

This key is used to encrypt and decrypt token values. Without this key, tokens remain usable, but will not be viewable after initial display. New Strapi projects will have this key automatically generated.

## Usage

Using API tokens allows executing a request on [REST API](/cms/api/rest) or [GraphQL API](/cms/api/graphql) endpoints as an authenticated user.

API tokens can be helpful to give access to people or applications without managing a user account or changing anything in the Users & Permissions plugin.

When performing a request to Strapi's REST API, the API token should be added to the request's `Authorization` header with the following syntax: `bearer your-api-token`.

:::note
Read-only API tokens can only access the `find` and `findOne` functions.
:::


 This is the content for the doc docusaurus/docs/cms/features/audit-logs.md 

 ---
title: Audit Logs
description: Learn how you can use the Audit Logs feature of Strapi 5.
displayed_sidebar: cmsSidebar
sidebar_position: 2
toc_max_heading_level: 5
tags:
- audit logs
- admin panel
- Enterprise feature
- payload
- features
---

# Audit Logs
<EnterpriseBadge />

<VersionBadge version="4.6.0" />

The Audit Logs feature provides a searchable and filterable display of all activities performed by users of the Strapi application.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">CMS Enterprise plan</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">Super Admin role in the project's admin panel</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available by default, if required plan</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

<ThemedImage
  alt="Audit Logs panel"
  sources={{
    light: '/img/assets/settings/settings_audit-logs.png',
    dark: '/img/assets/settings/settings_audit-logs_DARK.png',
  }}
/>

## Usage

**Path to use the feature:** <Icon name="gear-six" /> Settings > Administration Panel - Audit Logs

The Audit Logs feature logs the following events:

| Event | Actions |
| --- | --- |
| Content Type | `create`, `update`, `delete` |
| Entry (draft/publish) | `create`, `update`, `delete`, `publish`, `unpublish` |
| Media | `create`, `update`, `delete` |
| Login / Logout | `success`, `fail` |
| Role / Permission | `create`, `update`, `delete` |
| User | `create`, `update`, `delete` |

For each log item, the following information is displayed:

- Action: type of action performed by the user (e.g.`create` or `update`).
- Date: date and time of the action.
- User: user who performed the action.
- Details: displays a modal with more details about the action (e.g. the User IP address, the request body, or the response body).


### Filtering logs

By default, all logs are displayed in reverse chronological order. You can filter the logs by:

- Action: select the type of action to filter by (e.g `create` or `update`).
- User: select the user to filter by.
- Date: select a date (range) and time to filter by.

<ThemedImage
  alt="Audit Logs filters"
  sources={{
    light: '/img/assets/settings/settings_audit-logs-filters.png',
    dark: '/img/assets/settings/settings_audit-logs-filters_DARK.png',
  }}
/>

### Accessing log details {#log-details}

For any log item, click the <Icon name="eye" /> icon to access a modal with more details about that action. In the modal, the *Payload* section displays the details in an interactive JSON component, enabling you to expand and collapse the JSON object.

<ThemedImage
  alt="Log details modal"
  sources={{
    light: '/img/assets/settings/settings_log-details.png',
    dark: '/img/assets/settings/settings_log-details_DARK.png',
  }}
/>


 This is the content for the doc docusaurus/docs/cms/features/content-history.md 

 ---
title: Content History
description: Learn how you can use the Content History feature of Strapi 5 to browse and restore previous versions of documents from the Content Manager.
displayed_sidebar: cmsSidebar
toc_max_heading_level: 5
tags:
 - content manager
 - content history
 - features
---

# Content History
<GrowthBadge /> <EnterpriseBadge/> <VersionBadge version="5.0.0" />

The Content History feature, in the <Icon name="feather" /> Content Manager, gives you the ability to browse and restore previous versions of documents created with the [Content Manager](/cms/features/content-manager).

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">CMS Growth or Enterprise plan</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">None</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available by default, if required plan</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

<Guideflow lightId="9r2m2y1sok" darkId="er566mli6p"/>

## Usage

**Path to use the feature:** <Icon name="feather" /> Content Manager <br/> From the edit view of a content type: click <Icon name="dots-three-outline" /> (top right corner) then <Icon name="clock-counter-clockwise" /> **Content History**.

### Browsing Content History

With Content History, you can browse your content through:

- The main view on the left, which lists the fields and their content for the version selected in the sidebar on the right.
- The sidebar on the right, which lists the total number of versions available, and for each version:
  - the date and time when the version was created,
  - the user who created it,
  - and whether its status is Draft, Modified, or Published (see [Draft & Publish](/cms/features/draft-and-publish) for more information about document statuses).


<ThemedImage
alt="Accessing the Content History of a document"
sources={{
  light:'/img/assets/content-manager/browsing-content-history.png',
  dark:'/img/assets/content-manager/browsing-content-history_DARK.png',
}}
/>

:::note
The main view of Content History clearly states whether a field was inexistent, deleted, or renamed in other versions of the content-type. Fields that are unknown for the selected version will be displayed under an _Unknown fields_ heading below the other fields.
:::

### Restoring a previous version

You can choose to restore a previous version of a document. When restoring a version, the content of this version will override the content of the current draft version. The document switches to the Modified status and you will then be able to publish the content whenever you want (see [Publishing a draft](/cms/features/draft-and-publish#publishing-a-draft)).

1. Browse the Content History and select a version via the sidebar on the right.
2. Click the **Restore** button.
3. In the _Confirmation_ window, click **Restore**.  

:::note
If the [Internationalization (i18n)](/cms/features/internationalization) feature is enabled for the content-type, restoring a version with a unique field (i.e. a field whose content is the same for all locales) will restore the content of this field for all locales.
:::

<ThemedImage
alt="Restoring version with Content History"
sources={{
  light:'/img/assets/content-manager/restoring-content-history.png',
  dark:'/img/assets/content-manager/restoring-content-history_DARK.png',
}}
/>


 This is the content for the doc docusaurus/docs/cms/features/content-manager.md 

 ---
title: Content Manager
description: Learn to use the Content Manager.
toc_max_heading_level: 4
tags:
- admin panel
- content manager
- list view
- edit view
- component
- dynamic zone
- relational field
---

import ScreenshotNumberReference from '/src/components/ScreenshotNumberReference.jsx';

# Content Manager

From the <Icon name="feather" /> Content Manager, accessible via the main navigation of the admin panel, users can write and manage their content.

<IdentityCard>
  <IdentityCardItem icon="user" title="Role & permission">Minimum "Configure view" permissions in Roles > Plugins - Content Manager.</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment.</IdentityCardItem>
</IdentityCard>

## Overview

<!--
<ThemedImage
alt="Content Manager"
sources={{
    light: '/img/assets/content-manager-guideflow2.gif',
    dark: '/img/assets/content-manager-guideflow2.gif',
  }}
/>
-->

<!-- TODO: create dark mode version and replace the darkId value -->
<Guideflow lightId="zpen5g4t8p" darkId="9r22q12szr" />

The <Icon name="feather" /> Content Manager contains the available collection and single content-types which were created beforehand using the [Content-type Builder](/cms/features/content-type-builder).

Content can be created, managed and published from the 2 categories displayed in the sub navigation of the <Icon name="feather" /> Content Manager:

- *Collection types*, which lists available content-types managing several entries. For each available collection type, multiple entries can be created, which is why each collection type is divided into 2 interfaces:
  - the list view, which displays a table with all entries created for that collection type.
  - the edit view, which focuses on a chosen entry of your collection type, and from where you can actually manage the content.

- *Single types*, which lists available content-types with only one entry. Unlike collection types, which have multiple entries, single types are not created for multiple uses. In other words, there can only be one default entry per available single type. There is therefore no list view in the Single types category.

:::tip
Click the search icons <Icon name="magnifying-glass" classes="ph-bold" /> to use a text search and find one of your content-types and/or entries more quickly!

Specifically for your collection types' entries, you can also use the <Icon name="funnel-simple" classes="ph-bold" /> **Filters** button to set condition-based filters, which add to one another (i.e., if you set several conditions, only the entries that match all the conditions will be displayed).
:::

:::strapi Strapi AI
A new AI-powered Content Manager is now available for testing in private beta. [Sign up now!](https://strapi.io/ai).
:::

<!-- TO INTEGRATE IN THE PAGE? USE A GUIDEFLOW?

From the list view, it is possible to:

- create a new entry <ScreenshotNumberReference number="1" />,
- make a textual search <ScreenshotNumberReference number="2" /> or set filters <ScreenshotNumberReference number="3" /> to find specific entries,
- if [Internationalization (i18n)](/cms/features/internationalization) is enabled, filter by locale to display only the entries [translated](/cms/features/internationalization) in a chosen locale <ScreenshotNumberReference number="4" />,
- configure the fields displayed in the table of the list view <ScreenshotNumberReference number="5" />,
- if [Draft & Publish](/cms/features/draft-and-publish) is enabled, see the status of each entry <ScreenshotNumberReference number="6" />,
- perform actions on a specific entry by clicking on <Icon name="dots-three-outline" /> <ScreenshotNumberReference number="7" /> at the end of the row:
  - edit <Icon name="pencil-simple" /> (see [Writing content](/cms/features/content-manager/writing-content.md)), duplicate <Icon name="copy" />, or delete <Icon name="trash"/> (see [Deleting content](/cms/features/draft-and-publish#deleting-content)) the entry,
  - if [Draft & Publish](/cms/features/draft-and-publish) is enabled, <Icon name="x-circle" /> unpublish the entry, <Icon name="x-circle" /> or discard its changes,
  - if [Internationalization (i18n)](/cms/features/internationalization) is enabled, ![Delete locale icon](/img/assets/icons/v5/delete-locale.svg) delete a given locale,
- select multiple entries to simultaneously [publish, unpublish](/cms/features/draft-and-publish#bulk-publishing-and-unpublishing), or [delete](/cms/features/draft-and-publish#deleting-content).

:::tip
Sorting can be enabled for most fields displayed in the list view table (see <ExternalLink to="../content-manager/configuring-view-of-content-type.md" text="Configuring the views of a content-type"/>). Click on a field name, in the header of the table, to sort on that field.
:::
-->

<!-- WON'T BE INTEGRATED - TO BE VALIDATED

#### Filtering entries {#filtering-entries}

Right above the list view table, on the left side of the interface, a <Icon name="funnel-simple" classes="ph-bold" /> **Filters** button is displayed. It allows to set one or more condition-based filters, which add to one another (i.e. if you set several conditions, only the entries that match all the conditions will be displayed).

<ThemedImage
  alt="Filters in the Content Manager"
  sources={{
    light: '/img/assets/content-manager/content-manager_filters2.png',
    dark: '/img/assets/content-manager/content-manager_filters2_DARK.png',
  }}
/>

To set a new filter:

1. Click on the <Icon name="funnel-simple" classes="ph-bold" /> **Filters** button.
2. Click on the 1st drop-down list to choose the field on which the condition will be applied.
3. Click on the 2nd drop-down list to choose the type of condition to apply.
4. Enter the value(s) of the condition in the remaining textbox.
5. Click on the **Add filter** button.

:::note
When active, filters are displayed next to the <Icon name="funnel-simple" classes="ph-bold" /> **Filters** button. They can be removed by clicking on the delete icon <Icon name="x" />.
:::
-->

## Configuration

Both the list view and the edit view can be configured, and the former can either be configured temporarily or permanently.

### Configuring the list view {#list-view-settings}

<br/>

#### Temporary configuration

By configuring temporarily the list view, the configurations will be reset as soon as the page is refreshed or when navigating outside the Content Manager. This configuration allows to temporarily choose which fields to display in the list view's table.

1. Click on the settings button <Icon name="gear-six" />.
2. Tick the boxes associated with the field you want to be displayed in the table.
3. Untick the boxes associated with the fields you do not want to be displayed in the table.

<!-- MAY BE REMOVED - NOT SURE ABOUT RELEVANCE

:::tip
Relational fields can also be displayed in the list view. Please refer to <ExternalLink to="../content-manager/configuring-view-of-content-type.md" text="Configuring the views of a content-type"/> for more information on their specificities.
:::
-->

<ThemedImage
  alt="Displayed fields in the settings of a list view in the Content Manager"
  sources={{
    light: '/img/assets/content-manager/content-manager_displayed-fields.png',
    dark: '/img/assets/content-manager/content-manager_displayed-fields_DARK.png',
  }}
/>

#### Permanent & advanced configuration

By configuring permanently the list view, you not only ensure that they are not reset at every page refresh or navigation, but you also have access to more options (e.g., enablement/disablement of search, filters and bulk actions, reordering of the list view table's fields etc.).

:::note
The configurations only apply to the list view of the collection type from which the settings are accessed (i.e., disabling the filters or search options for a collection type will not automatically also disable these same options for all other collection types).
:::

<ThemedImage
  alt="Settings of a list view in the Content Manager"
  sources={{
    light: '/img/assets/content-manager/content-manager_settings-list-view.png',
    dark: '/img/assets/content-manager/content-manager_settings-list-view_DARK.png',
  }}
/>

<Tabs groupId="ListViewConfig">

<TabItem value="ListViewSettings" label="Settings">

1. In the list view of your collection type, click on the settings button <Icon name="gear-six" /> then <Icon name="list-plus" classes="ph-bold" /> **Configure the view** to be redirected to the list view configuration interface.
2. In the Settings area, define your chosen new settings:

| Setting name           | Instructions                                                                                       |
| ---------------------- | -------------------------------------------------------------------------------------------------- |
| Enable search          | Click on **TRUE** or **FALSE** to able or disable the search.                                          |
| Enable filters         | Click on **TRUE** or **FALSE** to able or disable filters.                                             |
| Enable bulk actions    | Click on **TRUE** or **FALSE** to able or disable the multiple selection boxes in the list view table. |
| Entries per page       | Choose among the drop-down list the number of entries per page.                                    |
| Default sort attribute | Choose the sorting field that will be used by default.                                             |
| Default sort order     | Choose the sorting type that will be applied by default.                                           |

3. Click on the **Save** button.

</TabItem>

<TabItem value="ListViewDisplay" label="View">

1. In the list view of your collection type, click on the settings button <Icon name="gear-six" /> then <Icon name="list-plus" classes="ph-bold" /> **Configure the view** to be redirected to the list view configuration interface.
2. In the View area, define what fields to display in the list view table, and in what order:
   - Click the add button <Icon name="plus" classes="ph-bold" /> to add a new field.
   - Click the delete button <Icon name="x" /> to remove a field.
   - Click the reorder button <Icon name="dots-six-vertical" classes="ph-bold" /> and drag and drop it to the place you want it to be displayed among the other fields.
3. Click the edit button <Icon name="pencil-simple" /> to access its available own settings:

| Setting name              | Instructions                                                              |
| ------------------------- | ------------------------------------------------------------------------- |
| Label                     | Write the label to be used for the field in the list view table.          |
| Enable sort on this field | Click on **TRUE** or **FALSE** to able or disable the sort on the field.  |

4. Click on the **Save** button.

:::note
Relational fields can also be displayed in the list view. There are however some specificities to keep in mind:

- Only one field can be displayed per relational field.
- Only first-level fields can be displayed (i.e. fields from the relation of a relation can't be displayed).
- If the displayed field contains more than one value, not all its values will be displayed, but a counter indicating the number of values. You can hover this counter to see a tooltip indicating the first 10 values of the relational field.

Note also that relational fields have a couple limitations when it comes to sorting options:

- Sorting cannot be enabled for relational fields which display several fields.
- Relational fields cannot be set as default sort.
:::

</TabItem>

</Tabs>

### Configuring the edit view {#edit-view-settings}

<ThemedImage
  alt="Configuring the edit view of the Content Manager"
  sources={{
    light: '/img/assets/content-manager/edit-view-config2.png',
    dark: '/img/assets/content-manager/edit-view-config2_DARK.png',
  }}
/>

<Tabs groupId="EditViewConfig">

<TabItem value="EditViewSettings" label="Settings">

1. In the edit view of your content-type, click on the <Icon name="dots-three-outline" /> button then <Icon name="list-plus" classes="ph-bold" /> **Configure the view**.
2. In the Settings area, define your chosen new settings:

| Setting name    | Instructions                                                                          |
| --------------- | ------------------------------------------------------------------------------------- |
| Entry title     | Choose among the drop-down list the field that should be used as title for the entry. |

3. Click on the **Save** button.

</TabItem>

<TabItem value="EditViewDisplay" label="View">

1. In the edit view of your content-type, click on the <Icon name="dots-three-outline" /> button then <Icon name="list-plus" classes="ph-bold" /> **Configure the view**.
2. In the View area, define what fields (including relational fields) to display in the list view table, in what order and what size:
   - Click the <Icon name="plus" classes="ph-bold" /> **Insert another field** button to add a new field.
   - Click the delete button <Icon name="x" /> to remove a field.
   - Click the reorder button <Icon name="dots-six-vertical" classes="ph-bold" /> and drag and drop it to the place you want it to be displayed among the other fields.
3. Click the edit button <Icon name="pencil-simple" /> of a field to access its available settings:

| Setting name    | Instructions                                                                              |
| --------------- | ----------------------------------------------------------------------------------------- |
| Label           | Write the label that should be used for the field.                                        |
| Description     | Write a description for the field, to help other administrators fill it properly.         |
| Placeholder     | Write the placeholder that should be displayed by default in the field.                   |
| Editable field  | Click on **TRUE** or **FALSE** to able or disable the edition of the field by administrators. |
| Size            | Select the size in which the field should be displayed in the Content Manager. Note that this setting is neither available for JSON and Rich Text fields, nor dynamic zones and components. |
| Entry title     | *(relational fields only)* Write the entry title that should be used for the relational field. It is recommended to choose well the entry title of relational fields as the more comprehensive it is, the easier it will be for administrators to manage the content of relational fields from the edit view. |

4. Click on the **Save** button.

:::caution
The settings and display of a component's fields cannot be managed and reordered through the entry's edit view configuration page. Click on the **Set the component's layout** button of a component to access the component's own configuration page. You will find the exact same settings and display options as for the entry, but that will specifically apply to your component.

Note also that the settings are defined for the component itself, which means that the settings will automatically be applied for every other content-type where the component is used.
:::

</TabItem>

</Tabs>

## Usage

<br/>

### Creating & Writing content

In Strapi, writing content consists in filling up fields, which are meant to contain specific content (e.g. text, numbers, media, etc.). These fields were configured for the collection or single type beforehand, through the [Content-type Builder](/cms/features/content-type-builder).

<ThemedImage
  alt="Edit view to write content"
  sources={{
    light: '/img/assets/content-manager/edit-view3.png',
    dark: '/img/assets/content-manager/edit-view3_DARK.png',
  }}
/>

To write or edit content:

1. In the <Icon name="feather" /> Content Manager:
    - Either click on the **Create new entry** button in the top right corner of the collection type of your choice to create a new entry,
    - Or access the edit view of your already created collection type's entry or single type.
2. Write your content, following the available field schema. You can refer to the table below for more information and instructions on how to fill up each field type.

:::note
New entries are only considered created once some of their content has been written and saved once. Only then will the new entry be listed in the list view.
:::

<!-- MAY BE REMOVED - NOT SURE ABOUT RELEVANCE

:::info
If Draft & Publish is enabled for your content-type (it's enabled by default), the fields work the same way whether you are editing the draft or published version.
:::
-->

| Field name  | Instructions                                                                                                                                                                                                                                                                                                                                                              |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Text        | Write your content in the textbox.                                                                                                                                                                                                                                                                                                                                        |
| Rich text (Markdown) | Write your textual content in the editor, in Markdown. Some basic formatting options (titles, bold, italics, underline) are available in the top bar of the editor to apply to selected text. A **Preview mode/Markdown mode** button to switch between modes is also available. <br /><br /> üí° The box can be expanded by clicking on **Expand** in the bottom bar. It displays side by side, at the same time, the textbox that you can edit and the preview. |
| Rich text (Blocks) | Write and manage your content in the editor, which automatically renders live all additions/updates. In the Blocks editor, paragraphs behave as blocks of text: hovering on a paragraph will display an icon <Icon name="dots-six-vertical" classes="ph-bold"/> on which to click to reorder the content. Options to format or enrich the content are also accessible from the top bar of the editor (basic formatting options, code, links, image etc.). <!-- <br /><br /> üí° Type `/` in the editor to have access to the list of all available options and select one. --> <br /><br /> üí° You can use text formatting keyboard shortcuts in the Blocks editor (e.g. bold, italics, underline, and pasting link). |
| Number      | Write your number in the textbox. Up and down arrows, displayed on the right of the box, allow to increase or decrease the current number indicated in the textbox.                                                                                                                                                                                                       |
| Date        | 1. Click the date and/or time box. <br /> 2. Type the date and time or choose a date using the calendar and/or a time from the list. The calendar view fully supports keyboard-based navigation. |
| Media       | 1. Click the media area. <br /> 2. Choose an asset from the [Media Library](/cms/features/media-library) or from a [folder](/cms/features/media-library#organizing-assets-with-folders) if you created some, or click the **Add more assets** button to add a new file to the Media Library. <br /><br /> üí° It is possible to drag and drop the chosen file in the media area.                                                                                                                                   |
| Relation    | Choose an entry from the drop-down list. See [relational fields](#relational-fields) for more information.                                                                                                                                                                                                          |
| Boolean     | Click on **TRUE** or **FALSE**.                                                                                                                                                                                                                                                                                                                                               |
| JSON        | Write your content, in JSON format, in the code textbox.                                                                                                                                                                                                                                                                                                                  |
| Email       | Write a complete and valid email address.                                                                                                                                                                                                                                                                                                                                 |
| Password    | Write a password. <br /><br /> üí° Click the <Icon name="eye" /> icon, displayed on the right of the box, to show the password.                                                                                                                                                                                                                                                                |
| Enumeration | 1. Click the drop-down list. <br /> 2. Choose an entry from the list.                                                                                                                                                                                                                                                                                                       |
| UID         | Write a unique identifier in the textbox. A "Regenerate" button, displayed on the right of the box, allows automatically generating a UID based on the content type name.                                                                                                                                                                                                |

:::note
Filling out a [custom field](/cms/features/content-type-builder#custom-fields) depends on the type of content handled by the field. Please refer to the dedicated documentation for each custom field hosted on the <ExternalLink to="https://market.strapi.io" text="Marketplace"/>.
:::

#### Components

Components are a combination of several fields, which are grouped together in the edit view. Writing their content works exactly like for independent fields, but there are some specificities to components.

There are 2 types of components: non-repeatable and repeatable components.

<Tabs groupId="Components">

<TabItem value="NonRepeatable" label="Non-repeatable components">

<ThemedImage
  alt="Non-repeatable component - No entry yet"
  width="80%"
  sources={{
    light: '/img/assets/content-manager/edit-view_component3.png',
    dark: '/img/assets/content-manager/edit-view_component3_DARK.png',
  }}
/>
<ThemedImage
  alt="Non-repeatable component - With entries"
  width="80%"
  sources={{
    light: '/img/assets/content-manager/edit-view_component2.png',
    dark: '/img/assets/content-manager/edit-view_component2_DARK.png',
  }}
/>

Non-repeatable components are a combination of fields that can be used only once.

By default, the combination of fields is not directly displayed in the edit view:

1. Click on the add button <Icon name="plus-circle" /> to add the component.
2. Fill in the fields of the component.

To delete the non-repeatable component, click on the delete button <Icon name="trash"/>, located in the top right corner of the component area.

</TabItem>

<TabItem value="Repeatable" label="Repeatable components">

<ThemedImage
  alt="Repeatable component"
  width="80%"
  sources={{
    light: '/img/assets/content-manager/edit-view_component4.png',
    dark: '/img/assets/content-manager/edit-view_component4_DARK.png',
  }}
/>

Repeatable components are also a combination of fields, but they allow the creation of multiple component entries, all following the same combination of fields.

To add a new entry and display its combination of fields:

1. Click on the add button <Icon name="plus-circle" /> to add the component.
2. Fill in the fields of the component.
3. (optional) Click on the **Add an entry** button and fill in the fields again.

The repeatable component entries can be reordered or deleted directly in the edit view, using buttons displayed on the right of the entry area.

- Use the drag & drop button <Icon name="dots-six-vertical" classes="ph-bold" /> to reorder entries of your repeatable component.
- Use the delete button <Icon name="trash"/> to delete an entry from your repeatable component.

:::note
Unlike regular fields, the order of the entries of a repeatable component is important. It should correspond exactly to how end users will read/see the content.
:::

</TabItem>

</Tabs>

#### Dynamic zones

Dynamic zones are a combination of components, which themselves are composed of several fields. Writing the content of a dynamic zone requires additional steps in order to access the fields.

<ThemedImage
  alt="Writing content for a dynamic zone"
  sources={{
    light: '/img/assets/content-manager/edit-view_dynamic-zone-1.png',
    dark: '/img/assets/content-manager/edit-view_dynamic-zone-1_DARK.png',
  }}
/>

<ThemedImage
  alt="Writing content for a dynamic zone"
  sources={{
    light: '/img/assets/content-manager/edit-view_dynamic-zone-2.png',
    dark: '/img/assets/content-manager/edit-view_dynamic-zone-2_DARK.png',
  }}
/>

1. Click on the <Icon name="plus-circle" /> **Add a component to [dynamic zone name]** button.
2. Choose a component available for the dynamic zone.
3. Fill in the fields of the component.

Dynamic zones' components can also be reordered or deleted directly in the edit view, using buttons displayed in the top right corner of the component area.

- Use the drag & drop button <Icon name="dots-six-vertical" classes="ph-bold" /> to reorder components in your dynamic zone.
- Use the delete button <Icon name="trash"/> to delete a component from your dynamic zone.

:::tip
You can also use the keyboard to reorder components: focus the component using Tab, press Space on the drag & drop button <Icon name="dots-six-vertical" classes="ph-bold" /> and use the arrow keys to then re-order, pressing Space again to drop the item.
:::

:::note
Unlike regular fields, the order of the fields and components inside a dynamic field is important. It should correspond exactly to how end users will read/see the content.
:::

#### Relational fields

Relation-type fields added to a content-type allow establishing a relation with another collection type. These fields are called "relational fields". 

The content of relational fields is written from the edit view of the content-type they belong to. However, relational fields can point to one or several entries of the other collection type, this is why in the Content Manager it is possible to manage a content-type's relational fields to choose which entries are relevant.

<details>
<summary>Example of relational fields</summary>

In my Strapi admin panel I have created 2 collection types:

- Restaurant, where each entry is a restaurant
- Category, where each entry is a type of restaurant

I want to assign a category to each of my restaurants, therefore I have established a relation between my 2 collection types: restaurants can have one category.

In the Content Manager, from the edit view of my Restaurant entries, I can manage the Category relational field, and choose which entry of Category is relevant for my restaurant.
<br/>

</details>

<!-- MAY BE REMOVED - FEELS LIKE REPETITION

The relational fields of a content-type are displayed among regular fields. For each relational field is displayed a drop-down list containing all available entry titles. It allows to choose which entry the relational fields should point to. You can either choose one or several entries depending on the type of relation that was established.-->

<ThemedImage
  alt="Relational fields in the edit view"
  sources={{
    light: '/img/assets/content-manager/edit-view_relational-fields2.png',
    dark: '/img/assets/content-manager/edit-view_relational-fields2_DARK.png',
  }}
/>

<Tabs groupId="RelationalFields">

<TabItem value="OneChoice" label="One-choice relational fields">

Many-to-one, one-to-one, and one-way types of relation only allow to choose one entry per relational field.

<ThemedImage
  alt="One-choice relational fields"
  width="40%"
  sources={{
    light: '/img/assets/content-manager/RF_one-choice2.png',
    dark: '/img/assets/content-manager/RF_one-choice2_DARK.png',
  }}
/>

To select the only relevant relational field's entry:

1. In the content-type's edit view, click on the drop-down list of the relational field.
2. Among the list of entries, choose one.

To remove the entry selected in the drop-down list, click on the delete button <Icon name="x" />.

</TabItem>

<TabItem value="MultipleChoice" label="Multiple-choice relational fields">

Many-to-many, one-to-many, and many-ways types of relation allow to choose several entries per relational field.

<ThemedImage
  alt="Multiple choices relational fields"
  width="40%"
  sources={{
    light: '/img/assets/content-manager/RF_multiple-choices2.png',
    dark: '/img/assets/content-manager/RF_multiple-choices2_DARK.png',
  }}
/>

To select the relevant relational field's entries:

1. In the content-type's edit view, click on the drop-down list of the relational field.
2. Among the list of entries, choose one.
3. Repeat step 2 until all relevant entries have been chosen.

To remove an entry, click on the cross button <Icon name="x" classes="ph-bold" /> in the selected entries list.

Entries from multiple-choice relational fields can be reordered, indicated by a drag button <Icon name="dots-six-vertical" classes="ph-bold" />. To move an entry, click and hold it, drag it to the desired position, then release it.

</TabItem>

</Tabs>

:::tip
- Not all entries are listed by default: more can be displayed by clicking on the **Load more** button. Also, instead of choosing an entry by scrolling the list, you can click any relational field drop-down list and type to search a specific entry.

- Click on the name of an entry to display a modal from where you will be able to edit the relational field's content-type. For now, you can only edit a relation on-the-fly and not create a new one.
:::

:::note
- If the [Draft & Publish feature](/cms/features/draft-and-publish) is activated for the content-type the relational field belongs to, you will notice blue or green dots next to the entries names in the drop-down list. They indicate the status of the entry, respectively draft or published content.
- If the [Internationalization (i18n) feature](/cms/features/internationalization) is enabled for the content-type, the list of entries may be limited or differ from one locale to another. Only relevant entries that can possibly be chosen for a relational field will be listed.
:::

<!-- Add a section "Managing entries" here with the explanations of the list view interface? Or before "Creating & Writing content"? Or maybe have 1. "Creating & managing entries" 2. "Writing content"? Or just use a Guideflow? -->

### Deleting content

You can delete content by deleting any entry of a collection type, or the default entry of a single type.

1. In the edit view of the entry, click on <Icon name="dots-three-outline" /> at the top right of the interface, and click the **Delete document** button.<br/>If Internationalization is enabled for the content-type, you can also choose to delete only the currently selected locale by clicking on the **Delete locale** button.
2. In the window that pops up, click on the **Confirm** button to confirm the deletion.

<ThemedImage
  alt="Deleting entries"
  sources={{
    light: '/img/assets/content-manager/deleting-entries.png',
    dark: '/img/assets/content-manager/deleting-entries_DARK.png',
  }}
/>

:::tip
You can delete entries from the list view of a collection type, by clicking on <Icon name="dots-three-outline" />  on the right side of the entry's record in the table, then choosing the <Icon name="trash"/> **Delete document** button.<br/>If [Internationalization](/cms/features/internationalization) is enabled for the content-type, **Delete document** deletes all locales while **Delete locale** only deletes the currently listed locale.


 This is the content for the doc docusaurus/docs/cms/features/content-type-builder.md 

 ---
title: Content-type Builder
description: Learn to use the Content-type Builder.
toc_max_heading_level: 5
tags:
- admin panel
- content type builder
- content types
- component
- dynamic zone
- custom field
---

import ScreenshotNumberReference from '/src/components/ScreenshotNumberReference.jsx';

# Content-type Builder

From the <Icon name="layout" /> Content-type Builder, accessible via the main navigation of the admin panel, users can create and edit their content types.

<IdentityCard>
  <IdentityCardItem icon="user" title="Role & permission">Minimum "Read" permission in Roles > Plugins - Content Type Builder.</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in Development environment only.</IdentityCardItem>
</IdentityCard>

## Overview

<!-- Replace with Guideflow -->
<!-- <ThemedImage
  alt="Content-type Builder interface"
  sources={{
    light: '/img/assets/content-type-builder/content-types-builder.png',
    dark: '/img/assets/content-type-builder/content-types-builder_DARK.png',
  }}
/> -->

<Guideflow lightId="vkm9jeqb2p" darkId="lpnz47qtep" />

:::strapi Content Type Builder updates <BetaBadge />
Interface modifications and new options are available in the Content-type Builder, including:
- tags to indicate the status of the fields and content types: "N" for new, "M" for modified and "D" for deleted,
- an `*` beside required fields in the list view,
- a drag & drop button in the list view, to reorder the fields,
- and collapse button for dynamic zones and components.

The **Save** button has also been moved to the Content-type Builder navigation which lists all content types and components. This, along with the status tags, allows you to work on several content types and components at the same time. **Revert**, **Undo** and **Discard changes** button have also been added, which also work globally on all content types and components.
:::

The <Icon name="layout" /> Content-type Builder allows the creation and management of content-types, which can be:

- Collection types: content-types that can manage several entries.
- Single types: content-types that can only manage one entry.
- Components: content structure that can be used in multiple collection types and single types. Although they are technically not proper content-types because they cannot exist independently, components are also created and managed through the Content-type Builder, in the same way as collection and single types.

All 3 are displayed as categories in the sub navigation of the <Icon name="layout" /> Content-type Builder. In each category are listed all content-types and components that have already been created.

:::tip
Click the search icon <Icon name="magnifying-glass" classes="ph-bold" /> in the <Icon name="layout" /> Content-type Builder sub navigation to find a specific collection type, single type, or component.
:::

## Usage

<br/>

### Creating content-types

<!-- MAY BE REMOVED - FEELS REDUNDANT WITH ID CARD

:::note Development-only
The Content-type Builder is only accessible to create and update content-types when your Strapi application is in a development environment, else it will be in a read-only mode in other environments.
:::
-->

The Content-type Builder allows to create new content-types: single and collection types, but also components.

#### New content-type

<ThemedImage
  alt="Content-type creation"
  sources={{
    light: '/img/assets/content-type-builder/content-type-creation.png',
    dark: '/img/assets/content-type-builder/content-type-creation_DARK.png',
  }}
/>

1. Choose whether you want to create a collection type or a single type.
2. In the <Icon name="layout" /> Content-type Builder's category of the content-type you want to create, click on **Create new collection/single type**.
3. In the content-type creation window, write the name of the new content-type in the *Display name* textbox.
4. Check the *API ID* to make sure the automatically pre-filled values are correct. Collection type names are indeed automatically pluralized when displayed in the Content Manager. It is recommended to opt for singular names, but the *API ID* field allows to fix any pluralization mistake.
5. (optional) In the Advanced Settings tab, configure the available settings for the new content-type:
      | Setting name    | Instructions                                                                                                                                     |
      |-----------------|--------------------------------------------------------------------------------------------------------------------------------------------------|
      | Draft & publish | Tick the checkbox to allow entries of the content-type to be managed as draft versions, before they are published (see [Draft & Publish](/cms/features/draft-and-publish)). |
      | Internationalization | Tick the checkbox to allow entries of the content-type to be translated into other locales. |
6. Click on the **Continue** button.
7. Add and configure chosen fields for your content-type (see [Configuring fields for content-types](#configuring-fields-content-type)).
8. Click on the **Save** button.

:::caution
New content-types are only considered created once they have been saved. Saving is only possible if at least one field has been added and properly configured. If these steps have not been done, a content-type cannot be created, listed in its category in the Content-type Builder, and cannot be used in the [Content Manager](/cms/features/content-manager).
:::

#### New component

<ThemedImage
  alt="Component creation"
  sources={{
    light: '/img/assets/content-type-builder/component-creation-1.png',
    dark: '/img/assets/content-type-builder/component-creation-1_DARK.png',
  }}
/>

1. In the Components category of the <Icon name="layout" /> Content-type Builder sub navigation, click on **Create new component**.
2. In the component creation window, configure the base settings of the new component:
   - Write the name of the component in the *Display name* textbox.
   - Select an available category, or enter in the textbox a new category name to create one.
   - _(optional)_ Choose an icon representing the new component. You can use the search <Icon name="magnifying-glass" classes="ph-bold" /> to find an icon instead of scrolling through the list.
3. Click on the **Continue** button.
4. Add and configure chosen fields for your component (see [Configuring fields for content-types](#configuring-fields-content-type)).
5. Click on the **Save** button.

### Editing content-types

The Content-type Builder allows to manage all existing content-types. For an chosen content-type or component to edit, the right side of the Content-type Builder interface displays all available editing and management options.

<ThemedImage
  alt="Content-type Builder's edition interface"
  sources={{
    light: '/img/assets/content-type-builder/content-types-builder_edition.png',
    dark: '/img/assets/content-type-builder/content-types-builder_edition_DARK.png',
  }}
/>

- Click on the **Add new/another field** button <ScreenshotNumberReference number="1" /> in the top right corner to add more fields to your content-type.
- In the table that displays the fields of your content-type <ScreenshotNumberReference number="2" />, click on the <Icon name="pencil-simple" /> and/or <Icon name="trash" /> buttons to respectively edit and/or delete these fields.
- Click on the <Icon name="pencil-simple" /> **Edit** button <ScreenshotNumberReference number="3" /> to access the basic and advanced settings of your content-type:

  <Tabs groupId="CTSettings">

  <TabItem value="CTBasicSettings" label="Basic settings">

  The **Basic Settings** tab allows to edit the following properties of the content-type or component:

  <ThemedImage
    alt="Content-type Builder's basic settings"
    sources={{
      light: '/img/assets/content-type-builder/basic-settings.png',
      dark: '/img/assets/content-type-builder/basic-settings_DARK.png',
    }}
  />

  * **Display name**: Name of the content-type or component as it will be displayed in the admin panel.
  * **API ID (singular)**: Name of the content-type or component as it will be used in the API. It is automatically generated from the display name, but can be edited.
  * **API ID (plural)**: Plural name of the content-type or component as it will be used in the API. It is automatically generated from the display name, but can be edited.
  * **Type**: Type of the content-type or component. It can be either a **Collection type** or a **Single type**.

  </TabItem>

  <TabItem value="CTAdvancedSettings" label="Advanced settings">

  The **Advanced Settings** tab allows to edit the following properties of the content-type or component:

  <ThemedImage
    alt="Content-type Builder's advanced settings"
    sources={{
      light: '/img/assets/content-type-builder/advanced-settings.png',
      dark: '/img/assets/content-type-builder/advanced-settings_DARK.png',
    }}
  />

  * **Draft & Publish**: Enable the [Draft & Publish](/cms/features/draft-and-publish) feature for the content-type or component. It is disabled by default.
  * **Internationalization**: Enable the [Internationalization](/cms/features/internationalization) feature for the content-type or component. It is disabled by default.

  </TabItem>

  </Tabs>

- Click on the **Save** button <ScreenshotNumberReference number="4" /> to confirm any ongoing modification.

:::caution
Editing a field allows renaming it. However, keep in mind that regarding the database, renaming a field means creating a whole new field and deleting the former one. Although nothing is deleted from the database, the data that was associated with the former field name will not be accessible from the admin panel of your application anymore.
:::

### Configuring content-types fields {#configuring-fields-content-type}

<!-- MAY BE REMOVED - FEELS REDUNDANT WITH ID CARD 

:::note Development-only
The Content-type Builder is only accessible to create and update content-types when your Strapi application is in a development environment, else it will be in a read-only mode in other environments.
:::
-->

Content-types are composed of one or several fields. Each field is designed to contain specific kind of data, filled up in the Content Manager (see [Creating & Writing content](/cms/features/content-manager#creating--writing-content)).

In the <Icon name="layout" /> Content-type Builder, fields can be added at the creation of a new content-type or component, or afterward when a content-type or component is edited or updated.

:::note
Depending on what content-type or component is being created or edited, not all fields -including components and dynamic zones- are always available.
:::

<ThemedImage
  alt="Fields selection"
  sources={{
    light: '/img/assets/content-type-builder/fields-selection.png',
    dark: '/img/assets/content-type-builder/fields-selection_DARK.png',
  }}
/>

#### <img width="28" src="/img/assets/icons/v5/ctb_text.svg" /> Text {#text}

The Text field displays a textbox that can contain small text. This field can be used for titles, descriptions, etc.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name | Instructions                                                                                            |
|--------------|---------------------------------------------------------------------------------------------------------|
| Name         | Write the name of the Text field.                                                                       |
| Type         | Choose between *Short text* (255 characters maximum) and *Long text*, to allow more or less space to fill up the Text field.     |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                  |
|----------------|-------------------------------------------------------------------------------|
| Default value  | Write the default value of the Text field.                                    |
| RegExp pattern | Write a regular expression to make sure the value of the Text field matches a specific format. |
| Private field  | Tick to make the field private and prevent it from being found via the API.   |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.    |
| Unique field   | Tick to prevent another field to be identical to this one.                    |
| Maximum length | Tick to define a maximum number of characters allowed.                        |
| Minimum length | Tick to define a minimum number of characters allowed.                        |

</TabItem>

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_richtextblocks.svg" /> Rich Text (Blocks) {#rich-text-blocks}

The Rich Text (Blocks) field displays an editor with live rendering and various options to manage rich text. This field can be used for long written content, even including images and code.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name | Instructions                                    |
|--------------|-------------------------------------------------|
| Name         | Write the name of the Rich Text (Blocks) field. |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |

</TabItem>

</Tabs>

:::strapi React renderer
If using the Blocks editor, we recommend that you also use the <ExternalLink to="https://github.com/strapi/blocks-react-renderer" text="Strapi Blocks React Renderer"/> to easily render the content in a React frontend.
:::

#### <img width="28" src="/img/assets/icons/v5/ctb_number.svg" /> Number {#number}

The Number field displays a field for any kind of number: integer, decimal and float.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name  | Instructions                                                    |
|---------------|-----------------------------------------------------------------|
| Name          | Write the name of the Number field.                             |
| Number format | Choose between *integer*, *big integer*, *decimal* and *float*. |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Default value  | Write the default value of the Number field.                                |
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |
| Unique field   | Tick to prevent another field to be identical to this one.                  |
| Maximum value  | Tick to define a maximum value allowed.                      |
| Minimum value  | Tick to define a minimum value allowed.                      |

</TabItem>

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_date.svg" /> Date {#date}

The Date field can display a date (year, month, day), time (hour, minute, second) or datetime (year, month, day, hour, minute, and second) picker.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name  | Instructions                                                    |
|---------------|-----------------------------------------------------------------|
| Name          | Write the name of the Date field.                               |
| Type          | Choose between *date*, *datetime* and *time*                    |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Default value  | Write the default value of the Date field.                                  |
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |
| Unique field   | Tick to prevent another field to be identical to this one.                  |

</TabItem>

</Tabs>
 
#### <img width="28" src="/img/assets/icons/v5/ctb_password.svg" /> Password

The Password field displays a password field that is encrypted.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name  | Instructions                                                    |
|---------------|-----------------------------------------------------------------|
| Name          | Write the name of the Password field.                           |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Default value  | Write the default value of the Password field.                              |
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |
| Maximum length | Tick to define a maximum number of characters allowed.                      |
| Minimum length | Tick to define a minimum number of characters allowed.                      |

</TabItem>

</Tabs>


#### <img width="28" src="/img/assets/icons/v5/ctb_media.svg" /> Media {#media}

The Media field allows to choose one or more media files (e.g. image, video) from those uploaded in the Media Library of the application.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name  | Instructions                                                    |
|---------------|-----------------------------------------------------------------|
| Name          | Write the name of the Media field.                              |
| Type          | Choose between *Multiple media* to allow multiple media uploads, and *Single media* to only allow one media upload. |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Select allowed types of media  | Click on the drop-down list to untick media types not allowed for this field. |
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |
| Unique field   | Tick to prevent another field to be identical to this one.                  |

</TabItem>

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_relation.svg" /> Relation {#relation}

The Relation field allows to establish a relation with another content-type, that must be a collection type.

There are 6 different types of relations:

- <img width="25" src="/img/assets/icons/v5/ctb_relation_oneway.svg" /> One way: Content-type A *has one* Content-type B
- <img width="25" src="/img/assets/icons/v5/ctb_relation_1to1.svg" /> One-to-one: Content-type A *has and belong to one* Content-type B
- <img width="25" src="/img/assets/icons/v5/ctb_relation_1tomany.svg" /> One-to-many: Content-type A *belongs to many* Content-type B
- <img width="25" src="/img/assets/icons/v5/ctb_relation_manyto1.svg" /> Many-to-one: Content-type B *has many* Content-type A
- <img width="25" src="/img/assets/icons/v5/ctb_relation_manytomany.svg" /> Many-to-many: Content-type A *has and belongs to many* Content-type B
- <img width="25" src="/img/assets/icons/v5/ctb_relation_manyway.svg" /> Many way: Content-type A *has many* Content-type B

<Tabs>

<TabItem value="base" label="Base settings">

Configuring the base settings of the Relation field consists in choosing with which existing content-type the relation should be established and the kind of relation. The edition window of the Relation field displays 2 grey boxes, each representing one of the content-types in relation. Between the grey boxes are displayed all possible relation types.

1. Click on the 2nd grey box to define the content-type B. It must be an already created collection type.
2. Click on the icon representing the relation to establish between the content-types.
3. Choose the *Field name* of the content-type A, meaning the name that will be used for the field in the content-type A.
4. (optional if disabled by the relation type) Choose the *Field name* of the content-type B.

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Private field  | Tick to make the field private and prevent it from being found via the API. |

</TabItem>

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_boolean.svg" /> Boolean {#boolean}

The Boolean field displays a toggle button to manage boolean values (e.g. Yes or No, 1 or 0, True or False).

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name  | Instructions                                                    |
|---------------|-----------------------------------------------------------------|
| Name          | Write the name of the Boolean field.                            |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Default value  | Choose the default value of the Boolean field: *true*, *null* or *false*.   |
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |
| Unique field   | Tick to prevent another field to be identical to this one.                  |

</TabItem>

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_json.svg" /> JSON {#json}

The JSON field allows to configure data in a JSON format, to store JSON objects or arrays.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name  | Instructions                                                    |
|---------------|-----------------------------------------------------------------|
| Name          | Write the name of the JSON field.                               |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |

</TabItem>

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_email.svg" /> Email {#email}

The Email field displays an email address field with format validation to ensure the email address is valid.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name  | Instructions                                                    |
|---------------|-----------------------------------------------------------------|
| Name          | Write the name of the Email field.                              |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Default value  | Write the default value of the Email field.                                 |
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |
| Unique field   | Tick to prevent another field to be identical to this one.                  |
| Maximum length | Tick to define a maximum number of characters allowed.                      |
| Minimum length | Tick to define a minimum number of characters allowed.                      |

</TabItem>

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_password.svg" /> Password {#password}

The Password field displays a password field that is encrypted.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name  | Instructions                                                    |
|---------------|-----------------------------------------------------------------|
| Name          | Write the name of the Password field.                           |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Default value  | Write the default value of the Password field.                              |
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |
| Maximum length | Tick to define a maximum number of characters allowed.                      |
| Minimum length | Tick to define a minimum number of characters allowed.                      |

</TabItem>

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_enum.svg" /> Enumeration {#enum}

The Enumeration field allows to configure a list of values displayed in a drop-down list.

<!--- Add note about Enumeration fields known issues (i.e. recommending a relation using either oneWay or manyWay for some use-cases instead of enum) --->

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name  | Instructions                                                    |
|---------------|-----------------------------------------------------------------|
| Name          | Write the name of the Enumeration field.                        |
| Values        | Write the values of the enumeration, one per line.              |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Default value  | Choose the default value of the Enumeration field.                          |
| Name override for GraphQL | Write a custom GraphQL schema type to override the default one for the field. |
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |

</TabItem>

</Tabs>

:::caution
Enumeration values should always have an alphabetical character preceding any number as it could otherwise cause the server to crash without notice when the GraphQL plugin is installed.
:::

#### <img width="28" src="/img/assets/icons/v5/ctb_uid.svg" /> UID {#uid}

The UID field displays a field that sets a unique identifier, optionally based on an existing other field from the same content-type.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name   | Instructions                                                    |
|----------------|-----------------------------------------------------------------|
| Name           | Write the name of the UID field. It must not contain special characters or spaces.                     |
| Attached field | Choose what existing field to attach to the UID field. Choose *None* to not attach any specific field. |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Default value  | Write the default value of the UID field.                                   |
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |
| Maximum length | Tick to define a maximum number of characters allowed.                      |
| Minimum length | Tick to define a minimum number of characters allowed.                      |

</TabItem>

</Tabs>

:::tip
The UID field can be used to create a slug based on the Attached field.
:::

#### <img width="28" src="/img/assets/icons/v5/ctb_richtext.svg" /> Rich Text (Markdown) {#rich-text-markdown}

The Rich Text (Markdown) field displays an editor with basic formatting options to manage rich text written in Markdown. This field can be used for long written content.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name | Instructions                                      |
|--------------|---------------------------------------------------|
| Name         | Write the name of the Rich Text (Markdown) field. |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                |
|----------------|-----------------------------------------------------------------------------|
| Default value  | Write the default value of the Rich Text field.                             |
| Private field  | Tick to make the field private and prevent it from being found via the API. |
| Enable localization for this field | (if [Internationalization plugin](/cms/features/internationalization) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.  |
| Maximum length | Tick to define a maximum number of characters allowed.                      |
| Minimum length | Tick to define a minimum number of characters allowed.                      |

</TabItem>

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_component.svg" /> Components {#components}

Components are a combination of several fields. Components allow to create reusable sets of fields, that can be quickly added to content-types, dynamic zones but also nested into other components.

When configuring a component through the Content-type Builder, it is possible to either:

- create a new component by clicking on *Create a new component* (see [Creating a new component](#new-component)),
- or use an existing one by clicking on *Use an existing component*.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name       | Instructions                                                    |
|--------------------|-----------------------------------------------------------------|
| Name               | Write the name of the component for the content-type.           |
| Select a component | When using an existing component only - Select from the drop-down list an existing component. |
| Type               | Choose between *Repeatable component* to be able to use several times the component for the content-type, or *Single component* to limit to only one time the use of the component. |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                            |
|----------------|-----------------------------------------------------------------------------------------|
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.              |
| Private field  | Tick to make the field private and prevent it from being found via the API.             |
| Maximum value  | For repeatable components only - Tick to define a maximum number of characters allowed. |
| Minimum value  | For repeatable components only - Tick to define a minimum number of characters allowed. |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the component to be translated per available locale. |

</TabItem>

</Tabs>

#### <img width="28" src="/img/assets/icons/v5/ctb_dz.svg" /> Dynamic zones {#dynamiczones}

Dynamic zones are a combination of components that can be added to content-types. They allow a flexible content structure as once in the Content Manager, administrators have the choice of composing and rearranging the components of the dynamic zone how they want.

<Tabs>

<TabItem value="base" label="Base settings">

| Setting name       | Instructions                                                    |
|--------------------|-----------------------------------------------------------------|
| Name               | Write the name of the dynamic zone for the content-type.        |

</TabItem>

<TabItem value="advanced" label="Advanced settings">

| Setting name   | Instructions                                                                            |
|----------------|-----------------------------------------------------------------------------------------|
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.              |
| Maximum value  | Tick to define a maximum number of characters allowed.                                  |
| Minimum value  | Tick to define a minimum number of characters allowed.                                  |
| Enable localization for this field | (if [Internationalization](/cms/features/internationalization) is enabled for the content-type) Allow the dynamic zone to be translated per available locale. |

</TabItem>

</Tabs>

After configuring the settings of the dynamic zone, its components must be configured as well. It is possible to either choose an existing component or create a new one.

:::caution
When using dynamic zones, different components cannot have the same field name with different types (or with enumeration fields, different values).
:::

#### Custom fields

[Custom fields](/cms/features/custom-fields) are a way to extend Strapi‚Äôs capabilities by adding new types of fields to content-types or components. Once installed (see [Marketplace](/cms/plugins/installing-plugins-via-marketplace) documentation), custom fields are listed in the _Custom_ tab when selecting a field for a content-type.

Each custom field type can have basic and advanced settings. The <ExternalLink to="https://market.strapi.io/plugins?categories=Custom+fields" text="Marketplace"/> lists available custom fields, and hosts dedicated documentation for each custom field, including specific settings.

### Deleting content-types

Content types and components can be deleted through the Content-type Builder. Deleting a content-type automatically deletes all entries from the Content Manager that were based on that content-type. The same goes for the deletion of a component, which is automatically deleted from every content-type or entry where it was used.

1. In the <Icon name="layout" /> Content-type Builder sub navigation, click on the name of the content-type or component to delete.
2. In the edition interface of the chosen content-type or component, click on the <Icon name="pencil-simple" /> **Edit** button on the right side of the content-type's or component's name.
3. In the edition window, click on the **Delete** button.
4. In the confirmation window, confirm the deletion.

:::caution
Deleting a content-type only deletes what was created and available from the Content-type Builder, and by extent from the admin panel of your Strapi application. All the data that was created based on that content-type is however kept in the database. For more information, please refer to the related <ExternalLink to="https://github.com/strapi/strapi/issues/1114" text="GitHub issue"/>.
:::

<ThemedImage
  alt="Deletion of content type in Content-type Builder"
  sources={{
    light: '/img/assets/content-type-builder/ctb-delete.png',
    dark: '/img/assets/content-type-builder/ctb-delete_DARK.png',
  }}
/>


 This is the content for the doc docusaurus/docs/cms/features/custom-fields.md 

 ---
title: Custom Fields
description: Learn how you can use custom fields to extend Strapi's content-types capabilities.
displayed_sidebar: cmsSidebar
toc_max_heading_level: 5
canonicalUrl: https://docs.strapi.io/cms/development/custom-fields.html
tags:
- admin panel
- Components
- Content-type Builder 
- Content Manager 
- custom fields
- register function
---

import CustomFieldRequiresPlugin from '/docs/snippets/custom-field-requires-plugin.md'

# Custom Fields

Custom fields extend Strapi‚Äôs capabilities by adding new types of fields to content-types and components. Once created or added to Strapi via plugins, custom fields can be used in the Content-Type Builder and Content Manager just like built-in fields.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">Free feature</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">None</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available and activated by default</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

## Configuration

Ready-made custom fields can be found on the [Marketplace](https://market.strapi.io/plugins?categories=Custom+fields). Once installed these, no other configuration is required, and you can start using them (see [usage](#usage)).

You can also develop your own custom field.

### Developing your own custom field

Though the recommended way to add a custom field is through creating a plugin, app-specific custom fields can also be registered within the global `register` [function](/cms/configurations/functions) found in `src/index` and `src/admin/app` files.

:::note Current limitations
* Custom fields can only be shared and distributed on the Marketplace using plugins.
* Custom fields cannot add new data types to Strapi and must use existing, built-in Strapi data types described in the [models' attributes](/cms/backend-customization/models#model-attributes) documentation. 
* You also cannot modify an existing data type.
* Special data types unique to Strapi, such as relation, media, component, or dynamic zone data types, cannot be used in custom fields.
:::

:::prerequisites
<CustomFieldRequiresPlugin components={props.components} />
:::

Custom field plugins include both a server and admin panel part. The custom field must be registered in both parts before it is usable in Strapi's admin panel.

#### Registering a custom field on the server

Strapi's server needs to be aware of all the custom fields to ensure that an attribute using a custom field is valid.

The `strapi.customFields` object exposes a `register()` method on the `Strapi` instance. This method is used to register custom fields on the server during the plugin's server [register lifecycle](/cms/plugins-development/server-api#register).

`strapi.customFields.register()` registers one or several custom field(s) on the server by passing an object (or an array of objects) with some parameters.

<details>
<summary>Parameters available to register the custom field on the server:</summary>

| Parameter                         | Description                                                                                                                                             | Type     |
| --------------------------------- |---------------------------------------------------------------------------------------------------------------------------------------------------------| -------- |
| `name`                            | The name of the custom field                                                                                                                            | `String` |
| `plugin`<br/><br/>(_optional_)    | The name of the plugin creating the custom fields<br/><br/>‚ùóÔ∏è If defined, the `pluginId` value on the admin panel registration must have the same value (see [Registering a custom field in the admin panel](#registering-a-custom-field-in-the-admin-panel)) | `String` |
| `type`                            | The data type the custom field will use                                                                                                                 | `String` |
| `inputSize`<br/><br/>(_optional_) | Parameters to define the width of a custom field's input in the admin panel                                                                             | `Object` |

The optional `inputSize` object, when specified, must contain all of the following parameters:

| Parameter     | Description                                                                                                                                               | Type      |
| ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
| `default`     | The default size in columns that the input field will occupy in the 12-column grid in the admin panel.<br/>The value can either be `4`, `6`, `8` or `12`. | `Integer` |
| `isResizable` | Whether the input can be resized or not                                                                                                                   | `Boolean` |

</details>

**Example: Registering an example "color" custom field on the server:**

In the following example, the `color-picker` plugin was created using the CLI generator (see [plugins development](/cms/plugins-development/developing-plugins)):

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/src/plugins/color-picker/server/register.js"
module.exports = ({ strapi }) => {
  strapi.customFields.register({
    name: "color",
    plugin: "color-picker",
    type: "string",
    inputSize: {
      // optional
      default: 4,
      isResizable: true,
    },
  });
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="/src/plugins/color-picker/server/register.ts"
export default ({ strapi }: { strapi: any }) => {
  strapi.customFields.register({
    name: "color",
    plugin: "color-picker",
    type: "string",
    inputSize: {
      // optional
      default: 4,
      isResizable: true,
    },
  });
};
```

</TabItem>
</Tabs>

The custom field could also be declared directly within the `strapi-server.js` file if you didn't have the plugin code scaffolded by the CLI generator:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/src/plugins/color-picker/strapi-server.js"
module.exports = {
  register({ strapi }) {
    strapi.customFields.register({
      name: "color",
      plugin: "color-picker",
      type: "text",
      inputSize: {
        // optional
        default: 4,
        isResizable: true,
      },
    });
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="/src/plugins/color-picker/strapi-server.ts"
export default {
  register({ strapi }: { strapi: any }) {
    strapi.customFields.register({
      name: "color",
      plugin: "color-picker",
      type: "text",
      inputSize: {
        // optional
        default: 4,
        isResizable: true,
      },
    });
  },
};
```

</TabItem>
</Tabs>

#### Registering a custom field in the admin panel

:::prerequisites
<CustomFieldRequiresPlugin components={props.components} />
:::

Custom fields must be registered in Strapi's admin panel to be available in the Content-type Builder and the Content Manager.

The `app.customFields` object exposes a `register()` method on the `StrapiApp` instance. This method is used to register custom fields in the admin panel during the plugin's admin [register lifecycle](/cms/plugins-development/admin-panel-api#register).

`app.customFields.register()` registers one or several custom field(s) in the admin panel by passing an object (or an array of objects) with some parameters.

<details>
<summary>Parameters available to register the custom field on the server:</summary>

| Parameter                        | Description                                                                                                                                  | Type                                                 |
| -------------------------------- |----------------------------------------------------------------------------------------------------------------------------------------------| ---------------------------------------------------- |
| `name`                           | Name of the custom field                                                                                                                     | `String`                                             |
| `pluginId`<br/><br/>(_optional_) | Name of the plugin creating the custom field<br/><br/>‚ùóÔ∏è If defined, the `plugin` value on the server registration must have the same value (see [Registering a custom field on the server](#registering-a-custom-field-on-the-server))  | `String`                                             |
| `type`                           | Existing Strapi data type the custom field will use<br/><br/>‚ùóÔ∏è Relations, media, components, or dynamic zones cannot be used.               | `String`                                             |
| `icon`<br/><br/>(_optional_)     | Icon for the custom field                                                                                                                    | `React.ComponentType`                                |
| `intlLabel`                      | Translation for the name                                                                                                                     | <ExternalLink to="https://formatjs.io/docs/react-intl/" text="IntlObject"/> |
| `intlDescription`                | Translation for the description                                                                                                              | <ExternalLink to="https://formatjs.io/docs/react-intl/" text="IntlObject"/> |
| `components`                     | Components needed to display the custom field in the Content Manager (see [components](#components))                                         |
| `options`<br/><br/>(_optional_)  | Options to be used by the Content-type Builder (see [options](#options))                                                                     | `Object`                                             |

</details>

**Example: Registering an example "color" custom field in the admin panel:**

In the following example, the `color-picker` plugin was created using the CLI generator (see [plugins development](/cms/plugins-development/developing-plugins.md)):

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/src/plugins/color-picker/admin/src/index.js"
import ColorPickerIcon from "./components/ColorPicker/ColorPickerIcon";

export default {
  register(app) {
    // ... app.addMenuLink() goes here
    // ... app.registerPlugin() goes here

    app.customFields.register({
      name: "color",
      pluginId: "color-picker", // the custom field is created by a color-picker plugin
      type: "string", // the color will be stored as a string
      intlLabel: {
        id: "color-picker.color.label",
        defaultMessage: "Color",
      },
      intlDescription: {
        id: "color-picker.color.description",
        defaultMessage: "Select any color",
      },
      icon: ColorPickerIcon, // don't forget to create/import your icon component
      components: {
        Input: async () =>
          import('./components/Input').then((module) => ({
            default: module.Input,
          })),
      },
      options: {
        // declare options here
      },
    });
  },

  // ... bootstrap() goes here
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```ts title="/src/plugins/color-picker/admin/src/index.ts"
import ColorPickerIcon from "./components/ColorPicker/ColorPickerIcon";

export default {
  register(app) {
    // ... app.addMenuLink() goes here
    // ... app.registerPlugin() goes here

    app.customFields.register({
      name: "color",
      pluginId: "color-picker", // the custom field is created by a color-picker plugin
      type: "string", // the color will be stored as a string
      intlLabel: {
        id: "color-picker.color.label",
        defaultMessage: "Color",
      },
      intlDescription: {
        id: "color-picker.color.description",
        defaultMessage: "Select any color",
      },
      icon: ColorPickerIcon, // don't forget to create/import your icon component
      components: {
        Input: async () =>
          import('./components/Input').then((module) => ({
            default: module.Input,
          })),
      },
      options: {
        // declare options here
      },
    });
  },

  // ... bootstrap() goes here
};
```

</TabItem>
</Tabs>

##### Components

`app.customFields.register()` must pass a `components` object with an `Input` React component to use in the Content Manager's edit view.

**Example: Registering an Input component:**

In the following example, the `color-picker` plugin was created using the CLI generator (see [plugins development](/cms/plugins-development/developing-plugins.md)):

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/src/plugins/color-picker/admin/src/index.js"
export default {
  register(app) {
    app.customFields.register({
      // ‚Ä¶
      components: {
        Input: async () =>
          import('./components/Input').then((module) => ({
            default: module.Input,
          })),
      },
      // ‚Ä¶
    });
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```jsx title="/src/plugins/color-picker/admin/src/index.js"
export default {
  register(app) {
    app.customFields.register({
      // ‚Ä¶
      components: {
        Input: async () =>
          import('./components/Input').then((module) => ({
            default: module.Input,
          })),
      },
      // ‚Ä¶
    });
  },
};
```

</TabItem>
</Tabs>

<details>
<summary>Props passed to the custom field <code>Input</code> component:</summary>

| Prop             | Description                                                                                                                                                                                                                               | Type                                                                 |
| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------- |
| `attribute`      | The attribute object with custom field's underlying Strapi type and options                                                                                                                                                               | `{ type: String, customField: String }`                              |
| `description`    | The field description set in [configure the view](/cms/features/content-manager#edit-view-settings)                                                                                                  | <ExternalLink to="https://formatjs.io/docs/react-intl/" text="IntlObject"/>                 |
| `placeholder`    | The field placeholder set in [configure the view](/cms/features/content-manager#edit-view-settings)                                                                                                  | <ExternalLink to="https://formatjs.io/docs/react-intl/" text="IntlObject"/>                 |
| `hint`           | The field description set in [configure the view](/cms/features/content-manager#edit-view-settings) along with min/max [validation requirements](/cms/backend-customization/models#validations) | `String`                                                             |
| `name`           | The field name set in the content-type builder                                                                                                                                                                                            | `String`                                                             |
| `intlLabel`      | The field name set in the content-type builder or configure the view                                                                                                                                                                      | <ExternalLink to="https://formatjs.io/docs/react-intl/" text="IntlObject"/>                 |
| `onChange`       | The handler for the input change event. The `name` argument references the field name. The `type` argument references the underlying Strapi type                                                                                          | `({ target: { name: String value: unknown type: String } }) => void` |
| `contentTypeUID` | The content-type the field belongs to                                                                                                                                                                                                     | `String`                                                             |
| `type`           | The custom field uid, for example `plugin::color-picker.color`                                                                                                                                                                            | `String`                                                             |
| `value`          | The input value the underlying Strapi type expects                                                                                                                                                                                        | `unknown`                                                            |
| `required`       | Whether or not the field is required                                                                                                                                                                                                      | `boolean`                                                            |
| `error`          | Error received after validation                                                                                                                                                                                                           | <ExternalLink to="https://formatjs.io/docs/react-intl/" text="IntlObject"/>                 |
| `disabled`       | Whether or not the input is disabled                                                                                                                                                                                                      | `boolean`                                                            |

As of Strapi v4.13.0, fields in the Content Manager can be auto-focussed via the `URLSearchParam` `field`. It's recommended that your input component is wrapped in React's <ExternalLink to="https://react.dev/reference/react/forwardRef" text="`forwardRef`"/> method; you should pass the corresponding `ref` to the `input` element.

<br/>
</details>

**Example: A custom text input**

In the following example we're providing a custom text input that is controlled. All inputs should be controlled otherwise their data will not be submitted on save.

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/src/plugins/<plugin-name>/admin/src/components/Input.js"
import * as React from "react";

import { useIntl } from "react-intl";

const Input = React.forwardRef((props, ref) => {
  const { attribute, disabled, intlLabel, name, onChange, required, value } =
    props; // these are just some of the props passed by the content-manager

  const { formatMessage } = useIntl();

  const handleChange = (e) => {
    onChange({
      target: { name, type: attribute.type, value: e.currentTarget.value },
    });
  };

  return (
    <label>
      {formatMessage(intlLabel)}
      <input
        ref={ref}
        name={name}
        disabled={disabled}
        value={value}
        required={required}
        onChange={handleChange}
      />
    </label>
  );
});

export default Input;
```

</TabItem>
<TabItem value="ts" label="TypeScript">

```tsx title="/src/plugins/<plugin-name>/admin/src/components/Input.ts"
import * as React from "react";

import { useIntl } from "react-intl";

const Input = React.forwardRef((props, ref) => {
  const { attribute, disabled, intlLabel, name, onChange, required, value } =
    props; // these are just some of the props passed by the content-manager

  const { formatMessage } = useIntl();

  const handleChange = (e) => {
    onChange({
      target: { name, type: attribute.type, value: e.currentTarget.value },
    });
  };

  return (
    <label>
      {formatMessage(intlLabel)}
      <input
        ref={ref}
        name={name}
        disabled={disabled}
        value={value}
        required={required}
        onChange={handleChange}
      />
    </label>
  );
});

export default Input;
```

</TabItem>
</Tabs>

:::tip
For a more detailed view of the props provided to the customFields and how they can be used check out the <ExternalLink to="https://github.com/strapi/strapi/blob/main/packages/plugins/color-picker/admin/src/components/ColorPickerInput.tsx#L80-L95" text="ColorPickerInput file"/> in the Strapi codebase.
:::

##### Options

`app.customFields.register()` can pass an additional `options` object. with the following parameters:

<details>
<summary>Parameters passed to the custom field <code>options</code> object:</summary>

| Options parameter | Description                                                                                                                               | Type                           |
| ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------ |
| `base`            | Settings available in the _Base settings_ tab of the field in the Content-type Builder                                                    | `Object` or `Array of Objects` |
| `advanced`        | Settings available in the _Advanced settings_ tab of the field in the Content-type Builder                                                | `Object` or `Array of Objects` |
| `validator`       | Validator function returning an object, used to sanitize input. Uses a <ExternalLink to="https://github.com/jquense/yup/tree/pre-v1" text="`yup` schema object"/>. | `Function`                     |

Both `base` and `advanced` settings accept an object or an array of objects, each object being a settings section. Each settings section could include:

- a `sectionTitle` to declare the title of the section as an <ExternalLink to="https://formatjs.io/docs/react-intl/" text="IntlObject"/>
- and a list of `items` as an array of objects.

Each object in the `items` array can contain the following parameters:

| Items parameter | Description                                                        | Type                                                 |
| --------------- | ------------------------------------------------------------------ | ---------------------------------------------------- |
| `name`          | Label of the input.<br/>Must use the `options.settingName` format. | `String`                                             |
| `description`   | Description of the input to use in the Content-type Builder        | `String`                                             |
| `intlLabel`     | Translation for the label of the input                             | <ExternalLink to="https://formatjs.io/docs/react-intl/" text="`IntlObject`"/> |
| `type`          | Type of the input (e.g., `select`, `checkbox`)                     | `String`                                             |

</details>

**Example: Declaring options for an example "color" custom field:**

In the following example, the `color-picker` plugin was created using the CLI generator (see [plugins development](/cms/plugins-development/developing-plugins.md)):

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="/src/plugins/color-picker/admin/src/index.js"
// imports go here (ColorPickerIcon, pluginId, yup package‚Ä¶)

export default {
  register(app) {
    // ... app.addMenuLink() goes here
    // ... app.registerPlugin() goes here
    app.customFields.register({
      // ‚Ä¶
      options: {
        base: [
          /*
            Declare settings to be added to the "Base settings" section
            of the field in the Content-Type Builder
          */
          {
            sectionTitle: {
              // Add a "Format" settings section
              id: "color-picker.color.section.format",
              defaultMessage: "Format",
            },
            items: [
              // Add settings items to the section
              {
                /*
                  Add a "Color format" dropdown
                  to choose between 2 different format options
                  for the color value: hexadecimal or RGBA
                */
                intlLabel: {
                  id: "color-picker.color.format.label",
                  defaultMessage: "Color format",
                },
                name: "options.format",
                type: "select",
                value: "hex", // option selected by default
                options: [
                  // List all available "Color format" options
                  {
                    key: "hex",
                    defaultValue: "hex",
                    value: "hex",
                    metadatas: {
                      intlLabel: {
                        id: "color-picker.color.format.hex",
                        defaultMessage: "Hexadecimal",
                      },
                    },
                  },
                  {
                    key: "rgba",
                    value: "rgba",
                    metadatas: {
                      intlLabel: {
                        id: "color-picker.color.format.rgba",
                        defaultMessage: "RGBA",
                      },
                    },
                  },
                ],
              },
            ],
          },
        ],
        advanced: [
          /*
            Declare settings to be added to the "Advanced settings" section
            of the field in the Content-Type Builder
          */
        ],
        validator: (args) => ({
          format: yup.string().required({
            id: "options.color-picker.format.error",
            defaultMessage: "The color format is required",
          }),
        }),
      },
    });
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```tsx title="/src/plugins/color-picker/admin/src/index.ts"
// imports go here (ColorPickerIcon, pluginId, yup package‚Ä¶)

export default {
  register(app) {
    // ... app.addMenuLink() goes here
    // ... app.registerPlugin() goes here
    app.customFields.register({
      // ‚Ä¶
      options: {
        base: [
          /*
            Declare settings to be added to the "Base settings" section
            of the field in the Content-Type Builder
          */
          {
            sectionTitle: {
              // Add a "Format" settings section
              id: "color-picker.color.section.format",
              defaultMessage: "Format",
            },
            items: [
              // Add settings items to the section
              {
                /*
                  Add a "Color format" dropdown
                  to choose between 2 different format options
                  for the color value: hexadecimal or RGBA
                */
                intlLabel: {
                  id: "color-picker.color.format.label",
                  defaultMessage: "Color format",
                },
                name: "options.format",
                type: "select",
                value: "hex", // option selected by default
                options: [
                  // List all available "Color format" options
                  {
                    key: "hex",
                    defaultValue: "hex",
                    value: "hex",
                    metadatas: {
                      intlLabel: {
                        id: "color-picker.color.format.hex",
                        defaultMessage: "Hexadecimal",
                      },
                    },
                  },
                  {
                    key: "rgba",
                    value: "rgba",
                    metadatas: {
                      intlLabel: {
                        id: "color-picker.color.format.rgba",
                        defaultMessage: "RGBA",
                      },
                    },
                  },
                ],
              },
            ],
          },
        ],
        advanced: [
          /*
            Declare settings to be added to the "Advanced settings" section
            of the field in the Content-Type Builder
          */
        ],
        validator: (args) => ({
          format: yup.string().required({
            id: "options.color-picker.format.error",
            defaultMessage: "The color format is required",
          }),
        }),
      },
    });
  },
};
```

</TabItem>
</Tabs>

<!-- TODO: replace these tip and links by proper documentation of all the possible shapes and parameters for `options` -->

:::tip
The Strapi codebase gives an example of how settings objects can be described: check the <ExternalLink to="https://github.com/strapi/strapi/blob/main/packages/core/content-type-builder/admin/src/components/FormModal/attributes/baseForm.ts" text="`baseForm.ts`"/> file for the `base` settings and the <ExternalLink to="https://github.com/strapi/strapi/blob/main/packages/core/content-type-builder/admin/src/components/FormModal/attributes/advancedForm.ts" text="`advancedForm.ts`"/> file for the `advanced` settings. The base form lists the settings items inline but the advanced form gets the items from an <ExternalLink to="https://github.com/strapi/strapi/blob/main/packages/core/content-type-builder/admin/src/components/FormModal/attributes/attributeOptions.js" text="`attributeOptions.js`"/> file.
:::

## Usage

<br/>

### In the admin panel

Custom fields can be added to Strapi either by installing them from the [Marketplace](/cms/plugins/installing-plugins-via-marketplace) or by creating your own.

Once added to Strapi, custom fields can be added to any content type. Custom fields are listed in the _Custom_ tab when selecting a field for a content-type.

<!-- TODO: add screenshot of content-type builder with custom fields tab here -->

Each custom field type can have basic and advanced settings. The <ExternalLink to="https://market.strapi.io/plugins?categories=Custom+fields" text="Marketplace"/> lists available custom fields, and hosts dedicated documentation for each custom field, including specific settings.

### In the code

Once created and used, custom fields are defined like any other attribute in the model's schema. 

Custom fields are explicitly defined in the [attributes](/cms/backend-customization/models#model-attributes) of a model with `type: customField`.

As compared to how other types of models are defined, custom fields' attributes also show the following specificities:

- Custom field have a `customField` attribute. Its value acts as a unique identifier to indicate which registered custom field should be used, and follows one of these 2 formats:

    | Format               |  Origin |
    |----------------------|------------------|
    | `plugin::plugin-name.field-name` | The custom field was created through a plugin |
    | `global::field-name` | The custom field is specific to the current Strapi application and was created directly within the `register` [function](/cms/configurations/functions) |

- Custom fields can have additional parameters depending on what has been defined when registering the custom field (see [server registration](#registering-a-custom-field-on-the-server) and [admin panel registration](#registering-a-custom-field-in-the-admin-panel)).

**Example: A simple `color` custom field model definition:**

```json title="/src/api/[apiName]/[content-type-name]/content-types/schema.json"

{
  // ‚Ä¶
  "attributes": {
    "color": { // name of the custom field defined in the Content-Type Builder
      "type": "customField",
      "customField": "plugin::color-picker.color",
      "options": {
        "format": "hex"
      }
    }
  }
  // ‚Ä¶
}
```


 This is the content for the doc docusaurus/docs/cms/features/data-management.md 

 ---
title: Data Management
sidebar_position: 1
description: Learn to use the Data Management to import, export, or transfer data between different Strapi instances.
toc_max_heading_level: 5
tags:
- admin panel
- features
- data management
- data import
- data export
- data transfer
---

# Data Management

The Data Management feature can be used to import, export, or transfer data. Data Management is  CLI-based only, but is partly configured in the admin panel.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">Free feature</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">Minimum "Access the transfer tokens settings page" permission in Roles > Settings - Transfer tokens</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available and activated if a transfer salt is defined</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

## Configuration

Some configuration options for the Data Management feature are available in the admin panel, and some are handled via your Strapi project's code.

### Admin panel settings

:::prerequisites
A `transfer.token.salt` should be defined in the `config/admin` configuration file (see [code-based configuration](#code-based-configuration)).
:::

**Path to configure the feature:** <Icon name="gear-six" /> *Settings > Global settings > Transfer Tokens*

Transfer tokens allow users to authorize the `strapi transfer` CLI command (see [Data transfer](/cms/data-management/transfer) documentation).

<ThemedImage
  alt="Transfer tokens"
  sources={{
    light: '/img/assets/settings/settings_transfer-token.png',
    dark: '/img/assets/settings/settings_transfer-token_DARK.png',
  }}
/>

The *Transfer Tokens* interface displays a table listing all of the created Transfer tokens. More specifically, it displays each Transfer token's name, description, date of creation, and date of last use.

From there, administrators can also:

- Click on the <Icon name="pencil-simple" /> to edit a transfer token's name, description, or type, or [regenerate the token](#regenerating-a-transfer-token).
- Click on the <Icon name="trash" /> to delete a Transfer token.

#### Creating a new transfer token

1. Click on the **Create new Transfer Token** button.
2. In the Transfer token edition interface, configure the new Transfer token:
    | Setting name   | Instructions                                                                  |
    | -------------- | ----------------------------------------------------------------------------- |
    | Name           | Write the name of the Transfer token.                                         |
    | Description    | (optional) Write a description for the Transfer token.                        |
    | Token duration | Choose a token duration: *7 days*, *30 days*, *90 days*, or *Unlimited*.      |
    | Token type | Choose a token type:<ul><li>*Push* to allow transfers from local to remote instances only,</li><li>*Pull* to allow transfers from remote to local instances only,</li><li>or *Full Access* to allow both types of transfer.</li></ul>      |
3. Click on the **Save** button. The new Transfer token will be displayed at the top of the interface, along with a copy button <Icon name="copy" />.

<ThemedImage
  alt="Custom Transfer Token"
  sources={{
    light: '/img/assets/settings/settings_create-transfer-token.png',
    dark: '/img/assets/settings/settings_create-transfer-token_DARK.png',
  }}
/>

:::caution
For security reasons, Transfer tokens are only shown right after they have been created. When refreshing the page or navigating elsewhere in the admin panel, the newly created Transfer token will be hidden and will not be displayed again.
:::

#### Regenerating a Transfer token

1. Click on the Transfer token's edit button.
2. Click on the **Regenerate** button.
3. Click on the **Regenerate** button to confirm in the dialog.
4. Copy the new Transfer token displayed at the top of the interface.

### Code-based configuration

A `transfer.token.salt` value must be defined in [the `config/admin` file](/cms/configurations/admin-panel) so that transfer tokens can be properly generated. If no value is defined, the feature will be disabled. The salt can be any long string, and for increased security, it's best to add it to the [environment variables](/cms/configurations/environment) and import it using the `env()` utility as in the following example:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/admin.js"
module.exports = ({ env }) => ({
  // ‚Ä¶
  transfer: { 
    token: { 
      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),
    } 
  },
});

```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/admin.ts"
export default ({ env }) => ({
  // ‚Ä¶
  transfer: { 
    token: { 
      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),
    } 
  },
});
```

</TabItem>

</Tabs>

## Usage

The Data Management system is CLI-based only, meaning any import, export, or transfer command must be executed from the terminal. Exhaustive documentation for each command is accessible from the following pages:

<CustomDocCardsWrapper>
<CustomDocCard icon="terminal" title="Import" description="Learn how to import data into a Strapi instance." link="/cms/data-management/import"/>
<CustomDocCard icon="terminal" title="Export" description="Learn how to export data from a Strapi instance." link="/cms/data-management/export"/>
<CustomDocCard icon="terminal" title="Transfer" description="Learn how to transfer data from a Strapi instance to another one." link="/cms/data-management/transfer"/>
</CustomDocCardsWrapper>


 This is the content for the doc docusaurus/docs/cms/features/draft-and-publish.md 

 ---
title: Draft & Publish
description: Learn how you can use the Draft & Publish feature of Strapi 5 to manage drafts for content.
displayed_sidebar: cmsSidebar
toc_max_heading_level: 5
tags:
 - content manager
 - content type builder
 - draft & publish
 - publishing a draft
 - unpublishing content
 - features
---

# Draft & Publish

The Draft & Publish feature allows to manage drafts for your content.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">Free feature</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">None</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available but disabled by default</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

<Guideflow lightId="3r3wj5lbnk" darkId="ok8y5xehxp"/>

## Configuration

**Path to configure the feature:** <Icon name="layout" /> Content Type Builder

For your content types to be managed with Draft & Publish in the Content Manager, the feature must be enabled through the Content-type Builder. Draft & Publish can be configured for each content type.

1. Either edit an already created content type of your choice, or create a new content type (see [Content Type Builder](/cms/features/content-type-builder) documentation for more information).
2. Go to the **Advanced settings** tab.
3. Tick the Draft & Publish option.
4. Click the **Finish** button.

<ThemedImage
  alt="Content-type Builder's advanced settings"
  sources={{
    light: '/img/assets/content-type-builder/advanced-settings.png',
    dark: '/img/assets/content-type-builder/advanced-settings_DARK.png',
  }}
/>

## Usage

With Draft & Publish enabled, the [Content Manager's edit view](/cms/features/content-manager#overview) indicates the current status of your content type's entry at the top of the interface. Your content can have 3 statuses:

- <span style={{color:"#5cb176"}}>Published</span>: The content was previously published. There are no pending draft changes saved.
- <span style={{color:"#ac73e6"}}>Modified</span>: The content was previously published. You made some changes to the draft version and saved these changes, but the changes have not been published yet.
- <span style={{color:"#7b79ff"}}>Draft</span>: The content has never been published yet.

### Working with drafts

**Path:** <Icon name="feather" /> Content Manager, edit view of your content type

While editing a document, you can see 2 tabs:

- The _Draft_ tab is where you can edit your content.
- The _Published_ tab is a read-only tab where edition of all fields is disabled. The _Published_ tab only exists to show what is the content of fields in the published version.

<ThemedImage
  alt="Editing draft version"
  sources={{
    light: '/img/assets/content-manager/editing_draft_version3.png',
    dark: '/img/assets/content-manager/editing_draft_version3_DARK.png',
  }}
/>

By default, each newly created content is a draft. Drafts can be modified and saved at will, using the **Save** button in the _Entry_ box on the right side of the interface, until they are ready to be published.

Once you made changes to a draft, you have 3 possible options, all available in the _Entry_ box on the right side of the interface:
- **Publish** your document (see [Publishing a draft](#publishing-a-draft)),
- **Save** your draft for later retrieval,
- or discard changes, by clicking on <Icon name="dots-three-outline" /> and choosing <Icon name="x-circle" /> **Discard changes**.

### Publishing a draft

**Path:** <Icon name="feather" /> Content Manager, edit view of your content type

To publish a draft, click on the **Publish** button in the _Entry_ box on the right side of the interface.

After a draft is published:

- The content of the _Draft_ and _Published_ tabs should be exactly the same (but the _Published_ tab remains read-only).
- The status, below the document's title, will switch to "Published".

:::caution
Before publishing a draft, make sure it doesn't have relations with other non-published content, otherwise some of the content may not be available through the API.
:::

When a document has both a draft and a published version available, the published version can be found in the _Published_ tab. If the document has only a draft version, you can not click on the _Published_ tab.

<ThemedImage
  alt="Editing published version"
  sources={{
    light: '/img/assets/content-manager/editing_published_version3.png',
    dark: '/img/assets/content-manager/editing_published_version3_DARK.png',
  }}
/>

:::tip
To schedule publication (i.e. convert a draft to a published entry at a given date and time) you can include it in a release and schedule the publication of that release. Please refer to the [Releases feature](/cms/features/releases) documentation for more information.
:::

### Unpublishing content

**Path:** <Icon name="feather" /> Content Manager, edit view of your content type

To unpublish a previously published content: from the _Draft_ tab, click on <Icon name="dots-three-outline" /> in the _Entry_ box on the right side of the interface and choose the **Unpublish** button.

If the draft version of the document contains content different from the published version, you can decide what to do with both content when unpublishing:

1. From the _Draft_ tab, click on <Icon name="dots-three-outline" /> in the _Entry_ box on the right side of the interface and choose the **Unpublish** button.
2. In the Confirmation dialog that opens, you can choose to:
    - **Unpublish and keep last draft**, so that all the content you currently have in the _Draft_ tab is preserved, but the all the content from the _Published_ tab is definitely gone
    - **Unpublish and replace last draft** to discard any existing content in the _Draft_ tab and replace it with the content of all fields from the _Published_ tab
3. Click **Confirm**. The desired changes will be applied to both the _Draft_ and _Published_ tabs and the new status of the entry will also be reflected below the entry title.

<ThemedImage
  alt="Unpublish a document"
  sources={{
    light: '/img/assets/content-manager/content-manager_unpublish.png',
    dark: '/img/assets/content-manager/content-manager_unpublish_DARK.png',
  }}
/>

### Bulk actions

**Path:** <Icon name="feather" /> Content Manager, list view of your content type

Selecting multiple entries from the [Content Manager's list view](/cms/features/content-manager#overview) will display additional buttons to publish or unpublish several entries simultaneously. This is what is called "bulk publishing/unpublishing".

:::caution
If the [Internationalization feature](/cms/features/internationalization) is installed, the bulk publish/unpublish actions only apply to the currently selected locale.
:::

<ThemedImage
  alt="Unpublish a document"
  sources={{
    light: '/img/assets/content-manager/bulk-publish.png',
    dark: '/img/assets/content-manager/bulk-publish_DARK.png',
  }}
/>

#### Bulk publishing drafts

To publish several entries at the same time:

1. From the list view of the Content Manager, select your entries to publish by ticking the box on the left side of the entries' record.
2. Click on the **Publish** button located above the header of the table.
3. In the _Publish entries_ dialog, check the list of selected entries and their status:
   - <Icon name="check-circle" color="rgb(58,115,66)"/> Ready to publish: the entry can be published
   - <Icon name="x-circle" color="rgb(190,51,33)" /> "[field name] is required", "[field name] is too short" or "[field name] is too long": the entry cannot be published because of the issue stated in the red warning message.
4. (optional) If some of your entries have a <Icon name="x-circle" color="rgb(190,51,33)" /> status, click the <Icon name="pencil-simple" /> edit buttons to fix the issues until all entries have the <Icon name="check-circle" color="rgb(58,115,66)"/> Ready to publish status. Note that you will have to click on the **Refresh** button to update the _Publish entries_ dialog as you fix the various entries issues.
5. Click the **Publish** button.
6. In the confirmation dialog box, confirm your choice by clicking again on the **Publish** button.

#### Bulk unpublishing content

To unpublish several entries at the same time:

1. From the list view of the Content Manager, select your entries to unpublish by ticking the box on the left side of the entries' record.
2. Click on the **Unpublish** button located above the header of the table.
3. In the confirmation dialog box, confirm your choice by clicking again on the **Unpublish** button.

### Usage with APIs

Draft or published content can be requested, created, updated, and deleted using the `status` parameter through the various front-end APIs accessible from [Strapi's Content API](/cms/api/content-api):

<CustomDocCardsWrapper>
<CustomDocCard icon="cube" title="REST API" description="Learn how to use the status parameter with the REST API." link="/cms/api/rest/status"/>
<CustomDocCard icon="cube" title="GraphQL API" description="Learn how to use the status parameter with GraphQL API." link="/cms/api/graphql#status"/>
</CustomDocCardsWrapper>

On the back-end server of Strapi, the Document Service API can also be used to interact with localized content:

<CustomDocCardsWrapper>
<CustomDocCard icon="cube" title="Document Service API" description="Learn how to use the status parameter with the Document Service API." link="/cms/api/document-service/status"/>
</CustomDocCardsWrapper>



 This is the content for the doc docusaurus/docs/cms/features/email.md 

 ---
title: Email
displayed_sidebar: cmsSidebar
toc_max_heading_level: 5
description: Send email from your server or externals providers.
tags:
- admin panel
- controllers 
- email
- lifecycle hooks
- services
- features
---

# Email

The Email feature enables Strapi applications to send emails from a server or an external provider.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">Free feature</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">Email > "send" permission for the user to send emails via the backend server</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available by default</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

## Configuration

Most configuration options for the Email feature are handled via your Strapi project's code. The Email feature is not configurable in the admin panel, however users can test email delivery if it has been setup by an administrator.

### Admin panel settings

**Path to configure the feature:** <Icon name="gear-six" /> Settings > Email feature > Configuration

<ThemedImage
  alt="Email configuration"
  sources={{
    light: '/img/assets/settings/settings-email.png',
    dark: '/img/assets/settings/settings-email_DARK.png',
  }}
/>

In the Configuration interface, only the email address field under "Test email delivery" is modifiable by users. A **Send test email** button sends a test email.

This page is only visible if the current role has the "Access the Email Settings page" permission enabled (see [RBAC feature](/cms/features/rbac) documentation for more information):

<ThemedImage
  alt="Email configuration"
  sources={{
    light: '/img/assets/settings/settings-email-config-role.png',
    dark: '/img/assets/settings/settings-email-config-role_DARK.png',
  }}
/>

### Code-based configuration

The Email feature requires a provider and a provider configuration in the `config/plugins.js|ts` file. See [providers](#providers) for detailed installation and configuration instructions.

<ExternalLink to="https://www.npmjs.com/package/sendmail" text="Sendmail"/> is the default email provider in the Strapi Email feature. It provides functionality for the local development environment but is not production-ready in the default configuration. For production stage applications you need to further configure `Sendmail` or change providers.

#### Email configuration options

Plugins configuration are defined in the `config/plugins.js` file or `config/plugins.ts` file. Please refer to [providers](#providers) for detailed provider-specific installation and configuration instructions.

| Option                    | Type            | Description                                                                                                                                            | Default Value  | Notes    |
|---------------------------|-----------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|----------------|----------|
| `provider`                | `string`        | The email provider to use.                                                                                                                             | `sendmail`     | Required |
| `providerOptions`         | `object`        | The email provider options.                                                                                                                            | `{}`           | Optional |
| `providerOptions.apiKey`  | `string`        | The API key for the email provider.                                                                                                                    | `''`           | Optional |
| `settings`                | `object`        | The email settings.                                                                                                                                    | `{}`           | Optional |
| `settings.defaultFrom`    | `string`        | The default email address to use as the sender.                                                                                                        | `''`           | Optional |
| `settings.defaultReplyTo` | `string`        | The default email address to use as the reply-to address.                                                                                              | `''`           | Optional |
| `ratelimit`               | `object`        | The email rate limit settings.                                                                                                                         | `{}`           | Optional |
| `ratelimit.enabled`       | `boolean`       | Whether to enable rate limiting.                                                                                                                       | `true`         | Optional |
| `ratelimit.interval`      | `string`        | The interval for rate limiting in minutes.                                                                                                             | `5`            | Optional |
| `ratelimit.max`           | `number`        | The maximum number of requests allowed during the interval.                                                                                            | `5`            | Optional |
| `ratelimit.delayAfter`    | `number`        | The number of requests allowed before rate limiting is applied.                                                                                        | `1`            | Optional |
| `ratelimit.timeWait`      | `number`        | Time to wait before responding to a request (in milliseconds).                                                                                         | `1`            | Optional |
| `ratelimit.prefixKey`     | `string`        | The prefix for the rate limit key.                                                                                                                     | `${userEmail}` | Optional |
| `ratelimit.whitelist`     | `array(string)` | Array of IP addresses to whitelist from rate limiting.                                                                                                 | `[]`           | Optional |
| `ratelimit.store`         | `object`        | Rate limiting storage location and for more information please see the <ExternalLink text="koa2-ratelimit documentation" to="https://www.npmjs.com/package/koa2-ratelimit"/>. | `MemoryStore`  | Optional |

#### Providers

The Email feature can be extended via the installation and configuration of additional providers.

Providers add an extension to the core capabilities of the plugin, for example to use Amazon SES for emails instead of Sendmail.

There are both official providers maintained by Strapi ‚Äî discoverable via the [Marketplace](/cms/plugins/installing-plugins-via-marketplace) ‚Äî and many community maintained providers available via <ExternalLink to="https://www.npmjs.com/" text="npm"/>.

A provider can be configured to be [private](#private-providers) to ensure asset URLs will be signed for secure access.

##### Installing providers

New providers can be installed using `npm` or `yarn` using the following format `@strapi/provider-<plugin>-<provider> --save`.

For example, to install the Sendgrid provider:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="Yarn">


```bash
yarn add @strapi/provider-email-sendgrid
```

</TabItem>

<TabItem value="npm" label="NPM">

```bash
npm install @strapi/provider-email-sendgrid --save
```

</TabItem>

</Tabs>

##### Configuring providers

Newly installed providers are enabled and configured in [the `/config/plugins` file](/cms/configurations/plugins). If this file does not exist you must create it.

Each provider will have different configuration settings available. Review the respective entry for that provider in the [Marketplace](/cms/plugins/installing-plugins-via-marketplace) or <ExternalLink to="https://www.npmjs.com/" text="npm"/> to learn more.

The following is an example configuration for the Sendgrid provider:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"

module.exports = ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'sendgrid', // For community providers pass the full package name (e.g. provider: 'strapi-provider-email-mandrill')
      providerOptions: {
        apiKey: env('SENDGRID_API_KEY'),
      },
      settings: {
        defaultFrom: 'juliasedefdjian@strapi.io',
        defaultReplyTo: 'juliasedefdjian@strapi.io',
        testAddress: 'juliasedefdjian@strapi.io',
      },
    },
  },
  // ...
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/plugins.ts"

export default ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'sendgrid', // For community providers pass the full package name (e.g. provider: 'strapi-provider-email-mandrill')
      providerOptions: {
        apiKey: env('SENDGRID_API_KEY'),
      },
      settings: {
        defaultFrom: 'juliasedefdjian@strapi.io',
        defaultReplyTo: 'juliasedefdjian@strapi.io',
        testAddress: 'juliasedefdjian@strapi.io',
      },
    },
  },
  // ...
});
```

</TabItem>

</Tabs>

:::note

* When using a different provider per environment, specify the correct configuration in `/config/env/${yourEnvironment}/plugins.js|ts` (See [Environments](/cms/configurations/environment)).
* Only one email provider will be active at a time. If the email provider setting isn't picked up by Strapi, verify the `plugins.js|ts` file is in the correct folder.
* When testing the new email provider with those two email templates created during strapi setup, the _shipper email_ on the template defaults to `no-reply@strapi.io` and needs to be updated according to your email provider, otherwise it will fail the test (See [Configure templates locally](/cms/features/users-permissions#templating-emails)).

:::

###### Configuration per environment

When configuring your provider you might want to change the configuration based on the `NODE_ENV` environment variable or use environment specific credentials.

You can set a specific configuration in the `/config/env/{env}/plugins.js|ts` configuration file and it will be used to overwrite the default configuration.

##### Creating providers

To implement your own custom provider you must <ExternalLink to="https://docs.npmjs.com/creating-node-js-modules" text="create a Node.js module"/>.

The interface that must be exported depends on the plugin you are developing the provider for. The following is a template for the Email feature:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js
module.exports = {
  init: (providerOptions = {}, settings = {}) => {
    return {
      send: async options => {},
    };
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts
export {
  init: (providerOptions = {}, settings = {}) => {
    return {
      send: async options => {},
    };
  },
};
```

</TabItem>

</Tabs>

In the send function you will have access to:

* `providerOptions` that contains configurations written in `plugins.js|ts`
* `settings` that contains configurations written in `plugins.js|ts`
* `options` that contains options you send when you call the send function from the email plugin service

You can review the <ExternalLink to="https://github.com/strapi/strapi/tree/master/packages/providers" text="Strapi-maintained providers"/> for example implementations.

After creating your new provider you can <ExternalLink to="https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages" text="publish it to npm"/> to share with the community or [use it locally](#local-providers) for your project only.

###### Local providers

If you want to create your own provider without publishing it on npm you can follow these steps:

1. Create a `providers` folder in your application.
2. Create your provider (e.g. `/providers/strapi-provider-<plugin>-<provider>`)
3. Then update your `package.json` to link your `strapi-provider-<plugin>-<provider>` dependency to the <ExternalLink to="https://docs.npmjs.com/files/package.json#local-paths" text="local path"/> of your new provider.

```json
{
  ...
  "dependencies": {
    ...
    "strapi-provider-<plugin>-<provider>": "file:providers/strapi-provider-<plugin>-<provider>",
    ...
  }
}
```

4. Update your `/config/plugins.js|ts` file to [configure the provider](#configuring-providers).
5. Finally, run `yarn` or `npm install` to install your new custom provider.

###### Private providers

You can set up a private provider, meaning that every asset URL displayed in the Content Manager will be signed for secure access.

To enable private providers, you must implement the `isPrivate()` method and return `true`.

In the backend, Strapi generates a signed URL for each asset using the `getSignedUrl(file)` method implemented in the provider. The signed URL includes an encrypted signature that allows the user to access the asset (but normally only for a limited time and with specific restrictions, depending on the provider).

Note that for security reasons, the content API will not provide any signed URLs. Instead, developers using the API should sign the urls themselves.

## Usage

The Email feature uses the Strapi global API, meaning it can be called from anywhere inside a Strapi application, either from the back-end server itself through a [controller or service](#controller-service), or from the admin panel, for example in response to an event (using [lifecycle hooks](#lifecycle-hook)). 

### Sending emails with a controller or service {#controller-service}

The Email feature has an `email` [service](/cms/backend-customization/services) that contains 2 functions to send emails:

* `send()` directly contains the email contents,
* `sendTemplatedEmail()` consumes data from the Content Manager to populate emails, streamlining programmatic emails.

#### Using the `send()` function

To trigger an email in response to a user action add the `send()` function to a [controller](/cms/backend-customization/controllers) or [service](/cms/backend-customization/services). The send function has the following properties:

| Property  | Type     | Format        | Description                                           |
|-----------|----------|---------------|-------------------------------------------------------|
| `from`    | `string` | email address | If not specified, uses `defaultFrom` in `plugins.js`. |
| `to`      | `string` | email address | Required                                              |
| `cc`      | `string` | email address | Optional                                              |
| `bcc`     | `string` | email address | Optional                                              |
| `replyTo` | `string` | email address | Optional                                              |
| `subject` | `string` | -             | Required                                              |
| `text`    | `string` | -             | Either `text` or `html` is required.                  |
| `html`    | `string` | HTML          | Either `text` or `html` is required.                  |

The following code example can be used in a controller or a service:

```js title="/src/api/my-api-name/controllers/my-api-name.ts|js (or /src/api/my-api-name/services/my-api-name.ts|js)"
await strapi.plugins['email'].services.email.send({
  to: 'valid email address',
  from: 'your verified email address', //e.g. single sender verification in SendGrid
  cc: 'valid email address',
  bcc: 'valid email address',
  replyTo: 'valid email address',
  subject: 'The Strapi Email feature worked successfully',
  text: 'Hello world!',
  html: 'Hello world!',
}),
```

#### Using the `sendTemplatedEmail()` function

The `sendTemplatedEmail()` function is used to compose emails from a template. The function compiles the email from the available properties and then sends the email.

To use the `sendTemplatedEmail()` function, define the `emailTemplate` object and add the function to a controller or service. The function calls the `emailTemplate` object, and can optionally call the `emailOptions` and `data` objects:

| Parameter       | Description                                                                                                                                | Type     | Default |
|-----------------|--------------------------------------------------------------------------------------------------------------------------------------------|----------|---------|
| `emailOptions` <br/> Optional | Contains email addressing properties: `to`, `from`, `replyTo`, `cc`, and `bcc`                                                             | `object` | { }      |
| `emailTemplate` | Contains email content properties: `subject`, `text`, and `html` using <ExternalLink to="https://lodash.com/docs/4.17.15#template" text="Lodash string templates"/> | `object` | { }      |
| `data`  <br/> Optional          | Contains the data used to compile the templates                                                                                            | `object` | { }      |

The following code example can be used in a controller or a service:

```js title="/src/api/my-api-name/controllers/my-api-name.js (or ./src/api/my-api-name/services/my-api-name.js)"
const emailTemplate = {
  subject: 'Welcome <%= user.firstname %>',
  text: `Welcome to mywebsite.fr!
    Your account is now linked with: <%= user.email %>.`,
  html: `<h1>Welcome to mywebsite.fr!</h1>
    <p>Your account is now linked with: <%= user.email %>.<p>`,
};

await strapi.plugins['email'].services.email.sendTemplatedEmail(
  {
    to: user.email,
    // from: is not specified, the defaultFrom is used.
  },
    emailTemplate,
  {
    user: _.pick(user, ['username', 'email', 'firstname', 'lastname']),
  }
);
```

### Sending emails from a lifecycle hook {#lifecycle-hook}

 To trigger an email based on administrator actions in the admin panel use [lifecycle hooks](/cms/backend-customization/models#lifecycle-hooks) and the [`send()` function](#using-the-send-function). 

 The following example illustrates how to send an email each time a new content entry is added in the Content Manager use the `afterCreate` lifecycle hook:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/src/api/my-api-name/content-types/my-content-type-name/lifecycles.js"

module.exports = {
    async afterCreate(event) {    // Connected to "Save" button in admin panel
        const { result } = event;

        try{
            await strapi.plugin('email').service('email').send({ // you could also do: await strapi.service('plugin:email.email').send({
              to: 'valid email address',
              from: 'your verified email address', // e.g. single sender verification in SendGrid
              cc: 'valid email address',
              bcc: 'valid email address',
              replyTo: 'valid email address',
              subject: 'The Strapi Email feature worked successfully',
              text: '${fieldName}', // Replace with a valid field ID
              html: 'Hello world!', 
                
            })
        } catch(err) {
            console.log(err);
        }
    }
}
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/src/api/my-api-name/content-types/my-content-type-name/lifecycles.ts"

export default {
  async afterCreate(event) {    // Connected to "Save" button in admin panel
    const { result } = event;

    try{
      await strapi.plugins['email'].services.email.send({
        to: 'valid email address',
        from: 'your verified email address', // e.g. single sender verification in SendGrid
        cc: 'valid email address',
        bcc: 'valid email address',
        replyTo: 'valid email address',
        subject: 'The Strapi Email feature worked successfully',
        text: '${fieldName}', // Replace with a valid field ID
        html: 'Hello world!', 
      })
    } catch(err) {
      console.log(err);
    }
  }
}

```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/cms/features/internationalization.md 

 ---
title: Internationalization
description: Learn how to use the Internationalization (i18n) feature that enables content managers to translate the content
toc_max_heading_level: 5
tags:
- admin panel
- internationalization
- i18n
- translation
- locale
- features
---

# Internationalization (i18n)

The Internationalization feature allows to manage content in different languages, called "locales".

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">Free feature</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">None</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available but disabled by default</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

<Guideflow lightId="zkj5431ser" darkId="vkm9nn0t3p"/>

## Configuration

Before being usable in the Content Manager, the Internationalization feature must be configured from <Icon name="gear-six" /> *Settings*, and it should be enabled on your content types from the <Icon name="layout" /> _Content-type Builder_.

### Content-type Builder

**Path to configure the feature:** <Icon name="layout" /> _Content-type Builder_

For your content types to be translatable with Internationalization in the Content Manager, the feature must be enabled through the Content-type Builder. Internationalization can be configured for each content type and/or field.

1. Either edit the already created content type/field of your choice, or create a new content type/field.
2. Go to the **Advanced settings** tab.
3. Tick the option named "Internationalization" at content-type level, and "Enable localization for this field" at field level.

<ThemedImage
  alt="Content-type Builder's advanced settings"
  sources={{
    light: '/img/assets/content-type-builder/advanced-settings.png',
    dark: '/img/assets/content-type-builder/advanced-settings_DARK.png',
  }}
/>

### Settings

**Path to configure the feature:** <Icon name="gear-six" /> *Settings > Global Settings > Internationalization*

The *Internationalization* interface displays a table listing all locales available for the Strapi application. By default, only the English locale is configured and set as the default locale. 

For each locale, the table displays the default ISO code of the locale, its optional display name and indicates if the locale is set as the default one. From the table, administrators can also:

- Click on the edit button <Icon name="pencil-simple" /> to edit a locale
- Click on the delete button <Icon name="trash" /> to delete a locale

#### Adding a new locale

Administrators can add and manage as many locales as they want. There can however only be one locale set as the default one for the whole Strapi application.

:::note
It is not possible to create custom locales. Locales can only be created based on <ExternalLink to="https://github.com/strapi/strapi/blob/main/packages/plugins/i18n/server/src/constants/iso-locales.json" text="the 500+ pre-created list of locales"/> set by Strapi.
:::

1. Click on the **Add new locale** button.
2. In the locale addition window, choose your new locale among the *Locales* drop-down list. The latter lists alphabetically all locales, displayed as their ISO code, that can be added to your Strapi application.
3. (optional) In the *Locale display name* textbox, write a new display name for your new locale.
4. (optional) In the Advanced settings tab, tick the *Set as default locale* setting to make your new locale the default one for your Strapi application.
5. Click on the **Save** button to confirm the addition of your new locale.

<ThemedImage
  alt="Adding new locale with i18n"
  sources={{
    light: '/img/assets/settings/new-locale-i18n.png',
    dark: '/img/assets/settings/new-locale-i18n_DARK.png',
  }}
/>

### Code-based configuration

A `STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE` [environment variable](/cms/configurations/environment#strapi) can be configured to set the default locale for your environment. The value used for this variable should be an ISO country code from <ExternalLink to="https://github.com/strapi/strapi/blob/main/packages/plugins/i18n/server/src/constants/iso-locales.json" text="the 500+ pre-created list of locales"/>.

## Usage

**Path to use the feature:** <Icon name="feather" /> Content Manager, edit view of your content type

In the [Content Manager](/cms/features/content-manager), when the Internationalization feature is enabled for the content-type, a locale drop-down list is added to the top right of the edit view and allows to switch locales.

The Internationalization feature also allows dynamic zones and components to differ from one locale to another. Depending on the locale, dynamic zones can indeed have different structures depending on the locale, and repeatable components can have different entries and be organized differently as well.

:::caution
Content can only be managed one locale at the time. It is not possible to edit or publish content for several locales at the same time (e.g. Clicking on the **Publish** button will only publish the content for the locale you are currently working on).
:::

To translate content in another locale:

1. On the top right of the edit view, click on the locale drop-down list.
2. Choose the locale in which you want to translate your content.
3. Translate your content by filling up your content-type's fields. 

:::tip
Click on the <Icon name="download-simple" /> *Fill in from another locale* button, in the top right corner, for all non relational fields to be filled up with the values of another chosen locale. It can be useful if you do not remember what was the exact content in another locale.
:::

<ThemedImage
  alt="Managing locales with i18n"
  sources={{
    light: '/img/assets/content-manager/locale-i18n.png',
    dark: '/img/assets/content-manager/locale-i18n_DARK.png',
  }}
/>

### Usage with APIs

Localized content can be requested, created, updated, and deleted for a given locale through the various front-end APIs accessible from [Strapi's Content API](/cms/api/content-api):

<CustomDocCardsWrapper>
<CustomDocCard icon="cube" title="REST API" description="Learn how to use the locale parameter with the REST API." link="/cms/api/rest/locale"/>
<CustomDocCard icon="cube" title="GraphQL API" description="Learn how to use the locale parameter with GraphQL API." link="/cms/api/graphql#locale"/>
</CustomDocCardsWrapper>

On the back-end server of Strapi, the Document Service API can also be used to interact with localized content:

<CustomDocCardsWrapper>
<CustomDocCard icon="cube" title="Document Service API" description="Learn how to use the locale parameter with the Document Service API." link="/cms/api/document-service/locale"/>
</CustomDocCardsWrapper>


 This is the content for the doc docusaurus/docs/cms/features/media-library.md 

 ---
title: Media Library
sidebar_position: 1
description: Learn to use the Media Library which allows to display and manage all assets uploaded in the application.
toc_max_heading_level: 5
tags:
- admin panel
- features
- media library
---

import ScreenshotNumberReference from '/src/components/ScreenshotNumberReference.jsx';
import MediaLibraryProvidersList from '/docs/snippets/media-library-providers-list.md';

# Media Library

The <Icon name="images" /> Media Library is the Strapi feature that displays all assets uploaded in the Strapi application and allows users to manage them.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">Free feature</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">Minimum "Access the Media Library" permission in Roles > Plugins - Upload</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available and activated by default</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

<Guideflow lightId="mk6z26zaqp" darkId="9r2m74otok"/>

## Configuration

Some configuration options for the Media Library are available in the admin panel, and some are handled via your Strapi project's code.

### Admin panel configuration

In the admin panel, some Media Library settings are available via the Global Settings to manage the format, file size, and orientation of uploaded assets. It is also possible, directly via the Media Library to configure the view.

#### Configuring settings

**Path to configure the feature:** <Icon name="gear-six" /> Settings > Global Settings > Media Library.

1. Define your chosen new Media Library settings:
    | Setting name   | Instructions   | Default value |
    | -------------------------- | ----------------------- |---------------|
    | Responsive friendly upload | Enabling this option will generate multiple formats (small, medium and large) of the uploaded asset.<br/>Default sizes for each format can be [configured through the code](#responsive-images). | True          |
    | Size optimization          | Enabling this option will reduce the image size and slightly reduce its quality.                     | True          |
    | Auto orientation           | Enabling this option will automatically rotate the image according to EXIF orientation tag.          | False         |
2. Click on the **Save** button.

<ThemedImage
  alt="Media Library settings"
  sources={{
    light: '/img/assets/settings/settings_media-library.png',
    dark: '/img/assets/settings/settings_media-library_DARK.png',
  }}
/>

#### Configuring the view

**Path to configure the feature:** <Icon name="images" /> Media Library

1. Click on the <Icon name="gear-six" /> button just above the list of folders and assets, on the right side of the interface.
2. Configure the Media Library view, following the instructions below:
    | Setting name              | Instructions                                                              |
    | ------------------------- | ------------------------------------------------------------------------- |
    | Entries per page          | Use the dropdown to define the number of assets displayed by default per page. |
    | Default sort order        | Use the dropdown to define the default order in which assets are displayed. This can be overriden when sorting assets in the Media Library. |

:::note
Both settings are used as the defaults in the Media Library and in the Content Manager's media upload modal. These settings are global across the entire Strapi project for all users.
:::

<ThemedImage
  alt="Configure the view"
  sources={{
    light: '/img/assets/media-library/media-library_configure-the-view.png',
    dark: '/img/assets/media-library/media-library_configure-the-view_DARK.png',
  }}
/>

### Code-based configuration

The Media Library is powered in the backend server by the Upload package, which can be configured and extended through providers.

#### Providers

<MediaLibraryProvidersList />

If you need to install other providers or create your own, please refer to the following guide:

<CustomDocCardsWrapper>
<CustomDocCard icon="plug" title="Media Library Providers" link="/cms/configurations/media-library-providers" description="Learn how you can add additional providers or create your own." />
</CustomDocCardsWrapper>

:::info
Code-based configuration instructions on the present page detail options for the default upload provider. If using another provider, please refer to the available configuration parameters in that provider's documentation.
:::

#### Available options

When using the default upload provider, the following specific configuration options can be declared in an `upload.config` object within [the `config/plugins` file](/cms/configurations/plugins). All parameters are optional:

| Parameter                                   | Description                                                                                                         | Type    | Default |
| ------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ------- | ------- |
| `providerOptions.localServer`        | Options that will be passed to <ExternalLink to="https://github.com/koajs/static" text="koa-static"/> upon which the Upload server is build (see [local server configuration](#local-server)) | Object  | -       |
| `sizeLimit`                                  | Maximum file size in bytes (see [max file size](#max-file-size)) | Integer | `209715200`<br/><br/>(200 MB in bytes, i.e., 200 x 1024 x 1024 bytes) |
| `breakpoints`             | Allows to override the breakpoints sizes at which responsive images are generated when the "Responsive friendly upload" option is set to `true` (see [responsive images](#responsive-images)) | Object | `{ large: 1000, medium: 750, small: 500 }` |

:::note
The Upload request timeout is defined in the server options, not in the Upload plugin options, as it's not specific to the Upload plugin but is applied to the whole Strapi server instance (see [upload request timeout](#upload-request-timeout)).
:::

#### Example custom configuration

The following is an example of a custom configuration for the Upload plugin when using the default upload provider:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"
module.exports = ({ env })=>({
  upload: {
    config: {
      providerOptions: {
        localServer: {
          maxage: 300000
        },
      },
      sizeLimit: 250 * 1024 * 1024, // 256mb in bytes
      breakpoints: {
        xlarge: 1920,
        large: 1000,
        medium: 750,
        small: 500,
        xsmall: 64
      },
    },
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/plugins.ts"
export default () => ({
  upload: {
    config: {
      providerOptions: {
        localServer: {
          maxage: 300000
        },
      },
      sizeLimit: 250 * 1024 * 1024, // 256mb in bytes
      breakpoints: {
        xlarge: 1920,
        large: 1000,
        medium: 750,
        small: 500,
        xsmall: 64
      },
    },
  },
})
```

</TabItem>

</Tabs>

#### Local server

By default Strapi accepts `localServer` configurations for locally uploaded files. These will be passed as the options for <ExternalLink to="https://github.com/koajs/static" text="koa-static"/>.

You can provide them by creating or editing [the `/config/plugins` file](/cms/configurations/plugins). The following example sets the `max-age` header:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"
module.exports = ({ env })=>({
  upload: {
    config: {
      providerOptions: {
        localServer: {
          maxage: 300000
        },
      },
    },
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/plugins.ts"
export default ({ env }) => ({
  upload: {
    config: {
      providerOptions: {
        localServer: {
          maxage: 300000
        },
      },
    },
  },
});
```
</TabItem>

</Tabs>

#### Max file size

The Strapi middleware in charge of parsing requests needs to be configured to support file sizes larger than the default of 200MB. This must be done in addition to provider options passed to the Upload package for `sizeLimit`.

:::caution
You may also need to adjust any upstream proxies, load balancers, or firewalls to allow for larger file sizes. For instance, <ExternalLink to="http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size" text="Nginx"/> has a configuration setting called `client_max_body_size` that must be adjusted, since its default is only 1mb.
:::

The middleware used by the Upload package is [the `body` middleware](/cms/configurations/middlewares#body). You can pass configuration to the middleware directly by setting it in the `/config/middlewares` file:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/middlewares.js"
module.exports = [
  // ...
  {
    name: "strapi::body",
    config: {
      formLimit: "256mb", // modify form body
      jsonLimit: "256mb", // modify JSON body
      textLimit: "256mb", // modify text body
      formidable: {
        maxFileSize: 250 * 1024 * 1024, // multipart data, modify here limit of uploaded file size
      },
    },
  },
  // ...
];
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```js title="/config/middlewares.ts"
export default [
  // ...
  {
    name: "strapi::body",
    config: {
      formLimit: "256mb", // modify form body
      jsonLimit: "256mb", // modify JSON body
      textLimit: "256mb", // modify text body
      formidable: {
        maxFileSize: 250 * 1024 * 1024, // multipart data, modify here limit of uploaded file size
      },
    },
  },
  // ...
];
```

</TabItem>

</Tabs>

In addition to the middleware configuration, you can pass the `sizeLimit`, which is an integer in bytes, in the [/config/plugins file](/cms/configurations/plugins):

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"
module.exports = {
  // ...
  upload: {
    config: {
      sizeLimit: 250 * 1024 * 1024 // 256mb in bytes
    }
  }
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```js title="/config/plugins.ts"
export default {
  // ...
  upload: {
    config: {
      sizeLimit: 250 * 1024 * 1024 // 256mb in bytes
    }
  }
};
```

</TabItem>

</Tabs>

#### Upload request timeout

By default, the value of `strapi.server.httpServer.requestTimeout` is set to 330 seconds. This includes uploads.

To make it possible for users with slow internet connection to upload large files, it might be required to increase this timeout limit. The recommended way to do it is by setting the `http.serverOptions.requestTimeout` parameter in [the `config/servers` file](/cms/configurations/server).

An alternate method is to set the `requestTimeout` value in [the `bootstrap` function](/cms/configurations/functions#bootstrap) that runs before Strapi gets started. This is useful in cases where it needs to change programmatically‚Äîfor example, to temporarily disable and re-enable it:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/index.js"
module.exports = {

  //...

  bootstrap({ strapi }) {
    // Set the requestTimeout to 1,800,000 milliseconds (30 minutes):
    strapi.server.httpServer.requestTimeout = 30 * 60 * 1000;
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/index.ts"
export default {

  //...

  bootstrap({ strapi }) {
    // Set the requestTimeout to 1,800,000 milliseconds (30 minutes):
    strapi.server.httpServer.requestTimeout = 30 * 60 * 1000;
  },
};
```

</TabItem>

</Tabs>

#### Responsive Images

When the [`Responsive friendly upload` admin panel setting](#admin-panel-configuration) is enabled, the plugin will generate the following responsive image sizes:

| Name    | Largest dimension |
| :------ | :--------- |
| large   | 1000px     |
| medium  | 750px      |
| small   | 500px      |

These sizes can be overridden in `/config/plugins`:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"
module.exports = ({ env }) => ({
  upload: {
    config: {
      breakpoints: {
        xlarge: 1920,
        large: 1000,
        medium: 750,
        small: 500,
        xsmall: 64
      },
    },
  },
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```js title="/config/plugins.ts"
export default ({ env }) => ({
  upload: {
    config: {
      breakpoints: {
        xlarge: 1920,
        large: 1000,
        medium: 750,
        small: 500,
        xsmall: 64
      },
    },
  },
});
```

</TabItem>

</Tabs>

:::caution
Breakpoint changes will only apply to new images, existing images will not be resized or have new sizes generated.
:::

## Usage

**Path to use the feature:** <Icon name="images" /> Media Library

The Media Library displays all assets uploaded in the application, either via the <Icon name="images" /> Media Library itself or via the <Icon name="feather" /> Content Manager when managing a media field.

Assets uploaded to the Media Library can be inserted into content-types using the [Content Manager](/cms/features/content-manager#creating--writing-content).

<ThemedImage
  alt="Media Library overview, annotated"
  sources={{
    light: '/img/assets/media-library/media-library_overview2.png',
    dark: '/img/assets/media-library/media-library_overview2_DARK.png',
  }}
/>

From the Media Library, it is possible to:

- upload a new asset (see [adding assets](/cms/features/media-library#adding-assets)) or create a new folder (see [organizing assets with folders](/cms/features/media-library#organizing-assets-with-folders)) <ScreenshotNumberReference number="1" />,
- sort the assets and folders or set filters <ScreenshotNumberReference number="2" /> to find assets and folders more easily,
- toggle between the list view <Icon name="list" classes="ph-bold"/> and the grid view <Icon name="squares-four"/> to display assets, access settings <Icon name="gear-six" /> to [configure the view](#configuring-the-view), and make a textual search <Icon name="magnifying-glass" classes="ph-bold" /> <ScreenshotNumberReference number="3" /> to find a specific asset or folder,
- and view, navigate through, and manage folders <ScreenshotNumberReference number="4" />.

:::tip
Click the search icon <Icon name="magnifying-glass" classes="ph-bold" /> on the right side of the user interface to use a text search and find one of your assets or folders more quickly!
:::

<!--
### Filtering assets

Right above the list of folders and assets, on the left side of the interface, a !<Icon name="funnel-simple" classes="ph-bold" /> **Filters** button is displayed. It allows setting one or more condition-based filters, which add to one another (i.e. if you set several conditions, only the assets that match all the conditions will be displayed).

<ThemedImage
  alt="Filters"
  sources={{
    light: '/img/assets/media-library/media-library_filters.png',
    dark: '/img/assets/media-library/media-library_filters_DARK.png',
  }}
/>

To set a new filter:

1. Click on the !<Icon name="funnel-simple" classes="ph-bold" /> **Filters** button.
2. Click on the 1st drop-down list to choose the field on which the condition will be applied.
3. Click on the 2nd drop-down list to choose the type of condition to apply.
4. For conditions based on the type of asset to filter, click on the 3rd drop-down list and choose a file type to include or exclude. For conditions based on date and time (i.e. _createdAt_ or _updatedAt_ fields), click on the left field to select a date and click on the right field to select a time.
5. Click on the **Add filter** button.

:::note
When active, filters are displayed next to the !<Icon name="funnel-simple" classes="ph-bold" /> **Filters** button. They can be removed by clicking on the delete icon <Icon name="x" />.
:::
-->

<!--
### Sorting assets

<ThemedImage
  alt="Sort"
  sources={{
    light: '/img/assets/media-library/media-library_sort.png',
    dark: '/img/assets/media-library/media-library_sort_DARK.png',
  }}
/>

Just above the list of folders and assets and next to the !<Icon name="funnel-simple" classes="ph-bold" /> **Filters** button, on the left side of the interface, a drop-down button is displayed. It allows to sort the assets by upload date, alphabetical order or date of update. Click on the drop-down button and select an option in the list to automatically display the sorted assets.
-->

### Adding assets

<details>
<summary>List of media types and extensions supported by the Media Library</summary>

| Media type | Supported extensions                                            |
| ---------- | --------------------------------------------------------------- |
| Image      | - JPEG<br />- PNG<br />- GIF<br />- SVG<br />- TIFF<br />- ICO<br />- DVU   |
| Video      | - MPEG<br />- MP4<br />- MOV (Quicktime)<br />- WMV<br />- AVI<br />- FLV |
| Audio      | - MP3<br />- WAV<br />- OGG                                         |
| File       | - CSV<br />- ZIP<br />- PDF<br />- XLS, XLSX<br />- JSON                |
<br/>

</details>

1. Click the **Add new assets** button in the upper right corner of the Media Library.
2. Choose whether you want to upload the new asset from your computer or from an URL:
    - from the computer, either drag & drop the asset directly or browse files on your system,
    - from an URL, type or copy and paste an URL(s) in the _URL_ field, making sure multiple URLs are separated by carriage returns, then click **Next**.
3. (optional) Click the edit button <Icon name="pencil-simple" /> to view asset metadata and define a _File name_, _Alternative text_ and a _Caption_ for the asset (see [Managing individual assets](#managing-assets)).
4. (optional) Add more assets by clicking **Add new assets** and going back to step 2.
5. Click on **Upload assets to the library**.

<ThemedImage
  alt="Add new assets window"
  sources={{
    light: '/img/assets/media-library/media-library_add-new-assets.png',
    dark: '/img/assets/media-library/media-library_add-new-assets_DARK.png',
  }}
/>

### Managing individual assets {#managing-assets}

The Media Library allows managing assets, which includes modifying assets' file details and location, downloading and copying the link of the assets file, and deleting assets. Image files can also be cropped.

#### Editing assets

Click on the edit <Icon name="pencil-simple" /> button of an asset to open up the "Details" window, where all the available asset management options are available.

<ThemedImage
  alt="Annotated asset details window screenshot"
  sources={{
    light: '/img/assets/media-library/media-library_asset-details.png',
    dark: '/img/assets/media-library/media-library_asset-details_DARK.png',
  }}
/>

- On the left, above the preview of the asset, control buttons <ScreenshotNumberReference number="1" /> allow performing various actions:
  - click on the delete button <Icon name="trash" /> to delete the asset,
  - click on the download button <Icon name="download-simple"  /> to download the asset,
  - click on the copy link button <Icon name="link" classes="ph-bold" /> to copy the asset's link to the clipboard,
  - optionally, click on the crop button <Icon name="crop" classes="ph-bold" /> to enter cropping mode for the image (see [Cropping images](#cropping-images)).
- On the right, meta data for the asset is displayed at the top of the window <ScreenshotNumberReference number="2" /> and the fields below can be used to update the _File name_, _Alternative text_, _Caption_ and _Location_ (see [Organizing assets with folders](#organizing-assets-with-folders)) for the asset <ScreenshotNumberReference number="3" />.
- At the bottom, the **Replace Media** button <ScreenshotNumberReference number="4" /> can be used to replace the asset file but keep the existing content of the other editable fields, and the **Finish** button is used to confirm any updates to the fields.

#### Moving assets

1. Click on the edit <Icon name="pencil-simple" /> button for the asset to be moved.
2. In the window that pops up, click the _Location_ field and choose a different folder from the drop-down list.
3. Click **Save** to confirm.

:::note
Assets can also be moved to other folders from the main view of the Media Library (see [Organizing assets with folders](#organizing-assets-with-folders)). This includes the ability to move several assets simultaneously.
:::

#### Cropping images

1. Click on the edit <Icon name="pencil-simple" /> button for the asset to be cropped.
2. In the window that pops up, click the crop button <Icon name="crop" classes="ph-bold" /> to enter cropping mode.
3. Crop the image using handles in the corners to resize the frame. The frame can also be moved by drag & drop.
4. Click the crop <Icon name="check" classes="ph-bold" /> button to validate the new dimensions, and choose either to **crop the original asset** or to **duplicate & crop the asset** (i.e. to create a copy with the new dimensions while keeping the original asset untouched). Alternatively, click the stop cropping <Icon name="x" classes="ph-bold" /> button to cancel and quit cropping mode.
<!-- TODO: ask devs because there seems to be a bug/unintuitive behavior:  choosing crop the original asset does not quit cropping mode üòÖ  -->
5. Click **Finish** to save changes to the file.

#### Deleting assets

1. Click on the edit <Icon name="pencil-simple" /> button for the asset to be deleted.
2. In the window that pops up, click the delete button <Icon name="trash" /> in the control buttons bar above the asset's preview.
3. Click **Confirm**.

:::tip
Assets can also be deleted individually or in bulk from the main view of the Media Library. Select assets by clicking on their checkbox in the top left corner, then click the Delete icon <Icon name="trash" /> at the top of the window, below the filters and sorting options.
:::

### Organizing assets with folders

Folders in the Media Library help you organize uploaded assets. Folders sit at the top of the Media Library view or are accessible from the Media field popup when using the [Content Manager](/cms/features/content-manager).

From the Media Library, it is possible to view the list of folders and browse a folder's content, create new folders, edit an existing folder, move assets to a folder, and delete a folder.

:::note
Folders follow the permission system of assets (see [Users & Permissions feature](/cms/features/users-permissions)). It is not yet possible to define specific permissions for a folder.
:::

By default, the Media Library displays folders and assets created at the root level. Clicking a folder navigates to this folder, and displays the following elements:

- the folder title and breadcrumbs to navigate to a parent folder <ScreenshotNumberReference number="1" />
- the subfolders <ScreenshotNumberReference number="2" /> the current folder contains
- all assets <ScreenshotNumberReference number="3" /> from this folder

<ThemedImage
  alt="Media library one folder deep, with back button and updated folder title"
  sources={{
    light: '/img/assets/media-library/media-library_folder-content.png',
    dark: '/img/assets/media-library/media-library_folder-content_DARK.png',
  }}
/>

From this dedicated folder view, folders and assets can be managed, filtered, sorted and searched just like from the main Media Library.

To navigate back to the parent folder, one level up, use the **Back** button at the top of the interface.

:::tip
The breadcrumb navigation can also be used to go back to a parent folder: click on a folder name to directly jump to it or click on the 3 dots `/img.` and select a parent folder from the drop-down list.
:::

#### Adding folders

1. Click on **Add new folder** in the upper right of the Media Library interface.
2. In the window that pops up, type a name for the new folder in the _Name_ field.
3. (optional) In the _Location_ drop-down list, choose a location for the new folder. The default location is the active folder.
4. Click **Create**.

:::note
There is no limit to how deep your folders hierarchy can go, but bear in mind it might take some effort to reach a deeply nested subfolder, as the Media Library currently has no visual hierarchy indication. Searching for files using the <Icon name="magnifying-glass" classes="ph-bold" /> on the right side of the user interface might be a faster alternative to finding the asset you are looking for.
:::

#### Moving assets to a folder

Assets and folders can be moved to another folder from the root view of the Media Library or from any view for a dedicated folder.

1. Select assets and folder to be moved, by clicking the checkbox on the left of the folder name or clicking the asset itself.
2. Click the <Icon name="folder" /> **Move** button at the top of the interface.
3. In the _Move elements to_ pop-up window, select the new folder from the _Location_ drop-down list.
4. Click **Move**.

<ThemedImage
  alt="'Move elements to' popup"
  sources={{
    light: '/img/assets/media-library/media-library_move-assets.png',
    dark: '/img/assets/media-library/media-library_move-assets_DARK.png',
  }}
/>

#### Editing folders

Once created, a folder can be renamed, moved or deleted.

1. In the Folders part of the Media library, hover the folder to be edited and click its edit button <Icon name="pencil-simple" />.
2. In the window that pops up, update the name and location with the _Name_ field and _Location_ drop-down list, respectively.
3. Click **Save**.

#### Deleting folders

Deleting a folder can be done either from the list of folders of the Media Library, or when editing a single folder.

1. Click the checkbox on the left of the folder name. Multiple folders can be selected.
2. Click the <Icon name="trash" /> **Delete** button above the Folders list.
3. In the _Confirmation_ dialog, click **Confirm**.

:::note
A single folder can also be deleted when editing it: hover the folder, click on its edit icon <Icon name="pencil-simple" />, and in the window that pops up, click the **Delete folder** button and confirm the deletion.
:::

### Usage with the REST API

The Media Library feature has some endpoints that can accessed through Strapi's REST API:

<CustomDocCardsWrapper>
<CustomDocCard icon="cube" title="Upload with the REST API" description="Learn how to use the Strapi's REST API to upload files through your code." link="/cms/api/rest/upload"/>
</CustomDocCardsWrapper>

### Use public assets in your code {#public-assets}

Public assets are static files (e.g., images, video, CSS files, etc.) that you want to make accessible to the outside world.

Because an API may need to serve static assets, every new Strapi project includes by default a folder named `/public`. Any file located in this directory is accessible if the request's path doesn't match any other defined route and if it matches a public file name (e.g. an image named `company-logo.png` in `./public/` is accessible through `/company-logo.png` URL).

:::tip
`index.html` files are served if the request corresponds to a folder name (`/pictures` url will try to serve `public/pictures/index.html` file).
:::

:::caution
The dotfiles are not exposed. It means that every file name that starts with `.`, such as `.htaccess` or `.gitignore`, are not served.
:::

 This is the content for the doc docusaurus/docs/cms/features/preview.md 

 ---
title: Preview
description: With the Preview feature, you can preview your front-end directly from the Content Manager
displayedSidebar: userSidebar
toc_max_heading_level: 4
tags:
- content manager
- preview
- features
---

# Preview

With the Preview feature, you can preview your front end application directly from Strapi's admin panel. This is helpful to see how updates to your content in the Edit View of the Content Manager will affect the final result.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">Free feature<br/>Live Preview available only with the CMS Growth and Enterprise plans.</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">Read permissions in Roles > Plugins - Users & Permissions</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Should be configured in the `config/admin` file</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

<!-- TODO: add a dark mode screenshot -->
<ThemedImage
  alt="Previewing content"
  sources={{
    light: '/img/assets/content-manager/previewing-content.png',
    dark: '/img/assets/content-manager/previewing-content.png',
  }}
/>

<!-- <div style={{position: 'relative', paddingBottom: 'calc(54.43121693121693% + 50px)', height: '0'}}>
<iframe id="zpen5g4t8p" src="https://app.guideflow.com/embed/zpen5g4t8p" width="100%" height="100%" style={{overflow:'hidden', position:'absolute', border:'none'}} scrolling="no" allow="clipboard-read; clipboard-write" webkitallowfullscreen mozallowfullscreen allowfullscreen allowtransparency="true"></iframe>
</div> -->

## Configuration

:::note Notes
* The following environment variables must be defined in your `.env` file, replacing example values with appropriate values:

  ```bash
  CLIENT_URL=https://your-frontend-app.com
  PREVIEW_SECRET=your-secret-key
  ```

  The `PREVIEW_SECRET` key is optional but required with Next.js draft mode.

* A front-end application for your Strapi project should be already created and set up.
:::

### Configuration components

The Preview feature configuration is stored in the `preview` object of [the `config/admin` file](/cms/configurations/admin-panel) and consists of 3 key components:

#### Activation flag

Enables or disables the preview feature:
```javascript title="config/admin.ts|js" {3}
// ‚Ä¶
preview: {
  enabled: true,
    // ‚Ä¶
}
// ‚Ä¶
```

#### Allowed origins

Controls which domains can access previews:

```javascript title="config/admin.ts|js" {5}
// ‚Ä¶
preview: {
  enabled: true,
  config: {
    allowedOrigins: env("CLIENT_URL"),  // Usually your frontend application URL
    // ‚Ä¶
  }
}
// ‚Ä¶
```

#### Preview handler

Manages the preview logic and URL generation, as in the following basic example where `uid` is the content-type identifier (e.g., `api::article.article` or `plugin::my-api.my-content-type`):

```jsx title="config/admin.ts|js" {6-11}
// ‚Ä¶
preview: {
  enabled: true,
  config: {
    // ‚Ä¶
    async handler(uid, { documentId, locale, status }) {
      const document = await strapi.documents(uid).findOne({ documentId });
      const pathname = getPreviewPathname(uid, { locale, document });

      return `${env('PREVIEW_URL')}${pathname}`
    },
  }
}
// ‚Ä¶
```

An example of [URL generation logic](#2-add-url-generation) in given in the following basic implementation guide.

##### Previewing draft entries

The strategy for the front end application to query draft or published content is framework-specific. At least 3 strategies exist:

- using a query parameter, having something like `/your-path?preview=true` (this is, for instance, how <ExternalLink to="https://nuxt.com/docs/api/composables/use-preview-mode" text="Nuxt"/> works)
- redirecting to a dedicated preview route like `/preview?path=your-path`(this is, for instance, how <ExternalLink to="https://nextjs.org/docs/app/building-your-application/configuring/draft-mode" text="Next's draft mode"/> works)
- or using a different domain for previews like `preview.mysite.com/your-path`.

When [Draft & Publish](/cms/features/draft-and-publish) is enabled for your content-type, you can also directly leverage Strapi's `status` parameter to handle the logic within the Preview handler, using the following generic approach:

```javascript
async handler(uid, { documentId, locale, status }) {
   const document = await strapi.documents(uid).findOne({ documentId });
   const pathname = getPreviewPathname(uid, { locale, document });
   if (status === 'published')  { 
      // return the published version
   }
   // return the draft version
},
```

A more detailed example using the draft mode of Next.js is given in the [basic implementation guide](#3-add-handler).

### Basic implementation guide

Follow these steps to add Preview capabilities to your content types.

#### 1. [Strapi] Create the Preview configuration {#1-create-config}

Create a new file `/config/admin.ts` (or update it if it exists) with the following basic structure:

```javascript title="config/admin.ts"
export default ({ env }) => ({
  // Other admin-related configurations go here
  // (see docs.strapi.io/cms/configurations/admin-panel)
  preview: {
    enabled: true,
    config: {
      allowedOrigins: env('CLIENT_URL'),
      async handler (uid, { documentId, locale, status }) => {
        // Handler implementation coming in step 3
      },
    },
  },
});
```

#### 2. [Strapi] Add URL generation logic {#2-add-url-generation}

Add the URL generation logic with a `getPreviewPathname` function. The following example is taken from the <ExternalLink to="https://github.com/strapi/LaunchPad/tree/feat/preview" text="Launchpad"/> Strapi demo application:

```typescript title="config/admin.ts"
// Function to generate preview pathname based on content type and document
const getPreviewPathname = (uid, { locale, document }): string => {
  const { slug } = document;
  
  // Handle different content types with their specific URL patterns
  switch (uid) {
    // Handle pages with predefined routes
    case "api::page.page":
      switch (slug) {
        case "homepage":
          return `/${locale}`; // Localized homepage
        case "pricing":
          return "/pricing"; // Pricing page
        case "contact":
          return "/contact"; // Contact page
        case "faq":
          return "/faq"; // FAQ page
      }
    // Handle product pages
    case "api::product.product": {
      if (!slug) {
        return "/products"; // Products listing page
      }
      return `/products/${slug}`; // Individual product page
    }
    // Handle blog articles
    case "api::article.article": {
      if (!slug) {
        return "/blog"; // Blog listing page
      }
      return `/blog/${slug}`; // Individual article page
    }
    default: {
      return null;
    }
  }
};

// ‚Ä¶ main export (see step 3)
```

:::note
Some content types don't need to have a preview if it doesn't make sense, hence the default case returning `null`. A Global single type with some site metadata, for example, will not have a matching front-end page. In these cases, the handler function should return `null`, and the preview UI will not be shown in the admin panel. This is how you enable or disable preview per content type.
:::

#### 3. [Strapi] Add handler logic {#3-add-handler}

Create the complete configuration, expanding the basic configuration created in step 1. with the URL generation logic created in step 2., adding an appropriate handler logic:

```typescript title="config/admin.ts" {8-9,18-35}
const getPreviewPathname = (uid, { locale, document }): string => {
  // ‚Ä¶ as defined in step 2
};

// Main configuration export
export default ({ env }) => {
  // Get environment variables
  const clientUrl = env("CLIENT_URL"); // Frontend application URL
  const previewSecret = env("PREVIEW_SECRET"); // Secret key for preview authentication

  return {
    // Other admin-related configurations go here
    // (see docs.strapi.io/cms/configurations/admin-panel)
    preview: {
      enabled: true, // Enable preview functionality
      config: {
        allowedOrigins: clientUrl, // Restrict preview access to specific domain
        async handler(uid, { documentId, locale, status }) {
          // Fetch the complete document from Strapi
          const document = await strapi.documents(uid).findOne({ documentId });
          
          // Generate the preview pathname based on content type and document
          const pathname = getPreviewPathname(uid, { locale, document });

          // Disable preview if the pathname is not found
          if (!pathname) {
            return null;
          }

          // Use Next.js draft mode passing it a secret key and the content-type status
          const urlSearchParams = new URLSearchParams({
            url: pathname,
            secret: previewSecret,
            status,
          });
          return `${clientUrl}/api/preview?${urlSearchParams}`;
        },
      },
    },
  };
};

```
#### 4. [Front end] Set up the front-end preview route {#4-setup-frontend-route}

Setting up the front-end preview route is highly dependent on the framework used for your front-end application.

For instance, <ExternalLink to="https://nextjs.org/docs/app/building-your-application/configuring/draft-mode" text="Next.js draft mode"/> and
<ExternalLink to="https://nuxt.com/docs/api/composables/use-preview-mode" text="Nuxt preview mode"/> provide additional documentation on how to implement the front-end part in their respective documentations.

If using Next.js, a basic implementation could be like in the following example taken from the <ExternalLink to="https://github.com/strapi/LaunchPad/tree/feat/preview" text="Launchpad"/> Strapi demo application:

```typescript title="/next/api/preview/route.ts"
import { draftMode } from "next/headers";
import { redirect } from "next/navigation";

export async function GET(request: Request) {
  // Parse query string parameters
  const { searchParams } = new URL(request.url);
  const secret = searchParams.get("secret");
  const url = searchParams.get("url");
  const status = searchParams.get("status");

  // Check the secret and next parameters
  // This secret should only be known to this route handler and the CMS
  if (secret !== process.env.PREVIEW_SECRET) {
    return new Response("Invalid token", { status: 401 });
  }

  // Enable Draft Mode by setting the cookie
  if (status === "published") {
    draftMode().disable();
  } else {
    draftMode().enable();
  }

  // Redirect to the path from the fetched post
  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities
  redirect(url || "/");
}
```

#### 5. [Front end] Allow the front-end to be embedded {#5-allow-frontend-embed}

On the Strapi side, [the `allowedOrigins` configuration parameter](#allowed-origins) allows the admin panel to load the front-end window in an iframe. But allowing the embedding works both ways, so on the front-end side, you also need to allow the window to be embedded in Strapi's admin panel.

This requires the front-end application to have its own header directive, the CSP `frame-ancestors` directive. Setting this directive up depends on how your website is built. For instance, setting this up in Next.js requires a middleware configuration (see [Next.js docs](https://nextjs.org/docs/app/building-your-application/configuring/content-security-policy)).

#### 6. [Front end] Detect changes in Strapi and refresh the front-end {#6-refresh-frontend}

Strapi emits a `strapiUpdate` message to inform the front end that data has changed. 

To track this, within your front-end application, add an event listener to listen to events posted through [the `postMessage()` API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) on the `window` object. The listener needs to filter through messages and react only to Strapi-initiated messages, then refresh the iframe content.

With Next.js, the recommended way to refresh the iframe content is with <ExternalLink to="https://nextjs.org/docs/app/building-your-application/caching#routerrefresh" text="the `router.refresh()` method" />.

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript" >

```tsx title="next/app/path/to/your/front/end/logic.jsx" {6-17}
export default function MyClientComponent({...props}) {
  // ‚Ä¶
  const router = useRouter();

  useEffect(() => {
    const handleMessage = async (message) => {
      if (
        // Filters events emitted through the postMessage() API
        message.origin === process.env.NEXT_PUBLIC_API_URL &&
        message.data.type === "strapiUpdate"
      ) { // Recommended way to refresh with Next.js
        router.refresh();
      }
    };

    // Add the event listener
    window.addEventListener("message", handleMessage);

    // Cleanup the event listener on unmount
    return () => {
      window.removeEventListener("message", handleMessage);
    };
  }, [router]);

  // ...
}
```

</TabItem>
<TabItem value="ts" label="TypeScript" >

```tsx title="next/app/path/to/your/front/end/logic.tsx" {6-17}
export default function MyClientComponent({
  //‚Ä¶
  const router = useRouter();

  useEffect(() => {
    const handleMessage = async (message: MessageEvent<any>) => {
      if (
        // Filters events emitted through the postMessage() API
        message.origin === process.env.NEXT_PUBLIC_API_URL &&
        message.data.type === "strapiUpdate"
      ) { // Recommended way to refresh with Next.js
        router.refresh();
      }
    };

    // Add the event listener
    window.addEventListener("message", handleMessage);

    // Cleanup the event listener on unmount
    return () => {
      window.removeEventListener("message", handleMessage);
    };
  }, [router]);

  // ‚Ä¶
})
```

</TabItem>

</Tabs>

<details>
<summary>Caching in Next.js:</summary>

In Next.js, [cache persistence](https://nextjs.org/docs/app/building-your-application/caching) may require additional steps. You might need to invalidate the cache by making an API call from the client side to the server, where the revalidation logic will be handled. Please refer to Next.js documentation for details, for instance with the [revalidatePath() method](https://nextjs.org/docs/app/building-your-application/caching#revalidatepath).
<br/>

</details>

#### [Front end] Next steps

Once the preview system is set up, you need to adapt your data fetching logic to handle draft content appropriately. This involves the following steps:

1. Create or adapt your data fetching utility to check if draft mode is enabled
2. Update your API calls to include the draft status parameter when appropriate

The following, taken from the <ExternalLink to="https://github.com/strapi/LaunchPad/tree/feat/preview" text="Launchpad" /> Strapi demo application, is an example of how to implement draft-aware data fetching in your Next.js front-end application:

```typescript {8-18}
import { draftMode } from "next/headers";
import qs from "qs";

export default async function fetchContentType(
  contentType: string,
  params: Record = {}
): Promise {
  // Check if Next.js draft mode is enabled
  const { isEnabled: isDraftMode } = draftMode();
  
  try {
    const queryParams = { ...params };
    // Add status=draft parameter when draft mode is enabled
    if (isDraftMode) {
      queryParams.status = "draft";
    }
    
    const url = `${baseURL}/${contentType}?${qs.stringify(queryParams)}`;
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(
        `Failed to fetch data from Strapi (url=${url}, status=${response.status})`
      );
    }
    return await response.json();
  } catch (error) {
    console.error("Error fetching content:", error);
    throw error;
  }
}
```

This utility method can then be used in your page components to fetch either draft or published content based on the preview state:

```typescript
// In your page component:
const pageData = await fetchContentType('api::page.page', {
  // Your other query parameters
});
```

#### 6. [Front end] Detect changes in Strapi and refresh the front-end {#6-refresh-frontend}

Strapi emits a `strapiUpdate` message to inform the front end that data has changed. 

To track this, within your front-end application, add an event listener to listen to events posted through [the `postMessage()` API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) on the `window` object. The listener needs to filter through messages and react only to Strapi-initiated messages, then refresh the iframe content.

With Next.js, the recommended way to refresh the iframe content is with <ExternalLink to="https://nextjs.org/docs/app/building-your-application/caching#routerrefresh" text="the `router.refresh()` method" />.

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript" >

```tsx title="next/app/path/to/your/front/end/logic.jsx" {6-17}
export default function MyClientComponent({...props}) {
  // ‚Ä¶
  const router = useRouter();

  useEffect(() => {
    const handleMessage = async (message) => {
      if (
        // Filters events emitted through the postMessage() API
        message.origin === process.env.NEXT_PUBLIC_API_URL &&
        message.data.type === "strapiUpdate"
      ) { // Recommended way to refresh with Next.js
        router.refresh();
      }
    };

    // Add the event listener
    window.addEventListener("message", handleMessage);

    // Cleanup the event listener on unmount
    return () => {
      window.removeEventListener("message", handleMessage);
    };
  }, [router]);

  // ...
}
```

</TabItem>
<TabItem value="ts" label="TypeScript" >

```tsx title="next/app/path/to/your/front/end/logic.tsx" {6-17}
export default function MyClientComponent({
  //‚Ä¶
  const router = useRouter();

  useEffect(() => {
    const handleMessage = async (message: MessageEvent<any>) => {
      if (
        // Filters events emitted through the postMessage() API
        message.origin === process.env.NEXT_PUBLIC_API_URL &&
        message.data.type === "strapiUpdate"
      ) { // Recommended way to refresh with Next.js
        router.refresh();
      }
    };

    // Add the event listener
    window.addEventListener("message", handleMessage);

    // Cleanup the event listener on unmount
    return () => {
      window.removeEventListener("message", handleMessage);
    };
  }, [router]);

  // ‚Ä¶
})
```

</TabItem>

</Tabs>

<details>
<summary>Caching in Next.js:</summary>

In Next.js, [cache persistence](https://nextjs.org/docs/app/building-your-application/caching) may require additional steps. You might need to invalidate the cache by making an API call from the client side to the server, where the revalidation logic will be handled. Please refer to Next.js documentation for details, for instance with the [revalidatePath() method](https://nextjs.org/docs/app/building-your-application/caching#revalidatepath).
<br/>

</details>

#### [Front end] Next steps

Once the preview system is set up, you need to adapt your data fetching logic to handle draft content appropriately. This involves the following steps:

1. Create or adapt your data fetching utility to check if draft mode is enabled
2. Update your API calls to include the draft status parameter when appropriate

The following, taken from the <ExternalLink to="https://github.com/strapi/LaunchPad/tree/feat/preview" text="Launchpad" /> Strapi demo application, is an example of how to implement draft-aware data fetching in your Next.js front-end application:

```typescript {8-18}
import { draftMode } from "next/headers";
import qs from "qs";

export default async function fetchContentType(
  contentType: string,
  params: Record = {}
): Promise {
  // Check if Next.js draft mode is enabled
  const { isEnabled: isDraftMode } = draftMode();
  
  try {
    const queryParams = { ...params };
    // Add status=draft parameter when draft mode is enabled
    if (isDraftMode) {
      queryParams.status = "draft";
    }
    
    const url = `${baseURL}/${contentType}?${qs.stringify(queryParams)}`;
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(
        `Failed to fetch data from Strapi (url=${url}, status=${response.status})`
      );
    }
    return await response.json();
  } catch (error) {
    console.error("Error fetching content:", error);
    throw error;
  }
}
```

This utility method can then be used in your page components to fetch either draft or published content based on the preview state:

```typescript
// In your page component:
const pageData = await fetchContentType('api::page.page', {
  // Your other query parameters
});
```

## Usage

**Path to use the feature:** <Icon name="feather" /> Content Manager, edit view of your content type

:::strapi Preview vs. Live Preview
Based on your CMS plan, your experience with Preview will be different:
- With the Free plan, Preview will be full screen only.
- With the <GrowthBadge /> and <EnterpriseBadge /> plans, you get access to Live Preview. With Live Preview, you can see the Preview alongside the Edit view of the Content Manager, allowing you to edit your content and previewing it simultaneously.
:::

Once the Preview feature is properly set up, an **Open preview** button is visible on the right side of the [Content Manager's edit view](/cms/features/content-manager#overview). Clicking it will display the preview of your content as it will appear in your front-end application, but directly within Strapi's the admin panel.

<!-- TODO: add a dark mode GIF -->
<ThemedImage
  alt="Previewing content"
  sources={{
    light: '/img/assets/content-manager/previewing-content2.gif',
    dark: '/img/assets/content-manager/previewing-content2.gif',
  }}
/>

Once the Preview is open, you can:

- click the close button <Icon name="x" classes="ph-bold" /> in the upper left corner to go back to the Edit View of the Content Manager,
- switch between previewing the draft and the published version (if [Draft & Publish](/cms/features/draft-and-publish) is enabled for the content-type),
- and click the link icon <Icon name="link" classes="ph-bold"/> in the upper right corner to copy the preview link. Depending on the preview tab you are currently viewing, this will either copy the link to the preview of the draft or the published version.

Additionally, with Live Preview, you can:
- with <GrowthBadge /> and <EnterpriseBadge /> plans, expand the side panel by clicking on the <Icon name="arrow-line-left" classes="ph-bold" /> button to make the Preview full screen,
- and, with the <EnterpriseBadge /> plan, use buttons at the top right of the editor to define the assignee and stage for the [Review Workflows feature](/cms/features/review-workflows) if enabled.

:::note
In the Edit view of the Content Manager, the Open preview button will be disabled if you have unsaved changes. Save your latest changes and you should be able to preview content again.
:::


 This is the content for the doc docusaurus/docs/cms/features/rbac.md 

 ---
title: Role-Based Access Control (RBAC)
description: Learn to use the RBAC feature which allows to manage the users of the admin panel.
toc_max_heading_level: 5
tags:
- admin panel
- RBAC
- Role Based Access Control
- features
---

import ScreenshotNumberReference from '/src/components/ScreenshotNumberReference.jsx';

# Role-Based Access Control (RBAC)

The Role-Based Access Control (RBAC) feature allows the management of the administrators, who are the users of the admin panel. More specifically, RBAC manages the administrators' accounts and roles.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">Free feature</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">CRUD permissions in Roles > Settings - Users & Roles</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available and activated by default</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

<Guideflow lightId="gky9n4mtdp" darkId="zkjloxzaep"/>

## Configuration

**Path to configure the feature:** <Icon name="gear-six" /> *Settings > Administration panel > Roles*

The *Roles* interface displays all created roles for the administrators of your Strapi application.

From this interface, it is possible to:

- create a new administrator role (see [Creating a new role](#creating-a-new-role)),
- delete an administrator role (see [Deleting a role](#deleting-a-role)),
- or access information regarding an administrator role, and edit it (see [Editing a role](#editing-a-role)).

By default, 3 administrator roles are defined for any Strapi application:

- Author: to be able to create and manage their own content.
- Editor: to be able to create content, and manage and publish any content.
- Super Admin: to be able to access all features and settings. This is the role attributed by default to the first administrator at the creation of the Strapi application.

### Creating a new role

On the top right side of the *Administration panel > Roles* interface, an **Add new role** button is displayed. Click on that **Add new role** button to create a new role for administrators of your Strapi application.

You will be redirected to the roles edition interface, where you will be able to edit the role's details and configure its permissions (see [Editing a role](#editing-roles-details)).

<ThemedImage
  alt="New role with RBAC"
  sources={{
    light: '/img/assets/users-permissions/new-role.png',
    dark: '/img/assets/users-permissions/new-role_DARK.png',
  }}
/>

:::tip
In the *Roles* interface, from the table, you can click on the duplicate button <Icon name="copy" /> to create a new role by duplicating an existing one.
:::

### Deleting a role

Administrator roles can be deleted from the *Administration panel > Roles* interface. However, they can only be deleted once they are no more attributed to any administrator of the Strapi application.

1. Make sure the role you wish to delete is not attributed to any administrator anymore.
2. Click on the delete button <Icon name="trash" /> on the right side of the role's record.
3. In the deletion window, click on the **Confirm** button to confirm the deletion.

### Editing a role

<ThemedImage
  alt="Administrator roles edition interface"
  sources={{
    light: '/img/assets/users-permissions/administrator_roles-edition.png',
    dark: '/img/assets/users-permissions/administrator_roles-edition_DARK.png',
  }}
/>

The role edition interface allows to edit the details of an administrator role as well as configure in detail the permissions to all sections of your Strapi application.

It is accessible from *Administration panel > Roles* either after clicking on the edit button <Icon name="pencil-simple" /> on the right side of a role's record, or after clicking on the **Add new role** button (see [Creating a new role](#creating-a-new-role)).

:::caution
It isn't possible to edit the permissions of the Super Admin role. All configurations are in read-only mode.
:::

#### Editing role's details

The details area of an administrator role editing interface allow to define the name of the role, and to give it a description that should help other administrators understand what the role gives access to.

| Role details  | Instructions   |
| ------------- | -------------- |
| Name | Write the new name of the role in the textbox. |
| Description | Write the description of the role in the textbox. |

:::tip
In the top right corner, you can see a counter indicating how many administrators have been attributed the role.
:::

#### Configuring role's permissions

The permissions area of an administrator role editing interface allows to configure in detail what actions an administrator can do for any part of the Strapi application.

It is displayed as a table, split into 4 categories: [Collection types](#collection-and-single-types), [Single types](#collection-and-single-types), [Plugins](#plugins-and-settings) and [Settings](#plugins-and-settings).

##### Collection and Single types

The Collection types and Single types categories respectively list all available collection and single types for the Strapi application.

For each content-type, the administrators can have the permission to perform the following actions: create, read, update, delete and publish.

1. Go to the Collection types or Single types category of the permissions table.
2. Tick the box on the left of the name of the content-type to give access to. By default, all actions can be performed for all fields of the content-type.
3. (optional) Untick the action-related boxes to prevent actions of your choice.
4. (optional) Click the name of the content-type to display its full list of fields. Untick the field and action-related boxes to prevent access and/or action for the fields of your choice. If the [Internationalization feature](/cms/features/internationalization) is installed, define also what permissions should be granted for each available locale.
5. Repeat steps 2 to 4 for each content-type available to which the role should give access.
6. Click on the **Save** button on the top right corner.

##### Plugins and Settings

The Plugins and Settings categories both display a sub-category per available plugin or setting of the Strapi application. Each sub-category contains its own specific set of permissions.

1. Go to the Plugins or Settings category of the permissions table.
2. Click on the name of the sub-category which permissions to configure, to display all available permissions.
3. Tick the boxes of the permissions the role should give access to. You can refer to the table below for more information and instructions.

<Tabs>

<TabItem value="plugins" label="Plugins">

By default, packages permissions can be configured for the [Content-type Builder](/cms/features/content-type-builder), [Upload (i.e. Media Library)](/cms/features/media-library), the [Content Manager](/cms/features/content-manager), and [Users & Permissions](/cms/features/users-permissions) (i.e. the Users & Permissions feature allowing to manage end users). Each package has its own specific set of permissions.

| Package name          | Permissions |
| -------------------- | ----------- |
| Content-Releases <br /> *(Releases)* | <ul><li>General</li><ul><li>"Read" - gives access to the Releases feature</li><li>"Create" - allows to create releases</li><li>"Edit" - allows to edit releases</li><li>"Delete" - allows to delete releases</li><li>"Publish" - allows to publish releases</li><li>"Remove an entry from a release"</li><li>"Add an entry to a release"</li></ul></ul> |
| Content-Manager | <ul><li>Single types</li><ul><li>"Configure view" - allows to configure the edit view of a single type</li></ul></ul><ul><li>Collection types</li><ul><li>"Configure view" - allows to configure the edit view of a collection type</li></ul></ul><ul><li>Components</li><ul><li>"Configure Layout" - allows to configure the layout of a component</li></ul></ul> |
| Content-Type-Builder | <ul><li>General</li><ul><li>"Read" - gives access to the Content-type Builder plugin in read-only mode</li></ul></ul> |
| Upload <br /> *(Media Library)* | <ul><li>General</li><ul><li>"Access the Media Library" - gives access to the Media Library plugin</li><li>"Configure view" - allows to configure the view of the Media Library</li></ul></ul> <ul><li>Assets</li><ul><li>"Create (upload)" - allows to upload media files</li> <li>"Update (crop, details, replace) + delete" - allows to edit uploaded media files</li><li>"Download" - allows to download uploaded media files</li><li>"Copy link" - allows to copy the link of an uploaded media file</li></ul></ul> |
| Users-Permissions | <ul><li>Roles</li><ul><li>"Create" - allows to create end-user roles</li><li>"Read" - allows to see created end-user roles</li><li>"Update" - allows to edit end-user roles</li><li>"Delete" - allows to delete end-user roles</li></ul></ul><ul><li>Providers</li><ul><li>"Read" - allows to see providers</li><li>"Edit" - allows to edit providers</li></ul></ul><ul><li>Email Templates</li><ul><li>"Read" - allows to access the email templates</li><li>"Edit" - allows to edit email templates</li></ul></ul><ul><li>Advanced settings</li><ul><li>"Read" - allows to access the advanced settings of the Users & Permissions plugin</li><li>"Edit" - allows to edit advanced settings</li></ul></ul> üëâ Path reminder to the Users & Permissions plugin: <br />*General > Settings > Users & Permissions plugin* |

</TabItem>

<TabItem value="settings" label="Settings">

Settings permissions can be configured for all settings accessible from *General > Settings* from the main navigation of the admin panel. They also allow to configure access to the Plugins and Marketplace sections of the admin panel. Each setting has its own specific set of permissions.

| Setting name            | Permissions |
| ----------------------- | ----------- |
| Content Releases | <ul><li>Options</li><ul><li>"Read" - allows to access the Releases settings</li><li>"Edit" - allows to edit the Releases settings</li></ul></ul> üëâ Path reminder to the Releases settings: <br />*General > Settings > Global Settings - Releases* |
| Email | <ul><li>General</li><ul><li>"Access the Email settings page" - gives access to Email settings</li></ul></ul> üëâ Path reminder to Email settings: <br /> *General > Settings > Users & Permissions plugin - Email templates* |
| Media Library | <ul><li>General</li><ul><li>"Access the Media Library settings page" - gives access to Media Library settings</li></ul></ul> üëâ Path reminder to Media Library settings: <br /> *General > Settings > Global Settings - Media Library* |
| Internationalization | <ul><li>Locales</li><ul><li>"Create" - allows to create new locales</li><li>"Read" - allows to see available locales</li><li>"Update" - allows to edit available locales</li><li>"Delete" - allows to delete locales</li></ul></ul> üëâ Path reminder to the Internationalization settings: <br /> *General > Settings > Global Settings - Internationalization* |
| Review Workflows <EnterpriseBadge /> | <ul><li>"Create" - allows to create workflows</li><li>"Read" - allows to see created workflows</li><li>"Update" - allows to edit workflows</li><li>"Delete" - allows to delete workflows</li></ul> üëâ Path reminder to Review workflows settings: <br /> *General > Settings > Global Settings - Review workflows* |
| Single sign on <EnterpriseBadge /> <SsoBadge /> | <ul><li>Options</li><ul><li>"Read" - allows to access the SSO settings</li><li>"Update" - allows to edit the SSO settings</li></ul></ul> üëâ Path reminder to the SSO settings: <br />*General > Settings > Global Settings - Single Sign-On* |
| Audit Logs | <ul><li>Options</li><ul><li>"Read" - allows to access the Audit Logs settings</li></ul></ul> üëâ Path reminder to the Audit Logs settings: <br />*General > Settings > Admin Panel - Audit Logs* |
| Plugins and Marketplace | <ul><li>Marketplace</li><ul><li>"Access the Marketplace" - gives access to the Marketplace</li></ul></ul> |
| Webhooks | <ul><li>General</li><ul><li>"Create" - allows to create webhooks</li><li>"Read" - allows to see created webhooks</li><li>"Update" - allows to edit webhooks</li><li>"Delete" - allows to delete webhooks</li></ul></ul> üëâ Path reminder to Webhook settings: <br /> *General > Settings > Global Settings - Webhook* |
| Users and Roles | <ul><li>Users</li><ul><li>"Create (invite)" - allows to create administrator accounts</li><li>"Read" - allows to see existing administrator accounts</li><li>"Update" - allows to edit administrator accounts</li><li>"Delete" - allows to delete administrator accounts</li></ul></ul><ul><li>Roles</li><ul><li>"Create" - allows to create administrator roles</li><li>"Read" - allows to see created administrator roles</li><li>"Update" - allows to edit administrator roles</li><li>"Delete" - allows to delete administrator roles</li></ul></ul> üëâ Path reminder to the RBAC feature: <br /> *General > Settings > Administration Panel* |
| API Tokens |  <ul><li>API tokens</li><ul><li>"Access the API tokens settings page" - toggles access to the API tokens page</li></ul></ul><ul><li>General</li><ul><li>"Create (generate)" - allows the creation of API tokens</li><li>"Read" - allows you to see created API tokens (disabling this permission will disable access to the *Global Settings - API Tokens* settings)</li><li>"Update" - allows editing of API tokens</li><li>"Delete (revoke)" - allows deletion of API tokens</li> <li> "Regenerate" - allows regeneration of the API token</li></ul></ul> üëâ Path reminder to API Tokens settings: <br /> *General > Settings > Global Settings - API Tokens* |
| Project | <ul><li>General</li><ul><li>"Update the project level settings" - allows to edit the settings of the project</li><li>"Read the project level settings" - gives access to settings of the project</li></ul></ul> |
| Transfer Tokens | <ul><li>Transfer tokens</li><ul><li>"Access the Transfer tokens settings page" - toggles access to the Transfer tokens page</li></ul></ul><ul><li>General</li><ul><li>"Create (generate)" - allows the creation of Transfer tokens</li><li>"Read" - allows you to see created Transfer tokens (disabling this permission will disable access to the *Global Settings - Transfer Tokens* settings)</li><li>"Update" - allows editing of Transfer tokens</li><li>"Delete (revoke)" - allows deletion of Transfer tokens</li> <li> "Regenerate" - allows regeneration of the Transfer token</li></ul></ul> üëâ Path reminder to Transfer Tokens settings: <br /> *General > Settings > Global Settings - Transfer Tokens* |

</TabItem>

</Tabs>

4. Click on the **Save** button on the top right corner.

#### Setting custom conditions for permissions

For each permission of each category, a <Icon name="gear-six" /> **Settings** button is displayed. It allows to push the permission configuration further by defining additional conditions for the administrators to be granted the permission.

There are 2 default additional conditions:
- the administrator must be the creator,
- the administrator must have the same role as the creator.

<ThemedImage
  alt="Custom conditions"
  sources={{
    light: '/img/assets/users-permissions/administrator_custom-conditions.png',
    dark: '/img/assets/users-permissions/administrator_custom-conditions_DARK.png',
  }}
/>

1. Click on the <Icon name="gear-six" /> **Settings** button of the permission already granted for the role.
2. In the *Define conditions* window, each available permission can be customized with a specific condition. Click on the drop-down list related to the permission you want to customize.
3. Define the custom condition for the chosen permission. You can either:
   - Tick the Default option for all available additional conditions to be applied.
   - Click on the arrow button <Icon name="caret-down" /> to see the available additional conditions and tick only the chosen one(s).
4. Click on the **Apply** button.

:::tip
Once a custom condition is set for a permission, a dot is displayed next to the permission's name and the <Icon name="gear-six" /> **Settings** button.
:::

:::caution
Custom conditions can only be set for permissions that have been ticked to be granted for the role. If not, when clicking the <Icon name="gear-six" /> **Settings** button, the window that opens will remain empty, as no custom condition option will be available.
:::

Other custom conditions can be available if they have been created beforehand for your Strapi application. The following dedicated guide helps you create additional custom conditions:

<CustomDocCardsWrapper>
<CustomDocCard icon="" title="Creating custom RBAC conditions" description="Learn how to create custom RBAC conditions from scratch by customizing the code of your Strapi application." link="/cms/configurations/guides/rbac" />
</CustomDocCardsWrapper>

## Usage

**Path to use the feature:** <Icon name="gear-six" /> *Settings > Administration panel > Users*

The *Users* interface displays a table listing all the administrators of your Strapi application. More specifically, for each administrator listed in the table, their main account information are displayed, including name, email and attributed role. The status of their account is also indicated: active or inactive, depending on whether the administrator has already logged in to activate the account or not.

<ThemedImage
  alt="Users interface"
  sources={{
    light: '/img/assets/users-permissions/usage-interface.png',
    dark: '/img/assets/users-permissions/usage-interface_DARK.png',
  }}
/>

From this interface, it is possible to:

- make a textual search <ScreenshotNumberReference number="1" /> to find specific administrators,
- set filters <ScreenshotNumberReference number="2" /> to find specific administrators,
- create a new administrator account (see [Creating a new account](#creating-a-new-account)) <ScreenshotNumberReference number="3" />,
- delete an administrator account <ScreenshotNumberReference number="4" /> (see [Deleting an account](#deleting-an-account)),
- or access information regarding an administrator account, and edit it <ScreenshotNumberReference number="5" /> (see [Editing an account](#editing-an-account)).


:::tip
Sorting can be enabled for most fields displayed in the table. Click on a field name, in the header of the table, to sort on that field.
:::

### Creating a new account

<ThemedImage
  alt="User invitation"
  sources={{
    light: '/img/assets/users-permissions/invite-new-user.png',
    dark: '/img/assets/users-permissions/invite-new-user_DARK.png',
  }}
/>

1. Click on the <Icon name="envelope" /> **Invite new user** button.
2. In the *Invite new user* window, fill in the Details information about the new administrator:

  | User information | Instructions                                                                 |
  | ---------------- | ---------------------------------------------------------------------------- |
  | First name       | (mandatory) Write the administrator's first name in the textbox.             |
  | Last name        | (mandatory) Write the administrator's last name in the textbox.              |
  | Email            | (mandatory) Write the administrator's complete email address in the textbox. |

3. Fill in the Login settings about the new administrator:

  | Setting          | Instructions                                                                                                    |
  | ---------------- | --------------------------------------------------------------------------------------------------------------- |
  | User's roles     | (mandatory) Choose from the drop-down list the role to attribute to the new administrator.                      |
  | Connect with SSO | (optional) Click **TRUE** or **FALSE** to connect the new administrator account with SSO.                       |

4. Click on the **Invite user** button in the bottom right corner of the *Add new user* window.
5. A URL appears at the top of the window: it is the URL to send the new administrator for them to log in for the first time to your Strapi application. Click the copy button <Icon name="copy" /> to copy the URL.
6. Click on the **Finish** button in the bottom right corner to finish the new administrator account creation. The new administrator should now be listed in the table.

:::note
The administrator invitation URL is accessible from the administrator's account until it has been activated.
:::

### Deleting an account

It is possible to delete one or several administrator accounts at the same time.

1. Click on the delete button <Icon name="trash" /> on the right side of the account's record, or select one or more accounts by ticking the boxes on the left side of the accounts' records then click on the <Icon name="trash" /> **Delete** button above the table.
2. In the deletion window, click on the **Confirm** button to confirm the deletion.

### Editing an account

<ThemedImage
  alt="Edit an administrator account"
  sources={{
    light: '/img/assets/users-permissions/administrator_edit-info.png',
    dark: '/img/assets/users-permissions/administrator_edit-info_DARK.png',
  }}
/>

1. Click on the name of the administrator whose account you want to edit.
2. In the *Details* area, edit your chosen account details:

| User information      | Instructions  |
| --------------------- | ----------------------- |
| First name            | Write the administrator's first name in the textbox.                                        |
| Last name             | Write the administrator's last name in the textbox.                                         |
| Email                 | Write the administrator's complete email address in the textbox.                            |
| Username              | Write the administrator's username in the textbox.                                          |
| Password              | Write the new administrator account's password in the textbox.                              |
| Confirm password      | Write the new password in the textbox for confirmation.                                     |
| Active                | Click on **TRUE** to activate the administrator's account.                                  |

3. (optional) In the *Roles* area, edit the role of the administrator:
  - Click on the drop-down list to choose a new role, and/or add it to the already attributed one.
  - Click on the delete button <Icon name="x" classes="ph-bold" /> to delete an already attributed role.
4. Click on the **Save** button in the top right corner.


 This is the content for the doc docusaurus/docs/cms/features/releases.md 

 ---
title: Releases
description: Learn how to use the Releases feature that enables content managers to organize entries to publish/unpublish simultaneously
toc_max_heading_level: 5
tags:
- admin panel
- features
- Enterprise feature
- Growth feature
- releases
---

# Releases
<GrowthBadge/>

The Releases feature enables content managers to organize entries into containers that can perform publish and unpublish actions simultaneously. A release can contain entries from different content types and can mix locales.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">CMS Growth and Enterprise plans</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">Administrator role in the project's admin panel</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available by default, if required plan</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

<Guideflow lightId="3r3wvy5tnk" darkId="xrgw472swp"/>

## Configuration

To be able to include your content in releases, and to schedule and publish those releases, you must first create them. You can also modify the releases' default timezone to use when scheduling a publication, as well as deleting releases that are obsolete or irrelevant.

### Choosing default timezone

**Path to configure the feature:** <Icon name="gear-six" /> Settings

1. Click on the _Default timezone_ dropdown list and choose the default timezone to use.
2. Click **Save**.

<ThemedImage
  alt="Release settings"
  sources={{
    light: '/img/assets/releases/release-settings.png',
    dark: '/img/assets/releases/release-settings_DARK.png',
  }}
/>

### Creating a release

**Path to configure the feature:** <Icon name="paper-plane-tilt" /> Releases

1. Click the <Icon name="plus" classes="ph-bold" /> **New Release** button in the upper right corner.  
2. Give the release a name.
3. (_optional_) If you want to schedule the release publication instead of publishing the release manually, check the **Schedule release** checkbox and define the date, time, and timezone for publication.
4. Click the **Continue** button.

:::tip
Your releases can be renamed afterwards, by editing the release using the <Icon name="dots-three-outline" /> then <Icon name="pencil-simple" /> **Edit** buttons.
:::

<ThemedImage
  alt="Adding a new release"
  sources={{
    light: '/img/assets/releases/new-release.png',
    dark: '/img/assets/releases/new-release_DARK.png',
  }}
/>

<!-- TO INTEGRATE IF THE CALLOUT ISN'T ENOUGH

### Renaming a release

You can rename a release. To do so, while on a release page:

1. Click on the <Icon name="dots-three-outline" /> button in the top right corner of the admin panel.
2. Select <Icon name="pencil-simple" /> **Edit**.
3. In the modal, change the name of the release in the _Name_ field.
4. Click **Continue** to save the change.-->

### Deleting a release

**Path:** <Icon name="paper-plane-tilt" /> Releases

Deleting a release will only delete the release itself, but not the content-type entries included in the release.

1. Click on the <Icon name="dots-three-outline" /> button in the top right corner of the admin panel.
2. Select <Icon name="trash" /> **Delete**.
3. In the confirmation dialog, click <Icon name="trash" /> **Confirm**.

## Usage

**Path to use the feature:** <Icon name="paper-plane-tilt" /> Releases and <Icon name="feather" /> Content Manager

:::caution
Since publishing an entry with a release means turning a draft entry into a published entry, Releases will not work if [Draft & Publish](/cms/features/draft-and-publish) is disabled for the content-type.
:::

### Including content in a release

:::prerequisites
- Before entries can be added to a release, you must create a release from the <Icon name="paper-plane-tilt" /> Releases page.
- Adding content to a release requires the appropriate permissions for the Content-Releases plugin (see [configuring administrator roles](/cms/features/users-permissions)).
:::

#### One entry at a time

**Path:** Edit view of the <Icon name="feather" /> Content Manager

1. Click on <Icon name="dots-three-outline" /> in the _Entry_ area on the right side of the interface.
2. In the list, click on the <Icon name="paper-plane-tilt" /> **Add to release** button.
2. Select which release to add this entry to.
3. Click on the **Publish** or **Unpublish** button depending on whether you want the entry to be published or unpublished when the release itself is published, then click **Continue**.

The *Releases* box on the right should show which release(s) the entry is included in.

:::info
If [Releases scheduling](/cms/features/releases#scheduling-a-release) is enabled and the entry is added to a scheduled release, the release date and time will also be displayed.
:::

#### Multiple entries at a time

**Path:** List view of the <Icon name="feather" /> Content Manager

1. Select which entries you want to add by ticking the box on the left side of the entries' record.
2. Click on the **Add to release** button located above the header of the table.
3. In the modal, select which release to add these entries to.
4. Click on the **Publish** or **Unpublish** button to decide whether these entries will be published or unpublished when the release is published, then click **Continue**.

<ThemedImage
  alt="Including content in a release"
  sources={{
    light: '/img/assets/releases/releases-cm-list-view.png',
    dark: '/img/assets/releases/releases-cm-list-view_DARK.png',
  }}
/>

### Removing content from a release {#removing-an-entry-from-a-release}

**Path:** Edit view of the <Icon name="feather" /> Content Manager

1. In the *Releases* box in the right sidebar, click on <Icon name="dots-three-outline" /> below the name of the release.
2. Click the **Remove from release** button.

### Scheduling a release

**Path:** <Icon name="paper-plane-tilt" /> Releases

Releases can be [published manually](#publishing-a-release) or scheduled to be automatically published at a given date and time, with the timezone of your choice.

You can schedule a release:
- when [creating the release](#creating-a-release),
- or once the release is already created, by editing it.

To schedule an existing release, while on a release page:
1. Click on the <Icon name="dots-three-outline" /> button in the top right corner of the admin panel.
2. Select <Icon name="pencil-simple" /> **Edit**.
3. In the modal, check the **Schedule release** checkbox.
4. Select a date, time, and timezone for the release to be published.
5. Click **Save**.

<ThemedImage
  alt="Release scheduling"
  sources={{
    light: '/img/assets/releases/release-scheduling.png',
    dark: '/img/assets/releases/release-scheduling_DARK.png',
  }}
/>

<!--
:::tip
A release page can display entries either grouped by locale, content-type, or action (publish or unpublish). To change how entries are grouped, click the **Group by ‚Ä¶** dropdown and select an option from the list.
:::
-->

### Publishing a release

**Path:** <Icon name="paper-plane-tilt" /> Releases

Publishing a release means that all the actions (publish or unpublish) defined for each entry included in the release will be performed simultaneously. To publish a release, click the **Publish** button in the top right corner of the admin panel.

The _Status_ column displays the status of each entry:

   - <Icon name="check-circle" color="rgb(58,115,66)"/> Already published: the entry is already published and publishing the release will not affect this entry 
   - <Icon name="check-circle" color="rgb(58,115,66)"/> Already unpublished: the entry is already unpublished, and publishing the release will not affect this entry.
   - <Icon name="check-circle" color="rgb(58,115,66)"/> Ready to publish: the entry is ready to  be published with the release
   - <Icon name="check-circle" color="rgb(58,115,66)"/> Ready to unpublish: the entry is ready to  be unpublished with the release
   - <Icon name="x-circle" color="rgb(190,51,33)" /> Not ready to publish: the entry cannot be published because some fields are incorrectly filled, or it hasn't reached the required stage for publishing. In this case, the release will be indicated as *Blocked* until all issues have been fixed.

If some of your entries have a <Icon name="x-circle" color="rgb(190,51,33)" /> status, click the <Icon name="dots-three-outline" /> and the **Edit the entry** button to fix the issues until all entries have the <Icon name="check-circle" color="rgb(58,115,66)"/> status. Note that you will have to click on the **Refresh** button to update the release page as you fix the various entries issues.

:::caution
Once a release is published, the release itself cannot be updated. You can not re-release that specific release with the same group of entries with some modifications; you must create another release.
:::

<ThemedImage
  alt="Release publish"
  sources={{
    light: '/img/assets/releases/publish-release.png',
    dark: '/img/assets/releases/publish-release_DARK.png',
  }}
/>


 This is the content for the doc docusaurus/docs/cms/features/review-workflows.md 

 ---
title: Review Workflows
description: Learn how to use the Review Workflows feature that enables the creation and management of workflows for your various content-types
toc_max_heading_level: 5
tags:
- admin panel
- features
- Enterprise feature
- review workflows
---

# Review Workflows
<EnterpriseBadge />

The Review Workflows feature allows you to create and manage workflows for your various content-types. Each workflow can consist of any review stages for your content, enabling your team to collaborate in the content creation flow from draft to publication.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">CMS Enterprise Plan</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">Super Admin role in project's admin panel</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available by default, if required plan</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

<Guideflow lightId="zpez8vgs3p" darkId="lpx4d4zs4k"/>

## Configuration

**Path to configure the feature:** <Icon name="gear-six" /> Settings > Global settings > Review Workflows

For the review workflows to be usable in the [Content Manager](/cms/features/content-manager), the default one should be configured or a new one should be created.

The default workflow is configured to have 4 stages: To do, In progress, Ready to review, and Reviewed. All 4 stages can be edited, reordered or deleted as needed, and it is also possible to add new stages.

### Creating a new workflow

1. Click on the **Create new workflow** button or on the edit button <Icon name="pencil-simple" /> of a workflow.
2. In the workflow edit interface, configure the new workflow:
    | Setting name   | Instructions                                                             |
    | -------------- | ------------------------------------------------------------------------ |
    | Workflow name  | Write a unique name of workflow.                                         |
    | Associated to  | (optional) Assign this workflow to one or more existing content-types.   |
    | Stages         | Add review stages (see [Adding a new stage](#adding-a-new-stage)).       |
3. Click on the **Save** button. The new workflow will be displayed in the list view and for every content-type assigned.

:::note
The maximum number of <ExternalLink to="https://strapi.io/pricing-cloud" text="workflows and stages per workflow is limited"/>.
:::

### Editing a workflow

<ThemedImage
  alt="Workflow edit view"
  sources={{
    light: '/img/assets/review-workflows/edit-view-light.png',
    dark: '/img/assets/review-workflows/edit-view-dark.png',
  }}
/>

#### Adding a new stage

1. Click on the **Add new stage** button.
2. Write the *Stage name*.
3. Select a *Color*.
4. Select *Roles* that can change the stage, if the entity is currently in that review stage.
5. Click on the **Save** button.

By default new stages are appended, but they can be reordered anytime using the <Icon name="dots-six-vertical" classes="ph-bold" /> button.

:::tip
To set up roles for each stage, you can either click "Apply to all stages" to apply the current roles to all other stages of the workflow or use "Duplicate stage" of the stage context menu.
:::

#### Duplicating a stage

1. Click **Duplicate Stage** in the context menu of the stage.
2. Change the name of the duplicated stage.
2. Click on the **Save** button.

#### Deleting a stage

To delete a stage, click <Icon name="dots-three-outline" /> in the context menu of the stage, then **Delete**.

If you delete a stage that has pending reviews, the reviews will be moved to first stage in the workflow. Every workflow needs to
contain at least one stage and therefore it is not possible to delete the last stage.

### Deleting a workflow

To delete a workflow click on the delete button <Icon name="trash" /> of a workflow in the list view.

:::note
It is not possible to delete the last workflow.
:::

## Usage

**Path to use the feature:** <Icon name="feather" /> Content Manager

### Changing review stage {#change-review-stage}

As content is created and revised among your team, you can change the review stage of the content to any stage defined in the review workflow.

1. Access the edit view of your content-type.
2. In the *Review Workflows* box on the right side of the interface, click on the _Review stage_ drop-down list.
3. Choose the new review stage of your entry. It is automatically saved.

<ThemedImage
  alt="Review Stage dropdown"
  sources={{
    light: '/img/assets/content-manager/review-stage-dropdown.png',
    dark: '/img/assets/content-manager/review-stage-dropdown_DARK.png',
  }}
/>

### Defining assignee {#change-assignee}

Entries of a review workflow content type can be assigned to any admin user in Strapi for review.

1. Access the edit view of your content-type.
2. In the *Review Workflows* box on the right side of the interface, click on the _Assignee_ drop-down list.
3. Choose the new assignee of your entry. It is automatically saved.

<ThemedImage
  alt="Review Stage dropdown"
  sources={{
    light: '/img/assets/content-manager/review-assignee-dropdown.png',
    dark: '/img/assets/content-manager/review-assignee-dropdown_DARK.png',
  }}
/>


 This is the content for the doc docusaurus/docs/cms/features/sso.md 

 ---
title: Single Sign-On (SSO)
description: Learn to use the SSO feature which manages authentication through an identity provider.
toc_max_heading_level: 6
tags:
- admin panel
- SSO
- single sign-on
- features
---

# Single Sign-On (SSO)
<EnterpriseBadge /> <SsoBadge />

The Single Sign-On (SSO) feature can be made available on a Strapi application to allow administrators to authenticate through an identity provider (e.g. Microsoft Azure Active Directory).

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">CMS Enterprise plan, or SSO add-on with the CMS Growth plan</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">Read & Update permissions in Roles > Settings - Single Sign-On</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Disabled by default</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

<ThemedImage
alt="Login page"
sources={{
    light: '/img/assets/getting-started/login-page-sso.png',
    dark: '/img/assets/getting-started/login-page_DARK.png',
  }}
/>

## Configuration

General settings for SSO are available in the admin panel, and additional SSO providers can be configured via your Strapi project's code.

### Admin panel settings

**Path to configure the feature:** <Icon name="gear-six" /> *Global settings > Single Sign-On*

1. In the *Single Sign-On* interface, define your chosen new settings:

| Setting name      | Instructions      |
| ----------------- | ---------------------|
| Auto-registration | Click on **True** to allow the automatic creation of a new Strapi administrator when an SSO login does not match an existing Strapi administrator account. If this setting is set on **False**, new Strapi administrators accounts must be created manually beforehand. |
| Default role      | Choose among the drop-down list the role to attribute by default to auto-registered Strapi administrators through SSO login.           |
| Local authentication lock-out | Choose among the drop-down list the roles for which the local authentication capabilities are disabled (see [Users & Permissions feature](/cms/features/users-permissions#advanced-settings) documentation).<br />Users locked out of local authentication will be forced to use SSO to login and will not be able to change or reset their password. |

2. Click the **Save** button.

:::danger
Don't select _Super Admin_ in the roles list for the _Local authentication lock-out_. If _Super Admin_ is selected, it becomes possible to accidentally lock oneself out of the Strapi admin panel entirely. A fix will be provided soon.

In the meantime, the only way to get in if the Super Admin can't log in is to temporarily disable the SSO feature entirely, log in with username and password to remove the _Super Admin_ role from the _Local authentication lock-out_ list, and then re-enable SSO.
:::

<ThemedImage
  alt="SSO settings"
  sources={{
    light: '/img/assets/settings/settings-sso.png',
    dark: '/img/assets/settings/settings-sso_DARK.png',
  }}
/>

### Code-based configuration

The SSO configuration lives in [the `/config/admin` file](/cms/configurations/admin-panel). The following dedicated guide will help you configure additional sign-in and sign-up methods for the Strapi admin panel:

<CustomDocCardsWrapper>
<CustomDocCard icon="sign-in" title="How to configure SSO providers" description="Learn how to configure SSO providers through your Strapi project's code." link="/cms/configurations/guides/configure-sso"/>
</CustomDocCardsWrapper>

## Usage

To access the admin panel using a specific provider instead of logging in with a regular Strapi administrator account:

1. Go to the URL of your Strapi application's admin panel.
2. Click on a chosen provider, which logo should be displayed at the bottom of the login form. If you cannot see your provider, click the <Icon name="dots-three-outline" /> button to access the full list of all available providers.
3. You will be redirected to your provider's own login page where you will be able to authenticate.


 This is the content for the doc docusaurus/docs/cms/features/users-permissions.md 

 ---
title: Users & Permissions
description: Learn to use the Users & Permissions and API tokens features to manage end-users.
toc_max_heading_level: 5
tags:
- admin panel
- users & permissions
- api tokens
- features
---

# Users & Permissions

The Users & Permissions feature allows the management of the end-users <Annotation>üí° **What are end users?** <br/> End-users are the users who consume the content that is created and managed with a Strapi application and displayed on front-end applications (e.g. websites, mobile applications, connected devices etc.). Unlike the administrators, they do not have access to the admin panel.</Annotation> of a Strapi project. It provides a full authentication process based on JSON Web Tokens (JWT) to protect your API, and an access-control list (ACL) strategy that enables you to manage permissions between groups of users.

<IdentityCard>
  <IdentityCardItem icon="credit-card" title="Plan">Free feature</IdentityCardItem>
  <IdentityCardItem icon="user" title="Role & permission">CRUD permissions in Roles > Plugins - Users & Permissions</IdentityCardItem>
  <IdentityCardItem icon="toggle-right" title="Activation">Available by default</IdentityCardItem>
  <IdentityCardItem icon="desktop" title="Environment">Available in both Development & Production environment</IdentityCardItem>
</IdentityCard>

## Admin panel configuration

The Users & Permissions feature is configured from both the admin panel settings, and via the code base.

### Roles

The Users & Permissions feature allows to create and manage roles for end users, to configure what they can have access to.

#### Creating a new role

**Path:** <Icon name="gear-six" /> *Users & Permissions plugin > Roles*

On the top right side of the *Roles* interface, an **Add new role** button is displayed. It allows to create a new role for end users of your Strapi application.

Click on the **Add new role** button to be redirected to the roles edition interface, where you will be able to name your new role and define its details and permissions (see [Editing a role](#editing-a-role)).

<ThemedImage
  alt="End-users roles interface"
  sources={{
    light: '/img/assets/users-permissions/end-user_roles.png',
    dark: '/img/assets/users-permissions/end-user_roles_DARK.png',
  }}
/>

:::note
The end-user role attributed by default to all new end users can be defined in the *Advanced settings* sub-section of *Users & Permissions plugin* (see [Advanced settings](#advanced-settings)).
:::

#### Editing a role

**Path:** <Icon name="gear-six" /> *Users & Permissions plugin > Roles*

The *Roles* interface displays all created roles for the end users of your Strapi application.

By default, 2 end-user roles are defined for any Strapi application:

- Authenticated: for end users to access content only if they are logged in to a front-end application.
- Public: for end users to access content without being logged in to a front-end application.

More roles can however be created (see [Creating a new role](#creating-a-new-role)), and all can be edited through the role edition interface.

1. Click on the edit button <Icon name="pencil-simple" /> of the role to edit ‚Äî except if you directly landed on the role edition interface from creating a new role.
2. Fill in the *Role details*, following the instructions from the table below:

| Role details  | Instructions |
| ------------- | ---------------------------------------- |
| Name          | Write the new name of the role in the textbox. |
| Description   | Write the description of the role in the textbox. It should help administrators understand what the role gives access to. |

3. Configure the end-user role's *Permissions* by:
    1. Clicking on the name of the permission category to configure (e.g. Application, Content-Manager, Email etc.).
    2. Ticking the boxes of the actions and permissions to grant for the role.
4. Click on the **Save** button.

:::tip
When ticking an action or permission box, related bound routes of the API are displayed in the right side of the interface.
:::

<ThemedImage
  alt="Configuring a role for end users"
  sources={{
    light: '/img/assets/users-permissions/end-user_roles-config.png',
    dark: '/img/assets/users-permissions/end-user_roles-config_DARK.png',
  }}
/>

#### Deleting a role

**Path:** <Icon name="gear-six" /> *Users & Permissions plugin > Roles*

Although the 2 default end-user roles cannot be deleted, the other ones can, as long as no end user still has this role attributed to their account.

1. Click on the delete button <Icon name="trash" /> on the right side of the role's record.
2. In the deletion window, click on the <Icon name="trash" /> **Confirm** button to confirm the deletion.

### Providers

**Path:** <Icon name="gear-six" /> *Users & Permissions plugin > Providers*

The Users & Permissions feature allows enabling and configuring providers, for end users to login via a third-party provider to access the content of a front-end application through the Strapi application API.

By default, a list of providers is available including one, "Email", enabled by default for all Strapi applications with Users & Permissions enabled.

1. Click on the edit <Icon name="pencil-simple" /> button of the provider to enable and configure.
2. In the provider edition window, click on the **TRUE** button of the *Enable* option.
3. Fill in the provider's configurations. Each provider has its own specific set of configurations (see [Users & Permissions providers documentation](/cms/configurations/users-and-permissions-providers#setting-up-the-provider---examples)).
4. Click on the **Save** button.

<ThemedImage
  alt="Providers interface"
  sources={{
    light: '/img/assets/settings/up_providers.png',
    dark: '/img/assets/settings/up_providers_DARK.png',
  }}
/>

Other providers that are not proposed by default by Strapi can be added manually through the code of your Strapi application. Click on any of the following cards to get additional information on configuring or creating third-party providers:

<CustomDocCardsWrapper>
<CustomDocCard icon="question" title="Setting up providers" description="Learn how Users & Permissions providers work, understand the login flow, and see common examples." link="/cms/configurations/users-and-permissions-providers" />
<CustomDocCard icon="list-plus" title="Creating a custom provider" description="Learn how to create your own custom provider for the Users & Permissions feature." link="/cms/configurations/users-and-permissions-providers/new-provider-guide" />
</CustomDocCardsWrapper>


<!---
:::tip
Click the search button <Icon name="search" classes="ph-bold" /> above the table to use a text search and find one of your providers more quickly!
:::
--->

### Email templates

**Path:** <Icon name="gear-six" /> *Users & Permissions plugin > Email templates*

The Users & Permissions feature uses 2 email templates, "Email address confirmation" and "Reset password", that are sent to end users:

- if their account must be confirmed to be activated,
- if they need to reset the password of their Strapi account.

Both email templates can be modified.

1. Click on the edit <Icon name="pencil-simple" /> button of the email template to configure and edit.
2. Configure the email template:
    | Setting name   | Instructions |
    |--------------- | ----------------------------------------------- |
    | Shipper name   | Indicate the name of the shipper of the email.                                                   |
    | Shipper email  | Indicate the email address of the shipper of the email.                                          |
    | Response email | (optional) Indicate the email address to which responses emails from the end users will be sent. |
    | Subject        | Write the subject of the email. Variables can be used (see [templating emails](#templating-emails)).             |
3. Edit the content of the email in the "Message" textbox. Email templates content is in HTML and uses variables (see [templating emails](#templating-emails)).
4. Click on the **Finish** button.

<ThemedImage
  alt="Email templates interface"
  sources={{
    light: '/img/assets/settings/up_email-templates.png',
    dark: '/img/assets/settings/up_email-templates_DARK.png',
  }}
/>

### Advanced Settings

**Path:** <Icon name="gear-six" /> *Users & Permissions plugin > Advanced settings*

All settings related to the Users & Permissions feature are managed from the *Advanced Settings* interface, including the choice of a default role for end users, the enablement of sign-ups and email confirmation, as well as the choice of landing page for resetting a password.

1. Configure the settings of your choice, following the instructions below:
    | Setting name  | Instructions         |
    | ------------------------------------ | --------------------------------------------------------------|
    | Default role for authenticated users | Click the drop-down list to choose the default role for new end users.                                                                                             |
    | One account per email address        | Click on the **TRUE** button to limit to 1 the number of end-user accounts with the same email address.<br/>Click on **FALSE** to disable this limitation and allow several end-user accounts to be associated with the same email address (e.g. `kai.doe@strapi.io` can be used when logging in via several different providers).  |
    | Enable sign-ups                      | Click on the **TRUE** button to enable end-user sign-ups.<br/>Click on **FALSE** to prevent end-user registration to your front-end application(s).                        |
    | Reset password page                  | Indicate the URL of the reset password page for your front-end application(s).                                                                                     |
    | Enable email confirmation            | Click on the **TRUE** button to enable end-user account confirmation by sending them a confirmation email.<br/>Click on **FALSE** to disable account confirmation.         |
    | Redirection url                      | Indicate the URL of the page where end users should be redirected after confirming their Strapi account.                                                           |

2. Click the **Save** button.

<ThemedImage
  alt="Advanced settings interface"
  sources={{
    light: '/img/assets/settings/up_settings.png',
    dark: '/img/assets/settings/up_settings_DARK.png',
  }}
/>

## Code-based configuration

While most of the Users & Permissions settings are handled via the admin panel, some more specific settings can be fine-tuned by configuring and customizing your Strapi project's code.

### JWT configuration

You can configure the JWT generation by using the [plugins configuration file](/cms/configurations/plugins).

Strapi uses <ExternalLink to="https://www.npmjs.com/package/jsonwebtoken" text="jsonwebtoken"/> to generate the JWT.

Available options:

- `jwtSecret`: random string used to create new JWTs, typically set using the `JWT_SECRET` [environment variable](/cms/configurations/environment#strapi).
- `jwt.expiresIn`: expressed in seconds or a string describing a time span.<br/>
  Eg: 60, "45m", "10h", "2 days", "7d", "2y". A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (minutes, hours, days, years, etc), otherwise milliseconds unit is used by default ("120" is equal to "120ms").

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"

module.exports = ({ env }) => ({
  // ...
  'users-permissions': {
    config: {
      jwt: {
        expiresIn: '7d',
      },
    },
  },
  // ...
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/plugins.ts"

export default ({ env }) => ({
  // ...
  'users-permissions': {
    config: {
      jwt: {
        expiresIn: '7d',
      },
    },
  },
  // ...
});
```

</TabItem>

</Tabs>

:::warning
Setting JWT expiry for more than 30 days is not recommended due to security concerns.
:::

### Registration configuration

If you have added any additional fields in your User **model** <Annotation>Models, also called content-types in Strapi, define a representation of the content structure.<br/>Users are a special type of built-in content-type found in any new Strapi application. You can customize the Users model, adding more fields for instance, like any other models.<br/>For more information, please refer to the [models](/cms/backend-customization/models) documentation.</Annotation> that need to be accepted on registration, you need to added them to the list of allowed fields in the `config.register` object of [the `/config/plugins` file](/cms/configurations/plugins), otherwise they will not be accepted.

The following example shows how to ensure a field called "nickname" is accepted by the API on user registration:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"
module.exports = ({ env }) => ({
  // ...
  "users-permissions": {
    config: {
      register: {
        allowedFields: ["nickname"],
      },
    },
  },
  // ...
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/plugins.ts"
export default ({ env }) => ({
  // ...
  "users-permissions": {
    config: {
      register: {
        allowedFields: ["nickname"],
      },
    },
  },
  // ...
});
```

</TabItem>

</Tabs>

### Templating emails

By default this plugin comes with two templates: reset password and email address confirmation. The templates use <ExternalLink to="https://lodash.com/docs/4.17.15#template" text="Lodash's `template()` method"/> to populate the variables.

You can update these templates under **Plugins** > **Roles & Permissions** > **Email Templates** tab in the admin panel (see [configuring email templates](#email-templates)).

The following variables can be used:

<Tabs>
<TabItem value="reset-password" label="Reset password">

<br/>
- `USER` (object)
  - `username`
  - `email`
- `TOKEN` corresponds to the token generated to be able to reset the password.
- `URL` is the link where the user will be redirected after clicking on it in the email.
- `SERVER_URL` is the absolute server url (configured in server configuration).

</TabItem>

<TabItem value="email-address-confirmation" label="Email address confirmation">

<br/>
- `USER` (object)
  - `username`
  - `email`
- `CODE` corresponds to the CODE generated to be able confirm the user email.
- `URL` is the Strapi backend URL that confirms the code (by default `/auth/email-confirmation`).
- `SERVER_URL` is the absolute server url (configured in server configuration).

</TabItem>

</Tabs>

### Security configuration

JWTs can be verified and trusted because the information is digitally signed. To sign a token a _secret_ is required. By default Strapi generates and stores it in `/extensions/users-permissions/config/jwt.js`.

This is useful during development but for security reasons it is recommended to set a custom token via an environment variable `JWT_SECRET` when deploying to production.

By default you can set a `JWT_SECRET` environment variable and it will be used as secret. If you want to use another variable you can update the configuration file.

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/extensions/users-permissions/config/jwt.js"

module.exports = {
  jwtSecret: process.env.SOME_ENV_VAR,
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/extensions/users-permissions/config/jwt.ts"

export default {
  jwtSecret: process.env.SOME_ENV_VAR,
};
```

</TabItem>

</Tabs>

#### Creating a custom callback validator {#creating-a-custom-password-validation}

By default, Strapi SSO only redirects to the redirect URL that is exactly equal to the url in the configuration:

<ThemedImage
  alt="Users & Permissions configuration"
  sources={{
      light: '/img/assets/users-permissions/sso-config-custom-validator.png',
      dark: '/img/assets/users-permissions/sso-config-custom-validator_DARK.png'
    }}
/>

If you need to configure a custom handler to accept other URLs, you can create a callback `validate` function in your plugins.js for the `users-permissions` plugin.

```tsx title="/config/plugins.js|ts"
  // ... other plugins configuration ...
  // Users & Permissions configuration
  'users-permissions': {
    enabled: true,
    config: {
      callback: {
        validate: (cbUrl, options) => {
          // cbUrl is where Strapi is being asked to redirect the auth info
          // that was received from the provider to

          // in this case, we will only validate that the 
          // if using a base url, you should always include the trailing slash
          // although in real-world usage you should also include the full paths
          if (cbUrl.startsWith('https://myproxy.mysite.com/') || 
              cbUrl.startsWith('https://mysite.com/')) {
            return;
          }

          // Note that you MUST throw an error to fail validation
          // return values are not checked
          throw new Error('Invalid callback url');
        },
      },
    },
  },
```

## Usage

The Users & Permissions feature can be used both via the admin panel, to create new end-user accounts, and via the APIs.

### Admin panel usage

**Path to use the feature:** <Icon name="feather" /> Content Manager

With the Users & Permissions feature, the end users and their account information are managed as a content-type. When Users & Permissions is installed on a Strapi application, 3 collection types are automatically created, including "User" which is the only one available directly in the Content Manager.

<ThemedImage
  alt="Managing end users via the Content Manager"
  sources={{
    light: '/img/assets/users-permissions/end-user_content-manager.png',
    dark: '/img/assets/users-permissions/end-user_content-manager_DARK.png',
  }}
/>

Registering new end users in a front-end application with the Users & Permissions plugin consists in adding a new entry to the User collection type.

1. Go to the User collection type in the <Icon name="feather" /> Content Manager.
2. Click on the **Create new entry** button in the top right corner.
3. Fill in the default fields of the entry. Additional fields added specifically for your Strapi application by your administrators may be displayed as well.
    | Field     | Instructions    |
    | --------- | ---------------------------- |
    | Username  | Write the username of the end user.    |
    | Email     | Write the complete email address of the end user in the textbox.   |
    | Password  | (optional) Write a new password in the textbox. You can click on the <Icon name="eye" /> icon for the password to be shown. |
    | Confirmed | (optional) Click **ON** for the end-user account to be confirmed.                                           |
    | Blocked   | (optional) Click **ON** to block the account of the end user, to prevent them to access content.            |
    | Role      | (optional) Indicate the role that should be granted to the new end user. If this field is not filled in, the end user will be attributed the role set as default (see "Default role" option in [advanced settings](#advanced-settings)). |
4. Click on the **Save** button.

:::note
If end users can register themselves on your front-end application (see "Enable signups" option in [advanced settings](#advanced-settings)), a new entry will automatically be created and the fields of that entry will be filled up with the information indicated by the end user. All fields can however be edited by an administrator of the Strapi application.
:::

### API usage

Each time an API request is sent the server checks if an `Authorization` header is present and verifies if the user making the request has access to the resource.

:::note
When you create a user without a role, or if you use the `/api/auth/local/register` route, the `authenticated` role is given to the user.
:::

#### Identifier

The `identifier` param can be an email or username, as in the following examples:

<Tabs>

<TabItem value="Axios" title="Axios">

```js
import axios from 'axios';

// Request API.
axios
  .post('http://localhost:1337/api/auth/local', {
    identifier: 'user@strapi.io',
    password: 'strapiPassword',
  })
  .then(response => {
    // Handle success.
    console.log('Well done!');
    console.log('User profile', response.data.user);
    console.log('User token', response.data.jwt);
  })
  .catch(error => {
    // Handle error.
    console.log('An error occurred:', error.response);
  });
```

</TabItem>

<TabItem value="Postman" title="Postman">

If you use **Postman**, set the **body** to **raw** and select **JSON** as your data format:

```json
{
  "identifier": "user@strapi.io",
  "password": "strapiPassword"
}
```

If the request is successful you will receive the **user's JWT** in the `jwt` key:  

```json
{
    "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNTc2OTM4MTUwLCJleHAiOjE1Nzk1MzAxNTB9.UgsjjXkAZ-anD257BF7y1hbjuY3ogNceKfTAQtzDEsU",
    "user": {
        "id": 1,
        "username": "user",
        ...
    }
}
```

</TabItem>
</Tabs>

#### Token usage

The `jwt` may then be used for making permission-restricted API requests. To make an API request as a user place the JWT into an `Authorization` header of the `GET` request.

Any request without a token will assume the `public` role permissions by default. Modify the permissions of each user's role in the admin dashboard.

Authentication failures return a `401 (unauthorized)` error.

The `token` variable is the `data.jwt` received when logging in or registering.

```js
import axios from 'axios';

const token = 'YOUR_TOKEN_HERE';

// Request API.
axios
  .get('http://localhost:1337/posts', {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })
  .then(response => {
    // Handle success.
    console.log('Data: ', response.data);
  })
  .catch(error => {
    // Handle error.
    console.log('An error occurred:', error.response);
  });
```

#### User registration

Creating a new user in the database with a default role as 'registered' can be done like in the following example:

```js
import axios from 'axios';

// Request API.
// Add your own code here to customize or restrict how the public can register new users.
axios
  .post('http://localhost:1337/api/auth/local/register', {
    username: 'Strapi user',
    email: 'user@strapi.io',
    password: 'strapiPassword',
  })
  .then(response => {
    // Handle success.
    console.log('Well done!');
    console.log('User profile', response.data.user);
    console.log('User token', response.data.jwt);
  })
  .catch(error => {
    // Handle error.
    console.log('An error occurred:', error.response);
  });
```

#### User object in Strapi context

The `user` object is available to successfully authenticated requests.

The authenticated `user` object is a property of `ctx.state`.

```js
create: async ctx => {
  const { id } = ctx.state.user;

  const depositObj = {
    ...ctx.request.body,
    depositor: id,
  };

  const data = await strapi.services.deposit.add(depositObj);

  // Send 201 `created`
  ctx.created(data);
};
```


 This is the content for the doc docusaurus/docs/cms/getting-started/setting-up-admin-panel.md 

 ---
title: Setting up the admin panel
displayed_sidebar: cmsSidebar
description: How to setup your Strapi Admin Panel
tags:
- admin panel
- administrator
- password
---


Before going over individual features, we recommend the following steps to set up and configure your Strapi admin panel correctly. Once you complete the setup, you can access the admin panel through the provided URL.

## Accessing the admin panel

The admin panel is the back office of your Strapi application. From the admin panel, you will be able to manage content-types, and write their actual content. It is also from the admin panel that you will manage users, both administrators and end users of your Strapi application.

:::caution
In order to access the admin panel, your Strapi application must be launched, and you must be aware of the URL to its admin panel (e.g. `api.example.com/admin`).
:::

<ThemedImage
alt="Login page"
sources={{
    light: '/img/assets/getting-started/login-page-sso.png',
    dark: '/img/assets/getting-started/login-page_DARK.png',
  }}
/>

To access the admin panel:

1. Go to the URL of your Strapi application's admin panel.
2. Enter your credentials to log in.
3. Click on the **Login** button. You should be redirected to the homepage of the admin panel.

### Using SSO for authentication {#using-sso}
<EnterpriseBadge /> <SsoBadge />

If your Strapi application was configured to allow authentication through SSO (see [Configuring Single Sign-On](/cms/features/sso)), you can access the admin panel using a specific provider instead of logging in with a regular Strapi administrator account.

To do so, in the login page of your Strapi application, click on a chosen provider. If you cannot see your provider, click the <Icon name="dots-three-outline" /> button to access the full list of all available providers. You will be redirected to your provider's own login page where you will be able to authenticate.

## Setting up your administrator profile

If you are a new administrator, we recommend making sure your profile is all set, before diving into your Strapi application. From your administrator profile, you are able to modify your user information, such as name, username, email or password. You can also choose the language of the interface for your Strapi application.

<ThemedImage
alt="Homepage of the Admin Panel"
sources={{
    light: '/img/assets/getting-started/user-information-profile.png',
    dark: '/img/assets/getting-started/user-information-profile_DARK.png',
  }}
/>

To modify your user information:

1. Click on your account name or initials in the bottom left hand corner of the main navigation of your Strapi application.
2. In the drop-down menu, click on **Profile**.
3. Modify the information of your choice:

| Profile & Experience | Instructions                                                                                                                                                                                                      |
| -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| First name           | Write your first name in the textbox.                                                                                                                                                                             |
| Last name            | Write your last name in the textbox.                                                                                                                                                                              |
| Email                | Write your complete email address in the textbox.                                                                                                                                                                 |
| Username             | (optional) Write a username in the textbox.                                                                                                                                                                       |
| Interface language   | Among the drop-down list, choose a language for your Strapi application interface.                                                                                                                                |
| Interface mode       | Among the drop-down list, choose a mode for your Strapi application interface: either "Light mode" or "Dark mode". Note that by default, the chosen mode for a Strapi application is based on the browser's mode. |

4. Click on the **Save** button.

### Changing your password

To change the password of your account:

1. Go to your administrator profile.
2. Fill in the password-related options:

| Password modification |                                                                                                                  |
| --------------------- | ---------------------------------------------------------------------------------------------------------------- |
| Current password      | Write your current password in the textbox. <br/> üí° You can click on the <Icon name="eye" /> icon for the password to be shown. |
| Password              | Write the new password in the textbox. <br/> üí° You can click on the <Icon name="eye" /> icon for the password to be shown.      |
| Password confirmation | Write the same new password in the textbox. <br/> üí° You can click on the <Icon name="eye" /> icon for the password to be shown. |

3. Click on the **Save** button.

---

Congratulations on being a new Strapi user! You're now ready to discover all the features and options that Strapi has to offer!


 This is the content for the doc docusaurus/docs/cms/installation.md 

 ---
title: Installation
description: Learn many different options to install Strapi and getting started on using it.
pagination_next: cms/features/admin-panel
tags:
- introduction
- installation
- Command Line Interface (CLI)
---

# Installation

Strapi projects can be installed either locally on a computer or on a remote server. The following installation guide provides step-by-step instructions on how to install and create a new Strapi project on your local machine:

<CustomDocCard title="CLI" description="Create a project on your local machine using the CLI." link="/cms/installation/cli" />

If you already have an existing Strapi project on your local machine, the following guide provides step-by-step instructions on creating a custom Docker image for your project:

<CustomDocCard title="Docker" description="Create a custom Docker container from a local project." link="/cms/installation/docker" />


 This is the content for the doc docusaurus/docs/cms/installation/cli.md 

 ---
title: CLI
displayed_sidebar: cmsSidebar
description: Fast-track local install for getting Strapi running on your computer in less than a minute.
pagination_prev: cms/installation
pagination_next: cms/installation/docker
tags:
- installation
- Command Line Interface (CLI)
- database
- MySQL
- PostgreSQL
---

import InstallPrerequisites from '/docs/snippets/installation-prerequisites.md'
import SupportedDatabases from '/docs/snippets/supported-databases.md'

# Installing from CLI

Strapi CLI (Command Line Interface) installation scripts are the fastest way to get Strapi running locally. The following guide is the installation option most recommended by Strapi.

## Preparing the installation

<InstallPrerequisites components={props.components} />
A supported database is also required for any Strapi project:
<SupportedDatabases components={props.components} />

## Creating a Strapi project

Follow the steps below to create a new Strapi project, being sure to use the appropriate command for your installed package manager:

1. In a terminal, run the following command:

    <Tabs groupId="yarn-npm">

    <TabItem value="npm" label="NPM">

    ```bash
    npx create-strapi@latest
    ```

    <details>
    <summary>Additional explanations for the command:</summary>

    * `npx` runs a command from a npm package
    * `create-strapi` is the Strapi package
    * `@latest` indicates that the latest version of Strapi is used
    
    <br/>

    Instead of npx, the traditional npm command can be used too, with `npm create strapi@latest`.

    Please note the additional dash between create and strapi when using npx: `npx create-strapi` vs. `npm create strapi`.
    </details>
    
    </TabItem>

    <TabItem value="yarn" label="Yarn">

    ```bash
    yarn create strapi
   
    ```

    :::note
    Yarn does not support passing the version tag such as `@latest`, as opposed to npm. If you experience unexpected results with yarn and the latest version of Strapi is not installed, you might need to <ExternalLink to="https://yarnpkg.com/cli/cache/clean" text="run the `yarn cache clean` command"/> to clean your Yarn cache.
    :::

    </TabItem>

    <TabItem value="pnpm" label="pnpm">

    :::caution
    You might have issues with projects created with pnpm on Strapi Cloud. Strapi Cloud does not support pnpm yet, so it's recommended to use yarn or npm if you plan to eventually host your project on Strapi Cloud.
    :::

    ```bash
    pnpm create strapi
    ```
    
    </TabItem>

    </Tabs>

2. The terminal will ask you whether you want to `Login/Signup` to Strapi Cloud, or `Skip` this step. Use arrow keys and press `Enter` to make your choice. If you choose to skip this step, you will need to [host the project yourself](#skipping-the-strapi-cloud-login-step).

2. The terminal will ask you a few questions. For each of them, if you press `Enter` instead of typing something, the default answer (Yes) will be used:

  ![Terminal prompts at installation](/img/assets/installation/prompts.png)

  :::tip
  You can skip these questions using various options passed to the installation command. Please refer to the [table](#cli-installation-options) for the full list of available options.
  :::

3. _(optional)_ If you answered `n` for "no" to the default (SQLite) database question, the CLI will ask for more questions about the database:

    * Use arrow keys to select the database type you want, then press `Enter`.
    * Give the database a name, define the database host address and port, define the database admin username and password, and define whether the database will use a SSL connection.<br/>For any of these questions, if you press `Enter` without typing anything, the default value (indicated in parentheses in the terminal output) will be used.

Once all questions have been answered, the script will start creating the Strapi project.

### CLI installation options

The above installation guide only covers the basic installation option using the CLI. There are other options that can be used when creating a new Strapi project, for example:

| Option                              | Description                                                                                                                                                                                                                                     |
|-------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `--no-run`                          | Do not start the application after it is created                                                                                                                                                                                                |
| `--ts`<br/>`--typescript`           | Initialize the project with TypeScript (default)                                                                                                                                                                                                |
| `--js`<br/>`--javascript`           | Initialize the project with JavaScript                                                                                                                                                                                                          |
| `--use-npm`                         | Force the usage of <ExternalLink to="https://www.npmjs.com/" text="npm"/> as the project package manager                                                                                                                                        |
| `--use-yarn`                        | Force the usage of <ExternalLink to="https://yarnpkg.com/" text="yarn"/> as the project package manager                                                                                                                                         |
| `--use-pnpm`                        | Force the usage of <ExternalLink to="https://pnpm.io/" text="pnpm"/> as the project package manager                                                                                                                                             |
| `--install`                         | Install all dependencies, skipping the related CLI prompt                                                                                                                                                                                       |
| `--no-install`                      | Do not install all dependencies, skipping the related CLI prompt                                                                                                                                                                                |
| `--git-init`                        | Initialize a git repository, skipping the related CLI prompt                                                                                                                                                                                    |
| `--no-git-init`                     | Do not initialize a git repository, skipping the related CLI prompt                                                                                                                                                                             |
| `--example`                         | Add example data, skipping the related CLI prompt                                                                                                                                                                                               |
| `--no-example`                      | Do not add example data, skipping the related CLI prompt                                                                                                                                                                                        |
| `--skip-cloud`                      | Skip [Strapi Cloud login and project creation steps](#skipping-the-strapi-cloud-login-step)                                                                                                                                                     |
| `--skip-db`                         | Skip all database-related prompts and create a project with the default (SQLite) database                                                                                                                                                       |
| `--template <template-name-or-url>` | Create the application based on a given template.<br/>Additional options for templates are available, see the [templates documentation](/cms/templates) for details.                                                                            |
| `--dbclient <dbclient>`             | Define the database client to use by replacing `<dbclient>` in the command by one of the these values:<ul><li>`sql` for a SQLite database (default)</li><li>`postgres` for a PostgreSQL database</li><li>`mysql` for a MySQL database</li></ul> |
| `--dbhost <dbhost>`                 | Define the database host to use by replacing `<dbhost>` in the command by the value of your choice                                                                                                                                              |
| `--dbport <dbport>`                 | Define the database port to use by replacing `<dbport>` in the command by the value of your choice                                                                                                                                              |
| `--dbname <dbname>`                 | Define the database name to use by replacing `<dbname>` in the command by the value of your choice                                                                                                                                              |
| `--dbusername <dbusername>`         | Define the database username to use by replacing `<dbusername>` in the command by the value of your choice                                                                                                                                      |
| `--dbpassword <dbpassword>`         | Define the database password to use by replacing `<dbpassword>` in the command by the value of your choice                                                                                                                                      |
| `--dbssl <dbssl>`                   | Define that SSL is used with the database, by passing `--dbssl=true` (No SSL by default)                                                                                                                                                        |
| `--dbfile <dbfile>`                 | For SQLite databases, define the database file path to use by replacing `<dbclient>` in the command by the value of your choice                                                                                                                 |
| `--quickstart`                      | (**Deprecated in Strapi 5**)<br/>Directly create the project in quickstart mode.                                                                                                                                                                |

:::note Notes
* If you do not pass a `--use-yarn|npm|pnpm` option, the installation script will use whatever package manager was used with the create command to install all dependencies (e.g., `npm create strapi` will install all the project's dependencies with npm).
* For additional information about database configuration, please refer to the [database configuration documentation](/cms/configurations/database).
* Experimental Strapi versions are released every Tuesday through Saturday at midnight GMT. You can create a new Strapi application based on the latest experimental release using `npx create-strapi@experimental`. Please use these experimental builds at your own risk. It is not recommended to use them in production.
:::

### Skipping the Strapi Cloud login step

When the installation script runs, the terminal will first ask you if you want to login/signup. Choosing `Login/signup` will create a free [Strapi Cloud](/cloud/intro) account as described in the [Quick Start Guide](/cms/quick-start).

If you prefer skipping the Strapi Cloud login part, use the arrow keys to select `Skip`. The script will resume and create a local project. To deploy this project and host it online, you could later choose to:

- host it yourself by pushing the project's code to a repository (e.g., on GitHub) before following the [deployment guide](/cms/deployment),
- or use the [Cloud CLI](/cloud/cli/cloud-cli#) commands to login to Strapi Cloud and deploy your project there for free.

If you want to host your project yourself and are not already familiar with GitHub, the following togglable content should get you startedüëá.

<details>
<summary>Steps required to push your Strapi project code to GitHub:</summary>

1. In the terminal, ensure you are still in the folder that hosts the Strapi project you created.
2. Run the `git init` command to initialize git for this folder.
3. Run the `git add .` command to add all modified files to the git index.
4. Run the `git commit -m "Initial commit"` command to create a commit with all the added changes.
5. Log in to your GitHub account and <ExternalLink to="https://docs.github.com/en/repositories/creating-and-managing-repositories/quickstart-for-repositories" text="create a new repository"/>. Give the new repository a name, for instance `my-first-strapi-project`, and remember this name.
6. Go back to the terminal and push your local repository to GitHub:

  a. Run a command similar to the following: `git remote add origin git@github.com:yourname/my-first-strapi-project.git`, ensuring you replace `yourname` by your own GitHub profile name, and `my-first-strapi-project` by the actual name you used at step 4.

  b. Run the `git push --set-upstream origin main` command to finally push the commit to your GitHub repository.

Additional information about using git with the command line interface can be found in the <ExternalLink to="https://docs.github.com/en/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github#adding-a-local-repository-to-github-using-git" text="official GitHub documentation"/>.

</details>

## Running Strapi

To start the Strapi application, run the following command in the project folder:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="Yarn">

```bash
yarn develop
```

</TabItem>

<TabItem value="npm" label="NPM">

```bash
npm run develop
```

</TabItem>

</Tabs>

:::info Where is my content?
For self-hosted Strapi projects, all your content is saved in a database file (by default, SQLite) found in the `.tmp` subfolder in your project's folder. So anytime you start the Strapi application from the folder where you created your Strapi project, your content will be available (see [database configuration](/cms/configurations/database) for additional information).

If the content was added to a Strapi Cloud project, it is stored in the database managed with your Strapi Cloud project (see [advanced database configuration for Strapi Cloud](/cloud/advanced/database) for additional information).
:::


 This is the content for the doc docusaurus/docs/cms/installation/docker.md 

 ---
title: Docker
displayed_sidebar: cmsSidebar
pagination_prev: cms/installation/cli
pagination_next: cms/features/admin-panel
description: Quickly create a Docker container from a local project.
tags:
- installation
- environment 
- MySQL
---

import DockerEnvTable from '/docs/snippets/docker-env-table.md'

# Running Strapi in a Docker container

:::caution
Strapi does not build any official container images. The following instructions are provided as a courtesy to the community. If you have any questions please reach out on <ExternalLink to="https://discord.strapi.io" text="Discord"/>.
:::

:::danger
 Strapi applications are not meant to be connected to a pre-existing database, not created by a Strapi application, nor connected to a Strapi v3 database. The Strapi team will not support such attempts. Attempting to connect to an unsupported database may, and most likely will, result in lost data such as dropped tables.
:::

The following documentation will guide you through building a custom <ExternalLink to="https://www.docker.com/" text="Docker"/> container with an existing Strapi project.

Docker is an open platform that allows developing, shipping, and running applications by using containers (i.e. packages containing all the parts an application needs to function, such as libraries and dependencies). Containers are isolated from each other and bundle their own software, libraries, and configuration files; they can communicate with each other through well-defined channels.

:::prerequisites

- <ExternalLink to="https://www.docker.com/" text="Docker"/> installed on your machine
- A [supported version of Node.js](/cms/installation/cli#preparing-the-installation)
- An **existing Strapi 5 project**, or a new one created with the [Quick Start guide](/cms/quick-start.md)
- (_optional_) <ExternalLink to="https://yarnpkg.com/" text="Yarn"/> installed on your machine
- (_optional_) <ExternalLink to="https://docs.docker.com/compose/" text="Docker Compose"/> installed on your machine

:::

## Development and/or Staging environments

For working with Strapi locally on your host machine you can use the <ExternalLink to="https://docs.docker.com/engine/reference/builder/" text="Dockerfile"/>, and if needed the <ExternalLink to="https://docs.docker.com/compose/compose-file/" text="docker-compose.yml"/> can also be used to start up a database container.

Both methods require an existing Strapi project or a new one created (see [Quick Start guide](/cms/quick-start.md)).

### Development Dockerfile

The following `Dockerfile` can be used to build a non-production Docker image for a Strapi project.

:::note

If you are using `docker-compose`, you can skip setting the environment variables manually, as they will be set in the `docker-compose.yml` file or a `.env` file.

:::

<DockerEnvTable components={props.components} />

For more information on the `Dockerfile` and its commands, please refer to the <ExternalLink to="https://docs.docker.com/engine/reference/commandline/cli/" text="official Docker documentation"/>.

Sample `Dockerfile`:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```dockerfile title="./Dockerfile"
FROM node:22-alpine
# Installing libvips-dev for sharp Compatibility
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev nasm bash vips-dev git
ARG NODE_ENV=development
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/
COPY package.json yarn.lock ./
RUN yarn global add node-gyp
RUN yarn config set network-timeout 600000 -g && yarn install
ENV PATH /opt/node_modules/.bin:$PATH

WORKDIR /opt/app
COPY . .
RUN chown -R node:node /opt/app
USER node
RUN ["yarn", "build"]
EXPOSE 1337
CMD ["yarn", "develop"]
```

</TabItem>

<TabItem value="npm" label="npm">

```dockerfile title="./Dockerfile"
FROM node:22-alpine
# Installing libvips-dev for sharp Compatibility
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev nasm bash vips-dev git
ARG NODE_ENV=development
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/
COPY package.json package-lock.json ./
RUN npm install -g node-gyp
RUN npm config set fetch-retry-maxtimeout 600000 -g && npm install
ENV PATH=/opt/node_modules/.bin:$PATH

WORKDIR /opt/app
COPY . .
RUN chown -R node:node /opt/app
USER node
RUN ["npm", "run", "build"]
EXPOSE 1337
CMD ["npm", "run", "develop"]

```

</TabItem>

</Tabs>

### (Optional) Docker Compose

The following `docker-compose.yml` can be used to start up a database container and a Strapi container along with a shared network for communication between the two.

:::note
For more information about running Docker compose and its commands, please refer to the <ExternalLink to="https://docs.docker.com/compose/" text="Docker Compose documentation"/>.
:::

Sample `docker-compose.yml`:

<Tabs groupId="databases">

<TabItem value="mysql" label="MySQL">

```yml title="./docker-compose.yml"
services:
  strapi:
    container_name: strapi
    build: .
    image: strapi:latest
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: strapiDB
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./config:/opt/app/config
      - ./src:/opt/app/src
      - ./package.json:/opt/package.json
      - ./yarn.lock:/opt/yarn.lock
      - ./.env:/opt/app/.env
      - ./public/uploads:/opt/app/public/uploads
    ports:
      - "1337:1337"
    networks:
      - strapi
    depends_on:
      - strapiDB

  strapiDB:
    container_name: strapiDB
    platform: linux/amd64 #for platform error on Apple M1 chips
    restart: unless-stopped
    env_file: .env
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_USER: ${DATABASE_USERNAME}
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
    volumes:
      - strapi-data:/var/lib/mysql
      #- ./data:/var/lib/mysql # if you want to use a bind folder
    ports:
      - "3306:3306"
    networks:
      - strapi

volumes:
  strapi-data:

networks:
  strapi:
    name: Strapi
    driver: bridge
```

</TabItem>

<TabItem value="mariadb" label="MariaDB">

```yml title="./docker-compose.yml"
version: "3"
services:
  strapi:
    container_name: strapi
    build: .
    image: strapi:latest
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: strapiDB
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./config:/opt/app/config
      - ./src:/opt/app/src
      - ./package.json:/opt/package.json
      - ./yarn.lock:/opt/yarn.lock
      - ./.env:/opt/app/.env
      - ./public/uploads:/opt/app/public/uploads
    ports:
      - "1337:1337"
    networks:
      - strapi
    depends_on:
      - strapiDB

  strapiDB:
    container_name: strapiDB
    platform: linux/amd64 #for platform error on Apple M1 chips
    restart: unless-stopped
    env_file: .env
    image: mariadb:latest
    environment:
      MYSQL_USER: ${DATABASE_USERNAME}
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
    volumes:
      - strapi-data:/var/lib/mysql
      #- ./data:/var/lib/mysql # if you want to use a bind folder
    ports:
      - "3306:3306"
    networks:
      - strapi

volumes:
  strapi-data:

networks:
  strapi:
    name: Strapi
    driver: bridge
```

</TabItem>

<TabItem value="postgresql" label="PostgreSQL">

```yml title="./docker-compose.yml"
version: "3"
services:
  strapi:
    container_name: strapi
    build: .
    image: strapi:latest
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: strapiDB
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./config:/opt/app/config
      - ./src:/opt/app/src
      - ./package.json:/opt/package.json
      - ./yarn.lock:/opt/yarn.lock
      - ./.env:/opt/app/.env
      - ./public/uploads:/opt/app/public/uploads
    ports:
      - "1337:1337"
    networks:
      - strapi
    depends_on:
      - strapiDB

  strapiDB:
    container_name: strapiDB
    platform: linux/amd64 #for platform error on Apple M1 chips
    restart: unless-stopped
    env_file: .env
    image: postgres:16.0-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - strapi-data:/var/lib/postgresql/data/ #using a volume
      #- ./data:/var/lib/postgresql/data/ # if you want to use a bind folder

    ports:
      - "5432:5432"
    networks:
      - strapi

volumes:
  strapi-data:

networks:
  strapi:
    name: Strapi
    driver: bridge
```

</TabItem>

</Tabs>

## Production Environments

The Docker image in production is different from the one used in development/staging environments because of the differences in the admin build process in addition to the command used to run the application. Typical production environments will use a reverse proxy to serve the application and the admin panel. The Docker image is built with the production build of the admin panel and the command used to run the application is `strapi start`.

Once the [Dockerfile](#production-dockerfile) is created, the [production container](#building-the-production-container) can be built. Optionally, the container can be published to a [registry](#optional-publishing-the-container-to-a-registry) to make it available to the community. [Community tools](#community-tools) can help you
in the process of building a production Docker image and deploying it to a production environment.

### Production Dockerfile

The following `Dockerfile` can be used to build a production Docker image for a Strapi project.

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```dockerfile title="./Dockerfile.prod"
# Creating multi-stage build for production
FROM node:22-alpine AS build
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/
COPY package.json yarn.lock ./
RUN yarn global add node-gyp
RUN yarn config set network-timeout 600000 -g && yarn install --production
ENV PATH=/opt/node_modules/.bin:$PATH
WORKDIR /opt/app
COPY . .
RUN yarn build

# Creating final production image
FROM node:22-alpine
RUN apk add --no-cache vips-dev
ENV NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}
WORKDIR /opt/
COPY --from=build /opt/node_modules ./node_modules
WORKDIR /opt/app
COPY --from=build /opt/app ./
ENV PATH=/opt/node_modules/.bin:$PATH

RUN chown -R node:node /opt/app
USER node
EXPOSE 1337
CMD ["yarn", "start"]
```

</TabItem>

<TabItem value="npm" label="npm">

```dockerfile title="./Dockerfile.prod"
# Creating multi-stage build for production
FROM node:22-alpine AS build
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/
COPY package.json package-lock.json ./
RUN npm install -g node-gyp
RUN npm config set fetch-retry-maxtimeout 600000 -g && npm install --only=production
ENV PATH=/opt/node_modules/.bin:$PATH
WORKDIR /opt/app
COPY . .
RUN npm run build

# Creating final production image
FROM node:22-alpine
RUN apk add --no-cache vips-dev
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}
WORKDIR /opt/
COPY --from=build /opt/node_modules ./node_modules
WORKDIR /opt/app
COPY --from=build /opt/app ./
ENV PATH=/opt/node_modules/.bin:$PATH

RUN chown -R node:node /opt/app
USER node
EXPOSE 1337
CMD ["npm", "run", "start"]

```

</TabItem>

</Tabs>

### Building the production container

Building production Docker images can have several options. The following example uses the `docker build` command to build a production Docker image for a Strapi project. However, it is recommended you review the <ExternalLink to="https://docs.docker.com/engine/reference/commandline/build/" text="Docker documentation"/> for more information on building Docker images with more advanced options.

To build a production Docker image for a Strapi project, run the following command:

```bash
docker build \
  --build-arg NODE_ENV=production \
  # --build-arg STRAPI_URL=https://api.example.com \ # Uncomment to set the Strapi Server URL
  -t mystrapiapp:latest \ # Replace with your image name
  -f Dockerfile.prod .
```

### (Optional) Publishing the container to a registry

After you have built a production Docker image for a Strapi project, you can publish the image to a Docker registry. Ideally for production usage this should be a private registry as your Docker image will contain sensitive information.

Depending on your hosting provider you may need to use a different command to publish your image. It is recommended you review the <ExternalLink to="https://docs.docker.com/engine/reference/commandline/push/" text="Docker documentation"/> for more information on publishing Docker images with more advanced options.

Some popular hosting providers are:

- <ExternalLink to="https://aws.amazon.com/ecr/" text="AWS ECR"/>
- <ExternalLink to="https://azure.microsoft.com/en-us/services/container-registry/" text="Azure Container Registry"/>
- <ExternalLink to="https://cloud.google.com/container-registry" text="GCP Container Registry"/>
- <ExternalLink to="https://www.digitalocean.com/products/container-registry/" text="Digital Ocean Container Registry"/>
- <ExternalLink to="https://www.ibm.com/cloud/container-registry" text="IBM Cloud Container Registry"/>
- <ExternalLink to="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry" text="GitHub Container Registry"/>
- <ExternalLink to="https://docs.gitlab.com/ee/user/packages/container_registry/" text="Gitlab Container Registry"/>

## Community tools

Several community tools are available to assist you in deploying Strapi to various cloud providers and setting up Docker in a development or production environment.

We strongly support our community efforts and encourage you to check out the following tools, please help support them by contributing to their development.

If you would like to add your tool to this list, please open a pull request on the <ExternalLink to="https://github.com/strapi/documentation" text="Strapi documentation repository"/>.

### @strapi-community/dockerize

The `@strapi-community/dockerize` package is a CLI tool that can be used to generate a `Dockerfile` and `docker-compose.yml` file for a Strapi project.

To get started run `npx @strapi-community/dockerize@latest` within an existing Strapi project folder and follow the CLI prompts.

For more information please see the official <ExternalLink to="https://github.com/strapi-community/strapi-tool-dockerize" text="GitHub repository"/> or the <ExternalLink to="https://www.npmjs.com/package/@strapi-community/dockerize" text="npm package"/>.

### @strapi-community/deployify

The `@strapi-community/deployify` package is a CLI tool that can be used to deploy your application to various cloud providers and hosting services. Several of these also support deploying a Strapi project with a Docker container and will call on the `@strapi-community/dockerize` package to generate the required files if they don't already exist.

To get started run `npx @strapi-community/deployify@latest` within an existing Strapi project folder and follow the CLI prompts.

For more information please see the official <ExternalLink to="https://github.com/strapi-community/strapi-tool-deployify" text="GitHub repository"/> or the <ExternalLink to="https://www.npmjs.com/package/@strapi-community/deployify" text="npm package"/>.

## Docker FAQ

### Why doesn't Strapi provide official Docker images?

Strapi is a framework that can be used to build many different types of applications. As such, it is not possible to provide a single Docker image that can be used for all use cases.

### Why do we have different Dockerfiles for development and production?

The primary reason for various Docker images is due to the way our Admin panel is built. The Admin panel is built using React and is bundled into the Strapi application during the build process. This means that the Strapi backend is acting as a web server to serve the Admin panel and thus certain environment variables are statically compiled into the built Admin panel.

It is generally considered a best practice with Strapi to build different Docker images for development and production environments. This is because the development environment is not optimized for performance and is not intended to be exposed to the public internet.


 This is the content for the doc docusaurus/docs/cms/intro.md 

 ---
sidebar_label: 'Introduction'
description: The Strapi CMS documentation contains all the admin panel related information and the technical information related to the setup, advanced usage, customization, and update of your Strapi 5 application.
displayed_sidebar: cmsSidebar
slug: /cms/intro
pagination_next: cms/quick-start
sidebar_position: 1
tags:
 - introduction
 - concepts
---

# Welcome to the Strapi CMS Documentation!

<!--
<SubtleCallout title="Strapi CMS & Strapi Cloud docs" emoji="üìç">

There are 2 Strapi documentations, one for each Strapi product:

- <Icon name="feather" /> The **CMS documentation**, that you're currently reading, which contains all the information related to a Strapi 5 project (installation, setup, deployment, content management in admin panel, etc).
- <Icon name="cloud" /> The **[Cloud documentation](/cloud/intro)**, which is about deploying your Strapi application to Strapi Cloud and managing your Strapi Cloud projects and settings.

</SubtleCallout>
-->

The Strapi CMS documentation focuses on Strapi 5 and will take you through the complete journey of your Strapi 5 project. From the technical information related to the setup, advanced usage, customization and update of your project, to the management of the admin panel and its content and users.

<ThemedImage
alt="Homepage of the Admin Panel"
sources={{
    light: '/img/assets/getting-started/admin-panel-homepage-2.png',
    dark: '/img/assets/getting-started/admin-panel-homepage-2_DARK.png',
  }}
/>

:::strapi Where to start as a beginner?
If you're totally new to **Strapi** <Annotation>**üí° Did you know?**<br />The original purpose of the project was to help Boot**strap** your **API**: that's where the Strapi name comes from and how Strapi was created.<br /><br />Now, Strapi is an **open-source headless CMS** that gives developers the freedom to choose their favorite tools and frameworks and allows editors to manage and distribute their content using their application's admin panel.<br /><br />Based on a plugin system, Strapi is a flexible CMS whose admin panel and API are extensible ‚Äî and which every part is customizable to match any use case. Strapi also has a built-in user system to manage in detail what the administrators and end users have access to.<br /></Annotation>, we suggest you to:

1. Head over to the [Quick Start](/cms/quick-start) guide.
2. Learn about the Admin Panel and the 2 main parts of the Strapi CMS: the Content Manager and Content-type Builder.
3. Go through the available Strapi features, each fully documented in their own page. Perhaps you could be interested by Draft & Publish, Internationalization or Static Preview?
:::

The table of content of the Strapi CMS documentation displays 7 main sections in an order that should correspond to your journey with the product. Click on the cards to be redirected to the introduction of the section, or to the most read page of that section.

<CustomDocCardsWrapper>

<CustomDocCard icon="rocket" title="Getting Started" description="Install and deploy Strapi, then start using the admin panel. Recommended read for beginners!" link="/cms/installation" />

<CustomDocCard icon="backpack" title="Features" description="Learn about the Strapi features, and how to configure and use them." link="/cms/features/api-tokens" />

<CustomDocCard icon="cube" title="APIs" description="Query your content with REST, GraphQL, and Strapi's lower-level APIs." link="/cms/api/content-api" />

<CustomDocCard icon="gear-fine" title="Configurations" description="Follow the instructions to handle the base and additional configurations for your project." link="/cms/configurations" />

<CustomDocCard icon="laptop" title="Development" description="Customize the Strapi server and admin panel. Learn about the most advanced options for your project." link="/cms/customization" />

<CustomDocCard icon="puzzle-piece" title="Plugins" description="Use Strapi built-in plugins or develop your own plugins." link="/cms/plugins/installing-plugins-via-marketplace" />

<CustomDocCard icon="escalator-up" title="Upgrade" description="Upgrade your application to the most recent Strapi versions." link="/cms/migration/v4-to-v5/introduction-and-faq" />

</CustomDocCardsWrapper>

:::tip Tips to make the best of the docs
- If you already know exactly what you're searching for, use the search bar or navigate using the table of content.
- If you prefer learning more about Strapi while looking at the project code structure, you can use the interactive [project structure](/cms/project-structure) page.
- If demos are more your thing, feel free to watch the <ExternalLink to="https://youtu.be/zd0_S_FPzKg" text="video demo"/>, or you can request a <ExternalLink to="https://strapi.io/demo" text="live demo"/>.
- Try our AI assistant: Click or tap the **Ask AI** button and ask your questions using natural language. Watch it answer you in real time, then read recommended sources for more details.
:::

:::strapi Information for beginner developers
Some parts of the CMS documentation (e.g. APIs, Configuration, Development) are mostly intended to developers and assume some prior knowledge of the JavaScript ecosystem.

If you also make your first steps with JavaScript web development while discovering Strapi, we encourage you to read more about <ExternalLink to="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics" text="JavaScript" /> and <ExternalLink to="https://docs.npmjs.com/about-npm" text="npm" />. If applicable to your project, you can also learn about <ExternalLink text="TypeScript" to="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html" /> before diving deeper into these technical parts of the CMS documentation.
:::


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service.md 

 ---
title: From Entity Service API to Document Service API
description: Learn how to transition from the Entity Service API of Strapi v4 to the Document Service API in Strapi 5
displayed_sidebar: cmsSidebar
tags:
- document service API
- upgrade to Strapi 5
---

# Entity Service API to Document Service API migration reference

In Strapi 5, the [Document Service API](/cms/api/document-service) replaces the Entity Service API from Strapi v4 (see [breaking change description](/cms/migration/v4-to-v5/breaking-changes/entity-service-deprecated)).

The present page is intended to give developers an idea of how to migrate away from the Entity Service API, by describing which changes in custom code will be handled by codemods from the [upgrade tool](/cms/upgrade-tool) and which will have to be handled manually.

## Migration using the upgrade tool

When using the [upgrade tool](/cms/upgrade-tool), a codemod is run and handles some parts of the `entityService` migration.

:::caution
The codemod is only changing the function calls and some parameters. This can not be considered as a complete migration as the codemod will never be able to convert an `entityId` into a `documentId`.
:::

### Codemod scope

The following list explains what is automatically handled by the codemod (‚úÖ), what is not handled by the codemod and must be handled 100% manually (‚ùå) and what will still require manual intervention after the codemod has run (üöß):

| Topic | Handled by the codemod? | Manual steps to perform |
|-------|------------------------|--------------------------|
| Code structure | ‚úÖ Yes          | Nothing.<br/>The code structure is automatically migrated. |
| `publicationState` removed in favor of [`status`](/cms/api/document-service/status) | ‚úÖ Yes | Nothing.<br/>The codemod automatically transforms it. | 
| Usage of `documentId` instead of the Strapi v4 unique identifiers | üöß Partially:<ul><li>The codemod adds the new `documentId` property to your code, since `documentId` is the new unique identifier to use in Strapi 5.</li><li>But the actual `documentId` value can not be guessed, so after the codemod has run, you will find `__TODO__` placeholder values in your code.</li></ul> | üëâ  `__TODO__` placeholder values need to be manually updated.<br/><br/>For instance, you might change<br/>`documentId: "__TODO__"`<br/>to something like<br/>`documentId: "ln1gkzs6ojl9d707xn6v86mw"`.
| Update of `published_at` to trigger publication | ‚ùå Not handled.<br/> | üëâ Update your code to use the new [`publish()`](/cms/api/document-service#publish), [`unpublish()`](/cms/api/document-service#publish), and [`discardDraft()`](/cms/api/document-service#publish) methods of the Document Service API instead. |

### Examples of function calls migration

The following examples show how the codemod from the upgrade tool updates the code for various function calls.

#### `findOne`

<Columns>
<ColumnLeft>

**Before:**

```tsx
strapi.entityService.findOne(uid, entityId);


```

</ColumnLeft>

<ColumnRight>

**After:**

```tsx
strapi.documents(uid).findOne({
  documentId: "__TODO__"
});
```

</ColumnRight>

</Columns>

#### `findMany`

<Columns>
<ColumnLeft>

**Before:**

```tsx
strapi.entityService.findMany(uid, {
  fields: ["id", "name", "description"],
  populate: ["author", "comments"],
  publicationState: "preview",
});
```

</ColumnLeft>

<ColumnRight>

**After:**

```tsx
strapi.documents(uid).findMany({
  fields: ["id", "name", "description"],
  populate: ["author", "comments"],
  status: "draft",
});
```

</ColumnRight>
</Columns>

#### `create`

<Columns>
<ColumnLeft>

**Before:**

```tsx
strapi.entityService.create(uid, {
  data: {
    name: "John Doe",
    age: 30,
  },
});
```

</ColumnLeft>
<ColumnRight>

**After:**

```tsx
strapi.documents(uid).create({
  data: {
    name: "John Doe",
    age: 30,
  },
});
```

</ColumnRight>
</Columns>

#### `update`

<Columns>
<ColumnLeft>

**Before:**

```tsx
strapi.entityService.update(uid, entityId, {
  data: {
    name: "John Doe",
    age: 30,
  }
});

```

</ColumnLeft>
<ColumnRight>

**After:**

```tsx
strapi.documents(uid).update({
  documentId: "__TODO__",
  data: {
    name: "John Doe",
    age: 30,
  }
});
```

</ColumnRight>
</Columns>

#### `delete`

<Columns>
<ColumnLeft>

**Before:**

```tsx
strapi.entityService.delete(uid, entityId);


```

</ColumnLeft>
<ColumnRight>

**After:**

```tsx
strapi.documents(uid).delete({
  documentId: "__TODO__"
});
```

</ColumnRight>
</Columns>

#### `count`

<Columns>
<ColumnLeft>

**Before:**

```tsx
strapi.entityService.count(uid);
```

</ColumnLeft>
<ColumnRight>

**After:**

```tsx
strapi.documents(uid).count();
```

</ColumnRight>
</Columns>

## Manual migration

- Users who prefer to manually migrate can do so by replicating what the codemod does (see [codemod scope](#codemod-scope) and [function calls examples](#examples-of-function-calls-migration) for reference).

- Plugin developers who use Entity Service decorators in their code must replace them by Document Service middlewares. The following example gives you an idea of how they work, and additional information can be found in the dedicated [Document Service middlewares documentation](/cms/api/document-service/middlewares):

  **In Strapi v4:**

  ```tsx
  strapi.entityService.decorate((service) => {

    return Object.assign(service, {
    
      findOne(entityId, params = {}) {
        // e.g., exclude soft deleted content
        params.filters = { ...params.filters, deletedAt: { $notNull: true¬†} } 
        return service.findOne(entityId, params)
      }
    });
  })
  ```

  **In Strapi 5**

  ```tsx
  strapi.documents.use((ctx, next) => {
    if (ctx.uid !== "api::my-content-type.my-content-type") {
      return next();
    }
    
    if (ctx.action === 'findOne') {
      // customization
      ctx.params.filters = { ...params.filters, deletedAt: { $notNull: true¬†} } 
      const res = await next();
      // do something with the response if you want
      return res;
    }
    
    return next();
  });
  ```

* Update your custom code for `findMany()` on single types, taking into account that:

  - In Strapi v4, the `findMany()` function returns a single item when called on a single type.
  - In Strapi 5, the `findMany()` function is generic and always returns arrays, whether called on a single type or on a collection type. To get data for a single type with a `findMany()` call, extract the first item from the returned array.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md 

 ---
title: Helper-plugin migration reference
description: Learn how to migrate your Strapi plugins and applications to not use the `helper-plugin` package.
displayed_sidebar: cmsSidebar
tags:
  - helper-plugin
  - plugins development
  - upgrade to Strapi 5
---

# `helper-plugin` migration reference

This document has been written to help developers migrate their Strapi plugins and applications to _not_ use the `helper-plugin` package.
It lists every export that existed in the `helper-plugin` package, in alphabetical order and grouped by domain.

## Components

<br/>

### AnErrorOccurred

This component has been removed and refactored to be part of the `Page` component exported from `@strapi/strapi/admin`. You should use the `Page` component from there:

```tsx
// Before
import { AnErrorOccurred } from '@strapi/helper-plugin';

const MyPage = () => {
  // ...

  if (error) {
    return <AnErrorOccurred />;
  }

  // ...
};

// After
import { Page } from '@strapi/strapi/admin';

const MyPage = () => {
  // ...

  if (error) {
    return <Page.Error />;
  }

  // ...
};
```

### CheckPermissions

This component has been removed and not replaced. If you feel like you need this component, please open an issue on the Strapi repository to discuss your usecase.

We recommend using the `Page.Protect` component from `@strapi/strapi/admin` instead (see [`CheckPagePermissions`](#checkpagepermissions) for an example). If you need to check permissions for a lower level component you can use [the `useRBAC` hook](#userbac).

### CheckPagePermissions

This component has been removed and refactored to be part of the `Page` component exported from `@strapi/strapi/admin`. You should use the `Page` component from there:

```tsx
// Before
import { CheckPagePermissions } from '@strapi/helper-plugin';

const MyProtectedPage = () => {
  return (
    <CheckPagePermissions
        permissions={[action: 'plugin::my-plugin.read']}
    >
      <MyPag />
    </CheckPagePermissions>
  );
};

// After
import { Page } from '@strapi/strapi/admin';

const MyProtectedPage = () => {
  <Page.Protect permissions={[action: 'plugin::my-plugin.read']}>
  return (
    </Page.Protect>
      <MyPage />
  );
};
```

The behaviour has slightly changed, where previously no permissions would redirect you to the root of the page, now it will render the `NoPermissions` component.

### ConfirmDialog

This component has been moved and refactored. It can be imported from the `@strapi/strapi/admin` package:

```tsx
// Before
import { ConfirmDialog } from '@strapi/helper-plugin';

// After
import { ConfirmDialog } from '@strapi/strapi/admin';
```

Please see the contributors <ExternalLink to="https://v5.contributor.strapi.io/exports/modules#confirmdialog" text="documentation for the `ConfirmDialog` component"/> for more information.

### ContentBox

This component has been removed and not replaced. If you feel like you need this component, please open an issue on the Strapi repository to discuss your usecase.

### DateTimePicker

This was aliasing the design-system. You should import the component from there:

```tsx
// Before
import { DateTimePicker } from '@strapi/helper-plugin';

// After
import { DateTimePicker } from '@strapi/design-system';
```

### DynamicTable

This component was previously deprecated and has now been removed. Similar to the deprecation notice, we recommend using the `Table` component from `@strapi/strapi/admin`.

Please see the contributors <ExternalLink to="https://v5.contributor.strapi.io/exports/namespaces/Table" text="documentation for the `Table` component"/> for more information.

### EmptyBodyTable

This component has been removed and is part of the `Table` component.

Please see the contributors <ExternalLink to="https://v5.contributor.strapi.io/exports/namespaces/Table" text="documentation for the `Table` component"/> for more information.

### EmptyStateLayout

This component has been removed and not replaced. You should use `EmptyStateLayout` from `@strapi/design-system`:

```tsx
// Before
import { EmptyStateLayout } from '@strapi/helper-plugin';

// After
import { EmptyStateLayout } from '@strapi/design-system';
```

:::note
The props will be different. Please refer to the Strapi Design System <ExternalLink to="https://design-system-git-main-strapijs.vercel.app/?path=/docs/design-system-components-emptystatelayout--docs" text="documentation for the `EmptyStateLayout` component"/>.
:::

### FilterListURLQuery

This component was moved to the `admin` package and can now be imported via the `@strapi/strapi` package as part of the composite component `Filters`:

```tsx
// Before
import { FilterListURLQuery } from '@strapi/helper-plugin';

const MyComponent = () => {
  return (
    <FilterListURLQuery
      filtersSchema={[
        {
          name: 'name',
          metadatas: { label: 'Name' },
          fieldSchema: { type: 'string' },
        },
      ]}
    />
  );
};

// After
import { Filters } from '@strapi/strapi/admin';

const MyComponent = () => {
  return (
    <Filters.Root>
      <Filters.List />
    </Filters.Root>
  );
};
```

### FilterPopoverURLQueryProps

This component was moved to the `admin` package and can now be imported via the `@strapi/strapi` package as part of the composite component `Filters`:

```tsx
// Before
import { FilterPopoverURLQueryProps } from '@strapi/helper-plugin';

// After
import { Filters } from '@strapi/strapi/admin';

const MyComponent = () => {
  return (
    <Filters.Root>
      <Filters.Trigger />
      <Filters.Popover />
    </Filters.Root>
  );
};
```

### Form

This component aliased `Formik`, something we're working towards removing. The `Form` component and its sibling exports from `@strapi/strapi/admin` should be used instead:

```tsx
// Before
import { Form } from '@strapi/helper-plugin';

// After
import { Form } from '@strapi/strapi/admin';
```

Users should note that any use of the Formik library will no longer work and instead should look at the contributors <ExternalLink to="https://v5.contributor.strapi.io/exports/modules#form" text="documentation for the `Form` component"/>.

### GenericInput

This component has been removed and refactored to become the `InputRenderer` component exported from `@strapi/strapi/admin`. You should use the `InputRenderer` component from there:

```tsx
// Before
import { GenericInput } from '@strapi/helper-plugin';

const MyComponent = () => {
  return (
    <GenericInput
      type={'type'}
      hint={'hint'}
      label={'label'}
      name={'name'}
      onChange={onMetaChange}
      value={'value'}
    />
  );
};

// After
import { InputRenderer } from '@strapi/strapi/admin';
```

Note, that the `InputRenderer` component has a different API, and you should refer to the <ExternalLink to="https://v5.contributor.strapi.io/exports/modules#inputrenderer" text="documentation for the `InputRenderer` component"/>.

### InjectionZone

This component has been removed and not replaced. However, you can easily replicate this in your own project by using the `useStrapiApp` hook:

```tsx
// Before

import { InjectionZone } from '@strapi/helper-plugin';
<InjectionZone area={`injection.zone.area`} />;

// After

const MyComponent = ({ area, ...compProps }) => {
  const getPlugin = useStrapiApp('MyComponent', (state) => state.getPlugin);

  const [pluginName, page, position] = area.split('.');

  const plugin = getPlugin(pluginName);
  const components = plugin?.getInjectedComponents(page, position);

  if (!plugin || !components) {
    return null;
  }

  return components.map(({ name, Component }) => (
    <Component key={name} {...props} />
  ));
};
```

### Link

This was aliasing the design-system and using the `as` prop with `react-router-dom`. You should import the component from there:

```tsx
// Before
import { Link } from '@strapi/helper-plugin';

// After
import { Link } from '@strapi/design-system/v2';
import { NavLink } from 'react-router-dom';

const MyLink = () => {
  return (
    <Link as={NavLink} to="/my-link">
      My Link
    </Link>
  );
};
```

### LinkButton

This was aliasing the design-system and using the `as` prop with `react-router-dom`. You should import the component from there:

```tsx
// Before
import { LinkButton } from '@strapi/helper-plugin';

// After
import { LinkButton } from '@strapi/design-system/v2';
import { NavLink } from 'react-router-dom';

const MyLink = () => {
  return (
    <LinkButton as={NavLink} to="/my-link">
      My Link
    </LinkButton>
  );
};
```

### LoadingIndicatorPage

This component has been removed and refactored to be part of the `Page` component exported from `@strapi/strapi/admin`. You should use the `Page` component from there:

```tsx
// Before
import { LoadingIndicatorPage } from '@strapi/helper-plugin';

const MyPage = () => {
  // ...

  if (isLoading) {
    return <LoadingIndicatorPage />;
  }

  // ...
};

// After
import { Page } from '@strapi/strapi/admin';

const MyPage = () => {
  // ...

  if (isLoading) {
    return <Page.Loading />;
  }

  // ...
};
```

### NoContent

This component has been removed and not replaced, you should use the `EmptyStateLayout` component from `@strapi/design-system`.

```tsx
// Before
import { NoContent } from '@strapi/helper-plugin';

<NoContent
  content={{
    id: 'translation_id',
    defaultMessage: 'Message',
  }}
/>;

// After
import { EmptyStateLayout } from '@strapi/design-system';

<EmptyStateLayout
  content={{
    id: 'translation_id',
    defaultMessage: 'Message',
  }}
/>;
```

### NoMedia

This component has been removed and not replaced. If you feel like you need this component, please open an issue on the Strapi repository to discuss your usecase.

### NoPermissions

This component has been removed and refactored to be part of the `Page` component exported from `@strapi/strapi/admin`. You should use the `Page` component from there:

```tsx
// Before
import { NoPermissions } from '@strapi/helper-plugin';

const MyPage = () => {
  // ...

  if (!canRead) {
    return <NoPermissions />;
  }

  // ...
};

// After
import { Page } from '@strapi/strapi/admin';

const MyPage = () => {
  // ...

  if (!canRead) {
    return <Page.NoPermissions />;
  }

  // ...
};
```

### NotAllowedInput

This component has been removed and not replaced. If you feel like you need this component, please open an issue on the Strapi repository to discuss your usecase. You can easily replicate this in your own project by using the `TextInput` from `@strapi/design-system`:

```tsx
import { TextInput } from '@strapi/design-system';

const MyComponent = (props) => {
  return (
    <TextInput
      disabled
      placeholder="No permissions to see this field"
      type="text"
      {...props}
    />
  );
};
```

### PageSizeURLQuery

This component was moved to the `admin` package and can now be imported via the `@strapi/strapi` package as part of the composite component `Pagination`:

```tsx
// Before
import { PageSizeURLQuery } from '@strapi/helper-plugin';

const MyComponent = () => {
  return (
    <PageSizeURLQuery options={['12', '24', '50', '100']} defaultValue="24" />
  );
};

// After
import { Pagination } from '@strapi/strapi/admin';

const MyComponent = () => {
  return (
    <Pagination.Root>
      <Pagination.PageSize />
    </Pagination.Root>
  );
};
```

Note, there were some slightly behavioural changes i.e. the PageSize won't render if the lowest pageSize is 10 but you only have 9 entries. Due to the refactor some props will have moved and changed, please look at the contributors <ExternalLink to="https://v5.contributor.strapi.io/exports/modules#table" text="documentation for the Pagination component"/> for more information.

### PaginationURLQueryProps

This component was moved to the `admin` package and can now be imported via the `@strapi/strapi` package as part of the composite component `Pagination`:

```tsx
// Before
import { PaginationURLQueryProps } from '@strapi/helper-plugin';

// After
import { Pagination } from '@strapi/strapi/admin';

const MyComponent = () => {
  return (
    <Pagination.Root pageCount={2}>
      <Pagination.Links />
    </Pagination.Root>
  );
};
```

Note, there were some slightly behavioural changes i.e. the Links won't render if there are less than 2 pages. Due to the refactor some props will have moved and changed, please look at the <ExternalLink to="https://v5.contributor.strapi.io/exports/modules#table" text="documentation for the Pagination component"/> for more information.

### ReactSelect

This component has been removed and not replaced. If you feel like you need this component, please open an issue on the Strapi repository to discuss your usecase.

### RelativeTime

This component has been removed and not replaced. If you feel like you need this component, please open an issue on the Strapi repository to discuss your usecase.

### SearchURLQuery

This component was removed and renamed to `SearchInput` and can now be imported by the `@strapi/strapi` package:

```tsx
// Before
import { SearchURLQuery } from '@strapi/helper-plugin';

// After
import { SearchInput } from '@strapi/strapi/admin';
```

### SettingsPageTitle

This component has been removed and not replaced. If you feel like you need this component, please open an issue on the Strapi repository to discuss your usecase.

### Status

This component should be imported from the `@strapi/design-system` package:

```tsx
// Before
import { Status } from '@strapi/helper-plugin';

const MyComponent = () => {
  return (
    <Status variant={statusColor} showBullet={false} size="S">
      <Typography fontWeight="bold" textColor={`${statusColor}700`}>
        {stateMessage[status]}
      </Typography>
    </Status>
  );
};

// After
import { Status } from '@strapi/design-system';
```

### Table

This component should be imported from the `@strapi/strapi/admin` package:

```tsx
// Before
import { Table } from '@strapi/helper-plugin';

const MyComponent = () => {
  return (
    <Table colCount={2} rowCount={2}>
      <Thead>
        <Tr>
          <Th>
            <Typography variant="sigma" textColor="neutral600">
              {`Name`}
            </Typography>
          </Th>
          <Th>
            <Typography variant="sigma" textColor="neutral600">
              {`Description`}
            </Typography>
          </Th>
        </Tr>
      </Thead>
      <Tbody>
        {data?.map(({ name, description }) => {
          return (
            <Tr key={name}>
              <Td>
                <Typography
                  textColor="neutral800"
                  variant="omega"
                  fontWeight="bold"
                >
                  {name}
                </Typography>
              </Td>
              <Td>
                <Typography textColor="neutral800">{description}</Typography>
              </Td>
            </Tr>
          );
        })}
      </Tbody>
    </Table>
  );
};

// After
import { Table } from '@strapi/strapi/admin';
```

:::note
Some of the props have changed, please refer to the contributors <ExternalLink to="https://v5.contributor.strapi.io/exports/modules#table" text="documentation for the `Table` component"/>.
:::

## Content Manager

### contentManagementUtilRemoveFieldsFromData

This function has been removed and not replaced. If you feel like you need this function, please open an issue on the Strapi repository to discuss your usecase.

### formatContentTypeData

This function has been removed and not replaced. If you feel like you need this function, please open an issue on the Strapi repository to discuss your usecase.

### useCMEditViewDataManager

A lot of the internals have been reworked and split. We are exposing a main experimental hook to replace this one named `useContentManagerContext` while the rest of the logic is in several hooks.

```tsx
// Before
import { useCMEditViewDataManager } from '@strapi/helper-plugin';

// After
import { unstable_useContentManagerContext as useContentManagerContext } from '@strapi/strapi/admin';
```

Some common use cases are listed below:

```tsx
// Before
const { slug, isSingleType, isCreatingEntry, hasDraftAndPublished } =
  useCMEditViewDataManager();

// After
const {
  model,
  collectionType,
  id,
  slug,
  isCreatingEntry,
  isSingleType,
  hasDraftAndPublish,
} = useContentManagerContext();
```

```tsx
// Before

// 'allLayoutData' has been removed. It contained 'components' and 'contentType' which can be extracted from the 'useContentManagerContext' hook as seen below.
const { allLayoutData } = useCMEditViewDataManager();

// After
const { components, contentType } = useContentManagerContext();
```

```tsx
// Before
const { layout } = useCMEditViewDataManager();

// After
const { layout } = useContentManagerContext();

const {
  edit: { layout, components },
  list: { layout },
} = layout;
```

```tsx
// Before
const { initialData, modifiedData, onChange } = useCMEditViewDataManager();

// After
const { form } = useContentManagerContext();

// Here 'initialData' and 'modifiedData' correspond to 'initialValues' and 'values'.
const { initialValues, values, onChange } = form;
```

```tsx
// Before
const { onPublish, onUnpublish } = useCMEditViewDataManager();

// After
const { publish, unpublish } = useDocumentActions();
```

## Features

<br/>

### AppInfo

This feature has been moved to `@strapi/admin` and only the hook `useStrapiApp` is now exported.

### AutoReloadOverlayBlocker

This feature has been removed and not replaced. If you feel like you need this feature, please open an issue on the Strapi repository to discuss your usecase.

### CustomFields

This feature has been removed and is part of the `useStrapiApp` hook.

### GuidedTour

This feature has been moved to `@strapi/admin` and only the hook `useGuidedTour` is now exported.

### Library

This feature has been removed and is part of the `useStrapiApp` hook.

### Notifications

This feature has been moved to the `@strapi/admin` package and only the `useNotifications` hook is exported. The `message` property
can no longer be a `TranslationMessage` and instead, only a string. If you were previously using the `warning` type you should instead
use the `danger` type and if you were using the `softWarning` type you should use `warning`. Finally, the return type is now an object.

```tsx
// Before
import { useNotification } from '@strapi/helper-plugin';

const toggleNotification = useNotification();

toggleNotification({
  type: 'warning',
  message: {
    id: 'my.message.id',
    defaultMessage: 'My message',
  },
});

// After
import { useNotification } from '@strapi/strapi/admin';

const { toggleNotification } = useNotification();

toggleNotification({
  type: 'danger',
  message: formatMessage({
    id: 'my.message.id',
    defaultMessage: 'My message',
  }),
});
```

### RBAC

This feature has removed and not replaced. If you need to access the user's permissions you should use the `useAuth` hook.

```tsx
// Before
import { useRBACProvider } from '@strapi/helper-plugin';

const { allPermission, refetchPermissions } = useRBACProvider();

// After
import { useAuth } from '@strapi/strapi/admin';

const permissions = useAuth('COMPONENT_NAME', (state) => state.permissions);
const refetchPermission = useAuth(
  'COMPONENT_NAME',
  (state) => state.refetchPermission
);
```

### OverlayBlocker

This feature has been removed and not replaced. If you feel like you need this feature, please open an issue on the Strapi repository to discuss your usecase.

### StrapiApp

This feature has been moved to `@strapi/admin` and only the hook `useStrapiApp` is now exported.

### Tracking

This feature has been moved to the `@strapi/admin` package and only the `useTracking` hook is exported.

## Hooks

<br/>

### useAPIErrorHandler

This hook has been removed. You should import it from the `@strapi/strapi/admin` package:

```tsx
// Before
import { useAPIErrorHandler } from '@strapi/helper-plugin';

// After
import { useAPIErrorHandler } from '@strapi/strapi/admin';
```

### useCallbackRef

This hook has been removed. You should import it from the `@strapi/design-system` package:

```tsx
// Before
import { useCallbackRef } from '@strapi/helper-plugin';

// After
import { useCallbackRef } from '@strapi/design-system';
```

### useClipboard

This hook has been removed and not replaced. If you feel like you need this hook, please open an issue on the Strapi repository to discuss your usecase.

### useCollator

This hook has been removed. You should import it from the `@strapi/design-system` package:

```tsx
// Before
import { useCollator } from '@strapi/helper-plugin';

// After
import { useCollator } from '@strapi/design-system';
```

### useFetchClient

This hook has been removed. You should import it from the `@strapi/strapi/admin` package:

```tsx
// Before
import { useFetchClient } from '@strapi/helper-plugin';

// After
import { useFetchClient } from '@strapi/strapi/admin';
```

### useFieldHint

This hook has been removed and not replaced. If you feel like you need this hook, please open an issue on the Strapi repository to discuss your usecase.

### useFilter

This hook has been removed. You should import it from the `@strapi/design-system` package:

```tsx
// Before
import { useFilter } from '@strapi/helper-plugin';

// After
import { useFilter } from '@strapi/design-system';
```

### useFocusInputField

This hook has been removed and not replaced. If you feel like you need this hook, please open an issue on the Strapi repository to discuss your usecase.

### useFocusWhenNavigate

This hook has been removed and not replaced. If you feel like you need this hook, please open an issue on the Strapi repository to discuss your usecase.

### useFormattedMessage

This hook has been removed and not replaced. If you feel like you need this hook, please open an issue on the Strapi repository to discuss your usecase.

### useLockScroll

This hook has been removed and not replaced. If you feel like you need this hook, please open an issue on the Strapi repository to discuss your usecase.

### useQuery

This hook has been removed and not replaced. If you feel like you need this hook, please open an issue on the Strapi repository to discuss your usecase.

### useQueryParams

This hook has been moved. You should import it from the `@strapi/strapi/admin` package:

```tsx
// Before
import { useQueryParams } from '@strapi/helper-plugin';

// After
import { useQueryParams } from '@strapi/strapi/admin';
```

### useRBAC

This hook has been moved. You should import it from the `@strapi/strapi/admin` package:

```tsx
// Before
import { useRBAC } from '@strapi/helper-plugin';

// After
import { useRBAC } from '@strapi/strapi/admin';
```

### useSelectionState

This hook has been removed and not replaced. If you feel like you need this hook, please open an issue on the Strapi repository to discuss your usecase.

## Icons

<br/>

### SortIcon

This component has been removed and not replaced. If you feel like you need this function, please open an issue on the Strapi repository to discuss your usecase.

### RemoveRoundedButton

This component has been removed and not replaced. If you feel like you need this function, please open an issue on the Strapi repository to discuss your usecase.

## Utils

<br/>

### awaitToJs

This util has been removed and not replaced, use async / await with try / catch instead. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### difference

This util has been removed and not replaced. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### findMatchingPermissions

This util has been removed and not replaced. You should filter the permissions yourself. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### formatPermissionsForRequest

This util has been removed and not replaced. You should format the permissions yourself. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### getAPIInnerErrors

This util has been removed and not replaced, use async / await with try / catch instead. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### getFetchClient

This util has been removed. You should import it from the `@strapi/strapi/admin` package:

```tsx
// Before
import { getFetchClient } from '@strapi/helper-plugin';

// After
import { getFetchClient } from '@strapi/strapi/admin';
```

### getFileExtension

This util has been removed and not replaced. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### getYupInnerErrors

This util has been removed and not replaced. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### auth

This util has been removed and not replaced. If you're trying to interact with the token or current user you use should use the `useAuth` hook instead.
If you're generally interacting with localStorage, then access this directly e.g. `localStorage.getItem('myKey')`.

### hasPermissions

This util has been removed. If you need to use it, you should use the `checkUserHasPermissions` function from the `useAuth` hook.

```tsx
// Before
import { hasPermissions } from '@strapi/helper-plugin';

const permissions = await Promise.all(
  generalSectionRawLinks.map(({ permissions }) =>
    hasPermissions(userPermissions, permissions)
  )
);

// After
import { useAuth } from '@strapi/strapi/admin';

const { checkUserHasPermissions } = useAuth(
  'COMPONENT_NAME',
  (state) => state.checkUserHasPermissions
);
```

### normalizeAPIError

This util has been removed and not replaced. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### prefixFileUrlWithBackendUrl

This util has been removed and not replaced. Use the strapi backendUrl to prefix the relative url if you need. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### prefixPluginTranslations

This util has been removed and not replaced. Your plugin should define this util itself if needed, with an implementation like this:

```tsx
type TradOptions = Record<string, string>;

const prefixPluginTranslations = (
  trad: TradOptions,
  pluginId: string
): TradOptions => {
  if (!pluginId) {
    throw new TypeError("pluginId can't be empty");
  }
  return Object.keys(trad).reduce((acc, current) => {
    acc[`${pluginId}.${current}`] = trad[current];
    return acc;
  }, {} as TradOptions);
};
```

If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### pxToRem

This util has been removed and not replaced. You should use directly this code in place of the pxToRem:

```tsx
// Before
pxToRem(
  32
) // After
`${32 / 16}rem`;
// or
('2rem');
```

If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### request

This util has been removed and not replaced.
You can use `useFetchClient` from `@strapi/strapi/admin`.

```tsx
// Before
import { request } from '@strapi/helper-plugin';

request(`/${pluginId}/settings/config`, { method: 'GET' });

// After
import { useFetchClient } from '@strapi/strapi/admin';

const { get } = useFetchClient();
get(`/${pluginId}/settings/config`);
```

And you can use it like this

```tsx
const { get } = useFetchClient();

const { data } = await get(requestURL);
```

If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### setHexOpacity

This util has been removed and not replaced, use the native CSS opacity property instead. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### stopPropagation

This util has been removed and not replaced. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### shouldCheckPermissions

This util has been removed and not replaced. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### translatedErrors

This utils has been removed. You should import it from the `@strapi/strapi/admin` package:

```tsx
// Before
import { translatedErrors } from '@strapi/helper-plugin';

// After
import { translatedErrors } from '@strapi/strapi/admin';
```

If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.

### wrapAxiosInstance

This util has been removed and not replaced. If you feel like you need this util, please open an issue on the Strapi repository to discuss your usecase.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/additional-resources/introduction.md 

 ---
title: Additional resources for migrating to Strapi 5
sidebar_label: Additional resources
pagination_next: cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service
displayed_sidebar: cmsSidebar
tags:
  - upgrade to Strapi 5
---

# Additional resources for upgrading to Strapi 5

The following pages cover some dedicated topics for specific use cases when upgrading to Strapi 5. Please ensure you have read the [introduction to upgrading to Strapi 5](/cms/migration/v4-to-v5/introduction-and-faq) and [step-by-step guide](/cms/migration/v4-to-v5/step-by-step) before moving forward.

<CustomDocCard emoji="üì¶" title="Entity Service API to Document Service API migration reference" description="Learn how to transition from the Entity Service API of Strapi v4, deprecated in Strapi 5, to the new Document Service API." link="/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service" />
<CustomDocCard emoji="üß©" title="Plugins upgrade summary" description="Find resources and answers to your questions on how to upgrade your plugins to Strapi 5." link="/cms/migration/v4-to-v5/additional-resources/plugins-migration" />
<CustomDocCard emoji="üíÅ" title="Helper-plugin deprecation reference" description="Learn how to develop plugins without the Strapi v4 helper-plugin, removed from Strapi 5." link="/cms/migration/v4-to-v5/additional-resources/helper-plugin" />
<CustomDocCard emoji="üíÅ" title="Design System v2 breaking changes" description="Discover a summary of the breaking changes introduced by the Design System v2." link="/cms/migration/v4-to-v5/breaking-changes/design-system" />


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/additional-resources/plugins-migration.md 

 ---
title: Plugins upgrade summary
displayed_sidebar: cmsSidebar
tags:
  - plugins
  - plugins development
  - upgrade to Strapi 5
---

# Plugins upgrade summary

The present page is intended to be used as a short summary of everything to consider if you are a plugin developer upgrading your plugin from Strapi v4 to Strapi 5. The page quickly describes the changes affecting plugins and links to additional resources where necessary.

:::strapi Plugin SDK
Starting with Strapi 5, the platform includes a [Plugin SDK](/cms/plugins-development/plugin-sdk) to help develop and build Strapi plugins. While you are free to use other methods for plugin development, we strongly recommend using the Plugin SDK. As part of the migration process from v4 to Strapi 5, we encourage you to update your plugin to take advantage of the Plugin SDK.
:::

## Recommended steps to migrate a plugin
:::prerequisites
Your Strapi application is already running on the latest v5 minor and patch version. If it's not, follow the [step-by-step guide](/cms/migration/v4-to-v5/step-by-step) to upgrade to Strapi 5.
:::

Upgrading a Strapi v4 plugin to Strapi 5 consists in:

1. Creating a new empty plugin using the [Plugin SDK](/cms/plugins-development/create-a-plugin).
2. Move your Strapi v4 code to the newly created files in the Strapi 5 [plugin structure](/cms/plugins-development/plugin-structure), also considering the changes summarized in this page.

Alternatively, you can manually update your Strapi v4 plugin to use the Plugin SDK.
The manual steps include:
1. If your code uses a format other than CommonJS, update the `package.json` file and specify the appropriate exports property.
2. Reorganize your Strapi v4 code to align with the Strapi 5 [plugin structure](/cms/plugins-development/plugin-structure)

### Back-end changes

- The Entity Service API from Strapi v4 is deprecated and Strapi 5 uses the [Document Service API](/cms/api/document-service) instead. A [migration guide](/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service) is available to help you transition to the Document Service API.
- General Strapi v4 to Strapi 5 [breaking changes](/cms/migration/v4-to-v5/breaking-changes) might apply.
- You can use the new [Plugin SDK](/cms/plugins-development/create-a-plugin) to generate plugins and publish them on NPM and/or submit them to the Marketplace.

### Front-end changes

- The Design System is upgraded to v2 in Strapi 5:
  - üëâ A dedicated migration guide is <ExternalLink to="https://design-system-git-main-strapijs.vercel.app/?path=/docs/getting-started-migration-guides-v1-to-v2--docs" text="available in the Design System documentation"/>.
  - There are no big visual changes, except for <ExternalLink to="https://design-system-git-main-strapijs.vercel.app/?path=/docs/foundations-icons-overview--docs" text="icons"/>.
  - General Strapi v4 to Strapi 5 [breaking changes](/cms/migration/v4-to-v5/breaking-changes) might apply.
- The `helper-plugin` has been removed. A [migration reference](/cms/migration/v4-to-v5/additional-resources/helper-plugin) is available to help you transition away from the `helper-plugin`.
- Strapi does not alias dependencies any longer. The 4 dependencies that are expected to be used by all client facing code are declared at the project level (`react`, `react-dom`, `styled-components`, and `react-router-dom`). If you do not declare the dependencies that you use (e.g. `axios`), there is a likelihood users could face unforeseen issues with your plugin.
- If you're using the [Plugin SDK](/cms/plugins-development/create-a-plugin), you will need to transition your front-end files to `.jsx` or `.tsx` format.

## Custom providers

Custom providers for the [Email](/cms/features/email#providers) and [Upload](/cms/features/media-library#providers) plugins need conversion only if they were using the Entity Service API (please refer to the [Entity Service API to Document Service API migration guide](/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service)).


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes.md 

 ---
title: Breaking changes
description: View the list of all breaking changes introduced between Strapi v4 and v5.
displayed_sidebar: cmsSidebar
pagination_prev: cms/migration/v4-to-v5/step-by-step
pagination_next: cms/migration/v4-to-v5/additional-resources/introduction
tags:
 - breaking changes
 - upgrade to Strapi 5
---

# Strapi v4 to Strapi 5 breaking changes

The present page lists all the breaking changes introduced in Strapi 5.
Breaking changes are grouped into topic-related categories, and for each line in the following tables line you will find:

- a short description of the breaking change,
- and 2 other columns, "Affects plugins" and "Handled by codemods", that sum up whether the breaking change also affects plugins and whether the breaking change is automatically handled by a codemod from the [upgrade CLI tool](/cms/upgrade-tool).

You can click on the description of any breaking change in the following tables to jump to the corresponding page with more details.

:::tip Tips
* To view a full list of available codemods, run the `npx @strapi/upgrade codemods ls` command in your terminal.
* To have a deeper look at the code executed by the codemods, head over to the <ExternalLink to="https://github.com/strapi/strapi/tree/develop/packages/utils/upgrade/resources/codemods/5.0.0" text="list of codemods"/> in the GitHub repository.
:::

## Database

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [Content types always have feature columns](/cms/migration/v4-to-v5/breaking-changes/database-columns) | Yes | No|
| [MySQL v5 is not supported anymore](/cms/migration/v4-to-v5/breaking-changes/mysql5-unsupported) | No | No |
| [Database identifiers longer than 55 characters will be automatically shortened](/cms/migration/v4-to-v5/breaking-changes/database-identifiers-shortened) | Yes | ‚úÖ Yes |
| [Only the `better-sqlite3` package is supported for the SQLite client](/cms/migration/v4-to-v5/breaking-changes/only-better-sqlite3-for-sqlite) | No | ‚úÖ Yes |
| [Only the `mysql2` package is supported for the MySQL client](/cms/migration/v4-to-v5/breaking-changes/only-mysql2-package-for-mysql) | No | ‚úÖ Yes |

## Dependencies

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [The CLI default package manager is not yarn anymore](/cms/migration/v4-to-v5/breaking-changes/yarn-not-default) | No | No |
| [Vite is the default bundler in Strapi 5](/cms/migration/v4-to-v5/breaking-changes/vite) | Yes | No |
| [Strapi 5 uses `react-router-dom` v6](/cms/migration/v4-to-v5/breaking-changes/react-router-dom-6) | Yes | ‚úÖ Yes |
| [Strapi 5 uses `koa-body` v6](/cms/migration/v4-to-v5/breaking-changes/koa-body-v6) | Yes | No |
| [Webpack aliases are removed in Strapi 5](/cms/migration/v4-to-v5/breaking-changes/webpack-aliases-removed) | Yes | No |
| [Apollo Server v3 upgraded to Apollo Server v4](/cms/migration/v4-to-v5/breaking-changes/upgrade-to-apollov4) | Yes | No |

## Configuration

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [Some `env`-only configuration options are handled by the server configuration](/cms/migration/v4-to-v5/breaking-changes/removed-support-for-some-env-options) | No | No |
| [Configuration filenames should meet strict requirements](/cms/migration/v4-to-v5/breaking-changes/strict-requirements-config-files) | No | No |
| [Server log level is `http`](/cms/migration/v4-to-v5/breaking-changes/server-default-log-level) | No | No |
| [Model config path uses uid instead of dot notation](/cms/migration/v4-to-v5/breaking-changes/model-config-path-uses-uid) | Yes | üë∑ Partly |
| [The `webhooks.populateRelations` server configuration is removed](/cms/migration/v4-to-v5/breaking-changes/remove-webhook-populate-relations) | Yes | No |
| [The `defaultIndex` option is removed from the `public` middleware](/cms/migration/v4-to-v5/breaking-changes/default-index-removed) | No | No |
| [Server proxy configuration options are grouped under the `server.proxy` object](/cms/migration/v4-to-v5/breaking-changes/server-proxy) | No | No |

## Strapi objects, methods, packages, and back-end customization

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [`strapi.fetch` uses the native `fetch()` API](/cms/migration/v4-to-v5/breaking-changes/fetch) | Yes | No |
| [strapi factories import have changed](/cms/migration/v4-to-v5/breaking-changes/strapi-imports) | Yes | üë∑ Partly |
| [The `isSupportedImage` method is removed in Strapi 5](/cms/migration/v4-to-v5/breaking-changes/is-supported-image-removed) | Yes | No |
| [`strapi-utils` has been refactored](/cms/migration/v4-to-v5/breaking-changes/strapi-utils-refactored) | Yes | ‚úÖ Yes |
| [Core service methods use the Document Service API](/cms/migration/v4-to-v5/breaking-changes/core-service-methods-use-document-service) | Yes | No |
| [i18n is now part of the strapi core](/cms/migration/v4-to-v5/breaking-changes/i18n-content-manager-locale) | Yes | ‚úÖ Yes |

## Plugins, providers, admin panel and front-end customization

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [Users & Permissions `register.allowedFields` defaults to `[]`](/cms/migration/v4-to-v5/breaking-changes/register-allowed-fields) | No | ‚úÖ Yes |
| [The `helper-plugin` is removed](/cms/migration/v4-to-v5/breaking-changes/helper-plugin-deprecated) | Yes | üë∑ Partly |
| [`injectContentManagerComponent()` is removed in favor of `getPlugin('content-manager').injectComponent()`](/cms/migration/v4-to-v5/breaking-changes/inject-content-manager-component) | Yes | No |
| [Some Mailgun provider legacy variables are not supported](/cms/migration/v4-to-v5/breaking-changes/mailgun-provider-variables) | Yes | No |
| [The `lockIcon` property has been replaced by `licenseOnly`](/cms/migration/v4-to-v5/breaking-changes/license-only) | Yes | No |
| [The `ContentManagerAppState` redux is modified](/cms/migration/v4-to-v5/breaking-changes/redux-content-manager-app-state) | Yes | No |
| [The `EditViewLayout` and `ListViewLayout` have been refactored](/cms/migration/v4-to-v5/breaking-changes/edit-view-layout-and-list-view-layout-rewritten) | Yes | No |
| [The Admin Panel RBAC redux store has been updated](/cms/migration/v4-to-v5/breaking-changes/admin-panel-rbac-store-updated) | Yes | No |
| [The `getWhere` method for permission provider instances has been removed](/cms/migration/v4-to-v5/breaking-changes/get-where-removed) | Yes | No |
| [The Design System has been upgraded](/cms/migration/v4-to-v5/breaking-changes/design-system) | Yes | No |

## Content API

| Description | Affects plugins | Handled by codemods |
|-------------|-----------------|---------------------|
| [Strapi 5 has a new, flattened response format for API calls](/cms/migration/v4-to-v5/breaking-changes/new-response-format) | Yes | No |
| [REST API input is validated by default in controllers](/cms/migration/v4-to-v5/breaking-changes/default-input-validation) | Yes | No |
| [The GraphQL API has been updated](/cms/migration/v4-to-v5/breaking-changes/graphql-api-updated) | Yes | No |
| [The Entity Service API is deprecated and replaced by the Document Service API](/cms/migration/v4-to-v5/breaking-changes/entity-service-deprecated) | Yes | üë∑ Partly |
| [`documentId` should be used instead of `id` in API calls](/cms/migration/v4-to-v5/breaking-changes/use-document-id) | Yes | üë∑ Partly |
| [Database lifecycle hooks are triggered differently based on Document Service API methods](/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service) | Yes | No |
| [The `publicationState` parameter is not supported and replaced by `status`](/cms/migration/v4-to-v5/breaking-changes/publication-state-removed) | Yes | ‚úÖ Yes |
| [Content types with Draft & Publish disabled always have the publishedAt value set to a date](/cms/migration/v4-to-v5/breaking-changes/publishedat-always-set-when-dandp-disabled) | Yes | No |
| [Sorting by id is no longer possible to sort by chronological order](/cms/migration/v4-to-v5/breaking-changes/sort-by-id) | Yes | ‚úÖ Yes |
| [There is no `findPage()` method with the Document Service API](/cms/migration/v4-to-v5/breaking-changes/no-find-page-in-document-service) | Yes | No |
| [Some attributes and content-types names are reserved by Strapi](/cms/migration/v4-to-v5/breaking-changes/attributes-and-content-types-names-reserved) | Yes | No |
| [Upload a file at entry creation is no longer possible](/cms/migration/v4-to-v5/breaking-changes/no-upload-at-entry-creation) | Yes | No |
| [Components and dynamic zones should be populated using the detailed population strategy](/cms/migration/v4-to-v5/breaking-changes/no-shared-population-strategy-components-dynamic-zones) | Yes | No |


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/admin-panel-rbac-store-updated.md 

 ---
title: The admin panel RBAC system has been updated
description: In Strapi 5, there is no `content-manager_rbacManager` anymore, and the regular permissions system is used instead.
sidebar_label: content-manager_rbacManager removed
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - content manager
 - RBAC
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# The admin panel RBAC system has been updated

In Strapi 5, the `content-manager_rbacManager`, which is a section of Strapi's redux store for the admin panel, is removed and the regular permissions system is used instead. Additionally, the `useRBAC` hook is updated.

<Intro/>
<BreakingChangeIdCard plugins />

## Breaking change description

**In Strapi v4**

Permissions are handled with the `content-manager_rbacManager` section of the redux store, like in the following generic example:

```tsx
const cmPermissions useSelector(state => state['content-manager_rbacManager'])
```

```tsx
const { allowedActions } = useRBAC({
	main: [{ action: 'admin::something.main', subject: null }]
})

const canMain = allowedActions.canMain
```

**In Strapi 5**

`content-manager_rbacManager` is removed and the regular permissions system is used instead, which implies the `useRBAC` hook is used differently, as in the following generic example:

```tsx
const { allowedActions } = useRBAC([
  { action: 'admin::something.main', subject: null }
])

const canMain = allowedActions.canMain
```

## Migration

<MigrationIntro />

### Notes

<!-- TODO v5: update links when v5.contributor.strapi.io is hosted at contributor.strapi.io -->
* A new RBAC API is available and users can utilise a middleware system to interact with calls (see <ExternalLink to="https://contributor.strapi.io/exports/classes/StrapiApp#addrbacmiddleware" text="contributors documentation"/>).
* Additional information can be found in the Contributors Documentation, in the <ExternalLink to="https://contributor.strapi.io/docs/core/admin/permissions/frontend/fetching-permissions" text="Fetching permissions"/> and <ExternalLink to="https://contributor.strapi.io/docs/core/admin/features/authentication" text="Authentication"/> sections.

### Manual migration

Plugin developers that are hooking into the redux store to tweak RBAC permissions in Strapi v4 need to update their code according to the described changes.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/attributes-and-content-types-names-reserved.md 

 ---
title: Reserved attributes and content-types names
description: In Strapi 5, some attributes and content types names are reserved, and all fields or content types using the reserved names should be renamed before migrating to prevent data loss.
sidebar_label: Reserved names
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - models
 - content API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Some attributes and content types names are reserved

In Strapi 5, some attributes and content types names are reserved, and all fields or content types in Strapi v4 using these reserved names should be renamed before migrating to Strapi 5 to prevent data loss.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The following attribute names can be created on a content type:

- `meta`
- `status`
- `entryId`
- `strapi`
- `locale` (only for non-localized content types)
- `localizations`
- `strapi_assignee`
- `strapi_stage`
- `then`
- `document`
- anything with the prefix `strapi`, `_strapi`, or `__strapi`

Any model name can be prefixed with `strapi`.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The following attribute names can **not** be created on a content type:

- `meta`
- `status`
- `entryId`
- `strapi`
- `locale`
- `localizations`
- `strapi_assignee`
- `strapi_stage`
- `then`
- `document`
- anything with the prefix `strapi`, `_strapi`, or `__strapi`

Model names can **not** be prefixed with `strapi`, `_strapi`, or `__strapi`.

</SideBySideColumn>

</SideBySideContainer>

## Migration

### Manual procedure

Rename any custom field or content-type that falls under the restriction list *before* any migration to prevent data loss or other unexpected issues.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/components-and-dynamic-zones-do-not-return-id.md 

 ---
title: Components and dynamic zones do not return an id 
description: In Strapi 5, components and dynamic zones do not return an `id` with REST API requests so it's not possible to partially update them.
sidebar_label: Components and dynamic zones do not return an id
displayed_sidebar: cmsSidebar
unlisted: true
tags:
 - breaking changes
 - content API
 - components
 - dynamic zones
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Components and dynamic zones do not return an `id`

In Strapi 5, components and dynamic zones do not return an `id` with REST API requests so it's not possible to partially update them.

<Intro />
<BreakingChangeIdCard plugins/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

In Strapi v4, you can partially update a component by passing its component `id`.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The response of components and dynamic zones in the REST API does not contain an `id`, and partial updates on them is not possible.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

* In Strapi v4, you could do the following send requests that would return a component's `id`:

  ```tsx
  // 1. GET /category/:id
  category = fetch(...)

  // 2. PUT /category/:id
  {
  data: {
    name: 'category-name',
    // Update component by its id
    component: {
      id: category.component.id // Use the id received in 1.
      value: 'value' 
    }
  }
  }
  ```

  So you could specify the component `id` to update the `value` field.
  
* In Strapi 5:

  * The [Draft & Publish](/cms/features/draft-and-publish) feature has been reworked and documents <DocumentDefinition/> can have both a draft and a published version.
  * The default behaviour of the Content API is to return published data, for instance `PUT /category/:id` can be used to update the draft version of a document and publish it.
  * The REST API response returns the published version, so using the `id` would resort to trying to update the draft version of a component or dynamic zone with the unique identifier of its published version, which is not possible.
  * Trying to partially update a component will result in the following error: `Some of the provided components in component are not related to the entity`.

* This breaking change only affects the REST API, not the [Document Service API](/cms/api/document-service), because the Document Service API returns the draft version of a document by default. This also makes it possible to partially update a component or dynamic zone in the Content Manager.

### Manual procedure

Update your custom code to send the full component to update when using the REST API.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/core-service-methods-use-document-service.md 

 ---
title: Core service methods use the Document Service API
description: In Strapi 5, core service methods use the Document Service API instead of the Entity Service API.
sidebar_label: Core service methods use Document Service API
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - document service API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Core service methods use the Document Service API

In Strapi 5, core service methods use the Document Service API instead of the Entity Service API.

<Intro/>
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The core controllers and the `createCoreService` factory by default use the Entity Service API.<br/>Methods such as, for instance, `find`, `update`, and `delete` receive an `entityId`.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The core controllers and the `createCoreService` factory use the [Document Service API](/cms/api/document-service).<br/>Methods such as, for instance, `find`, `update`, and `delete` receive a `documentId`.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

Some core methods are calling `super.find(ctx)` which internally calls entity service methods in Strapi v4, while they call Document Service API methods in Strapi 5. This may result in some queries no longer working, or returning slightly different results from expecting.

The following examples show how the code should be updated:

  **In Strapi v4:**

  ```js title="/src/api/my-api-name/services/my-service.js"
  const { createCoreService } = require('@strapi/strapi').factories;

  module.exports = createCoreService('api::address.address', {

    findOne(entityId, params) {
      // customization
      super.findOne(entityId, params);
      
      // or to show a bit more context
      strapi.entityService.findOne(uid, entityId, params);
    },
    
    update(entityId, params) {
      // customization
      super.update(entityId, params);
    },
    
    delete(entityId, params) {
      // customization
      super.delete(entityId, params)
    }

  });
  ```

  **In Strapi 5:**

  ```js title="/src/api/my-api-name/services/my-service.js"
  const { createCoreService } = require('@strapi/strapi').factories;

  module.exports = createCoreService('api::address.address', {

    findOne(documentId, params) {
      // customization
      super.findOne(documentId, params);
      
      // or to show a bit more context
      strapi.documents(uid).findOne(documentId, params);
    },

    update(documentId, params) {
      // customization
      super.update(documentId, params);
    },

    delete(documentId, params) {
      // customization
      super.delete(documentId, params)
    }
  });
  ```

### Manual procedure

To update your custom code:

1. Find all calls to `createCoreService` with customization.
2. If any of `findOne, delete, update` function for a collection type are extending core methods, update them as explained in the [notes](#notes).

Additionally, please refer to the [Entity Service API to Document Service API migration](/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service) documentation.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/database-columns.md 

 ---
title: Database columns
description: Content types always have feature columns
displayed_sidebar: cmsSidebar
tags:
  - breaking changes
  - database
  - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Content types always have feature columns

In Strapi 5, Content types always have document, publication and internationalization columns created in database.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

**In Strapi 5**

* All the Content Types have a new `document_id` column.
* The `published_at` column is now always added.
* The `locale` column is now always added.

<br />


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/database-identifiers-shortened.md 

 ---
title: Database identifiers shortened in v5
description: Database identifiers are shortened in Strapi v5 and can't be longer than 55 characters to avoid issues with identifiers that are too long.
sidebar_label: Database identifiers shortened
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - database
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Database identifiers shortened in v5

In Strapi 5, database identifiers can't be longer than 55 characters. <Intro />

<BreakingChangeIdCard
  plugins
  codemod
  info="(This breaking change is actually handled by a data migration script that runs when your Strapi project is upgraded to Strapi 5.)"
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Database identifiers could be longer than 55 characters, potentially causing issues with some databases.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Database identifiers can't be longer than 55 characters and will be shortened.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

- A hashing key will be added when shortening database identifiers to avoid conflicts. It will consist in the first 6 characters of SHA-256. For example, `my_very_very_very_very_very_very_very_too_long_identifier_unique` will be shortened to `my_very_very_very_very_very_very_very_very_a2dx3_uq` in Strapi v5.
- Some suffixes will be used:

  | Suffix                 | Short version |
  | ---------------------- | ------------- |
  | `component_type_index` | `cmpix`       |
  | `component`            | `cmp`         |
  | `components`           | `cmps`        |
  | `entity_fk`            | `etfk`        |
  | `field_index`          | `flix`        |
  | `fk`                   | `fk`          |
  | `id_column_index`      | `idix`        |
  | `index`                | `idx`         |
  | `inv_fk`               | `ifk`         |
  | `links`                | `lnk`         |
  | `morphs`               | `mph`         |
  | `order_fk`             | `ofk`         |
  | `order_index`          | `oidx`        |
  | `order_inv_fk`         | `oifk`        |
  | `order`                | `ord`         |
  | `primary`              | `pk`          |
  | `unique`               | `uq`         |

### Manual procedure

Strapi should handle everything when starting the application in Strapi v5.

However, be aware that if you have hard-coded references to database tables or columns, you may need to manually update them.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/default-index-removed.md 

 ---
title: defaultIndex removed
description: In Strapi 5, the 'defaultIndex' option is removed from the 'public' middleware.
sidebar_label: defaultIndex removed
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - middlewares
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# `defaultIndex` is removed from the `public` middleware configuration

In Strapi 5, the 'defaultIndex' option does not exist anymore and the root `/` URL automatically redirects to the admin panel login or homepage if already connected.

 <Intro />

<BreakingChangeIdCard />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

There is a `defaultIndex` option in the `public` middleware to add a custom page on the root `/`   URL of the admin panel.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The `defaultIndex` option does not exist anymore and the root `/` URL automatically redirects to the admin panel login or homepage if already connected.

</SideBySideColumn>

</SideBySideContainer>

## Migration

No manual migration is required, but please be aware of the new behavior for the root `/` URL.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/default-input-validation.md 

 ---
title: REST API input is validated by default in controllers
description: In Strapi 5, REST API input is validated by default in controllers, instead of accepting invalid data and sanitizing it silently.
sidebar_label: Default input validation
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - controllers
 - validation
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# REST API input is validated by default in controllers

Sanitization means that the object is ‚Äúcleaned‚Äù and returned.

Validation means an assertion is made that the data is already clean and throws an error if something is found that shouldn't be there.

Strapi methods exist both for [sanitization and validation in controllers](/cms/backend-customization/controllers#sanitization-and-validation-in-controllers) and they can target input body data, query parameters, and output (only for sanitization).

In Strapi 5, REST API input is validated by default in controllers, instead of accepting invalid data and sanitizing it silently.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

In v4, query parameters are validated, but input data (create and update body data) is only sanitized.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

In v5, both query parameters and input data are validated.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

* A `400 Bad Request` error will be thrown if the request has invalid values such as in in the following cases:

  - relations the user do not have permission to create
  - unrecognized values that are not present on a schema
  - attempt to writing non-writable fields and internal timestamps like `createdAt` and `createdBy` fields
  - usage of the `id` field (other than for connecting relations) to set or update the `id` of an object

### Manual procedure

Users should ensure that parameters and input data are valid to avoid `400` errors being thrown. Additional information can be found in the [sanitization and validation in controllers](/cms/backend-customization/controllers#sanitization-and-validation-in-controllers) documentation.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/design-system.md 

 ---
title: Design System Updates in Strapi 5
description: The Strapi Design System has been significantly updated in Strapi 5 with changes to component structure, APIs, and usage patterns.
sidebar_label: Design System Updates
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - design system
 - upgrade to Strapi 5
---
import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# The Strapi Design System has been upgraded to v2

The <ExternalLink text="Strapi Design System" to="https://design-system.strapi.io" /> has been completely updated in Strapi 5 with significant changes to component structure, APIs, and usage patterns.

<Intro />

<BreakingChangeIdCard
  plugins
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Strapi Design System v1 used a specific approach with direct imports, styled-components v5, and certain component APIs that have since been revised.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Strapi Design System v2 has been completely updated with a focus on accessibility, API consistency, and better typing support. Major changes include:

- Root imports instead of direct component paths
- Styled-components upgraded to v6
- Many components migrated to Radix-UI primitives
- New Field API for form elements
- TypeScript definitions now included
- Several components renamed or removed

</SideBySideColumn>
</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

- For detailed migration information, refer to <ExternalLink text="the Design System migration guide" to="https://design-system.strapi.io/?path=/docs/getting-started-migration-guides-v1-to-v2--docs"/>.
- The base font-size for the app is now `62.5%` (10px), so 1rem = 10px.
- Many icons have been updated or replaced.

Key changes to be aware of include the following:

#### Import structure changes

```diff
- import { Combobox } from '@strapi/design-system/Combobox';
+ import { Combobox } from '@strapi/design-system';
```

#### ThemeProvider migration

```diff
- import { ThemeProvider } from '@strapi/design-system';
+ import { DesignSystemProvider } from '@strapi/design-system';
```

#### Field components API changes

```diff
- return <SingleSelect label={label} error={error} required={required} value={value} onChange={handleChange} />;
+ return (
+   <Field.Root error={error} required={required} name={name}>
+     <Field.Label>{label}</Field.Label>
+     <SingleSelect value={value} onChange={handleChange} />
+     <Field.Error />
+     <Field.Hint />
+   </Field.Root>
+ );
```

#### Grid component structure

```diff
- import { Grid, GridItem } from '@strapi/design-system';
+ import { Grid } from '@strapi/design-system';

- <Grid gridCols={4}>
-   <GridItem col={2}>1</GridItem>
-   <GridItem col={2}>2</GridItem>
- </Grid>
+ <Grid.Root gridCols={4}>
+   <Grid.Item>1</Grid.Item>
+   <Grid.Item>2</Grid.Item>
+ </Grid.Root>
```

#### Component changes summary

- **Renamed components**: `ToggleInput` ‚Üí `Toggle`
- **Removed components**: `Icon`, `Stack`, `ToggleCheckbox`, `Select/Option/OptGroup/SelectList` (use `SingleSelect` or `MultiSelect` instead)
- **Layout components moved to CMS**: Layout, MainNav, HeaderLayout, TwoColsLayout, GridLayout, ActionLayout, ContentLayout
- **New prop naming**: `as` is now `tag` for polymorphic components
- **Radix-UI migrations**: Many components including Accordion, Avatar, Checkbox, Dialog, Modal, Popover, Radio, Tabs, Tooltip

### Manual procedure

There is no codemod for this migration. Users will need to manually:

1. Update all Design System imports to use root imports.
2. Migrate component usages to the new APIs.
3. Update icon usage.
4. Replace Layout components with imports from `@strapi/admin/strapi-admin`.
5. Update styling to account for the new base font size.

 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/edit-view-layout-and-list-view-layout-rewritten.md 

 ---
title: The `EditViewLayout` and `ListViewLayout` have been rewritten
description: In Strapi 5, some admin panel hooks have been removed from the Redux store and a new `useDocumentLayout` hook is introduced.
sidebar_label: EditViewLayout and ListViewLayout refactored
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - content manager
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# The `EditViewLayout` and `ListViewLayout` have been rewritten

In Strapi 5, some admin panel hooks have been removed from the Redux store and a new `useDocumentLayout` hook is introduced.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The `content-manager_editViewLayoutManager` and `content-manager_listViewLayoutManager` hooks can be used.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

- The `content-manager_editViewLayoutManager` and `content-manager_listViewLayoutManager` have been removed from the Redux store.
- A new `useDocumentLayout` hook is available.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

Additional information about hooks can be found in the [Admin Panel API for plugins](/cms/plugins-development/admin-panel-api#hooks-api) documentation.

### Manual procedure

Plugins developers taking advantage of the `content-manager_editViewLayoutManager` and `content-manager_listViewLayoutManager` hooks in their plugins need to refactor their code.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/entity-service-deprecated.md 

 ---
title: Entity Service deprecated
description: In Strapi 5, the Entity Service API is deprecated in favor of the new Document Service API.
sidebar_label: Entity Service deprecated
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - Entity Service API
 - Document Service API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Entity Service deprecated

The Entity Service that was used in Strapi v4 is deprecated and replaced by the new [Document Service API](/cms/api/document-service) in Strapi 5. <MigrationIntro/>

<BreakingChangeIdCard
  plugins
  codemodPartly
  codemodName="entity-service-document-service"
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/entity-service-document-service.code.ts"
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The Entity Service API is the go-to API to use to interact with your content-types.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The [Document Service API](/cms/api/document-service) replaces the Entity Service API from Strapi v4.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

The following are the main topics to take into account when using the Document Service API instead of the Entity Service API from Strapi v4:

* The Document Service API expects a `documentId` property.<br/>This breaking change also affects the REST and GraphQL APIs (üëâ see [the related breaking change entry](/cms/migration/v4-to-v5/breaking-changes/use-document-id)).
  :::info
  To ease the transition to Strapi 5, Document Service API responses still include `id` fields in addition to the new `documentId` fields.
  :::

* The response returned by the `findMany()` function is different in Strapi v4 and Strapi 5:
  <SideBySideContainer>
  <SideBySideColumn>
  
  **In Strapi v4:**

  The `findMany()` function from the Entity Service API returns a single item for single types.
  </SideBySideColumn>

  <SideBySideColumn>

  **In Strapi 5:**

  The [`findMany()` function from the Document Service API](/cms/api/document-service#findmany) always returns arrays.<br/><br/>To get a single item, extract the first item from the returned array, or use [the `findFirst()` function](/cms/api/document-service#findfirst).

  </SideBySideColumn>
  </SideBySideContainer>

* There is no `findPage()` method anymore in Strapi 5.<br/>üëâ see [the related breaking change entry](/cms/migration/v4-to-v5/breaking-changes/no-find-page-in-document-service).

* The [Draft & Publish](/cms/features/draft-and-publish) feature has been updated in Strapi 5 and this is reflected in the Document Service API:
  - `publicationState` is replaced by `status`<br/>üëâ see [the related breaking change entry](/cms/migration/v4-to-v5/breaking-changes/publication-state-removed).
  - New methods are introduced to handle the updated [Draft & Publish](/cms/features/draft-and-publish) feature:
    - [`publish()`](/cms/api/document-service#publish),
    - [`unpublish()`](/cms/api/document-service#unpublish),
    - and [`discardDraft()`](/cms/api/document-service#discarddraft).

  - The `published_at` property can not be used anymore to trigger the publication of content.

* The [`delete()` function](/cms/api/document-service#delete) of the Document Service API returns a list of affected entries (multiple locales can be deleted all at once), while the `delete()` function from Strapi v4 returns only the deleted entry.

* Entity Service decorators can not be used anymore, and [Document Service middlewares](/cms/api/document-service/middlewares) must be used instead.

* The Document Service API does not support file uploads.


### Migration procedure

The migration is partially handled by a codemod when using the [upgrade tool](/cms/upgrade-tool).

üëâ The [Entity Service API to Document Service API migration reference](/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service) gives additional information about which aspects are handled by the codemod and which use cases require manual migration.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/fetch.md 

 ---
title: strapi.fetch uses native fetch() API
description: In Strapi 5, the `strapi.fetch` object is now wrapping node Fetch API instead of node-fetch.
sidebar_label: strapi.fetch uses native fetch()
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - fetch
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# `strapi.fetch` uses the native `fetch()` API

In Strapi 5, the `strapi.fetch` object is now wrapping node Fetch API instead of node-fetch.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Strapi.fetch wrapped node-fetch‚Äôs `fetch()` and accepted the same parameters.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The `node-fetch` module is not used anymore. `strapi.fetch` calls the native `fetch()` method.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<br/>

### Notes

* The parameters are mostly compatible but there are some differences.

### Manual procedure

If your Strapi v4 code passed the `timeout` parameter to `strapi.fetch`, replace it with a signal property as follows:

<SideBySideContainer>
<SideBySideColumn>

**In Strapi v4**

```tsx
strapi.fetch(url, {
  method: 'POST',
  body,
  headers,
  timeout: 1000,
}); // accepts the type RequestInit from node-fetch
```

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

```tsx
strapi.fetch(url, {
  method: 'POST',
  body,
  headers,
  signal: AbortSignal.timeout(1000)
}); // accepts the type RequestInit native to Node
```

</SideBySideColumn>
</SideBySideContainer>


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/get-where-removed.md 

 ---
title: The getWhere() method for permission provider instances has been removed
description: In Strapi 5, the getWhere() for permission provider instances has been removed, and users should use provider.values().filter() to replace it.
sidebar_label: getWhere removed from permission provider
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - providers
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# The `getWhere()` method for permission provider instances has been removed

In Strapi 5, the `getWhere()` method for permission provider instances has been removed, and users should first get the provider values, then filter them.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

**In Strapi v4**

Provider instances (action provider, condition provider, etc‚Ä¶) are built using a provider factory.

Those providers have a `getWhere` method allowing you to query provider‚Äôs items that match certain conditions and return them.

The query was an object where keys and values were matched with the provider entries:

```js
const values = provider.getWhere({ foo: 42, bar: 'baz' });
```

<br/>

**In Strapi 5**

You need to adopt a more conventional approach by first getting the provider values, then filtering them using a custom predicate:

```js
const values = provider.values().filter(value => value.foo === 42 && value.bar === 'baz');
```

## Migration

<br/>

### Manual procedure

Users need to manually update their code if using the `getWhere()` method, using the following example as a guide:

**In Strapi v4**

```tsx
const values = provider.getWhere({ foo: 42, bar: 'baz' });
```

<br/>

**In Strapi 5**

```tsx
const values = provider.values().filter(
  value => value.foo === 42 && value.bar === 'baz'
);
```


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/graphql-api-updated.md 

 ---
title: The GraphQL API has been updated
description: In Strapi 5, the GraphQL API has been updated. It handles the new, flattened response format, and can also now accept Relay-style queries.
sidebar_label: GraphQL API updated
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - content API
 - GraphQL
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# The GraphQL API has been updated

In Strapi 5, the GraphQL API has been updated. It handles the new, flattened response format (see [related breaking change](/cms/migration/v4-to-v5/breaking-changes/new-response-format.md)), and can also now accept <ExternalLink to="https://www.apollographql.com/docs/technotes/TN0029-relay-style-connections/" text="Relay-style"/> queries.

<Intro />
<BreakingChangeIdCard plugins />

## List of changes

| Topic                        |  Description of the changes |
|------------------------------|-----------------------------------------------------------------------------------------------------|
| File upload support          | <ul><li>Removed `uploadFile` `uploadFiles` mutations</li><li>Removed `updateFileInfo` mutation in favor of using the `updateUploadFile` mutation</li><li>Removed `removeFile` mutation in favor of using the `deleteUploadFile` mutation</li><li>Removed `folder` queries & mutations</li><li>Removed `createUploadFile` mutation</li></ul> |
| Internationalization support | Removed the `createXXLocalization` mutations in favor of being able to update any locale from the main `updateXXX` mutation |
| Draft & Publish support      | Removed `publicationState` in favor of `status` to align with the new Draft & Publish behavior |
| Schema changes               | <ul><li>Simplified the basic queries with no `meta`/`pagination`</li><li>Introduced `Connection` to add pagination</li></ul> |

For an extensive description of the new Strapi 5 GraphQL API, please refer to the [GraphQL API](/cms/api/graphql) reference documentation.

## Migration

To gradually convert to the new GraphQL API format, follow these steps:

1. Enable v4 compatibility mode with the `v4ComptabilityMode` flag in the configuration of the GraphQL plugin (see [plugins configuration](/cms/plugins/graphql#code-based-configuration)):

    ```graphql
    {
      restaurants {
        data {
          id
          attributes {
            title
            image {
              data {
                id
                attributes {
                  url
                }
              }
            }
            images {
              data {
                id
                attributes {
                  url
                }
              }
            }
            xToOneRelation {
              data {
                id
                attributes {
                
                }
            }
            xToManyRelation {
              data {
                id
                attributes {
                  field
                }
              }
            }
          }
        }
        meta {
          pagination {
            page
            pageSize
          }
        }
      }	
    }
    ```

2. Use `documentId` instead of `id` for contentType queries & mutations:

  ```graphql
  {
    restaurants {
      data {
        documentId
        attributes {
          title
          image {
            data {
              documentId
              attributes {
                url
              }
            }
          }
          images {
            data {
              documentId
              attributes {
                url
              }
            }
          }
          xToOneRelation {
            data {
              documentId
              attributes {
              
              }
          }
          xToManyRelation {
            data {
              documentId
              attributes {
                field
              }
            }
          }
        }
      }
      meta {
        pagination {
          page
          pageSize
        }
      }
    }
  }
  ```

  ```graphql
  {
    mutation {
      updateRestaurant(
        documentId: "some-doc-id",
        data: { title: "My great restaurant" }
      ) {
        data {
          documentId
          attributes {
            title
            image {
              data {
                documentId
                attributes {
                  url
                }
              }
            }
          }
        }
      }
    }
  }
  ```

3. Move to `_connection` without changing response format (only applies to queries):

  ```graphql
  {
    # collection fields can be renamed to _connection to get a v4 compat response
    restaurants_connection {
      data {
        id
        attributes {
          title
          image {
            data {
              id
              attributes {
                url
              }
            }
          }
          # collection fields can be renamed to _connection to get a v4 compat response
          images_connection {
            data {
              id
              attributes {
                url
              }
            }
          }
          xToOneRelation {
            data {
              id
              attributes {
                field
              }
            }
          }
          # collection fields can be renamed to _connection to get a v4 compat response
          xToManyRelation_connection {
            data {
              id
              attributes {
                field
              }
            }
          }
        }
      }
      meta {
        pagination {
          page
          pageSize
        }
      }
    }
  }
  ```

4. Remove attributes (applies to queries & mutation responses):

  ```graphql
  {
    # collection fields can be renamed to _connection to get a v4 compat response
    restaurants_connection {
      data {
        id
        title
        image {
          data {
            id
            url
          }
        }
        # collection fields can be renamed to _connection to get a v4 compat response
        images_connection {
          data {
            id
            url
          }
        }
        xToOneRelation {
          data {
            id
            field
          }
        }
        # collection fields can be renamed to _connection to get a v4 compat response
        xToManyRelation_connection {
          data {
            id
            field
          }
        }
      }
      meta {
        pagination {
          page
          pageSize
        }
      }
    }
  }
  ```

5. Use new naming or the simpler queries:

  ```graphql
  {
    # Rename data to nodes & meta.pagination to pageInfo
    restaurants_connection {
      nodes {
        id
        title
        # can remove data in single Images 
        image {
          id
          url
        }
        # collection fields can be renamed to _connection to get a v4 compat response
        images_connection {
          nodes {
            id
            url
          }
        }
        # can remove data in xToOne 
        xToOneRelation {
          id
          field
        }
        # collection fields can be renamed to _connection to get a v4 compat response
        xToManyRelation_connection {
          nodes {
            id
            field
          }
        }
      }
      pageInfo {
        page
        pageSize
      }
    }
  }
  ```

  ```graphql
  {
    # remove _connection & data if you don't need pagination att all
    restaurants {
      id
      title
      image {
        id
        url
      }
      # remove _connection & data
      images {
        id
        url	
      }
      xToOneRelation {
        id
        field
      }
      # remove _connection & data
      xToManyRelation {
        id
        field
      }
    }
  }
  ```


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/helper-plugin-deprecated.md 

 ---
title: helper-plugin removed
description: In Strapi 5, the `helper-plugin` is removed. A whole migration reference is available for plugin developers, and codemods will automatically handle some changes.
sidebar_label: helper-plugin removed
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - plugins development
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# `helper-plugin` deprecated

In Strapi 5, the `helper-plugin` is removed. A whole migration reference is available for plugin developers, and codemods will automatically handle some changes.

 <Intro />

<BreakingChangeIdCard
  plugins
  codemodPartly
  codemodName="deprecate-helper-plugin"
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/deprecate-helper-plugin.code.ts"
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The `helper-plugin` could be used for Strapi plugins development.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The `helper-plugin` is deprecated.

</SideBySideColumn>

</SideBySideContainer>

## Migration

Codemods handles some but not all of the changes. The following changes are handled:

| Action                                      | Now handled in Strapi 5 by‚Ä¶                    |
|---------------------------------------------|-------------------------------|
| Change `AnErrorOccurred` import             | @strapi/strapi/admin           |
| Replace `AnErrorOccurred` with `Page.Error` | @strapi/strapi/admin           |
| Change `ConfirmDialog` import               | @strapi/strapi/admin           |
| Change `getFetchClient` import              | @strapi/strapi/admin           |
| Change `LoadingIndicatorPage` import        | @strapi/strapi/admin           |
| Replace `LoadingIndicatorPage` with `Page.Loading` | @strapi/strapi/admin     |
| Change `NoPermissions` import               | @strapi/strapi/admin           |
| Replace `NoPermissions` with `Page.NoPermissions` | @strapi/strapi/admin    |
| Change `translatedErrors` import            | @strapi/strapi/admin           |
| Change `useFetchClient` import              | @strapi/strapi/admin           |
| Change `useQueryParams` import              | @strapi/strapi/admin           |
| Change `SearchURLQuery` import              | @strapi/strapi/admin           |
| Change `DateTimePicker` import              | @strapi/design-system          |
| Change `Status` import                      | @strapi/design-system          |
| Change `useCallbackRef` import              | @strapi/design-system          |
| Change `useCollator` import                 | @strapi/design-system          |
| Change `useFilter` import                   | @strapi/design-system          |

Users should refer to additional information found in the extensive [migration guide](/cms/migration/v4-to-v5/additional-resources/helper-plugin) to ensure a smooth migration.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/i18n-content-manager-locale.md 

 ---
title: Internationalization (i18n)  is now part of the strapi core
description: Internationalization (i18n) is now part of the Strapi core and no longer a plugin, and this impacts how the locale parameter is sent and accessed.
sidebar_label: i18n part of strapi core
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - Internationalization (i18n)
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

Internationalization (i18n) is now part of the Strapi core and no longer a plugin, and this impacts how some parameters are sent and accessed. This also means you should not use or depend on the old `@strapi/plugin-i18n` package in your project, it is now natively included.

 <Intro />

<BreakingChangeIdCard
  plugins
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/dependency-remove-strapi-plugin-i18n.json.ts"
  codemodName="dependency-remove-strapi-plugin-i18n"
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Content Manager sends the following parameter when accessing a locale: `plugins[i18n][locale]`.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The parameter sent to the Content Manager is now just `locale`.

</SideBySideColumn>

</SideBySideContainer>


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/inject-content-manager-component.md 

 ---
title: injectContentManagerComponent() removed
description: In Strapi 5, the Content Manager is a plugin, which affects the injectContentManagerComponent() method, replaced by getPlugin('content-manager').injectComponent().
sidebar_label: injectContentManagerComponent() removed
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - content manager
 - admin panel API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# `injectContentManagerComponent()` removed

In Strapi 5, the `injectContentManagerComponent` method is removed because the Content Manager is now a plugin. The [Admin Panel API](/cms/plugins-development/admin-panel-api#injecting-components) method is replaced by `getPlugin('content-manager').injectComponent()`.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

**In Strapi v4**

A component is injected into the Content Manager as follows:

```tsx
app.injectContentManagerComponent('editView', 'right-links', {
    name: 'PreviewButton',
    Component: () => (
      <Button onClick={() => window.alert('Not here, The preview is.')}>Preview</Button>
    ),
  });
```

**In Strapi 5**

A component is injected into the Content Manager as follows:

```tsx
app.getPlugin('content-manager').injectComponent('editView', 'right-links', {
    name: 'PreviewButton',
    Component: () => (
      <Button onClick={() => window.alert('Not here, The preview is.')}>Preview</Button>
    ),
  });
```

### Migration steps

Change your plugin `index.ts` file from:

  ```js
  app.injectContentManagerComponent()
  ```

to the following:

  ```tsx
  app.getPlugin('content-manager').injectComponent()
  ```


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/is-supported-image-removed.md 

 ---
title: The isSupportedImage method is removed in Strapi 5
description: The `isSupportedImage` method is removed in Strapi 5. Users should use `isImage` or `isOptimizableImage` instead.
sidebar_label: isSupportedImage removed
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - upload plugin
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# The `isSupportedImage` method is removed

The `isSupportedImage` method has been issuing a deprecation warning ever since v4, and is finally being removed in Strapi 5.

 <Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The `isSupportedImage` method is supported, but deprecated.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The `isSupportedImage` method is removed.

Developers must use either `isImage` to check if a file is an image, or `isOptimizableImage` to check if the file is an image that can be optimized. 
</SideBySideColumn>

</SideBySideContainer>

## Manual migration

Replace occurences of the `isSupportedImage` method in your code by the appropriate method, `isImage` or `isOptimizableImage`, depending on your needs. Note that the behavior in Strapi v4 was equivalent to `isOptimizableImage`.



 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/koa-body-v6.md 

 ---
title: Strapi 5 uses koa-body v6
description: Strapi 5 uses koa-body v6, which updates node formidable to v2.
sidebar_label: koa-body v6 and formidable v2
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - body middleware
 - dependencies
 - ctx
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Strapi 5 uses `koa-body` v6

Strapi 5 uses <ExternalLink to="https://github.com/koajs/koa-body" text="`koa-body`"/> v6, which updates `formidable` to v2. This means uploaded files have new properties.

 <Intro />

<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

A user might create custom endpoints and handle files with the `ctx` object:

  ```js
  const endpoint = (ctx) => {
      ctx.request.files.fileName.path
      ctx.request.files.fileName.name
      ctx.request.files.fileName.type
  }
  ```

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

A user might still create custom endpoints and handle files with the `ctx` object, but the property names are different:

  ```js
  const endpoint = (ctx) => {
    ctx.request.files.fileName.filepath
    ctx.request.files.fileName.originalFilename
    ctx.request.files.fileName.mimetype
  }
  ```

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

- The official <ExternalLink to="https://github.com/koajs/koa-body/blob/master/CHANGELOG.md" text="`koa-body`"/> documentation lists the changes.
- The official <ExternalLink to="https://github.com/node-formidable/formidable/blob/master/CHANGELOG.md#200" text="`formidable`"/> documentation lists the changes.

### Manual procedure

Users need to manually update the properties used in their custom code, referring to the official <ExternalLink to="https://github.com/koajs/koa-body" text="`koa-body`"/> and <ExternalLink to="https://github.com/node-formidable/formidable" text="`formidable`"/> documentations.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/license-only.md 

 ---
title: lockIcon replaced by licenseOnly
description: In Strapi 5, the lockIcon property is replaced by licenseOnly, which affects how the addMenuLink(), addSettingsLink(), and addSettingsLinks() methods from the Admin Panel API work.
sidebar_label: lockIcon replaced by licenseOnly
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - plugins development
 - admin panel API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# `lockIcon` property replaced by `licenseOnly`

Strapi 5 adds a new `licenseOnly` boolean property to pass in the `addMenuLink`, in the `addSettingsLink` and in the `addSettingsLinks` actions. Adding this property shows a lightning ‚ö°Ô∏è icon near the link, and indicates paid features.

A similar result can be achieved in Strapi v4 by adding the `lockIcon` property.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

* The `lockIcon` property is used in the `addMenuLink()`, `addSettingsLink`, and `addSettingsLinks()` methods of the Admin Panel API.
* The property adds a lock icon.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

* The `licenseOnly` property is used in the `addMenuLink()`, `addSettingsLink`, and `addSettingsLinks()` methods of the Admin Panel API.
* The property adds a lightning icon ‚ö°Ô∏è.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<br/>

### Notes

* Passing `licenseOnly: true` will add a lightning icon ‚ö°Ô∏è, so that:

  - a menu icon will look like the following: ![](/img/assets/plugins/lightning-icon-menu.png)

  - a settings menu item will look like the following: ![](/img/assets/plugins/lightning-icon-settings.png)

* Additional information and examples on how to use the `licenseOnly` property can be found in the [`addMenuLink()`](/cms/plugins-development/admin-panel-api#menu-api), [`addSettingsLink()`](/cms/plugins-development/admin-panel-api#addsettingslink), and [`addSettingsLinks()`](/cms/plugins-development/admin-panel-api#addsettingslinks) methods sections of the Admin Panel API documentation.

### Manual migration

If your custom Strapi v4 code uses the `lockIcon` property to highlight a paid feature that requires a <GrowthBadge /> or an <EnterpriseBadge /> plan, search and replace `lockIcon: true` by `licenseOnly: true`.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service.md 

 ---
title: Database lifecycle hooks are triggered differently with the Document Service API methods
description: In Strapi 5, database lifecycle hooks are triggered differently with the various Document Service API methods.
sidebar_label: Lifecycle hooks
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - Document Service API
 - lifecycle hooks
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Database lifecycle hooks are triggered differently with the Document Service API methods

In Strapi 5, database lifecycle hooks are triggered differently with the various [Document Service API](/cms/api/document-service) methods, mainly due to the new way the [Draft & Publish](/cms/features/draft-and-publish) feature works.

The majority of use cases should only use the Document Service. The Document Service API handles Draft & Publish, i18n, and any underlying strapi logic.

However, the Document Service API might not suit all your use cases; the database layer is therefore exposed allowing you to do anything on the database without any restriction. Users would then need to resort to the database lifecycle hooks as a system to extend the database behaviour.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

In Strapi v4, lifecycle hooks work as documented in the <ExternalLink to="https://docs-v4.strapi.io/cms/backend-customization/models#lifecycle-hooks" text="Strapi v4 documentation"/>.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Lifecycle hooks work the same way as in Strapi v4 but are triggered differently, based on which Document Service API methods are triggered. A complete reference is available (see [notes](#notes)).

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

#### Database lifecycle hooks triggered by the Document Service API methods {#table}
Depending on the [Document Service API methods](/cms/api/document-service) called, the following database lifecycle hooks are triggered:

| Document Service API method       | Triggered database lifecycle hook(s) |
|-----------------------------------|--------------------------------------|
| `findOne()`                       | before(after) findOne                |
| `findFirst()`                     | before(after) findOne                |
| `findMany()`                      | before(after) findMany               |
| `create()`                        | before(after) Create                 |
| `create({ status: 'published' })` | <ul><li>before(after) CreateÔ∏è<br/>Triggered twice as it creates both the draft and published versions</li><li>before(after) Delete<ul><li>Deletes previous draft versions of a document</li><li>Can be triggered multiple times if deleting multiple locales (one per each locale)</li></ul></li></ul> |
| `update()`                        | <ul><li>before(after) Create<br/>when creating a new locale on a document</li><li>before(after) Update<br/>when updating an existing version of a document</li></ul> |
| `update({ status: 'published' })` | <ul><li>before(after) Create<br/>Can be triggered multiple times if deleting multiple locales (one per each locale)</li><li>before(after) Update<br/>when updating an existing version of a document</li><li>before(after) Delete<ul><li>Deletes previous published versions of a document</li><li>Can be triggered multiple times if deleting multiple locales (one per each locale)</li></ul></li></ul> |
| `delete()`                        | before(after) Delete<br/>Can be triggered multiple times if deleting multiple locales (one per each locale) |
| `publish()`                       | <ul><li>before(after) Create<br/>Can be triggered multiple times if deleting multiple locales (one per each locale)</li><li>before(after) Delete<ul><li>Deletes previous published versions of a document</li><li>Can be triggered multiple times if deleting multiple locales (one per each locale)</li></ul></li></ul> |
| `unpublish()`                     | before(after) Delete<ul><li>Deletes all published versions of a document</li><li>Can be triggered multiple times if deleting multiple locales (one per each locale)</li></ul> |
| `discardDraft()`                  | <ul><li>before(after) Create<ul><li>Creates new draft versions</li><li>Can be triggered multiple times if deleting multiple locales (one per each locale)</li></ul></li><li>before(after) Delete<ul><li>Deletes previous draft versions of a document</li><li>Can be triggered multiple times if deleting multiple locales (one per each locale)</li></ul></li></ul> |
| `count()`                         | before(after) Count |

:::note
Bulk actions lifecycles (`createMany`, `updateMany`, `deleteMany`) will never be triggered by a Document Service API method.
:::

### Manual procedure

Users might need to adapt their custom code to how lifecycle hooks are triggered by Document Service API methods in Strapi 5.

:::strapi Additional resources
You might find additional information about lifecycle hooks in <ExternalLink to="https://strapi.io/blog/when-to-use-lifecycle-hooks-in-strapi" text="this blog article"/>.
:::

 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/mailgun-provider-variables.md 

 ---
title: Some Mailgun provider legacy variables are not supported
description: In Strapi 5, some variables have been renamed for the Mailgun provider options, dropping support for some legacy variables that were deprecated in Strapi v4.
sidebar_label: Mailgun provider options
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - providers
 - email
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Some Mailgun provider legacy variables are not supported

In Strapi 5, the support is dropped for some legacy variables deprecated in Strapi v4 for the Mailgun provider.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Mailgun provider options can use the legacy `apiKey` and `host` variables.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Mailgun provider options can not use the legacy `apiKey` and `host` variables and must use the `key` and `url` variables instead.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

A Mailgun [provider](/cms/features/email#providers) configuration in the [plugins configuration file](/cms/configurations/plugins) could look like the following example in Strapi 5:

```jsx title="/config/plugins.js"
module.exports = ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'mailgun',
      providerOptions: {
        key: env('MAILGUN_API_KEY'), // Required
        domain: env('MAILGUN_DOMAIN'), // Required
        url: env('MAILGUN_URL', 'https://api.mailgun.net'), //Optional. If domain region is Europe use 'https://api.eu.mailgun.net'
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
  // ...
});
```

### Manual procedure

If you were using the legacy parameters:

1. Rename `apiKey` to `key`.
2. Rename `host` to `url` and add `https://` in front of it so it is a proper URL.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/model-config-path-uses-uid.md 

 ---
title: Model config path uses uid instead of dot notation
description: Modules like `api::myapi` and `plugin::upload` should no longer be accessed in the Strapi config using `api.myapi` and `plugin.upload`, but instead using `api::myapi` and `plugin::upload`.
sidebar_label: Model config path uses uid
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - configuration
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Model config path uses uid instead of dot notation

In Strapi 5, to retrieve config values you will need to use `config.get('plugin::upload.myconfigval')` or `config.get('api::myapi.myconfigval')`

<Intro />

<BreakingChangeIdCard
  plugins
  codemodPartly
  codemodName="use-uid-for-config-namespace"
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/use-uid-for-config-namespace.code.ts"
/>

## Breaking change description

**In Strapi v4**

Models are added to the configuration using `.` notation as follows:

```jsx
strapi.config.get('plugin.upload.somesetting');
if ( strapi.config.has('plugin.upload.somesetting') ) {
  strapi.config.set('plugin.upload.somesetting', false);
}
```

**In Strapi 5**

Models are added to the configuration using `::` replacing `.` notation as follows:
```jsx
strapi.config.get('plugin::upload.somesetting');
if ( strapi.config.has('plugin::upload.somesetting') ) {
  strapi.config.set('plugin::upload.somesetting', false);
}
```

## Migration

<MigrationIntro />

### Notes

- If an API has a configuration, it should also be accessed using `strapi.config.get(‚Äôapi::myapi.myconfigval‚Äô)`.

- The 'plugin' namespace has temporary support with a deprecation warning. This means that referencing `plugin.upload.somesetting` will emit a warning in the server log and check `plugin::upload.somesetting` instead.

- A codemod has been created to assist in refactoring the strings in user code, replacing `plugin.` or `api.` with `plugin::` and `api::`.

### Manual procedure

A codemod will automatically handle the change in most cases.

In cases were the codemod does not automatically handle the change, users will need to manually replace all their strings to target the new config paths.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/mysql5-unsupported.md 

 ---
title: MySQL v5 unsupported
description: MySQL v5 is not supported in Strapi v5 anymore.
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - database
 - MySQL
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# MySQL v5 is not supported in Strapi v5 anymore

In Strapi 5, MySQL version 5 is not supported.
<Intro />

<BreakingChangeIdCard />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

MySQL v5 is supported.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

MySQL v5 is not supported anymore.<br />
MySQL v8 is the minimum required version.

</SideBySideColumn>

</SideBySideContainer>

<br />

## Migration

<MigrationIntro />

### Notes

* The [CLI installation guide](/cms/installation/cli) lists the databases supported by Strapi 5.
* Please also consider that only the `mysql2` package can be used with Strapi 5 for MySQL databases (see the [related breaking change entry](/cms/migration/v4-to-v5/breaking-changes/only-mysql2-package-for-mysql)).

### Migration procedure

No manual migration is required for the codebase of your Strapi application.
Connection information will probably stay the same as in Strapi v4.

However, to use Strapi v5, you must upgrade your MySQL database to version 8.0 (see additional information in the official <ExternalLink to="https://dev.mysql.com/doc/relnotes/mysql/8.0/en/" text="MySQL documentation"/>).


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/new-response-format.md 

 ---
title: Strapi 5 has a new, flattened response format for API calls
description: In Strapi 5, the response format has been simplified and flattened, and attributes of requested content are no longer wrapped in an attributes object.
sidebar_label: New response format
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - Content API
 - REST API
 - GraphQL API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Strapi 5 has a new, flattened response format for REST API calls

In Strapi 5, the REST API response format has been simplified and flattened. You can set the `Strapi-Response-Format: v4` header to use the old v4 format while you convert your code to fully take into account the new Strapi 5 response format.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The Content API returns all the attributes of requested content wrapped inside an `attributes` parameter:

```json
{
  "data": {
    // system fields
    "id": 14,
    "attributes": {
      // user fields
      "title": "Article A"
      "relation": {
        "data": {
          "id": "clkgylw7d000108lc4rw1bb6s"
          "name": "Category A"
        }
      }
    }
  }
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 10
    }
  }
}
```

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The Content API returns attributes of requested content without wrapping them in an attributes object, and a `documentId` is used instead of an `id`:

```json {4}
{
  "data": {
    // system fields
    "documentId": "clkgylmcc000008lcdd868feh",
    "locale": "en",
    // user fields
    "title": "Article A"
    "relation": {
      // system fields
      "documentId": "clkgylw7d000108lc4rw1bb6s"
      // user fields
      "name": "Category A"
    }
  }
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 10
    }
  }
}
```

</SideBySideColumn>

</SideBySideContainer>

## Migration

<br/>

### Notes

To use the Strapi v4 response format, set the following header: `Strapi-Response-Format: v4`. 

### Manual procedure

Ensure your API calls take into account the new response format, or set the optional header to keep on using the Strapi v4 response format (see [notes](#notes)).


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/no-find-page-in-document-service.md 

 ---
title: No findPage() in Document Service API
description: In Strapi 5, the Entity Service API is deprecated, and for the findPage() method you should use the Document Service API's findMany() method instead.
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - Document Service API
 - Content API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# No `findPage()` in Document Service API

In Strapi 5, the [Document Service API](/cms/api/document-service) replaces the Entity Service API. There is no `findPage()` method available in the Document Service API and users should use the `findMany()` method instead.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

In Strapi v4 you could use the `findPage()` method from the Entity Service API, for instance as follows: 

```jsx
strapi.entityService.findPage('api::article.article', {
  start: 10,
  limit: 15,
});
```

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

In Strapi 5 the Entity Service API is deprecated and you should use the Document Service API instead. The [`findMany()` method](/cms/api/document-service/sort-pagination#pagination) can be used as follows:

```jsx
strapi.documents("api::article.article").findMany({
  limit: 10,
  start: 0,
});
```

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Manual migration

In your custom code, replace any occurences of the Entity Service API's `findPage()` method by the `findMany()` method from the Document Service API.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/no-locale-all.md 

 ---
title: locale=all can not be used to query all locales
description: In Strapi 5, it's no longer possible to get all localized versions with the '?locale=all' parameter.
sidebar_label: No locale=all support
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - locale
 - Internationalization (i18n)
 - content API
 - REST API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# `locale=all` can not be used to get all entries in all locales

In Strapi 5, it's no longer possible to get all localized versions of a content type with the `locale=all` parameter.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Users could get all of the locales of a single type by passing the `locale=all` parameter to Content API calls. This is not possible on collection types.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Getting documents (collection types or single types) in all locales at the same time is not possible anymore. A specific locale value must be passed.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

Additional information on what is possible to do with `locale` in Strapi 5 is available in the [REST API](/cms/api/rest/locale), [GraphQL API](/cms/api/graphql#locale), and [Document Service API](/cms/api/document-service/locale) reference documentations.

### Manual procedure

Users having custom code sending queries with the `locale=all` parameter should manually update their code to list all available locales then request data for each of these locales one by one.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/no-shared-population-strategy-components-dynamic-zones.md 

 ---
title: No shared population strategy for components & dynamic zones
description: In Strapi 5, the shared population strategy is not supported anymore, so components and dynamic zones must be explicitly populated using `on` fragments.
sidebar_label: No shared population strategy
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - content API
 - population
 - REST API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Components and dynamic zones should be populated using the detailed population strategy (`on` fragments)

In Strapi 5, components and dynamic zones should be populated using the detailed population strategy, with `on` fragments. The shared population strategy possible in Strapi v4 is no longer supported.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

You could use either <ExternalLink to="https://docs-v4.strapi.io/cms/api/rest/guides/understanding-populate#populate-dynamic-zones" text="the shared or the detailed population strategy"/> to populate components and dynamic zones in a REST API call.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

You must use `on` fragments to explicitly detail which components and dynamic zones to [populate](/cms/api/rest/populate-select#population).

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

Additional information on population is available in the [REST API documentation](/cms/api/rest/populate-select#population).

### Manual procedure

Users should ensure that components and dynamic zones are explicitly populated using `on` fragments, such as in the following example syntax and URL:

- example generic syntax:
  
    `populate[dynamic-zone-name][on][component-category.component-name]=true`

- example URL:

  `/api/articles?populate[dynamic-zone-name][on][component-category.component-name]=true`


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/no-upload-at-entry-creation.md 

 ---
title: Upload a file at entry creation no longer supported 
description: In Strapi 5, it is not possible to upload a file while creating an entry, so users must upload the file first, and then create the entry with the created file id.
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - upload
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Upload a file at entry creation is no longer supported

In Strapi 5, it is not possible to upload a file while creating an entry, so this should be done in 2 steps.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

It was possible to upload a file while creating an entry, as <ExternalLink to="https://docs-v4.strapi.io/cms/plugins/upload#upload-files-at-entry-creation" text="documented for Strapi v4"/>.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

You must upload the file first, and then create the entry with the created file id.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Migration procedure

Users must update their custom code, first sending a [POST call to the Upload API at `/api/upload/`](/cms/api/rest/upload), then creating an entry with a [POST call to the REST API at `/api`](/cms/api/rest#create) with the created file id.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/only-better-sqlite3-for-sqlite.md 

 ---
title: Only the `better-sqlite3` package is supported for the SQLite client
description: In Strapi 5, users can only use the `better-sqlite3` package for SQLite databases, and the `client` value for it must be set to `sqlite`.
sidebar_label: Only better-sqlite3 for sqlite 
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - database
 - PostgreSQL
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Only the `better-sqlite3` package is supported for the SQLite client

Strapi 5 can only use the `better-sqlite3` package for SQLite databases, and the `client` value for it must be set to `sqlite`.

<Intro />

<BreakingChangeIdCard
  codemodName="sqlite3-to-better-sqlite3"
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/sqlite3-to-better-sqlite3.json.ts"
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The database configuration `client` option for SQLite databases accepts several values such as `sqlite3`, `vscode/sqlite3`, `sqlite-legacy`, and `better-sqlite3`.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The database configuration `client` option for SQLite database only accepts `sqlite`.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

* Strapi 5 uses the `better-sqlite3` package for SQLite databases under the hood and rewrites the `sqlite` option as `better-sqlite3` for Knex.
* Additional information about database clients and configuration can be found in the [database configuration](/cms/configurations/database) documentation.

### Manual procedure

No manual migration should be required as codemods from the [upgrade tool](/cms/upgrade-tool) will handle this change.

In case you want to manually migrate, run the following commands in the terminal:

1. Run `yarn remove sqlite3` to remove the sqlite 3 package.
2. Run `yarn add better-sqlite3` to install the `better-sqlite3` package.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/only-mysql2-package-for-mysql.md 

 ---
title: Only the mysql2 package is supported for the MySQL client
description: In Strapi 5, only the mysql2 package is supported for MySQL databases.
sidebar_label: Only mysql2 for MySQL 
displayed_sidebar: cmsSidebar
unlisted: true
tags:
 - breaking changes
 - database
 - MySQL
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Only the `mysql2` package is supported for the MySQL client

Strapi 5 can only use the `mysql2` package for MySQL databases, and the `client` value for it must be set to `mysql`.

<Intro />
<BreakingChangeIdCard codemod />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The database configuration `client` option for MySQL databases accepts several values such as `mysql` and `mysql2`.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The database configuration `client` option for MySQL database only accepts `mysql`.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

* Strapi 5 uses the `mysql2` package for SQLite databases under the hood and rewrites the `mysql` option as `mysql2` for Knex.
* Additional information about database clients and configuration can be found in the [database configuration](/cms/configurations/database) documentation.
* Please also consider that MySQL v8 is the minimum required version for Strapi 5 (see the [related breaking change entry](/cms/migration/v4-to-v5/breaking-changes/mysql5-unsupported)).

### Manual procedure

No manual migration should be required as codemods from the [upgrade tool](/cms/upgrade-tool) will handle this change.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/publication-state-removed.md 

 ---
title: publicationState is removed and replaced by status
description: In Strapi 5, 'publicationState' can no longer be used in Content API calls. The new status parameter can be used and accepts 2 different values, draft and published.
sidebar_label: status instead of publicationState
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - Content API
 - GraphQL API
 - Document Service API
 - Draft & Publish
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# `publicationState` is removed and replaced by `status`

In Strapi 5, the [Draft & Publish feature](/cms/features/draft-and-publish) has been reworked, and the Content API, including REST, GraphQL, and Document Service APIs accept a new `status` parameter.

<Intro />

<BreakingChangeIdCard
  plugins
  codemodName="entity-service-document-service"
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/entity-service-document-service.code.ts"
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

`publicationState` is used and accepts the following values:

- `live` returns only published entries,
- `preview` returns both draft entries & published entries.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

`status` is used and accepts the following values:

- `draft` returns the draft version of a document,
- `published` returns the published version of a document.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

* There are no fallbacks to return by default the published version, and return the draft version if no published version is found.
* Additional information about how to use the new `status` parameter can be found in the [REST API](/cms/api/rest/status), [GraphQL API](/cms/api/graphql#status), and [Document Service API](/cms/api/document-service/status) documentation.

### Migration procedure

* API calls initiated from the front end (REST API, GraphQL API) that used `publicationState` need to be manually updated.
* If `publicationState` is used in your custom back-end code with the Entity Service API in Strapi v4, a codemod will automatically handle the change for Strapi 5 (see [Entity Service to Document Service migration reference](/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service) for additional details).


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/publishedat-always-set-when-dandp-disabled.md 

 ---
title: Content types with Draft & Publish disabled always have the publishedAt value set to a date
description: In Strapi 5, content-types with Draft & Publish disabled always have the publishedAt value set to a date.
sidebar_label: publishedAt always exists
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - draft & publish
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Content types with Draft & Publish disabled always have the publishedAt value set to a date

In Strapi 5, content-types with Draft & Publish disabled always have the publishedAt value set to a date.
<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

In Strapi v4, a content-type with Draft & Publish disabled does not even have a `publishedAt` attribute.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

In Strapi 5, the `publishedAt` attribute always exist even if Draft & Publish is disabled for a content-types.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

* If Draft & Publish is enabled, `publishedAt` is:
  * `null` for drafts versions of documents
  * and set to the publication date for published versions of documents.
* If Draft & Publish is disabled, `publishedAt` is set to the latest creation or edition date of the document.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/react-router-dom-6.md 

 ---
title: Strapi 5 uses React Router DOM 6
description: Strapi 5 uses react-router-dom v6. This impacts the links added to Global Settings or to the Menu using the Admin Panel API.
sidebar_label: React Router DOM 6
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - react-router
 - dependencies
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Strapi users `react-router-dom` v6

Strapi 5 uses <ExternalLink to="https://www.npmjs.com/package/react-router-dom" text="`react-router-dom`"/> v6. This impacts the links added to [settings](/cms/plugins-development/admin-panel-api#settings-api) or to the [menu](/cms/plugins-development/admin-panel-api#menu-api) using the Admin Panel API.

 <Intro />

<BreakingChangeIdCard
  plugins
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/dependency-upgrade-react-router-dom.json.ts"
  codemodName="dependency-upgrade-react-router-dom"
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

- Strapi v4 uses react-router-dom v5.
- When adding settings or menu links, the `to` property is an absolute path.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

- Strapi v5 uses react-router-dom v6.
- When adding settings or menu links, the `to` property should now be a **relative path**.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

- The official React Router documentation explains <ExternalLink to="https://reactrouter.com/en/main/upgrading/v5" text="how to upgrade from v5"/>.
- Absolute paths for menu or settings links are still supported but should yield a warning.

### Manual procedure

This breaking change should be handled by a codemod (see the <ExternalLink to="https://github.com/strapi/strapi/tree/develop/packages/utils/upgrade/resources/codemods/5.0.0" text="full list of 5.0.0 codemods"/>).
Ensure that links added to [settings](/cms/plugins-development/admin-panel-api#settings-api) or to the [menu](/cms/plugins-development/admin-panel-api#menu-api) links using the Admin Panel API use relative paths.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/redux-content-manager-app-state.md 

 ---
title: The ContentManagerAppState redux is modified
description: In Strapi 5, the redux store for the Content Manager has been changed and some redux actions were removed.
sidebar_label: ContentManagerAppState redux modified
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - Content Manager
 - redux
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# The ContentManagerAppState redux is modified

In Strapi 5, the redux store for the Content Manager has been changed and some redux actions were removed. Notably, the `useContentManagerInitData` redux state for the Content Manager has been refactored to remove `ModelsContext`. Users might be relying on the original structure in a middleware or subscriber; doing so this will break their application.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The redux store can fire the following actions:

- `'ContentManager/App/RESET_INIT_DATA‚Äô`
- `'ContentManager/App/GET_INIT_DATA‚Äô`
- `'ContentManager/App/SET_INIT_DATA‚Äô`

The payload nests attributes inside the `data` object. For instance, for the `SET_INIT_DATA` action, the payload is of the following format:

```json
  data: {
    authorizedCollectionTypeLinks: ContentManagerAppState['collectionTypeLinks'];
    authorizedSingleTypeLinks: ContentManagerAppState['singleTypeLinks'];
    components: ContentManagerAppState['components'];
    contentTypeSchemas: ContentManagerAppState['models'];
    fieldSizes: ContentManagerAppState['fieldSizes'];
  };
```

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The redux store no longer fires the following actions:

- `'ContentManager/App/RESET_INIT_DATA‚Äô`
- `'ContentManager/App/GET_INIT_DATA‚Äô`

The payload data does not nest attributes within a `data` object anymore. For instance, for the `SET_INIT_DATA` action, the payload is of the following format:

```json
{
  authorizedCollectionTypeLinks: ContentManagerAppState['collectionTypeLinks'];
  authorizedSingleTypeLinks: ContentManagerAppState['singleTypeLinks'];
  components: ContentManagerAppState['components'];
  contentTypeSchemas: ContentManagerAppState['models'];
  fieldSizes: ContentManagerAppState['fieldSizes'];
}
```

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Manual procedure

The redux store in Strapi 5 continues to fire `'ContentManager/App/SET_INIT_DATA‚Äô`, so users should instead listen for this action in their middlewares only.

Additionally, adjustments to your custom code might need to be done based on the new payload format.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/register-allowed-fields.md 

 ---
title: The Users & Permissions plugin's register.allowedFields configuration option defaults to []
description: In Strapi 5, The Users & Permissions plugin's `register.allowedFields` configuration option defaults to [].
sidebar_label: register.allowedFields defaults to []
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - users & permissions
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# The Users & Permissions plugin's `register.allowedFields` configuration option defaults to `[]`

In Strapi 5, the Users & Permissions plugin's `register.allowedFields` configuration option defaults to `[]`.

<Intro />

<BreakingChangeIdCard
  codemodName="use-uid-for-config-namespace"
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/use-uid-for-config-namespace.code.ts"
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Any new fields added to the User content type would be accepted by the registration form by default, and Strapi would warn about each field on startup.

The users have the option to set `users-permissions.register.allowedFields` in the `config/plugins.js` file to an array of the fields they wanted to accept on their registration endpoint. For example, `[‚Äôpicture‚Äô]` to accept a picture attribute on registration. Or an empty array `[]` if they do not want to accept anything else.

However, if users did not set any value, that is, when `allowedFields` is undefined, all user fields are accepted.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

An undefined `allowedFields` is treated as an empty array, and no fields are accepted by default. Users must explicitly choose to allow extra fields on registration.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Manual procedure

A codemod should handle this migration. If not, please refer to the documentation on how to [register allowed fields for the Users & Permissions plugin](/cms/features/users-permissions#registration-configuration).


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/remove-webhook-populate-relations.md 

 ---
title: The 'webhooks.populateRelations' server configuration is removed
description: In Strapi 5, webhooks have been refactored and the `webhook.populateRelations` option will become redundant. This might affect lifecycles expecting the returned relations of create, update and delete to be populated.
sidebar_label: No webhooks.populateRelations configuration
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - webhooks
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# The `webhooks.populateRelations` server configuration is removed

In Strapi 5, webhooks have been refactored and the `webhook.populateRelations` option will become redundant. This might affect lifecycles expecting the returned relations of create, update and delete to be populated.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

When an entry is created, updated, or modified in any way, the response payload of the Content Manager backend returns the total count of relations for every relational field.

You can see the count being used at the top of the relation in the Content Manager Edit view:

![Content-Manager screenshot that shows populated relations count](/img/assets/migration/webhooks-populated-relations.png)

The actual relational values are fetched using another endpoint. This was made to enhance the performance of the Content Manager requests.

To simplify webhook consumption, you can enable the  (see [server configuration](/cms/configurations/server#available-options)). When enabled, all relations values are populated and sent to the webhook consumers, resulting in performance decrease.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Webhooks will be refactored, so the `webhooks.populateRelations` configuration is not necessary, but changing how things are populated might impact other things like database lifecycles expecting the returned relations of create, update and delete to be populated.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

Additional information will be given once the webhooks are refactored.

### Manual procedure

Relying on any input populate values on database layer is not reliable, so if necessary in your custom code base, the lifecycle should always fetch the necessary data.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/removed-support-for-some-env-options.md 

 ---
title: Some env-only configuration options are handled by the server configuration
description: In Strapi 5, some env-only configuration options are handled by the server configuration
displayed_sidebar: cmsSidebar
sidebar_label: Env options moved to server configuration
tags:
 - breaking changes
 - configuration
 - environment 
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Some `env`-only configuration options are handled by the server configuration

In Strapi 5, some configuration options that were only handled by environment variables in Strapi v4 are now handled in the [server configuration](/cms/configurations/server) file.
<Intro />
<BreakingChangeIdCard />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The following list of configurations are only available from the environment:

- `STRAPI_DISABLE_REMOTE_DATA_TRANSFER`
- `STRAPI_DISABLE_UPDATE_NOTIFICATION`
- `STRAPI_HIDE_STARTUP_MESSAGE`

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

These configuration options have been moved to the [server configuration](/cms/configurations/server) file (see table in the notes for details).

</SideBySideColumn>

</SideBySideContainer>

<br />

## Migration

<MigrationIntro />

### Notes

The following environment variable names in Strapi v4 should now be defined in the [`/config/server.js` configuration file](/cms/configurations/server):

| Environment variable name in Strapi v4 | Server configuration option in Strapi 5 |
|----------------------------------------|-----------------------------------------|
| `STRAPI_DISABLE_REMOTE_DATA_TRANSFER`  | `transfer.remote.enabled`               |
| `STRAPI_HIDE_STARTUP_MESSAGE`          | `logger.startup.enabled`                |
| `STRAPI_DISABLE_UPDATE_NOTIFICATION`   | `logger.updates.enabled`                |

### Migration steps

If you previously disabled one of the listed environment variables in your environment, update the `/config/server.js` by adding the appropriate values:

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/config/server.js"
module.exports = ({ env }) => ({
  // ‚Ä¶ other configuration options
  transfer: {
    remote: {
      enabled: false, // disable remote data transfers instead of STRAPI_DISABLE_REMOTE_DATA_TRANSFER
    },
  },
  logger: {
    updates: {
      enabled: false, // disable update notification logging instead of STRAPI_DISABLE_UPDATE_NOTIFICATION
    },
    startup: {
      enabled: false, // disable startup message instead of STRAPI_HIDE_STARTUP_MESSAGE
    },
  },
});
```

</TabItem>
<TabItem value="ts" label="TypeScript">

```js title="/config/server.ts"
export default ({ env }) => ({
  // ‚Ä¶ other configuration options
  transfer: {
    remote: {
      enabled: false, // disable remote data transfers instead of STRAPI_DISABLE_REMOTE_DATA_TRANSFER
    },
  },
  logger: {
    updates: {
      enabled: false, // disable update notification logging instead of STRAPI_DISABLE_UPDATE_NOTIFICATION
    },
    startup: {
      enabled: false, // disable startup message instead of STRAPI_HIDE_STARTUP_MESSAGE
    },
  },
});
```

</TabItem>
</Tabs>


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/server-default-log-level.md 

 ---
title: Server log level is `http`
description: The default log level of the middleware logger in Strapi 5 is 'http'.
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - configuration
 - middlewares
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Server log level is `http`

You can adjust the server log level in the configuration to control how much detail you see in your server logs. If you want to see more or less verbose logs in your server logs, this feature allows you to customize it according to your needs.

<Intro />
<BreakingChangeIdCard />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

The log level defaults to `silly`, which means that every log is shown, providing the most detailed information.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The log level defaults to `http`. This means that `silly`and `debug` level logs are hidden by default, offering a less verbose log output.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

The log level can be configured either in the `server.js` file as described in the following Manual migration section, or as described in the [middlewares configuration](/cms/configurations/middlewares#logger) documentation.

<ExternalLink to="https://www.npmjs.com/package/winston#logging-levels" text="See the list of Winston log levels"/>.

### Manual migration

To migrate to Strapi 5:

1. Open your server configuration file (`config/server`).
2. Locate the `{ logger: { config: { level: 'debug' } }` section.
3. Modify the level value to your preferred log level, such as `silly`, `debug`, `info`, `warn`, or `error`.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/server-proxy.md 

 ---
title: Server proxy configuration
description:  In Strapi 5, all proxy configuration options are now configured through the 'server.proxy' object in the '/config/server.js|ts' instead of having various option names such as 'globalProxy' and 'proxy' in Strapi v4.
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - configuration
 - server
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

#  Server proxy configurations are grouped under the `server.proxy` object

In Strapi 5, all proxy configuration options are now configured through the `server.proxy` object in `/config/server.js|ts`, whether they are for requests made within `strapi.fetch` or for the global proxy agent for the <ExternalLink to="https://koajs.com/" text="koa"/> server.

<Intro />
<BreakingChangeIdCard />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

* `server.globalProxy` is used to configure all requests through `strapi.fetch`.
* `server.proxy` is used to set the value of koa server‚Äôs `proxy` option.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

All configuration options are grouped under the `server.proxy` object.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

Additional information about how the `server.proxy` configuration works in Strapi 5 is available in the [server configuration](/cms/configurations/server) documentation.

### Manual migration

Users will need to manually update the code:

- If `server.proxy` is used, it needs to move to `server.proxy.koa`.

- If `server.globalProxy` is used, you have 2 choices:

  - move it to `server.proxy.global` and be aware that it will now work for HTTP/HTTPS requests in addition to `strapi.fetch` requests,
  - or move it to `server.proxy.fetch` to keep the exact same functionality as in Strapi v4, where only fetch was proxied.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/sort-by-id.md 

 ---
title: Sorting by id is no longer possible to sort by chronological order
description: In Strapi 5, sorting by id is no longer possible to sort by chronological order, and you should use createdAt instead.
sidebar_label: Sort chronologically with createdAt
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - content API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Sorting by `id` is no longer possible to sort by chronological order in Strapi 5

In Strapi 5, sorting by `id` to sort by chronological order is no longer possible since [documents](/cms/api/document) use an uuid.

<Intro />

<BreakingChangeIdCard
  plugins
  codemodName="entity-service-document-service"
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/entity-service-document-service.code.ts"
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

In Strapi v4, using the Entity Service API, you could do the following to sort entries by chronological order:

```js
strapi.entityService.findMany('api::article.article', {
  sort: 'id',
});
```

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

In Strapi 5, use the [Document Service API](/cms/api/document-service) to sort documents by chronological order, use the `createdAt` field:

```js
strapi.documentService.findMany('api::article.article', {
  sort: 'createdAt',
});
```

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Manual procedure

No manual procedure should be required as this will be handled by a codemod.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-container.md 

 ---
title: Strapi is a subclass of Container
description: In Strapi 5, container methods can be accessed directly from the strapi class.
sidebar_label: Strapi subclass of Container
displayed_sidebar: cmsSidebar
unlisted: true
tags:
 - breaking changes
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# `Strapi` is a subclass of `Container`

In Strapi 5, `Strapi` is a subclass of the `Container` class to make it simpler to access services and unify the service access with one method.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Container methods are accessed like follows:

```js
strapi.container.register(....)
strapi.container.get(...)
```

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Container methods are accessed like follows:

```js
strapi.add(....)
strapi.get(...)
```

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Manual procedure

Ensure you update your method calls to `container`.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-imports.md 

 ---
title: Strapi factories import have been updated
description: In Strapi 5, the way import are done, through the application init function or through factories, has been updated.
sidebar_label: Use strapiFactory in imports
displayed_sidebar: cmsSidebar
unlisted: true
tags:
 - breaking changes
 - strapiFactory
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Strapi factories import have been updated

In Strapi 5, strapi factories import have been updated.

<Intro />

<BreakingChangeIdCard
  plugins
  codemodPartly
  codemodName="strapi-public-interface"
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/strapi-public-interface.code.ts"
/>

## Breaking change description

**In Strapi v4**

Imports are done as follows:

* using the application init function:

  ```js
  import strapi from '@strapi/strapi'; 
  // or
  const strapi = require('@strapi/strapi');

  strapi();
  ```

* using the factories:
  
  ```js
  import strapiDefault from '@strapi/strapi';
  // or
  import { factories } from '@strapi/strapi';
  // or
  const { factories } = require('@strapi/strapi');
  // or
  const { createCoreService } = require('@strapi/strapi').factories;
  // or
  const strapi = require('@strapi/strapi');

  strapiDefault.factories.createCoreService(); // this is not possible anymore in v5
  strapi.factories.createCoreService();
  factories.createCoreService();
  createCoreService();
  ```

**In Strapi 5**

Imports are done as follows:

* using the application init function

  ```js
  import { createStrapi¬†} from '@strapi/strapi'; 
  const { createStrapi } = require('@strapi/strapi');
  const strapi = require('@strapi/strapi');

  strapi.createStrapi();
  ```

* using the factories:
  
  ```js
  // Using the factories
  import { factories } from '@strapi/strapi';
  // or
  const { factories } = require('@strapi/strapi');
  // or
  const { createCoreService } = require('@strapi/strapi').factories;
  // or
  const strapi = require('@strapi/strapi');

  strapi.factories.createCoreService();
  factories.createCoreService();
  createCoreService();

  // The recommended way is
  const { factories } = require('@strapi/strapi');
  import { factories } from '@strapi/strapi';

  factories.createCoreService();
  ```

## Migration

- The [upgrade tool](/cms/upgrade-tool) converts the application instantiation with a codemod.
- The factories pattern that were removed will not be converted automatically.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-utils-refactored.md 

 ---
title: strapi-utils is refactored
description: In Strapi 5, the 'strapi-utils' core package has been refactored. This page lists the additions, removals, and other updates.
sidebar_label: strapi-utils refactored
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - strapi-utils
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# `strapi-utils` refactored

In Strapi 5, the `strapi-utils` core package has been refactored. This page lists the additions, removals, and other updates.

<Intro />

<BreakingChangeIdCard
  plugins
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/utils-public-interface.code.ts"
  codemodName="utils-public-interface"
/>

## List of changes

| Element                   |  Description of the change |
|---------------------------|-----------------------------------------------------------------------------------------------------|
| `arrays` utils            | Added, and moved the `stringIncludes` method inside it (see [additional notes](#additional-notes)). |
| <ul><li>`dates` utils</li><li>`objects` utils</li><li>`async` utils</li><li>`strings` utils</li></ul> | Added (see [additional notes](#additional-notes)).| Added (see [additional notes](#additional-notes)). |
| `strings.getCommonPath`    | Added |
| `nameToSlug`               | Moved to `strings.nameToSlug` |
| `nameToCollectionName`     | Moved to `strings.nameToCollectionName` |
| `stringIncludes`           | Moved to `arrays.includesString` |
| `stringEquals`             | Moved to `strings.isEqual` |
| `isCamelCase`              | Moved to `strings.isCamelCase` |
| `isKebabCase`              | Moved to `strings.isKebabCase` |
| `toKebabCase`              | Moved to `strings.toKebabCase` |
| `toRegressedEnumValue`     | Moved to `strings.toRegressedEnumValue` |
| `startsWithANumber`        | Moved to `strings.startsWithANumber` |
| `joinBy`                   | Moved to `strings.joinBy` |
| `keysDeep` | Moved to `objects.keysDeep` |
| `generateTimestampCode`    | Moved to `dates.timestampCode` |
|  `pipeAsync`               | Moved to  `async.pipe` |
|  `mapAsync`                | Moved to  `async.map` |
|  `reduceAsync`             | Moved to  `async.reduce` |
| `convertQueryParams`       | Replaced (see [additional notes](#additional-notes)). |
| `validate` and `sanitize`  | Updated  (see [additional notes](#additional-notes)). |
| `getCommonBeginning`       | Removed |
| <ul><li>`getConfigUrls`</li><li>`getAbsoluteAdminUrl`</li><li>`getAbsoluteServerUrl`</li></ul> | Removed |
| `forEachAsync`             | Removed |
| `removeUndefined`          | Removed |
| `templateConfiguration`¬†   | Removed (see [additional notes](#additional-notes)). |

## Additional Notes

- `templateConfiguration`: This was used when loading the old v3 configuration files in JSON to allow for templates. Plugin developers still using the function should replace its usage by a real template library if they really need to.

- `arrays` utils: To use these new utils:
  1. Import them in your code with `import { arrays, dates, strings, objects } from '@strapi/utils';`.
  2. Use them, for instance as `arrays.includesString` or `strings.isEqual`.

- `convertQueryParams` is replaced:

  ```js
  // Strapi v4
  import¬†{ convertQueryParams } from '@strapi/utils';

  convertQueryParams.convertSortQueryParams(...); // now private function to simplify the api
  convertQueryParams.convertStartQueryParams(...); // now private function to simplify the api
  convertQueryParams.convertLimitQueryParams(...); // now private function to simplify the api
  convertQueryParams.convertPopulateQueryParams(...); // now private function to simplify the api
  convertQueryParams.convertFiltersQueryParams(...); // now private function to simplify the api
  convertQueryParams.convertFieldsQueryParams(...); // now private function to simplify the api
  convertQueryParams.convertPublicationStateParams(...); // now private function to simplify the api

  convertQueryParams.transformParamsToQuery(...); // becomes the example below

  // Strapi 5 
  // Those utils required the strapi app context, so we decided to expose a strapi service for it
  strapi.get('query-params').transform();
  ```

- `validate` and `sanitize` are now part of the `strapi.contentAPI` functions:

  ```js
  // Strapi v4
  import¬†{ validate, sanitize } from '@strapi/utils';

  validate.contentAPI.xxx();
  sanitize.contentAPI.xxx();

  // Strapi 5
  // Those methods require the strapi app context
  strapi.contentAPI.sanitize.xxx();
  strapi.contentAPI.validate.xxx();
  ```


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strict-requirements-config-files.md 

 ---
title: Strict requirements for configuration filenames
description: Strapi 5 has strict requirements on the configuration filenames allowed to be loaded.
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - configuration
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Strict requirements for configuration files

Strapi 5 has strict requirements on the configuration filenames allowed to be loaded.
<Intro />
<BreakingChangeIdCard />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Every `.js`, `.ts`, and `.json` file in the `/config/` folder of a Strapi project is loaded into `strapi.config`.

For example if there is a file called `/config/my-custom-config.js` it is loaded and accessible from `strapi.config.get('my-custom-config.someProperty')`.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Strapi 5 has strict requirements on the filenames allowed to be loaded (see notes for details).

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

In Strapi 5 filenames for configuration files should comply to these requirements:

- There should be no case-insensitive duplicate filenames. If both `CUSTOM.js` and `custom.js` exist, only one will be loaded.
- There should be no duplicate base filenames without extension. If both `custom.json` and `custom.js` exist, only one will be loaded.
- The following filenames are restricted and not loaded:
    - `uuid`
    - `hosting`
    - `license`
    - `enforce`
    - `disable`
    - `enable`
    - `plugin`
    - `strapi`
    - `middleware`
    - `telemetry`
    - `launchedAt`
    - `serveAdminPanel`
    - `autoReload`
    - `environment`
    - `packageJsonStrapi`
    - `info`
    - `autoReload`
- It is advised to use only alphanumeric characters (`a-zA-Z0-9`).
- All internal Strapi configurations (see the list of files in [configurations](/cms/configurations)) must conform to the known structure of those configuration files (i.e., no custom fields should be added to the existing files).

### Manual migration

Rename any of configuration files that are now invalid to a new name, and update the code to look in that path.

If you added custom fields to the internal Strapi configuration files, you should instead create a new file to store the custom configuration, and ensure the new filename matches the requirements for Strapi 5.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/templates.md 

 ---
title: Templates are now regular, standalone Strapi applications
description: Templates have been fully rewritten in Strapi 5 and now are standalone, regular Strapi applications, making it easier to create, distribute, and re-use them.
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - templates
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Templates are now standalone, regular Strapi applications

Templates have been fully rewritten in Strapi 5 and now are standalone, regular Strapi applications, making it easier to create, distribute, and reuse them.
<Intro />
<BreakingChangeIdCard />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Templates were npm packages with strict requirements (see <ExternalLink to="https://docs-v4.strapi.io/cms/templates" text="v4 documentation"/>).

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Templates are now just regular Strapi 5 applications, which can be run on their own.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

* For additional information about creating a new Strapi application based on an existing template, see the [templates documentation](/cms/templates).
* Creating a Strapi template is now as simple as creating a new Strapi 5 application and adjusting its codebase to your needs.

### Manual migration

Templates in Strapi v4 were only useful if applied on top of a default Strapi application. Strapi 5 templates are now standalone Strapi 5 applications. 

To convert your Strapi v4 template into a usable Strapi 5 template, ensure the template includes all files required for Strapi to work. Your folder containing the v4 template applied on top of a full-blown Strapi application should be enough to be a Strapi 5 template.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/upgrade-to-apollov4.md 

 ---
title: Apollo Server v3 upgraded to Apollo Server v4
description: The upgrade from Apollo Server v3 to v4 and graphql ^15 to ^16.
sidebar_label: Upgrade to Apollo Server v4
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - Content API
 - GraphQL
 - GraphQL API
 - Apollo Server
 - upgrade to Strapi 5
---

import FeedbackCallout from '/docs/snippets/backend-customization-feedback-cta.md'
import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Apollo Server v3 upgraded to Apollo Server v4

Strapi 5 has migrated to Apollo Server v4 and this might require some manual migration steps.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Apollo Server v3 for the GraphQL server and graphql ^15 for the GraphQL module.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Apollo Server v4 for the GraphQL server and graphql ^16 for the GraphQL module.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes
- Strapi automatically sets `status400ForVariableCoercionErrors: true` in the Apollo Server configuration due to a breaking change introduced by Apollo in v4. This behavior will be the default again in Apollo v5.
- Strapi 5 upgraded the package graphql from ^15 to ^16, and only one version can be included in any project. Therefore, user code or plugins relying on graphql:15 need to use the same version range as Strapi.
- For guidance on upgrading to Apollo Server v4, please refer to the following Manual migration section. For more detailed information, consult the <ExternalLink to="https://www.apollographql.com/docs/apollo-server/migration/" text="Apollo v4 migration"/> documentation.

### Manual migration

To migrate to Strapi 5:

- Set the `x-apollo-operation-name` header or disable the new protection by adding `csrfPrevention: false` to the GraphQL plugin configuration for multipart messages (file uploads).
- Replace `ApolloError` with `GraphQLError`.
- Remove root level configuration options like `formatResponse` and replace them with plugin hooks in the plugins array.
- Remove the modules configuration option and split it into `typeDefs` and `resolvers`.
- Replace `debug` with `includeStacktraceInErrorResponses`.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/use-document-id.md 

 ---
title: documentId should be used instead of id in API calls
description: Documents should be called by their documentId in Content API calls (REST API & GraphQL).
sidebar_label: documentId instead of id
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - content API
 - Document Service API
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# `documentId` should be used instead of `id` in Content API calls

In Strapi 5, the underlying API handling content is the [Document Service API](/cms/api/document-service) and documents should be called by their `documentId` in Content API calls (REST API & GraphQL).

<Intro />

<BreakingChangeIdCard
  plugins
  codemodPartly
  codemodName="entity-service-document-service"
  codemodLink="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/entity-service-document-service.code.ts"
/>

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Entries were identified by their `id`:

```json {4}
{
  "data": {
    // system fields
    "id": 14,
    "attributes": {
      // user fields
      "title": "Article A"
      "relation": {
        "data": {
          "id": "clkgylw7d000108lc4rw1bb6s"
          "name": "Category A"
        }
      }
    }
  }
  "meta": {
    // ‚Ä¶
  }
}
```

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Documents are identified by their `documentId`:

```json {4}
{
  "data": {
    // system fields
    "documentId": "clkgylmcc000008lcdd868feh",
    "locale": "en",
    // user fields
    "title": "Article A"
    "relation": {
      // system fields
      "documentId": "clkgylw7d000108lc4rw1bb6s"
      // user fields
      "name": "Category A"
    }
  }
  "meta": {
    // ‚Ä¶
  }
}
```

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

- This breaking change impacts routes and relations.
- To ease the transition from v4 to Strapi 5, API calls to entries might still include an `id` field in their response, especially with the [Document Service API](/cms/api/document-service). But it's recommended that you start making an habit of using `documentId` instead of `id` as it will ease handling the transition to future Strapi versions.

### Migration procedure 

A codemod will partly handle the change, but might probably add `__TODO__` items to your code since it's impossible for the codemod to automatically guess the new `documentId` of your content.

For additional information, please refer to the related [breaking change entry](/cms/migration/v4-to-v5/breaking-changes/entity-service-deprecated), the [step-by-step guide](/cms/migration/v4-to-v5/step-by-step) to upgrade to Strapi 5, and the dedicated migration guide for the [Entity Service API to Document Service API transition](/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service) if this applies to your custom code.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/vite.md 

 ---
title: Vite is the default bundler
description: In Strapi 5, Vite is the default bundler and replaces webpack.
sidebar_label: Vite as default bundler
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - dependencies
 - bundlers
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Vite is the default bundler in Strapi 5

In Strapi 5, Vite is the default bundler.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Webpack is the default bundler.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

<ExternalLink to="https://vitejs.dev/" text="Vite"/> is the default bundler.


</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Manual procedure

Users with custom webpack configurations need to convert to <ExternalLink to="https://vitejs.dev/" text="Vite"/> configurations, or alternatively set `--bundler=webpack` when starting the development server to keep the Strapi v4 behaviour; in the latter case, the terminal will issue a warning. Please refer to the [bundlers](/cms/admin-panel-customization/bundlers) documentation for additional details.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/webpack-aliases-removed.md 

 ---
title: Webpack Aliases are removed
description: A simplified approach of aliasing in Strapi v5. 
sidebar_label: Webpack Aliases removed
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - dependencies
 - webpack
 - bundlers
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# Webpack Aliases are removed

In Strapi v5, webpack aliases are removed ensuring better compatibility and reduced dependency conflicts.

<Intro />
<BreakingChangeIdCard plugins />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

Strapi maintains a specific list of dependencies that are aliased in webpack configuration. This ensures that plugins consistently use Strapi versions of certain libraries like the design-system.

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

The aliasing process is simplified. Only essential dependencies like `react`, `react-dom`, `react-router-dom`, and `styled-components` are aliased.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<MigrationIntro />

### Notes

- If you encounter issues with 3rd-party plugins, it's recommended you open an issue on the respective plugin's repository. Encourage the plugin maintainers to add their dependencies to their `package.json` file to resolve compatibility issues.

- If you encounter issues with local plugins, you can fix them by amending the `resolve` option in your chosen bundler.

### Manual procedure

To migrate to Strapi 5:

- Identify any configuration files (e.g., webpack configuration) that referenced the now-removed Webpack aliases in Strapi v4.
- Ensure that any references to Webpack aliases in the code are replaced with appropriate imports or paths.
- If third-party plugins are used in the project, verify that they do not rely on Webpack aliases that are no longer present in Strapi v5.
- If necessary, communicate with the plugin authors to update their dependencies or configurations accordingly.


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/yarn-not-default.md 

 ---
title: The CLI default package manager is not yarn anymore
description: Strapi 5 detects what package manager you are using to run the CLI, and uses this package manager to install dependencies.
sidebar_label: yarn not the default package manager
displayed_sidebar: cmsSidebar
tags:
 - breaking changes
 - dependencies
 - upgrade to Strapi 5
---

import Intro from '/docs/snippets/breaking-change-page-intro.md'
import MigrationIntro from '/docs/snippets/breaking-change-page-migration-intro.md'

# The CLI default package manager is not yarn anymore

In Strapi v5, the command used to run dependencies installation is the one used to actually install them.

<Intro />
<BreakingChangeIdCard />

## Breaking change description

<SideBySideContainer>

<SideBySideColumn>

**In Strapi v4**

All the following commands try to use `yarn` to install the application dependencies:

- `npx create-strapi-app`
- `npm create strapi-app`
- `yarn create strapi-app`
- `yarn dlx ‚Ä¶`

</SideBySideColumn>

<SideBySideColumn>

**In Strapi 5**

Strapi detects what package manager you are using to run the CLI, and uses this package manager to install dependencies.

</SideBySideColumn>

</SideBySideContainer>

## Migration

<br/>

### Notes

* Since Strapi detects the package manager used to run the command and uses it to install dependencies, this means the following example use cases will happen:

  - `npx create-strapi-app`  installs the dependencies with `npm`
  - `npm create ‚Ä¶` installs the dependencies with `npm`
  - `yarn create ‚Ä¶` installs the dependencies with `yarn`
  - `yarn dlx ‚Ä¶` installs the dependencies with `yarn`
  - `pnpm create ‚Ä¶` installs the dependencies with `pnpm`
  - `pnpm dlx ‚Ä¶` installs the dependencies with `pnpm`

### Manual procedure

Users with existing projects are not impacted. Only users doing specific automation and scripts or plugin developers that are used to running a `create-strapi-app` command and expect yarn to be used by default will be impacted.

If, for instance, you want to use npx but still enforce using yarn to install dependencies, add a `--use-yarn` flag. Additional information about the possible flags is available in the [CLI installation reference](/cms/installation/cli#cli-installation-options).


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/introduction-and-faq.md 

 ---
title: Upgrading to Strapi 5 - Introduction and FAQ
description: Learn more about how to upgrade to Strapi 5
sidebar_label: Introduction and FAQ
pagination_prev: cms/upgrades
pagination_next: cms/migration/v4-to-v5/step-by-step
tags:
- upgrade to Strapi 5
---

# Upgrading to Strapi 5: Introduction and FAQ

The latest major version of Strapi is Strapi 5. Strapi v4 is still supported until March 2026.

Whenever you feel ready to upgrade to Strapi 5, the present page will help you. It lists all available resources for upgrading from Strapi 4 to Strapi 5 and answers general questions you might have.

## Available resources

All of the following available resources will help you upgrade your application and plugins to Strapi 5, from the most common to the most specific use cases:

<CustomDocCard emoji="1Ô∏è‚É£" title="Step-by-step guide" description="Read this guide first to get an overview of the upgrade process." link="/cms/migration/v4-to-v5/step-by-step" />
<CustomDocCard emoji="2Ô∏è‚É£" title="Upgrade tool reference" description="Learn more about how the upgrade tool can automatically migrate some parts of your Strapi v4 application to Strapi 5." link="/cms/upgrade-tool" />
<CustomDocCard emoji="3Ô∏è‚É£" title="Breaking changes list" description="Read more about the differences between Strapi v4 and v5, the resulting breaking changes, and how to handle them manually or with the help of the codemods provided with the upgrade tool." link="/cms/migration/v4-to-v5/breaking-changes" />
<CustomDocCard emoji="4Ô∏è‚É£" title="Specific resources" description="Handle specific use cases such as the deprecation of the Entity Service API in favor of the new Document Service API, the plugins migration, and the deprecation of the helper-plugin." link="/cms/migration/v4-to-v5/additional-resources/introduction" />

## Frequently asked questions

The following questions and their answers should help you cover the most common use cases:

<details style={{backgroundColor: 'transparent', border: 'solid 1px #4945ff' }}>
<summary style={{fontSize: '18px'}}>How can I handle the upgrade and the installation of the latest dependencies?<br/>How can I handle the breaking changes in the code and adapt my code to Strapi 5?</summary>

Strapi provides an [upgrade tool](/cms/upgrade-tool) to ease the process. The upgrade tool is a command line tool with some commands that handle the upgrade of the dependencies and the execution of **codemods** <Codemods/>.

Follow the <a href="/cms/migration/v4-to-v5/step-by-step">step-by-step guide</a> to learn how to use this tool in the context of upgrading to Strapi 5.

Strapi 5 docs also provide a [complete breaking changes database](/cms/migration/v4-to-v5/breaking-changes) and [dedicated resources](/cms/migration/v4-to-v5/additional-resources/introduction) to cover specific use cases.

</details>

<details style={{backgroundColor: 'transparent', border: 'solid 1px #4945ff' }}>
<summary style={{fontSize: '18px'}}>How can I handle the data migration, ensuring that in Strapi 5 the application will still be working?</summary>
<p>Strapi 5 integrates a series of data migration scripts that are run once the application starts for the first time in Strapi 5.</p>
<p>However, please <strong>always backup your database</strong> (found at <code style={{color: 'rgb(73, 69, 255)', backgroundColor: 'rgb(240, 240, 255)'}}>.tmp/data.db</code> by default if using a SQL database) before performing any upgrade, as instructed in the <a href="/cms/migration/v4-to-v5/step-by-step">step-by-step guide</a>.</p>
</details>

<details style={{backgroundColor: 'transparent', border: 'solid 1px #4945ff' }}>
<summary style={{fontSize: '18px'}}>As a Strapi Cloud customer, how can I handle the entire upgrade and deployment of my Strapi 5 application?</summary>

1. [Create a backup](/cloud/projects/settings#backups) and update your code locally, following the <a href="/cms/migration/v4-to-v5/step-by-step">step-by-step guide</a>.
2. Run the `yarn deploy` or `npm run deploy` commands from the [Cloud CLI](/cloud/cli/cloud-cli).<br/>

Strapi Cloud will deploy the updated code in Strapi 5 and will automatically run the data migration script.
<br/>

</details>


 This is the content for the doc docusaurus/docs/cms/migration/v4-to-v5/step-by-step.md 

 ---
title: Step-by-step guide to upgrade to Strapi 5
description: Follow this step-by-step guide to upgrade from Strapi v4 to Strapi 5
sidebar_label: Step-by-step guide
tags:
- upgrade to Strapi 5
- upgrade tool
- breaking changes
- guides
---

import DoNotMigrateYet from '/docs/snippets/_do-not-migrate-to-v5-yet.md'

# Step-by-step guide to upgrade to Strapi 5

The latest major version of Strapi is Strapi 5.

The present page is meant to be used as step-by-step instructions for upgrading your Strapi v4 application to Strapi 5.

:::prerequisites
Your Strapi v4 application is already running on the latest v4 minor and patch version. If it's not, run the [upgrade tool](/cms/upgrade-tool) with the `minor` command to reach it: `npx @strapi/upgrade minor`.
:::

## Step 1: Get ready to upgrade

Before getting into the upgrade process itself, take the following precautions:

1. **Backup your database**.

  If you are using SQLite with the default configuration (the default database provided with Strapi), your database file is named `data.db` and is located in the `.tmp/` folder at the root of your Strapi application.
  
  If you are using another type of database, please refer to their official documentation (see <ExternalLink to="https://www.postgresql.org/docs/" text="PostgreSQL docs"/> and <ExternalLink to="https://dev.mysql.com/doc/" text="MySQL docs"/>).

  If your project is hosted on Strapi Cloud, you can manually [create a backup](/cloud/projects/settings#creating-a-manual-backup).
2. **Backup your code**:
    * If your code is versioned with git, create a new dedicated branch to run the migration.
    * If your code is _not_ versioned with git, create a backup of your working Strapi v4 code and store it in a safe place.
3. **Ensure the plugins you are using are compatible with Strapi 5**.

  To do so, list the plugins you are using, then check compatibility for each of them by reading their dedicated documentation on the <ExternalLink to="https://market.strapi.io/plugins?version=v5" text="Marketplace"/> website.

## Step 2: Run automated migrations

Strapi provides a tool to automate some parts of the upgrade to Strapi 5: the [upgrade tool](/cms/upgrade-tool).

1. **Run the upgrade tool**.  

  ```sh
  npx @strapi/upgrade major
  ```

  The command will execute the update and installation of the dependencies of Strapi 5, and run the codemods to handle some of the breaking changes that come with Strapi 5.

  The codemods will handle the following changes:

  | Codemod name and GitHub code link | Description |
  |-----------------------------------|-------------|
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/comment-out-lifecycle-files.code.ts" text="comment-out-lifecycle-files"/> | Comment out lifecycles files in favor of [Document Service Middlewares](/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service) | 
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/dependency-remove-strapi-plugin-i18n.json.ts" text="dependency-remove-strapi-plugin-i18n"/> | Remove the i18n plugin dependency as i18n is now integrated into the core of Strapi |
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/dependency-upgrade-react-and-react-dom.json.ts" text="dependency-upgrade-react-and-react-dom"/>  | Upgrade the react and react-dom dependencies | 
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/dependency-upgrade-react-router-dom.json.ts" text="dependency-upgrade-react-router-dom"/>  | Upgrade the react-router-dom dependency |
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/dependency-upgrade-styled-components.json.ts" text="dependency-upgrade-styled-components"/>  | Upgrade the styled-components dependency |
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/deprecate-helper-plugin.code.ts" text="deprecate-helper-plugin"/>  | Partly handle migrations from `@strapi/helper-plugin` |
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/entity-service-document-service.code.ts" text="entity-service-document-service"/>            | Partly handle the migration from the Entity Service API to the new Document Service API |
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/s3-keys-wrapped-in-credentials.code.ts" text="s3-keys-wrapped-in-credentials"/>            | Wrap the `accessKeyId` and `secretAccessKey` properties inside a `credentials` object for users using the `aws-s3` provider | 
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/sqlite3-to-better-sqlite3.json.ts" text="sqlite3-to-better-sqlite3"/>                                                                    | Update the sqlite dependency to better-sqlite3 | 
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/strapi-public-interface.code.ts" text="strapi-public-interface"/>                          | Transform `@strapi/strapi` imports to use the new public interface | 
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/use-uid-for-config-namespace.code.ts" text="use-uid-for-config-namespace"/>                | Replace string dot format for config get/set/has with uid format for 'plugin' and 'api' namespace where possible | 
  | <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/utils/upgrade/resources/codemods/5.0.0/utils-public-interface.code.ts" text="utils-public-interface"/>                            | Update utils to use the new public interface | 

:::tip
If you develop Strapi plugins, other codemods handle some aspects of the helper-plugin deprecation. See the [related breaking change](/cms/migration/v4-to-v5/breaking-changes/helper-plugin-deprecated) for more information.
:::

2. Go over the changes made by the upgrade tool to **check if you have to manually complete some code updates**:

  Look for `__TODO__` automatically added to your code by the codemods. Some of them might have been added while migrating from the Entity Service API to the new Document Service API introduced in Strapi 5.
  
  :::info Document Service API
  Additional information about the Document Service API can be found in the [breaking change entry description](/cms/migration/v4-to-v5/breaking-changes/entity-service-deprecated), the [specific migration guide](/cms/migration/v4-to-v5/additional-resources/from-entity-service-to-document-service), and the [API reference](/cms/api/document-service).
  :::

## Step 3: Check and handle manual upgrades

The following main changes might affect your Strapi application and require you to do some manual actions.

For each of them, read the indicated breaking change entry and check if some manual actions are still required after the upgrade tool has run:

1. **Database migration**:
    1. MySQL v5 is not supported üëâ see [breaking change](/cms/migration/v4-to-v5/breaking-changes/mysql5-unsupported)
    2. Only better-sqlite3 is supported üëâ see [breaking change](/cms/migration/v4-to-v5/breaking-changes/only-better-sqlite3-for-sqlite)
    3. Only mysql2 is supported üëâ see [breaking change](/cms/migration/v4-to-v5/breaking-changes/only-mysql2-package-for-mysql)
    4. Lifecycle hooks are triggered differently üëâ see [breaking change](/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service)
2. **Configuration**:
    1. Some environment variables are handled by the server configuration üëâ see [breaking change](/cms/migration/v4-to-v5/breaking-changes/removed-support-for-some-env-options)
    2. Custom configuration must meet specific requirements üëâ see [breaking change](/cms/migration/v4-to-v5/breaking-changes/strict-requirements-config-files)
3. **Admin panel customization**:
    * The helper-plugin has been removed üëâ see [migration reference](/cms/migration/v4-to-v5/additional-resources/helper-plugin)

üëâ Finally, go over the rest of the [breaking changes database](/cms/migration/v4-to-v5/breaking-changes) for any edge case you might be concerned about.

## Step 4: Migrate the API consuming side

Strapi 5 has updated both the REST and GraphQL APIs.

Follow the steps below and leverage retro-compatibility flags and guided migration resources to gradually update your code for Strapi 5.

### Migrate REST API calls

1. Enable the retro-compatibility flag by setting the `Strapi-Response-Format: v4` header.
2. Update your queries & mutations only, guided by the dedicated [breaking change entry for REST API](/cms/migration/v4-to-v5/breaking-changes/new-response-format).
3. Validate that your client is running correctly.
4. Disable the retro-compatibiliy flag by removing the `Strapi-Response-Format: v4` header and start using the new response format.

### Migrate GraphQL API calls

1. Enable the retro-compatibility flag by setting `v4ComptabilityMode` to `true` in the `graphql.config` object of [the `/config/plugins.js|ts` file](/cms/plugins/graphql#code-based-configuration).
2. Update your queries and mutations only, guided by the dedicated [breaking change entry for GraphQL](/cms/migration/v4-to-v5/breaking-changes/graphql-api-updated).
3. Validate that your client is running correctly.
4. Disable the retro-compatibily flag by setting `v4ComptabilityMode` to `false` and start using the new response format.


 This is the content for the doc docusaurus/docs/cms/plugins-development/admin-panel-api.md 

 ---
title: Admin Panel API
pagination_prev: cms/plugins-development/plugin-structure
pagination_next: cms/plugins-development/content-manager-apis
toc_max_heading_level: 4
tags:
- admin panel
- plugin APIs
- asynchronous function
- bootstrap function
- hooks API
- Injection Zones API
- lifecycle function
- menu
- settings
- plugins
- plugins development
- register function
- reducers API
- redux
---

# Admin Panel API for plugins

A Strapi plugin can interact with both the [back end](/cms/plugins-development/server-api) and the front end of a Strapi application. The Admin Panel API is about the front end part, i.e. it allows a plugin to customize Strapi's [admin panel](/cms/intro).

The admin panel is a <ExternalLink to="https://reactjs.org/" text="React"/> application that can embed other React applications. These other React applications are the admin parts of each Strapi plugin.

:::prerequisites
You have [created a Strapi plugin](/cms/plugins-development/create-a-plugin).
:::

The Admin Panel API includes:

- an [entry file](#entry-file) which exports the required interface,
- [lifecycle functions](#lifecycle-functions) and the `registerTrad()` [async function](#async-function),
- and several [specific APIs](#available-actions) for your plugin to interact with the admin panel.

:::note
The whole code for the admin panel part of your plugin could live in the `/strapi-admin.js|ts` or `/admin/src/index.js|ts` file. However, it's recommended to split the code into different folders, just like the [structure](/cms/plugins-development/plugin-structure) created by the `strapi generate plugin` CLI generator command.
:::

## Entry file

The entry file for the Admin Panel API is `[plugin-name]/admin/src/index.js`. This file exports the required interface, with the following functions available:

| Function type      | Available functions                                                     |
| ------------------- | ------------------------------------------------------------------------ |
| Lifecycle functions | <ul><li> [register](#register)</li><li>[bootstrap](#bootstrap)</li></ul> |
| Async function      | [registerTrads](#registertrads)                                          |

## Lifecycle functions

<br/>

### register()

**Type:** `Function`

This function is called to load the plugin, even before the app is actually [bootstrapped](#bootstrap). It takes the running Strapi application as an argument (`app`).

Within the register function, a plugin can:

* [register itself](#registerplugin) so it's available to the admin panel
* add a new link to the main navigation (see [Menu API](#menu-api))
* [create a new settings section](#createsettingsection)
* define [injection zones](#injection-zones-api)
* [add reducers](#reducers-api)

#### registerPlugin()

**Type:** `Function`

Registers the plugin to make it available in the admin panel.

This function returns an object with the following parameters:

| Parameter        | Type                     | Description                                                                                        |
| ---------------- | ------------------------ | -------------------------------------------------------------------------------------------------- |
| `id`             | String                   | Plugin id                                                                                          |
| `name`           | String                   | Plugin name                                                                                        |
| `injectionZones` | Object                   | Declaration of available [injection zones](#injection-zones-api)                                       |

:::note
Some parameters can be imported from the `package.json` file.
:::

**Example:**

```js title="my-plugin/admin/src/index.js"

// Auto-generated component
import PluginIcon from './components/PluginIcon';
import pluginId from './pluginId'

export default {
  register(app) {
    app.addMenuLink({
      to: `/plugins/${pluginId}`,
      icon: PluginIcon,
      intlLabel: {
        id: `${pluginId}.plugin.name`,
        defaultMessage: 'My plugin',
      },
      Component: async () => {
        const component = await import(/* webpackChunkName: "my-plugin" */ './pages/App');

        return component;
      },
      permissions: [], // array of permissions (object), allow a user to access a plugin depending on its permissions
    });
    app.registerPlugin({
      id: pluginId,
      name,
    });
  },
};
```

### bootstrap()

**Type**: `Function`

Exposes the bootstrap function, executed after all the plugins are [registered](#register).

Within the bootstrap function, a plugin can, for instance:

* extend another plugin, using `getPlugin('plugin-name')`,
* register hooks (see [Hooks API](#hooks-api)),
* [add links to a settings section](#settings-api),
* add actions and options to the Content Manager's List view and Edit view (see details on the [Content Manager APIs page](/cms/plugins-development/content-manager-apis)).

**Example:**

```js
module.exports = () => {
  return {
    // ...
    bootstrap(app) {
      // execute some bootstrap code
      app.getPlugin('content-manager').injectComponent('editView', 'right-links', { name: 'my-compo', Component: () => 'my-compo' })
    },
  };
};
```

## Async function

While [`register()`](#register) and [`bootstrap()`](#bootstrap) are lifecycle functions, `registerTrads()` is an async function.

### registerTrads()

**Type**: `Function`

To reduce the build size, the admin panel is only shipped with 2 locales by default (`en` and `fr`). The `registerTrads()` function is used to register a plugin's translations files and to create separate chunks for the application translations. It does not need to be modified.

<details>
<summary>Example: Register a plugin's translation files</summary>

```jsx
export default {
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(
      locales.map(locale => {
        return import(
          /* webpackChunkName: "[pluginId]-[request]" */ `./translations/${locale}.json`
        )
          .then(({ default: data }) => {
            return {
              data: prefixPluginTranslations(data, pluginId),
              locale,
            };
          })
          .catch(() => {
            return {
              data: {},
              locale,
            };
          });
      })
    );

    return Promise.resolve(importedTrads);
  },
};
```

</details>

## Available actions

The Admin Panel API allows a plugin to take advantage of several small APIs to perform actions. Use this table as a reference:

| Action                                   | API to use                              | Function to use                                   | Related lifecycle function  |
| ---------------------------------------- | --------------------------------------- | ------------------------------------------------- | --------------------------- |
| Add a new link to the main navigation    | [Menu API](#menu-api)                   | [`addMenuLink()`](#menu-api)                      | [`register()`](#register)   |
| Create a new settings section            | [Settings API](#settings-api)           | [`createSettingSection()`](#createsettingsection) | [`register()`](#register)   |
| Declare an injection zone                | [Injection Zones API](#injection-zones-api) | [`registerPlugin()`](#registerplugin)             | [`register()`](#register)   |
| Add a reducer                            | [Reducers API](#reducers-api)                                       | [`addReducers()`](#reducers-api)                      | [`register()`](#register)   |
| Create a hook                          | [Hooks API](#hooks-api)                 | [`createHook()`](#hooks-api)                    | [`register()`](#register)   |
| Add a single link to a settings section  | [Settings API](#settings-api)           | [`addSettingsLink()`](#addsettingslink)             | [`bootstrap()`](#bootstrap) |
| Add multiple links to a settings section | [Settings API](#settings-api)           | [`addSettingsLinks()`](#addsettingslinks)           | [`bootstrap()`](#bootstrap) |
| Inject a Component in an injection zone  | [Injection Zones API](#injection-zones-api) | [`injectComponent()`](#injection-zones-api)           | [`bootstrap()`](#register)  |
| Add options and actions to the Content Manager's Edit view and List view | [Content Manager APIs](/cms/plugins-development/content-manager-apis) | <ul><li>`addEditViewSidePanel()`</li><li>`addDocumentAction`</li><li>`addDocumentHeaderAction`</li><li>`addBulkAction`</li></ul> | [`bootstrap()`](#bootstrap) |
| Register a hook                          | [Hooks API](#hooks-api)                 | [`registerHook()`](#hooks-api)                    | [`bootstrap()`](#bootstrap)   |

:::tip Replacing the WYSIWYG
The WYSIWYG editor can be replaced by taking advantage of [custom fields](/cms/features/custom-fields), for instance using the <ExternalLink to="https://market.strapi.io/plugins/@ckeditor-strapi-plugin-ckeditor" text="CKEditor custom field plugin"/>.
:::

:::info
The admin panel supports dotenv variables.

All variables defined in a `.env` file and prefixed by `STRAPI_ADMIN_` are available while customizing the admin panel through `process.env`.
:::

### Menu API

The Menu API allows a plugin to add a new link to the main navigation through the `addMenuLink()` function with the following parameters:

| Parameter     | Type             | Description                                                                                                                                                                                                              |
| ------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `to`          | String           | Path the link should point to                                                                                                                                                                                            |
| `icon`        | React Component       | Icon to display in the main navigation                                                                                                                                                                                   |
| `intlLabel`   | Object           | Label for the link, following the <ExternalLink to="https://formatjs.io/docs/react-intl" text="React Int'l"/> convention, with:<ul><li>`id`: id used to insert the localized label</li><li>`defaultMessage`: default label for the link</li></ul> |
| `Component`   | Async function   | Returns a dynamic import of the plugin entry point                                                                                                                                                                      |
| `permissions` | Array of Objects |  Permissions declared in the `permissions.js` file of the plugin                                                                                                                                                                                                                         |
| `position`    | Integer          | Position in the menu      |
| `licenseOnly` | Boolean | If set to `true`, adds a lightning ‚ö°Ô∏è icon next to the icon or menu entry to indicate that the feature or plugin requires a paid license.<br/>(Defaults to `false`) |

:::note
`intlLabel.id` are ids used in translation files (`[plugin-name]/admin/src/translations/[language].json`)
:::

**Example:**

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```jsx title="my-plugin/admin/src/index.js"
import PluginIcon from './components/PluginIcon';

export default {
  register(app) {
    app.addMenuLink({
      to: '/plugins/my-plugin',
      icon: PluginIcon,
      intlLabel: {
        id: 'my-plugin.plugin.name',
        defaultMessage: 'My plugin',
      },
      Component: () => 'My plugin',
      permissions: [], // permissions to apply to the link
      position: 3, // position in the menu
      licenseOnly: true, // mark the feature as a paid one not available in your license
    });
    app.registerPlugin({ ... });
  },
  bootstrap() {},
};
```

</TabItem>
<TabItem value="ts" label="TypeScript">

```ts title="my-plugin/admin/src/index.ts"
import PluginIcon from './components/PluginIcon';
import type { StrapiApp } from '@strapi/admin/strapi-admin';
export default {
  register(app: StrapiApp) {
    app.addMenuLink({
      to: '/plugins/my-plugin',
      icon: PluginIcon,
      intlLabel: {
        id: 'my-plugin.plugin.name',
        defaultMessage: 'My plugin',
      },
      Component: () => 'My plugin',
      permissions: [], // permissions to apply to the link
      position: 3, // position in the menu
      licenseOnly: true, // mark the feature as a paid one not available in your license
    });
    app.registerPlugin({ ... });
  },
  bootstrap() {},
};
```

</TabItem>
</Tabs>

### Settings API

The Settings API allows:

* [creating a new setting section](#createsettingsection)
* adding [a single link](#addsettingslink) or [multiple links at once](#addsettingslinks) to existing settings sections

:::note
Adding a new section happens in the [register](#register) lifecycle while adding links happens during the [bootstrap](#bootstrap) lifecycle.
:::

All functions accept links as objects with the following parameters:

| Parameter     | Type             | Description                                                                                                                                                                                                              |
| ------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `id`          | String           | React id                                                                                                                                                                                                                 |
| `to`          | String           | Path the link should point to                                                                                                                                                                                            |
| `intlLabel`   | Object           | Label for the link, following the <ExternalLink to="https://formatjs.io/docs/react-intl" text="React Int'l"/> convention, with:<ul><li>`id`: id used to insert the localized label</li><li>`defaultMessage`: default label for the link</li></ul> |
| `Component`   | Async function   | Returns a dynamic import of the plugin entry point                                                                                                                                                                       |
| `permissions` | Array of Objects | Permissions declared in the `permissions.js` file of the plugin                                                                                                                                                          |
| `licenseOnly` | Boolean | If set to `true`, adds a lightning ‚ö°Ô∏è icon next to the icon or menu entry to indicate that the feature or plugin requires a paid license.<br/>(Defaults to `false`) |

#### createSettingSection()

**Type**: `Function`

Create a new settings section.

The function takes 2 arguments:

| Argument        | Type             | Description                                                                                                                                                                                                                                                                                                                   |
| --------------- | ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| first argument  | Object           | Section label:<ul><li>`id` (String): section id</li><li>`intlLabel` (Object): localized label for the section, following the <ExternalLink to="https://formatjs.io/docs/react-intl" text="React Int'l"/> convention, with:<ul><li>`id`: id used to insert the localized label</li><li>`defaultMessage`: default label for the section</li></ul></li></ul> |
| second argument | Array of Objects | Links included in the section                                                                                                                                                                                                                                                                                                 |

:::note
`intlLabel.id` are ids used in translation files (`[plugin-name]/admin/src/translations/[language].json`)
:::

**Example:**

```jsx title="my-plugin/admin/src/index.js"

const myComponent = async () => {
  const component = await import(
    /* webpackChunkName: "users-providers-settings-page" */ './pages/Providers'
  );

  return component;
};

export default {
  register(app) {
    app.createSettingSection(
      { id: String, intlLabel: { id: String, defaultMessage: String } }, // Section to create
      [
        // links
        {
          intlLabel: { id: String, defaultMessage: String },
          id: String,
          to: String,
          Component: myComponent,
          permissions: Object[],
        },
      ]
    );
  },
};
```

#### addSettingsLink()

**Type**: `Function`

Add a unique link to an existing settings section.

**Example:**

```jsx title="my-plugin/admin/src/index.js"

const myComponent = async () => {
  const component = await import(
    /* webpackChunkName: "users-providers-settings-page" */ './pages/Providers'
  );

  return component;
};

export default {
  bootstrap(app) {
		// Adding a single link
		app.addSettingsLink(
		 'global', // id of the section to add the link to
			{
				intlLabel: { id: String, defaultMessage: String },
				id: String,
				to: String,
				Component: myComponent,
				permissions: Object[],
        licenseOnly: true, // mark the feature as a paid one not available in your license
			}
    )
  }
}
```

#### addSettingsLinks()

**Type**: `Function`

Add multiple links to an existing settings section.

**Example:**

```jsx title="my-plugin/admin/src/index.js"

const myComponent = async () => {
  const component = await import(
    /* webpackChunkName: "users-providers-settings-page" */ './pages/Providers'
  );

  return component;
};

export default {
  bootstrap(app) {
    // Adding several links at once
    app.addSettingsLinks(
      'global', // id of the section to add the link in
        [{
          intlLabel: { id: String, defaultMessage: String },
          id: String,
          to: String,
          Component: myComponent,
          permissions: Object[],
          licenseOnly: true, // mark the feature as a paid one not available in your license
        }]
    )
  }
}
```

### Injection Zones API

Injection zones refer to areas of a view's layout where a plugin allows another to inject a custom React component (e.g. a UI element like a button).

Plugins can use:

* Strapi's [predefined injection zones](#using-predefined-injection-zones) for the Content Manager,
* or custom injection zones, created by a plugin

:::note
Injection zones are defined in the [register()](#register) lifecycle but components are injected in the [bootstrap()](#bootstrap) lifecycle.
:::

#### Using predefined injection zones

Strapi admin panel comes with predefined injection zones so components can be added to the UI of the [Content Manager](/cms/intro):

<!-- TODO: maybe add screenshots once the design system is ready? -->

| View      | Injection zone name & Location                                                                                                                                            |
| --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| List view | `actions`: sits between Filters and the cogs icon
| Edit view | `right-links`: sits between "Configure the view" and "Edit" buttons                       |

#### Creating a custom injection zone

To create a custom injection zone, declare it as a `<InjectionZone />` React component with an `area` prop that takes a string with the following naming convention: `plugin-name.viewName.injectionZoneName`.

#### Injecting components

A plugin has 2 different ways of injecting a component:

* to inject a component from a plugin into another plugin's injection zones, use the `injectComponent()` function
* to specifically inject a component into one of the Content Manager's [predefined injection zones](#using-predefined-injection-zones), use the `getPlugin('content-manager').injectComponent()` function instead

Both the `injectComponent()` and `getPlugin('content-manager').injectComponent()` methods accept the following arguments:

| Argument        | Type   | Description                                                                                                                                                                   |
| --------------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| first argument  | String | The view where the component is injected
| second argument | String | The zone where the component is injected
| third argument  | Object | An object with the following keys:<ul><li>`name` (string): the name of the component</li><li>`Component` (function or class): the React component to be injected</li></ul> |

<details>
<summary>Example: Inject a component in the informations box of the Edit View of the Content Manager:</summary>

```jsx title="my-plugin/admin/src/index.js"

export default {
  bootstrap(app) {
    app.getPlugin('content-manager').injectComponent()('editView', 'informations', {
      name: 'my-plugin-my-compo',
      Component: () => 'my-compo',
    });
  }
}
```

</details>

<details>
<summary>Example: Creating a new injection zone and injecting it from a plugin to another one:</summary>

```jsx title="my-plugin/admin/src/injectionZones.js"
// Use the injection zone in a view

import { InjectionZone } from '@strapi/helper-plugin';

const HomePage = () => {
  return (
    <main>
      <h1>This is the homepage</h1>
	    <InjectionZone area="my-plugin.homePage.right" />
    </main>
  );
};
```

```jsx title="my-plugin/admin/src/index.js"
// Declare this injection zone in the register lifecycle of the plugin

export default {
  register() {
    app.registerPlugin({
      // ...
      injectionZones: {
        homePage: {
          right: []
        }
      }
    });
  },
}
```

```jsx title="my-other-plugin/admin/src/index.js"
// Inject the component from a plugin in another plugin

export default {
  register() {
    // ...
  },
  bootstrap(app) {
    app.getPlugin('my-plugin').injectComponent('homePage', 'right', {
      name: 'my-other-plugin-component',
      Component: () => 'This component is injected',
    });
  }
};
```

</details>

#### Accessing data with the `useCMEditViewDataManager` React hook

Once an injection zone is defined, the component to be injected in the Content Manager can have access to all the data of the Edit View through the `useCMEditViewDataManager` React hook.

<details>
<summary>Example of a basic component using the 'useCMEditViewDataManager' hook</summary>

```js
import { useCMEditViewDataManager } from '@strapi/helper-plugin';

const MyCompo = () => {
  const {
    createActionAllowedFields: [], // Array of fields that the user is allowed to edit
    formErrors: {}, // Object errors
    readActionAllowedFields: [], // Array of field that the user is allowed to edit
    slug: 'api::address.address', // Slug of the content-type
    updateActionAllowedFields: [],
    allLayoutData: {
      components: {}, // components layout
      contentType: {}, // content-type layout
    },
    initialData: {},
    isCreatingEntry: true,
    isSingleType: true,
    status: 'resolved',
    layout: {}, // Current content-type layout
    hasDraftAndPublish: true,
    modifiedData: {},
    onPublish: () => {},
    onUnpublish: () => {},
    addComponentToDynamicZone: () => {},
    addNonRepeatableComponentToField: () => {},
    addRelation: () => {},
    addRepeatableComponentToField: () => {},
    moveComponentDown: () => {},
    moveComponentField: () => {},
    moveComponentUp: () => {},
    moveRelation: () => {},
    onChange: () => {},
    onRemoveRelation: () => {},
    removeComponentFromDynamicZone: () => {},
    removeComponentFromField: () => {},
    removeRepeatableField: () => {},
  } = useCMEditViewDataManager()

  return null
}
```

</details>

### Reducers API

Reducers are <ExternalLink to="https://redux.js.org/" text="Redux"/> reducers that can be used to share state between components. Reducers can be useful when:

* Large amounts of application state are needed in many places in the application.
* The application state is updated frequently.
* The logic to update that state may be complex.

Reducers can be added to a plugin interface with the `addReducers()` function during the [`register`](#register) lifecycle.

A reducer is declared as an object with this syntax:

**Example:**

```js title="my-plugin/admin/src/index.js"
import { exampleReducer } from './reducers'

const reducers = {
  // Reducer Syntax
  [`${pluginId}_exampleReducer`]: exampleReducer
}

export default {
  register(app) {
    app.addReducers(reducers)
  },
  bootstrap() {},
};


```

### Hooks API

The Hooks API allows a plugin to create and register hooks, i.e. places in the application where plugins can add personalized behavior.

Hooks should be registered during the [bootstrap](#bootstrap) lifecycle of a plugin.

Hooks can then be run in series, in waterfall or in parallel:

* `runHookSeries` returns an array corresponding to the result of each function executed, ordered
* `runHookParallel` returns an array corresponding to the result of the promise resolved by the function executed, ordered
* `runHookWaterfall` returns a single value corresponding to all the transformations applied by the different functions starting with the initial value `args`.

<details>
<summary>Example: Create a hook in a plugin and use it in another plugin</summary>

```jsx title="my-plugin/admin/src/index.js"
// Create a hook in a plugin
export default {
  register(app) {
    app.createHook('My-PLUGIN/MY_HOOK');
  }
}

```

```jsx title="my-other-plugin/admin/src/index.js"
// Use the hook in another plugin
export default {
  bootstrap(app) {
    app.registerHook('My-PLUGIN/MY_HOOK', (...args) => {
      console.log(args)

      // important: return the mutated data
      return args
    });

    app.registerPlugin({...})
  }
}
```

</details>

#### Predefined hooks

Strapi includes a predefined `Admin/CM/pages/ListView/inject-column-in-table` hook that can be used to add or mutate a column of the List View of the [Content Manager](/cms/intro):

```jsx
runHookWaterfall(INJECT_COLUMN_IN_TABLE, {
	displayedHeaders: ListFieldLayout[],
	layout: ListFieldLayout,
});
```

```tsx
interface ListFieldLayout {
  /**
   * The attribute data from the content-type's schema for the field
   */
  attribute: Attribute.Any | { type: 'custom' };
  /**
   * Typically used by plugins to render a custom cell
   */
  cellFormatter?: (
    data: Document,
    header: Omit<ListFieldLayout, 'cellFormatter'>,
    { collectionType, model }: { collectionType: string; model: string }
  ) => React.ReactNode;
  label: string | MessageDescriptor;
  /**
   * the name of the attribute we use to display the actual name e.g. relations
   * are just ids, so we use the mainField to display something meaninginful by
   * looking at the target's schema
   */
  mainField?: string;
  name: string;
  searchable?: boolean;
  sortable?: boolean;
}

interface ListLayout {
  layout: ListFieldLayout[];
  components?: never;
  metadatas: {
    [K in keyof Contracts.ContentTypes.Metadatas]: Contracts.ContentTypes.Metadatas[K]['list'];
  };
  options: LayoutOptions;
  settings: LayoutSettings;
}

type LayoutOptions = Schema['options'] & Schema['pluginOptions'] & object;

interface LayoutSettings extends Contracts.ContentTypes.Settings {
  displayName?: string;
  icon?: never;
}
```

Strapi also includes a `Admin/CM/pages/EditView/mutate-edit-view-layout` hook that can be used to mutate the Edit View  of the [Content Manager](/cms/intro):

```tsx
interface EditLayout {
  layout: Array<Array<EditFieldLayout[]>>;
  components: {
    [uid: string]: {
      layout: Array<EditFieldLayout[]>;
      settings: Contracts.Components.ComponentConfiguration['settings'] & {
        displayName?: string;
        icon?: string;
      };
    };
  };
  metadatas: {
    [K in keyof Contracts.ContentTypes.Metadatas]: Contracts.ContentTypes.Metadatas[K]['edit'];
  };
  options: LayoutOptions;
  settings: LayoutSettings;
}

interface EditFieldSharedProps extends Omit<InputProps, 'hint' | 'type'> {
  hint?: string;
  mainField?: string;
  size: number;
  unique?: boolean;
  visible?: boolean;
}

/**
 * Map over all the types in Attribute Types and use that to create a union of new types where the attribute type
 * is under the property attribute and the type is under the property type.
 */
type EditFieldLayout = {
  [K in Attribute.Kind]: EditFieldSharedProps & {
    attribute: Extract<Attribute.Any, { type: K }>;
    type: K;
  };
}[Attribute.Kind];

type LayoutOptions = Schema['options'] & Schema['pluginOptions'] & object;

interface LayoutSettings extends Contracts.ContentTypes.Settings {
  displayName?: string;
  icon?: never;
}
```

:::note
`EditViewLayout` and `ListViewLayout` are parts of the `useDocumentLayout` hook (see <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/core/content-manager/admin/src/hooks/useDocumentLayout.ts" text="source code"/>).
:::


 This is the content for the doc docusaurus/docs/cms/plugins-development/content-manager-apis.md 

 ---
title: Content Manager APIs
description: The Content Manager APIs reference lists the APIs available to plugins for adding actions and options to the Content Manager List view and Edit view.
displayed_sidebar: cmsSidebar
toc_max_heading_level: 4
tags:
- admin panel API
- plugins development
- plugins
---

# Content Manager APIs

Content-Manager APIs are part of the [Admin Panel API](/cms/plugins-development/admin-panel-api). They are a way to add content or options from plugins to the [Content-Manager](/cms/features/content-manager), so you can extend the Content-Manager by adding functionality from your own plugin, just like you can do it with [Injection Zones](/cms/plugins-development/admin-panel-api#injection-zones-api).

Strapi 5 provides 4 Content-Manager APIs, all accessible through `app.getPlugin('content-manager').apis`:

- [`addEditViewSidePanel`](#addeditviewsidepanel),
- [`addDocumentAction`](#adddocumentaction),
- [`addDocumentHeaderAction`](#adddocumentheaderaction),
- and [`addBulkAction`](#addbulkaction).

## General information

All the Content Manager APIs share the same API shape and must use components.

### API shape

All Content Manager APIs works in the same way: to use them, call them on your plugin‚Äôs [bootstrap](/cms/plugins-development/admin-panel-api#bootstrap) function, in 2 possible ways:

- Passing an array with what you want to add. For example, the following code would add the ReleasesPanel at the end of the current EditViewSidePanels:
  
  ```jsx
  app.getPlugin('content-manager').apis.addEditViewSidePanel([ReleasesPanel])`
  ```

- Passing a function that receives the current elements and return the new ones. This is useful if, for example, you want to add something in a specific position in the list, like in the following code:

  ```jsx
  app.getPlugin('content-manager').apis.addEditViewSidePanel(
    (panels) => [SuperImportantPanel, ...panels]
  )
  ```

### Components

You need to pass components to the API in order to add things to the Content Manager. These components are basically functions that receive some properties and return and object with some shape (depending on the function). Each component‚Äôs return object is different based on the function you‚Äôre using, but they receive similar properties, depending on whether you use a ListView or EditView API. These properties include important information about the document(s) you are viewing or editing.

#### ListViewContext

```jsx
interface ListViewContext {
  /**
   * Will be either 'single-types' | 'collection-types'
   */
  collectionType: string;
  /**
   * The current selected documents in the table
   */
  documents: Document[];
  /**
   * The current content-type's model.
   */
  model: string;
}
```

#### EditViewContext

```jsx
interface EditViewContext {
  /**
   * This will only be null if the content-type
   * does not have draft & publish enabled.
   */
  activeTab: 'draft' | 'published' | null;
  /**
   * Will be either 'single-types' | 'collection-types'
   */
  collectionType: string;
  /**
   * Will be undefined if someone is creating an entry.
   */
  document?: Document;
  /**
   * Will be undefined if someone is creating an entry.
   */
  documentId?: string;
  /**
   * Will be undefined if someone is creating an entry.
   */
  meta?: DocumentMetadata;
  /**
   * The current content-type's model.
   */
  model: string;
}
```

:::tip
More information about types and APIs can be found in <ExternalLink to="https://github.com/strapi/strapi/blob/develop/packages/core/content-manager/admin/src/content-manager.ts" text="Strapi's codebase, in the `/admin/src/content-manager.ts` file"/>.
:::

**Example:**

Adding a panel to the sidebar can be done this way:

```jsx title="my-plugin/components/my-panel.ts"
import type { PanelComponent, PanelComponentProps } from '@strapi/content-manager/strapi-admin';

const Panel: PanelComponent = ({ 
  activeTab, 
  collectionType, 
  document, 
  documentId, 
  meta, 
  model 
}: PanelComponentProps) => {
  return {
    title: 'My Panel',
    content: <p>I'm on {activeTab}</p>
  }
}
```

## Available APIs

<br/>

### `addEditViewSidePanel`

Use this to add new panels to the Edit view sidebar, just like in the following example where something is added to the Releases panel:

![addEditViewSidePanel](/img/assets/content-manager-apis/add-edit-view-side-panel.png)

```jsx
addEditViewSidePanel(panels: DescriptionReducer<PanelComponent> | PanelComponent[])
```

#### PanelDescription

The interface of the API only receives the following 2 properties:

```jsx
{
  title: string;
  content: React.ReactNode;	
}
```

### `addDocumentAction`

Use this API to add more actions to the Edit view or the List View of the Content Manager. There are 3 positions available:

- `header` of the Edit view:

    ![Header of the Edit view](/img/assets/content-manager-apis/add-document-action-header.png)
- `panel` of the Edit view:

    ![Panel of the Edit View](/img/assets/content-manager-apis/add-document-action-panel.png)
- `table-row` of the List view:

    ![Table-row in the List View](/img/assets/content-manager-apis/add-document-action-tablerow.png)

```jsx
addDocumentAction(actions: DescriptionReducer<DocumentActionComponent> | DocumentActionComponent[])
```

#### DocumentActionDescription

The interface and properties of the API look like the following: 

```jsx
interface DocumentActionDescription {
    label: string;
    onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;
    icon?: React.ReactNode;
    /**
     * @default false
     */
    disabled?: boolean;
    /**
     * @default 'panel'
     * @description Where the action should be rendered.
     */
    position?: DocumentActionPosition | DocumentActionPosition[];
    dialog?: DialogOptions | NotificationOptions | ModalOptions;
    /**
     * @default 'secondary'
     */
    variant?: ButtonProps['variant'];
}

type DocumentActionPosition = 'panel' | 'header' | 'table-row';

interface DialogOptions {
    type: 'dialog';
    title: string;
    content?: React.ReactNode;
    variant?: ButtonProps['variant'];
    onConfirm?: () => void | Promise<void>;
    onCancel?: () => void | Promise<void>;
}
interface NotificationOptions {
    type: 'notification';
    title: string;
    link?: {
        label: string;
        url: string;
        target?: string;
    };
    content?: string;
    onClose?: () => void;
    status?: NotificationConfig['type'];
    timeout?: number;
}
interface ModalOptions {
    type: 'modal';
    title: string;
    content: React.ComponentType<{
        onClose: () => void;
    }> | React.ReactNode;
    footer?: React.ComponentType<{
        onClose: () => void;
    }> | React.ReactNode;
    onClose?: () => void;
}
```

### `addDocumentHeaderAction`

Use this API to add more actions to the header of the Edit view of the Content Manager:

![addEditViewSidePanel](/img/assets/content-manager-apis/add-document-header-action.png)

```jsx
addDocumentHeaderAction(actions: DescriptionReducer<HeaderActionComponent> | HeaderActionComponent[])
```

#### HeaderActionDescription

The interface and properties of the API look like the following:

```jsx
interface HeaderActionDescription {
  disabled?: boolean;
  label: string;
  icon?: React.ReactNode;
  type?: 'icon' | 'default';
  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;
  dialog?: DialogOptions;
  options?: Array<{
    disabled?: boolean;
    label: string;
    startIcon?: React.ReactNode;
    textValue?: string;
    value: string;
  }>;
  onSelect?: (value: string) => void;
  value?: string;
}

interface DialogOptions {
  type: 'dialog';
  title: string;
  content?: React.ReactNode;
  footer?: React.ReactNode;
}
```

### `addBulkAction`

Use this API to add buttons that show up when entries are selected on the List View of the Content Manager, just like the "Add to Release" button for instance:

![addEditViewSidePanel](/img/assets/content-manager-apis/add-bulk-action.png)

```jsx
addBulkAction(actions: DescriptionReducer<BulkActionComponent> | BulkActionComponent[])
```

#### BulkActionDescription

The interface and properties of the API look like the following: 

```jsx
interface BulkActionDescription {
  dialog?: DialogOptions | NotificationOptions | ModalOptions;
  disabled?: boolean;
  icon?: React.ReactNode;
  label: string;
  onClick?: (event: React.SyntheticEvent) => void;
  /**
   * @default 'default'
   */
  type?: 'icon' | 'default';
  /**
   * @default 'secondary'
   */
  variant?: ButtonProps['variant'];
}
```


 This is the content for the doc docusaurus/docs/cms/plugins-development/create-a-plugin.md 

 ---
title: Plugin creation & setup
description: Learn how to use the Plugin SDK to build and publish a Strapi plugin
pagination_next: cms/plugins-development/plugin-structure
tags:
  - guides
  - plugins
  - Plugin SDK
  - plugins development
---

# Plugin creation

There are many ways to create a Strapi 5 plugin, but the fastest and recommended way is to use the Plugin SDK.

The Plugin SDK is a set of commands orientated around developing plugins to use them as local plugins or to publish them on NPM and/or submit them to the Marketplace.

With the Plugin SDK, you do not need to set up a Strapi project before creating a plugin.

The present guide covers creating a plugin from scratch, linking it to an existing Strapi project, and publishing the plugin. If you already have an existing plugin, you can instead retrofit the plugin setup to utilise the Plugin SDK commands (please refer to the [Plugin SDK reference](/cms/plugins-development/plugin-sdk) for a full list of available commands).

:::note
This guide assumes you want to develop a plugin external to your Strapi project. However, the steps largely remain the same if you want to develop a plugin within your existing project. If you are not [using a monorepo](#monorepo) the steps are exactly the same.
:::

:::prerequisites
<ExternalLink to="https://www.npmjs.com/package/yalc" text="yalc"/> must be installed globally (with `npm install -g yalc` or `yarn global add yalc`).
:::

## Getting started with the Plugin SDK

The Plugin SDK helps you creating a plugin, linking it to an existing Strapi project, and building it for publishing.

The full list of commands and their parameters are available in the [Plugin SDK reference](/cms/plugins-development/plugin-sdk). The present page will guide on using the main ones.

### Creating the plugin

To create your plugin, ensure you are in the parent directory of where you want it to be created and run the following command:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="Yarn">

```bash
yarn dlx @strapi/sdk-plugin init my-strapi-plugin
```

</TabItem>

<TabItem value="npm" label="NPM">

```bash
npx @strapi/sdk-plugin init my-strapi-plugin
```

</TabItem>

</Tabs>

The path `my-strapi-plugin` can be replaced with whatever you want to call your plugin, including the path to where it should be created (e.g., `code/strapi-plugins/my-new-strapi-plugin`).

You will be ran through a series of prompts to help you setup your plugin. If you selected yes to all options the final structure will be similar to the default [plugin structure](/cms/plugins-development/plugin-structure).

### Linking the plugin to your project

In order to test your plugin during its development, the recommended approach is to link it to a Strapi project.

Linking your plugin to a project is done with the `watch:link` command. The command will output explanations on how to link your plugin to a Strapi project.

In a new terminal window, run the following commands:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="Yarn">

```bash
cd /path/to/strapi/project
yarn dlx yalc add --link my-strapi-plugin && yarn install
```

</TabItem>

<TabItem value="npm" label="NPM">

```bash
cd /path/to/strapi/project
npx yalc add --link my-strapi-plugin && npm install
```

</TabItem>

</Tabs>

:::note
In the above examples we use the name of the plugin (`my-strapi-plugin`) when linking it to the project. This is the name of the package, not the name of the folder.
:::

Because this plugin is installed via `node_modules` you won't need to explicity add it to your `plugins` [configuration file](/cms/configurations/plugins), so running the [`develop command`](/cms/cli#strapi-develop) to start your Strapi project will automatically pick up your plugin.

Now that your plugin is linked to a project, run `yarn develop` or `npm run develop` to start the Strapi application.

You are now ready to develop your plugin how you see fit! If you are making server changes, you will need to restart your server for them to take effect.

### Building the plugin for publishing

When you are ready to publish your plugin, you will need to build it. To do this, run the following command:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="Yarn">

```bash
yarn build && yarn verify
```

</TabItem>

<TabItem value="npm" label="NPM">

```bash
npm run build && npm run verify
```

</TabItem>

</Tabs>

The above commands will not only build the plugin, but also verify that the output is valid and ready to be published. You can then publish your plugin to NPM as you would any other package.

## Working with the Plugin SDK in a monorepo environment {#monorepo}

If you are working with a monorepo environment to develop your plugin, you don't need to use the `watch:link` command because the monorepo workspace setup will handle the symlink. You can use the `watch` command instead.

However, if you are writing admin code, you might add an `alias` that targets the source code of your plugin to make it easier to work with within the context of the admin panel:

```ts
import path from 'node:path';

export default (config, webpack) => {
  config.resolve.alias = {
    ...config.resolve.alias,
    'my-strapi-plugin': path.resolve(
      __dirname,
      // We've assumed the plugin is local.
      '../plugins/my-strapi-plugin/admin/src'
    ),
  };

  return config;
};
```

:::caution
Because the server looks at the `server/src/index.ts|js` file to import your plugin code, you must use the `watch` command otherwise the code will not be transpiled and the server will not be able to find your plugin.
:::

### Configuration with a local plugin

Since the Plugin SDK is primarily designed for developing plugins, not locally, the configuration needs to be adjusted manually for local plugins.

When developing your plugin locally (using `@strapi/sdk-plugin`), your plugins configuration file looks like in the following example:

```js title="/config/plugins.js|ts"
myplugin: {
  enabled: true,
  resolve: `./src/plugins/local-plugin`,
},
```

However, this setup can sometimes lead to errors such as the following:

```js
Error: 'X must be used within StrapiApp';
```

This error often occurs when your plugin attempts to import core Strapi functionality, for example using:

```js
import { unstable_useContentManagerContext as useContentManagerContext } from '@strapi/strapi/admin';
```

To resolve the issue, remove `@strapi/strapi` as a dev dependency from your plugin. This ensures that your plugin uses the same instance of Strapi‚Äôs core modules as the main application, preventing conflicts and the associated errors.

## Setting a local plugin in a monorepo environment without the Plugin SDK

In a monorepo, you can configure your local plugin without using the Plugin SDK by adding 2 entry point files at the root of your plugin:

- server entry point: `strapi-server.js|ts`
- admin entry point: `strapi-admin.js|ts`

### Server entry point

The server entry point file initializes your plugin‚Äôs server-side functionalities. The expected structure for `strapi-server.js` (or its TypeScript variant) is:

```js
module.exports = () => {
  return {
    register,
    config,
    controllers,
    contentTypes,
    routes,
  };
};
```

Here, you export a function that returns your plugin's core components such as controllers, routes, and configuration. For more details, please refer to the [Server API reference](/cms/plugins-development/server-api).

### Admin entry point

The admin entry point file sets up your plugin within the Strapi admin panel. The expected structure for `strapi-admin.js` (or its TypeScript variant) is:

```js
export default {
  register(app) {},
  bootstrap() {},
  registerTrads({ locales }) {},
};
```

This object includes methods to register your plugin with the admin application, perform bootstrapping actions, and handle translations. For more details, please refer to the [Admin Panel API reference](/cms/plugins-development/admin-panel-api).

:::tip
For a complete example of how to structure your local plugin in a monorepo environment, please check out our <ExternalLink to="https://github.com/strapi/strapi/tree/develop/examples/getstarted/src/plugins/local-plugin" text="example setup in the strapi/strapi repository" />.
:::


 This is the content for the doc docusaurus/docs/cms/plugins-development/developing-plugins.md 

 ---
title: Developing plugins
description: Generation introduction about Strapi plugins development
displayed_sidebar: cmsSidebar
pagination_prev: cms/plugins-development/developing-plugins
pagination_next: cms/plugins-development/create-a-plugin
tags:
- admin panel API
- introduction
- plugin APIs
- plugins development
- server API
---

# Developing Strapi plugins

Strapi allows the development of plugins that work exactly like the built-in plugins or 3rd-party plugins available from the <ExternalLink to="https://market.strapi.io" text="Marketplace"/>. Once created, your plugin can be:

- used as a local plugin, working only with a specific Strapi project,
- or <ExternalLink to="https://market.strapi.io/submit-plugin" text="submitted to the Marketplace"/> to be shared with the community.

üëâ To start developing a Strapi plugin:

1. [Create a plugin](/cms/plugins-development/create-a-plugin) using the Plugin SDK.
2. Learn more about the [structure of a plugin](/cms/plugins-development/plugin-structure).
3. Get an overview of the [plugin APIs](#plugin-apis) to add features to your plugin.
4. Read some advanced [guides](#guides) based on your use case(s).

:::note
Ensure you release your Strapi 5 plugin as a different major version number to distinguish it from the v4 compatible version.
:::

## Plugin APIs

Strapi provides the following programmatic APIs for plugins to hook into some of Strapi's features:

<CustomDocCardsWrapper>
<CustomDocCard emoji="" title="Admin Panel API" description="Use the Admin Panel API to have your plugin interact with the admin panel of Strapi." link="/cms/plugins-development/admin-panel-api" />
<CustomDocCard emoji="" title="Server API" description="Use the Server API to have your plugin interact with the backend server of Strapi." link="/cms/plugins-development/server-api" />
</CustomDocCardsWrapper>

:::strapi Custom fields plugins
Plugins can also be used to add [custom fields](/cms/features/custom-fields) to Strapi.
:::

## Guides

<CustomDocCard small emoji="üíÅ" title="How to store and access data from a Strapi plugin" description="" link="/cms/plugins-development/guides/store-and-access-data" />
<CustomDocCard small emoji="üíÅ" title="How to pass data from the backend server to the admin panel with a plugin" description="" link="/cms/plugins-development/guides/pass-data-from-server-to-admin" />

<br />

:::strapi Additional resources
The <ExternalLink to="https://contributor.strapi.io/" text="contributors documentation"/> can also include additional information useful while developing a Strapi plugin.
:::


 This is the content for the doc docusaurus/docs/cms/plugins-development/guides/create-components-for-plugins.md 

 ---
title: How to create components for Strapi plugins
description: Learn how to create and configure components for your Strapi plugins
sidebar_label: Create components for plugins
displayed_sidebar: cmsSidebar
tags:
- admin panel
- components
- content-type
- guides
- plugins
- plugins development guides
---

# How to create components for Strapi plugins

When [developing a Strapi plugin](/cms/plugins-development/developing-plugins), you might want to create reusable components for your plugin. Components in Strapi are reusable data structures that can be used across different content-types.

To create components for your Strapi plugin, you'll need to follow a similar approach to creating content-types, but with some specific differences.

## Creating components

You can create components for your plugins in 2 different ways: using the Content-Type Builder (recommended way) or manually.

### Using the Content-Type Builder 

The recommended way to create components for your plugin is through the Content-Type Builder in the admin panel. 
The [Content-Type Builder documentation](/cms/features/content-type-builder#new-component) provides more details on this process.

### Creating components manually

If you prefer to create components manually, you'll need to:

1. Create a component schema in your plugin's structure.
2. Make sure the component is properly registered.

Components for plugins should be placed in the appropriate directory within your plugin structure. You would typically create them within the server part of your plugin (see [plugin structure documentation](/cms/plugins-development/plugin-structure)).

For more detailed information about components in Strapi, you can refer to the [Model attributes documentation](/cms/backend-customization/models#components-json).

## Reviewing the component structure

Components in Strapi follow the following format in their definition:

```javascript title="/my-plugin/server/components/category/component-name.json"
{
  "attributes": {
    "myComponent": {
      "type": "component",
      "repeatable": true,
      "component": "category.componentName"
    }
  }
}
```

## Making components visible in the admin panel

To ensure your plugin's components are visible in the admin panel, you need to set the appropriate `pluginOptions` in your component schema:

```javascript {9-16}
{
  "kind": "collectionType",
  "collectionName": "my_plugin_components",
  "info": {
    "singularName": "my-plugin-component",
    "pluralName": "my-plugin-components",
    "displayName": "My Plugin Component"
  },
  "pluginOptions": {
    "content-manager": {
      "visible": true
    },
    "content-type-builder": {
      "visible": true
    }
  },
  "attributes": {
    "name": {
      "type": "string"
    }
  }
}
```

This configuration ensures your components will be visible and editable in both the Content-Type Builder and Content Manager.


 This is the content for the doc docusaurus/docs/cms/plugins-development/guides/pass-data-from-server-to-admin.md 

 ---
title: How to pass data from server to admin panel with a Strapi plugin
description: Learn how to pass data from server to admin panel with a Strapi plugin
sidebar_label: Pass data from server to admin
displayed_sidebar: cmsSidebar
tags:
- admin panel
- admin routes 
- content-type
- guides
- plugins
- plugins development guides
---

import NotV5 from '/docs/snippets/_not-updated-to-v5.md'

# How to pass data from server to admin panel with a Strapi plugin

<NotV5 />

Strapi is **headless** <HeadlessCms />. The admin panel is completely separate from the server.

When [developing a Strapi plugin](/cms/plugins-development/developing-plugins) you might want to pass data from the `/server` to the `/admin` folder. Within the `/server` folder you have access to the Strapi object and can do database queries whereas in the `/admin` folder you can't.

Passing data from the `/server` to the `/admin` folder can be done using the admin panel's Axios instance:

<MermaidWithFallback
    chartFile="/diagrams/pass-data.mmd"
    fallbackImage="/img/assets/diagrams/pass-data.png"
    fallbackImageDark="/img/assets/diagrams/pass-data_DARK.png"
    alt="Diagram to show how to pass data from server to admin"
/>

To pass data from the `/server` to `/admin` folder you would first [create a custom admin route](#create-a-custom-admin-route) and then [get the data returned in the admin panel](#get-the-data-in-the-admin-panel).

## Create a custom admin route

Admin routes are like the routes that you would have for any controller, except that the `type: 'admin'` declaration hides them from the general API router, and allows you to access them from the admin panel.

The following code will declare a custom admin route for the `my-plugin` plugin:

```js title="/my-plugin/server/routes/index.js"
module.exports = {
  'pass-data': {
    type: 'admin',
    routes: [
      {
        method: 'GET',
        path: '/pass-data',
        handler: 'myPluginContentType.index',
        config: {
          policies: [],
          auth: false,
        },
      },
    ]
  }
  // ...
};
```

This route will call the `index` method of the `myPluginContentType` controller when you send a GET request to the `/my-plugin/pass-data` URL endpoint.

Let's create a basic custom controller that simply returns a simple text:

```js title="/my-plugin/server/controllers/my-plugin-content-type.js"
'use strict';

module.exports = {
  async index(ctx) {
    ctx.body = 'You are in the my-plugin-content-type controller!';
  }
}
```

This means that when sending a GET request to the `/my-plugin/pass-data` URL endpoint, you should get the `You are in the my-plugin-content-type controller!` text returned with the response.

## Get the data in the admin panel

Any request sent from an admin panel component to the endpoint for which we defined the custom route `/my-plugin/pass-data` should now return the text message returned by the custom controller.

So for instance, if you create an `/admin/src/api/foobar.js` file and copy and paste the following code example:

```js title="/my-plugin/admin/src/api/foobar.js"
import axios from 'axios';

const foobarRequests = {
  getFoobar: async () => {
    const data = await axios.get(`/my-plugin/pass-data`);
    return data;
  },
};
export default foobarRequests;
```

You will be able to use `foobarRequests.getFoobar()` in the code of an admin panel component and have it return the `You are in the my-plugin-content-type controller!` text with the data.

For instance, within a React component, you could use `useEffect` to get the data after the component initializes:

```js title="/my-plugin/admin/src/components/MyComponent/index.js"
import foobarRequests from "../../api/foobar";
const [foobar, setFoobar] = useState([]);

// ‚Ä¶
useEffect(() => {
  foobarRequests.getFoobar().then(res => {
    setSchemas(res.data);
  });
}, [setFoobar]);
// ‚Ä¶
```

This would set the `You are in the my-plugin-content-type controller!` text within the `foobar` data of the component's state.


 This is the content for the doc docusaurus/docs/cms/plugins-development/guides/store-and-access-data.md 

 ---
title: How to store and access data from a Strapi plugin
description: Learn how to store and access data from a Strapi plugin
sidebar_label: Store and access data
displayed_sidebar: cmsSidebar
tags:
- content-type
- guides
- plugins
- plugins development
- plugins development guides
---

import NotV5 from '/docs/snippets/_not-updated-to-v5.md'

# How to store and access data from a Strapi plugin

<NotV5/>

To store data with a Strapi [plugin](/cms/plugins-development/developing-plugins), use a plugin content-type. Plugin content-types work exactly like other [content-types](/cms/backend-customization/models). Once the content-type is [created](#create-a-content-type-for-your-plugin), you can start [interacting with the data](#interact-with-data-from-the-plugin).

## Create a content-type for your plugin

To create a content-type with the CLI generator, run the following command in a terminal within the `server/src/` directory of your plugin:

<Tabs groupId="yarn-npm">
<TabItem value="yarn" label="Yarn">

```bash
yarn strapi generate content-type
```

</TabItem>

<TabItem value="npm" label="NPM">

```bash
npm run strapi generate content-type
```

</TabItem>
</Tabs>

The generator CLI is interactive and asks a few questions about the content-type and the attributes it will contain. Answer the first questions, then for the `Where do you want to add this model?` question, choose the `Add model to existing plugin` option and type the name of the related plugin when asked.

<figure style={{width: '100%', margin: '0' }}>
  <img src="/img/assets/development/generate-plugin-content-type.png" alt="Generating a content-type plugin with the CLI" />
  <em><figcaption style={{fontSize: '12px'}}>The <code>strapi generate content-type</code> CLI generator is used to create a basic content-type for a plugin.</figcaption></em>
</figure>

<br />

The CLI will generate some code required to use your plugin, which includes the following:

- the [content-type schema](/cms/backend-customization/models#model-schema)
- and a basic [controller](/cms/backend-customization/controllers), [service](/cms/backend-customization/services), and [route](/cms/backend-customization/routes) for the content-type

:::tip
You may want to create the whole structure of your content-types either entirely with the CLI generator or by directly creating and editing `schema.json` files. We recommend you first create a simple content-type with the CLI generator and then leverage the [Content-Type Builder](/cms/features/content-type-builder) in the admin panel to edit your content-type.

If your content-type is not visible in the admin panel, you might need to set the `content-manager.visible` and `content-type-builder.visible` parameters to `true` in the `pluginOptions` object of the content-type schema:

<details>
<summary>Making a plugin content-type visible in the admin panel:</summary>

The following highlighted lines in an example `schema.json` file show how to make a plugin content-type visible to the Content-Type Builder and Content-Manager:

```json title="/server/content-types/my-plugin-content-type/schema.json" {13-20} showLineNumbers
{
  "kind": "collectionType",
  "collectionName": "my_plugin_content_types",
  "info": {
    "singularName": "my-plugin-content-type",
    "pluralName": "my-plugin-content-types",
    "displayName": "My Plugin Content-Type"
  },
  "options": {
    "draftAndPublish": false,
    "comment": ""
  },
  "pluginOptions": {
    "content-manager": {
      "visible": true
    },
    "content-type-builder": {
      "visible": true
    }
  },
  "attributes": {
    "name": {
      "type": "string"
    }
  }
}

```

</details>
:::

### Ensure plugin content-types are imported

The CLI generator might not have imported all the related content-type files for your plugin, so you might have to make the following adjustments after the `strapi generate content-type` CLI command has finished running:

1. In the `/server/index.js` file, import the content-types:

  ```js {7,22} showLineNumbers title="/server/index.js"
  'use strict';

  const register = require('./register');
  const bootstrap = require('./bootstrap');
  const destroy = require('./destroy');
  const config = require('./config');
  const contentTypes = require('./content-types');
  const controllers = require('./controllers');
  const routes = require('./routes');
  const middlewares = require('./middlewares');
  const policies = require('./policies');
  const services = require('./services');

  module.exports = {
    register,
    bootstrap,
    destroy,
    config,
    controllers,
    routes,
    services,
    contentTypes,
    policies,
    middlewares,
  };

  ```

2. In the `/server/content-types/index.js` file, import the content-type folder:

  ```js title="/server/content-types/index.js"
  'use strict';

  module.exports = {
    // In the line below, replace my-plugin-content-type
    // with the actual name and folder path of your content type
    "my-plugin-content-type": require('./my-plugin-content-type'),
  };
  ```

3. Ensure that the `/server/content-types/[your-content-type-name]` folder contains not only the `schema.json` file generated by the CLI, but also an `index.js` file that exports the content-type with the following code:

  ```js title="/server/content-types/my-plugin-content-type/index.js
  'use strict';

  const schema = require('./schema');

  module.exports = {
    schema,
  };
  ```

## Interact with data from the plugin

Once you have created a content-type for your plugin, you can create, read, update, and delete data.

:::note
A plugin can only interact with data from the `/server` folder. If you need to update data from the admin panel, please refer to the [passing data guide](/cms/plugins-development/guides/pass-data-from-server-to-admin).
:::

To create, read, update, and delete data, you can use either the [Entity Service API](/cms/api/entity-service) or the [Query Engine API](/cms/api/query-engine). While it's recommended to use the Entity Service API, especially if you need access to components or dynamic zones, the Query Engine API is useful if you need unrestricted access to the underlying database.

Use the `plugin::your-plugin-slug.the-plugin-content-type-name` syntax for content-type identifiers in Entity Service and Query Engine API queries.

**Example:**

Here is how to find all the entries for the `my-plugin-content-type` collection type created for a plugin called `my-plugin`:

```js
// Using the Document Service API
let data = await strapi.documents('plugin::my-plugin.my-plugin-content-type').findMany();

// Using the Query Engine API
let data = await strapi.db.query('plugin::my-plugin.my-plugin-content-type').findMany();
````

:::tip
You can access the database via the `strapi` object which can be found in `middlewares`, `policies`, `controllers`, `services`, as well as from the `register`, `boostrap`, `destroy` lifecycle functions.
:::


 This is the content for the doc docusaurus/docs/cms/plugins-development/plugin-sdk.md 

 ---
title: Plugin SDK
description: Reference documentation for Strapi's Plugin SDK commands
displayed_sidebar: cmsSidebar
tags:
  - backend server
  - Plugin SDK
  - plugins
  - plugins development
---

# Plugin SDK reference

The Plugin SDK is set of commands provided by the package <ExternalLink to="https://github.com/strapi/sdk-plugin" text="@strapi/sdk-plugin"/> orientated around developing plugins to use them as local plugins or to publish them on NPM and/or submit them to the Marketplace.

The present documentation lists the available Plugin SDK commands. The [associated guide](/cms/plugins-development/create-a-plugin) illustrates how to use these commands to create a plugin from scratch, link it to an existing project, and publish it.

## npx @strapi/sdk-plugin init

Create a new plugin at a given path.

```bash
npx @strapi/sdk-plugin init
```

| Arguments |  Type  | Description        | Default                   |
| --------- | :----: | ------------------ | ------------------------- |
| `path`    | string | Path to the plugin | `./src/plugins/my-plugin` |

| Option        | Type | Description                             | Default |
| ------------- | :--: | --------------------------------------- | ------- |
| `-d, --debug` |  -   | Enable debugging mode with verbose logs | false   |
| `--silent`    |  -   | Do not log anything                     | false   |

## strapi-plugin build

Bundle the Strapi plugin for publishing.

```bash
strapi-plugin build
```

| Option         |  Type  | Description                                                                                                       | Default |
| -------------- | :----: | ----------------------------------------------------------------------------------------------------------------- | ------- |
| `--force`      | string | Automatically answer "yes" to all prompts, including potentially destructive requests, and run non-interactively. | -       |
| `-d, --debug`  |   -    | Enable debugging mode with verbose logs                                                                           | false   |
| `--silent`     |   -    | Do not log anything                                                                                               | false   |
| `--minify`     |   -    | Minify the output                                                                                                 | true    |
| `--sourcemaps` |   -    | Produce sourcemaps                                                                                                | false   |

## strapi-plugin watch:link

Recompiles the plugin automatically on changes and runs `yalc push --publish`.

For testing purposes, it is very convenient to link your plugin to an existing application to experiment with it in real condition. This command is made to help you streamline this process.

```bash
strapi-plugin watch:link
```

| Option        | Type | Description                             | Default |
| ------------- | :--: | --------------------------------------- | ------- |
| `-d, --debug` |  -   | Enable debugging mode with verbose logs | false   |
| `--silent`    |  -   | Do not log anything                     | false   |

## strapi-plugin watch

Watch the plugin source code for any change and rebuild it everytime. Useful when implementing your plugin and testing it in an application.

```bash
strapi-plugin watch
```

| Option        | Type | Description                             | Default |
| ------------- | :--: | --------------------------------------- | ------- |
| `-d, --debug` |  -   | Enable debugging mode with verbose logs | false   |
| `--silent`    |  -   | Do not log anything                     | false   |

## strapi-plugin verify

Verify the output of the plugin before publishing it.

```bash
strapi-plugin verify
```

| Option        | Type | Description                             | Default |
| ------------- | :--: | --------------------------------------- | ------- |
| `-d, --debug` |  -   | Enable debugging mode with verbose logs | false   |
| `--silent`    |  -   | Do not log anything                     | false   |


 This is the content for the doc docusaurus/docs/cms/plugins-development/plugin-structure.md 

 ---
title: Plugin structure
description: Learn more about the structure of a Strapi plugin
displayed_sidebar: cmsSidebar
tags:
- admin panel
- Command Line Interface (CLI)
- backend server
- plugins
- plugins development
- plugins structure
- server-only plugin
---

import InteractivePluginStructure from '@site/src/components/PluginStructure.js'

# Plugin structure

When [creating a plugin with Plugin SDK](/cms/plugins-development/create-a-plugin), Strapi generates the following boilerplate structure for you in the `/src/plugins/my-plugin` folder:

<InteractivePluginStructure />

A Strapi plugin is divided into 2 parts, each living in a different folder and offering a different API:

| Plugin part | Description | Folder       | API |
|-------------|-------------|--------------|-----|
| Admin panel | Includes what will be visible in the [admin panel](/cms/intro) (components, navigation, settings, etc.) | `admin/` |[Admin Panel API](/cms/plugins-development/admin-panel-api)|
| Backend server | Includes what relates to the [backend server](/cms/backend-customization) (content-types, controllers, middlewares, etc.) |`server/` |[Server API](/cms/plugins-development/server-api)|

<br />

:::note Notes about the usefulness of the different parts for your specific use case
- **Server-only plugin**: You can create a plugin that will just use the server part to enhance the API of your application. For instance, this plugin could have its own visible or invisible content-types, controller actions, and routes that are useful for a specific use case. In such a scenario, you don't need your plugin to have an interface in the admin panel.

- **Admin panel plugin vs. application-specific customization**: You can create a plugin to inject some components into the admin panel. However, you can also achieve this by creating a `/src/admin/index.js` file and invoking the `bootstrap` lifecycle function to inject your components. In this case, deciding whether to create a plugin depends on whether you plan to reuse and distribute the code or if it's only useful for a unique Strapi application.
:::

<br/>

:::strapi What to read next?
The next steps of your Strapi plugin development journey will require you to use any of the Strapi plugins APIs.

2 different types of resources help you understand how to use the plugin APIs:

- The reference documentation for the [Admin Panel API](/cms/plugins-development/admin-panel-api) and [Server API](/cms/plugins-development/server-api) give an overview of what is possible to do with a Strapi plugin.
- [Guides](/cms/plugins-development/developing-plugins#guides) cover some specific, use-case based examples.
:::


 This is the content for the doc docusaurus/docs/cms/plugins-development/plugins-extension.md 

 ---
title: Plugins extension
displayed_sidebar: cmsSidebar
tags:
- bootstrap function
- controllers
- middlewares
- policies
- plugins
- plugins development
- register function 
- services
---

# Plugins extension

Strapi comes with plugins that can be installed from the [Marketplace](/cms/plugins/installing-plugins-via-marketplace#installing-marketplace-plugins-and-providers) or as npm packages. You can also create your own plugins (see [plugins development](/cms/plugins-development/developing-plugins)) or extend the existing ones.

:::warning
* Any plugin update could break this plugin's extensions.
* New versions of Strapi will be released with migration guides when required, but these guides never cover plugin extensions. Consider forking a plugin if extensive customizations are required.
* Currently, the admin panel part of a plugin can only be extended using <ExternalLink to="https://www.npmjs.com/package/patch-package" text="patch-package"/>, but please consider that doing so might break your plugin in future versions of Strapi.
:::

Plugin extensions code is located in the `./src/extensions` folder (see [project structure](/cms/project-structure)). Some plugins automatically create files there, ready to be modified.

<details> 
<summary>Example of extensions folder structure</summary>

```bash
/extensions
  /some-plugin-to-extend
    strapi-server.js|ts
    /content-types
      /some-content-type-to-extend
        model.json
      /another-content-type-to-extend
        model.json
  /another-plugin-to-extend
    strapi-server.js|ts
```
</details>

Plugins can be extended in 2 ways:

- [extending the plugin's content-types](#extending-a-plugins-content-types)
- [extending the plugin's interface](#extending-a-plugins-interface) (e.g. to add controllers, services, policies, middlewares and more)

## Extending a plugin's content-types

A plugin's Content-Types can be extended in 2 ways: using the programmatic interface within `strapi-server.js|ts` and by overriding the content-types schemas.

The final schema of the content-types depends on the following loading order:

1. the content-types of the original plugin,
2. the content-types overridden by the declarations in the [schema](/cms/backend-customization/models#model-schema) defined in `./src/extensions/plugin-name/content-types/content-type-name/schema.json`
3. the content-types declarations in the [`content-types` key exported from `strapi-server.js|ts`](/cms/plugins-development/server-api#content-types)
4. the content-types declarations in the [`register()` function](/cms/configurations/functions#register) of the Strapi application

To overwrite a plugin's [content-types](/cms/backend-customization/models):

1. _(optional)_ Create the `./src/extensions` folder at the root of the app, if the folder does not already exist.
2. Create a subfolder with the same name as the plugin to be extended.
3. Create a `content-types` subfolder.
4. Inside the `content-types` subfolder, create another subfolder with the same [singularName](/cms/backend-customization/models#model-information) as the content-type to overwrite.
5. Inside this `content-types/name-of-content-type` subfolder, define the new schema for the content-type in a `schema.json` file (see [schema](/cms/backend-customization/models#model-schema) documentation).
6. _(optional)_ Repeat steps 4 and 5 for each content-type to overwrite.

## Extending a plugin's interface

When a Strapi application is initializing, plugins, extensions and global lifecycle functions events happen in the following order:

1. Plugins are loaded and their interfaces are exposed.
2. Files in `./src/extensions` are loaded.
3. The `register()` and `bootstrap()` functions in `./src/index.js|ts` are called.

A plugin's interface can be extended at step 2 (i.e. within `./src/extensions`) or step 3 (i.e. inside `./src/index.js|ts`).

:::note
If your Strapi project is TypeScript-based, please ensure that the `index` file has a TypeScript extension (i.e., `src/index.ts`) otherwise it will not be compiled.
:::

### Within the extensions folder

To extend a plugin's server interface using the `./src/extensions` folder:

1. _(optional)_ Create the `./src/extensions` folder at the root of the app, if the folder does not already exist.
2. Create a subfolder with the same name as the plugin to be extended.
3. Create a `strapi-server.js|ts` file to extend a plugin's back end using the [Server API](/cms/plugins-development/server-api).
4. Within this file, define and export a function. The function receives the `plugin` interface as an argument so it can be extended.

<details>
<summary>Example of backend extension</summary>

```js title="./src/extensions/some-plugin-to-extend/strapi-server.js|ts"

module.exports = (plugin) => {
  plugin.controllers.controllerA.find = (ctx) => {};

  plugin.policies[newPolicy] = (ctx) => {};

  plugin.routes['content-api'].routes.push({
    method: 'GET',
    path: '/route-path',
    handler: 'controller.action',
  });

  return plugin;
};
```
</details>

### Within the register and bootstrap functions

To extend a plugin's interface within `./src/index.js|ts`, use the `bootstrap()` and `register()` [functions](/cms/configurations/functions) of the whole project, and access the interface programmatically with [getters](/cms/plugins-development/server-api#usage).

<details>
<summary>Example of extending a plugin's content-type within ./src/index.js|ts</summary>

```js title="./src/index.js|ts"

module.exports = {
  register({ strapi }) {
    const contentTypeName = strapi.contentType('plugin::my-plugin.content-type-name')  
    contentTypeName.attributes = {
      // Spread previous defined attributes
      ...contentTypeName.attributes,
      // Add new, or override attributes
      'toto': {
        type: 'string',
      }
    }
  },
  bootstrap({ strapi }) {},
};
```
</details>



 This is the content for the doc docusaurus/docs/cms/plugins-development/server-api.md 

 ---
title: Server API for plugins
sidebar_label: Server API
displayed_sidebar: cmsSidebar
description: Strapi's Server API for plugins allows a Strapi plugin to customize the back end part (i.e. the server) of your application.
tags:
- plugin APIs
- lifecycle function
- register function
- bootstrap function
- destroy function
- configuration
- backend customization
- routes
- controllers
- services
- policies
- middlewares

---

# Server API for plugins

A Strapi plugin can interact with both the back end and the [front end](/cms/plugins-development/admin-panel-api) of a Strapi application. The Server API is about the back-end part, i.e. how the plugin interacts with the server part of a Strapi application.

:::prerequisites
You have [created a Strapi plugin](/cms/plugins-development/create-a-plugin).
:::

The Server API includes:

- an [entry file](#entry-file) which export the required interface,
- [lifecycle functions](#lifecycle-functions),
- a [configuration](#configuration) API,
- and the ability to [customize all elements of the back-end server](#backend-customization).

Once you have declared and exported the plugin interface, you will be able to [use the plugin interface](#usage).

:::note
The whole code for the server part of your plugin could live in the `/server/src/index.ts|js` file. However, it's recommended to split the code into different folders, just like the [structure](/cms/plugins-development/plugin-structure) created by the Plugin SDK.
:::

## Entry file

The `/src/server/index.js` file at the root of the plugin folder exports the required interface, with the following parameters available:

| Parameter type         | Available parameters                                                                                                                                                                                           |
| ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Lifecycle functions    | <ul><li> [register](#register)</li><li>[bootstrap](#bootstrap)</li><li>[destroy](#destroy)</li></ul>                                                                                                           |
| Configuration          | <ul><li>[config](#configuration) object   </li></ul>                                                                                                                                                                             |
| Backend customizations | <ul><li>[contentTypes](#content-types)</li><li>[routes](#routes)</li><li>[controllers](#controllers)</li><li>[services](#services)</li><li>[policies](#policies)</li><li>[middlewares](#middlewares)</li></ul> |

## Lifecycle functions

<br/>

### register()

This function is called to load the plugin, before the application is [bootstrapped](#bootstrap), in order to register [permissions](/cms/features/users-permissions), the server part of [custom fields](/cms/features/custom-fields#registering-a-custom-field-on-the-server), or database migrations.

**Type**: `Function`

**Example:**

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/src/register.js"

'use strict';

const register = ({ strapi }) => {
  // execute some register code
};

module.exports = register;
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/src/register.ts"

import type { Core } from '@strapi/strapi';

const register = ({ strapi }: { strapi: Core.Strapi }) => {
  // execute some register code
};

export default register;
```

</TabItem>

</Tabs>

### bootstrap()

The [bootstrap](/cms/configurations/functions#bootstrap) function is called right after the plugin has [registered](#register).

**Type**: `Function`

**Example:**

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/src/bootstrap.js"
'use strict';

const bootstrap = ({ strapi }) => {
  // execute some bootstrap code
};

module.exports = bootstrap;
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/src/bootstrap.ts"
import type { Core } from '@strapi/strapi';

const bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {
  // execute some bootstrap code
};

export default bootstrap;

```

</TabItem>

</Tabs>

### destroy()

The [destroy](/cms/configurations/functions#destroy) lifecycle function is called to cleanup the plugin (close connections, remove listeners, etc.) when the Strapi instance is destroyed.

**Type**: `Function`

**Example:**

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/src/destroy.js"
'use strict';

const destroy = ({ strapi }) => {
  // execute some destroy code
};

module.exports = destroy;
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/src/destroy.ts"
import type { Core } from '@strapi/strapi';

const destroy = ({ strapi }: { strapi: Core.Strapi }) => {
  // destroy phase
};

export default destroy;
```

</TabItem>
</Tabs>

## Configuration

`config` stores the default plugin configuration. It loads and validates the configuration inputted from the user within the [`./config/plugins.js` configuration file](/cms/configurations/plugins).

**Type**: `Object`

| Parameter   | Type                                           | Description                                                                                                                                              |
| ----------- | ---------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `default`   | Object, or Function that returns an Object | Default plugin configuration, merged with the user configuration                                                                                         |
| `validator` | Function                                       | <ul><li>Checks if the results of merging the default plugin configuration with the user configuration is valid</li><li>Throws errors when the resulting configuration is invalid</li></ul> |

**Example:**

<Tabs groupId="js-ts">
<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/src/config/index.js"

module.exports = {
  default: ({ env }) => ({ optionA: true }),
  validator: (config) => { 
    if (typeof config.optionA !== 'boolean') {
      throw new Error('optionA has to be a boolean');
    }
  },
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/src/config/index.ts"

export default {
  default: ({ env }) => ({ optionA: true }),
  validator: (config) => { 
    if (typeof config.optionA !== 'boolean') {
      throw new Error('optionA has to be a boolean');
    }
  },
};
```

</TabItem>
</Tabs>

Once defined, the configuration can be accessed:

- with `strapi.plugin('plugin-name').config('some-key')` for a specific configuration property,
- or with `strapi.config.get('plugin.plugin-name')` for the whole configuration object.

:::tip
Run `yarn strapi console` or `npm run strapi console` to access the strapi object in a live console.
:::

## Backend customization

All elements of the back-end server of Strapi can be customized through a plugin using the Server API.

:::prerequisites
To better understand this section, ensure you have read through the [back-end customization](/cms/backend-customization) documentation of a Strapi application.
:::

### Content-types

An object with the [content-types](/cms/backend-customization/models) the plugin provides.

**Type**: `Object`

:::note
Content-Types keys in the `contentTypes` object should re-use the `singularName` defined in the [`info`](/cms/backend-customization/models#model-information) key of the schema.
:::

**Example:**

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/content-types/index.js"

'use strict';

const contentTypeA = require('./content-type-a');
const contentTypeB = require('./content-type-b');

module.exports = {
  'content-type-a': { schema: contentTypeA }, // should re-use the singularName of the content-type
  'content-type-b': { schema: contentTypeB },
};
```

```js title="/src/plugins/my-plugin/server/content-types/content-type-a.js"

module.exports = {
  kind: 'collectionType',
  collectionName: 'content-type',
  info: {
    singularName: 'content-type-a', // kebab-case mandatory
    pluralName: 'content-type-as', // kebab-case mandatory
    displayName: 'Content Type A',
    description: 'A regular content-type',
  },
  options: {
    draftAndPublish: true,
  },
  pluginOptions: {
    'content-manager': {
      visible: false,
    },
    'content-type-builder': {
      visible: false,
    }
  },
  attributes: {
    name: {
      type: 'string',
      min: 1,
      max: 50,
      configurable: false,
    },
  }
};
```

</TabItem>
<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/content-types/index.ts"

const contentTypeA = require('./content-type-a');
const contentTypeB = require('./content-type-b');

module.exports = {
  'content-type-a': { schema: contentTypeA }, // should re-use the singularName of the content-type
  'content-type-b': { schema: contentTypeB },
};
```

```js title="/src/plugins/my-plugin/server/content-types/content-type-a.ts"

export default {
  kind: 'collectionType',
  collectionName: 'content-type',
  info: {
    singularName: 'content-type-a', // kebab-case mandatory
    pluralName: 'content-type-as', // kebab-case mandatory
    displayName: 'Content Type A',
    description: 'A regular content-type',
  },
  options: {
    draftAndPublish: true,
  },
  pluginOptions: {
    'content-manager': {
      visible: false,
    },
    'content-type-builder': {
      visible: false,
    }
  },
  attributes: {
    name: {
      type: 'string',
      min: 1,
      max: 50,
      configurable: false,
    },
  }
};
```

</TabItem>
</Tabs>

### Routes

An array of [routes](/cms/backend-customization/routes) configuration.

**Type**: `Object[]`

**Examples:**

<Tabs groupId="js-ts">

<TabItem value="content-api" label="Content API routes only">

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/index.js"

const routes = require('./routes');

module.exports = () => ({
  routes,
  type: 'content-api', // can also be 'admin' depending on the type of route
});
```

```js title="/src/plugins/my-plugin/server/routes/index.js"

module.exports = [
  {
    method: 'GET',
    path: '/model',
    handler: 'controllerName.action',
    config: {
      policies: ['policyName'],
    },
  },
];
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/index.ts"

const routes = require('./routes');

export default {
  routes,
  type: 'content-api', // can also be 'admin' depending on the type of route
};
```

```js title="/src/plugins/my-plugin/server/routes/index.ts"

export default [
  {
    method: 'GET',
    path: '/model',
    handler: 'controllerName.action',
    config: {
      policies: ['policyName'],
    },
  },
];
```

</TabItem>

</Tabs>

</TabItem>

<TabItem value="both" label="Content API and admin routes">

It is also possible to combine both admin and Content API routes if you need different policies on these: 

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="./src/plugins/my-plugin/server/routes/index.js"

module.exports = {
  admin: require('./admin'),
  'content-api': require('./content-api'),
};
```

```js title="./src/plugins/my-plugin/server/routes/admin/index.js"

module.exports = {
  type: 'admin',
  routes: [{
    method: 'GET',
    path: '/model',
    handler: 'controllerName.action',
    config: {
      policies: ['policyName'],
    },
  }],
};
```

```js title="./src/plugins/my-plugin/server/routes/content-api/index.js"

module.exports = {
  type: 'content-api',
  routes: [{
    method: 'GET',
    path: '/model',
    handler: 'controllerName.action',
    config: {
      policies: ['differentPolicyName'],
    },
  }],
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/routes/index.ts"

export default {
  admin: require('./admin'),
  'content-api': require('./content-api'),
};
```

```js title="/src/plugins/my-plugin/server/routes/admin/index.ts"

export default {
  type: 'admin',
  routes: [{
    method: 'GET',
    path: '/model',
    handler: 'controllerName.action',
    config: {
      policies: ['policyName'],
    },
  }],
};
```

```js title="./src/plugins/my-plugin/server/routes/content-api/index.ts"

export default {
  type: 'content-api',
  routes: [{
    method: 'GET',
    path: '/model',
    handler: 'controllerName.action',
    config: {
      policies: ['differentPolicyName'],
    },
  }],
};
```

</TabItem>

</Tabs>

</TabItem>
</Tabs>

### Controllers

An object with the [controllers](/cms/backend-customization/controllers) the plugin provides.

**Type**: `Object`

**Example:**

<Tabs groupdId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/src/index.js"

//‚Ä¶
const controllers = require('./controllers');
//‚Ä¶

module.exports = () => ({
  //‚Ä¶
  controllers,
  //‚Ä¶
});
```

```js title="/src/plugins/my-plugin/server/controllers/index.js"

const controllerA = require('./controller-a');
const controllerB = require('./controller-b');

module.exports = {
  controllerA,
  controllerB,
};
```

```js title="/src/plugins/my-plugin/server/controllers/controller-a.js"

'use strict';

const controllerA = ({ strapi }) => ({
  index(ctx) {
    ctx.body = strapi
      .plugin('my-strapi-plugin')
      // the name of the service file & the method.
      .service('service')
      .getWelcomeMessage();
  },
});

module.exports = controllerA;

```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/src/index.ts"

import controllers from './controllers';

module.exports = () => ({
  controllers,
});
```

```js title="/src/plugins/my-plugin/server/controllers/index.ts"

import controllerA from './controller-a';
import controllerB from './controller-b';

export default {
  controllerA,
  controllerB,
};
```

```js title="/src/plugins/my-plugin/server/controllers/controller-a.ts"

import type { Core } from '@strapi/strapi';

const controllerA = ({ strapi }: { strapi: Core.Strapi }) => ({
  index(ctx) {
    ctx.body = strapi
      .plugin('my-strapi-plugin')
      // the name of the service file & the method.
      .service('service')
      .getWelcomeMessage();
  },
});

export default controllerA;

```

</TabItem>

</Tabs>

### Services

An object with the [services](/cms/backend-customization/services) the plugin provides.

Services should be functions taking `strapi` as a parameter.

**Type**: `Object`

**Example:**

<Tabs groupdId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/src/index.js"

// ‚Ä¶
const services = require('./services');
// ‚Ä¶

module.exports = () => ({
  // ‚Ä¶
  services,
  // ‚Ä¶
});
```

```js title="/src/plugins/my-plugin/server/services/index.js"

const serviceA = require('./service-a');
const serviceB = require('./service-b');

module.exports = {
  serviceA,
  serviceB,
};
```

```js title="./src/plugins/my-plugin/server/services/service-a.js"

'use strict';

const service = ({ strapi }) => ({
  getWelcomeMessage() {
    return 'Welcome to Strapi üöÄ';
  },
});

module.exports = service;

```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/src/index.ts"

// ‚Ä¶
import services from './services';
// ‚Ä¶

export default {
  // ‚Ä¶
  services,
  // ‚Ä¶
};
```

```js title="/src/plugins/my-plugin/server/services/index.ts"

import serviceA from './service-a';
import serviceB from './service-b';

export default {
  serviceA,
  serviceB,
};
```

```js title="/src/plugins/my-plugin/server/services/service-a.ts"

import type { Core } from '@strapi/strapi';

const serviceA = ({ strapi }: { strapi: Core.Strapi }) => ({
  getWelcomeMessage() {
    return 'Welcome to Strapi üöÄ';
  },
});

export default serviceA;

```

</TabItem>

</Tabs>

### Policies

An object with the [policies](/cms/backend-customization/policies) the plugin provides.

**Type**: `Object`

**Example:**

<Tabs groupdId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/src/index.js"

"use strict";

//‚Ä¶
const policies = require('./policies');
//‚Ä¶

module.exports = {
  //‚Ä¶
  policies,
  //‚Ä¶
};
```

```js title="/src/plugins/my-plugin/server/policies/index.js"

const policyA = require('./policy-a');
const policyB = require('./policy-b');

module.exports = {
  policyA,
  policyB,
};
```

```js title="/src/plugins/my-plugin/server/policies/policy-a.js"

module.exports = (policyContext, config, { strapi }) => {
  if (ctx.state.user && ctx.state.user.isActive) {
    return true;
  }

  return false;
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/src/index.ts"

//‚Ä¶
import policies from './policies';
//‚Ä¶

module.exports = {
  //‚Ä¶
  policies,
  //‚Ä¶
};
```

```js title="/src/plugins/my-plugin/server/policies/index.ts"

import policyA from './policy-a';
import policyB from './policy-b';

export default {
  policyA,
  policyB,
};
```

```js title="/src/plugins/my-plugin/server/policies/policy-a.ts"

export default (policyContext, config, { strapi }) => {
  if (ctx.state.user && ctx.state.user.isActive) {
    return true;
  }

  return false;
};
```

</TabItem>

</Tabs>

### Middlewares

An object with the [middlewares](/cms/configurations/middlewares) the plugin provides.

**Type**: `Object`

**Example:**

<Tabs groupId="js-ts">

<TabItem value="js" label="JavaScript">

```js title="/src/plugins/my-plugin/server/middlewares/your-middleware.js"

/** 
 * The your-middleware.js file 
 * declares a basic middleware function and exports it.
 */
'use strict';
module.exports = async (ctx, next) => {
  console.log("your custom logic")
  await next();
}
```

```js title="./src/plugins/my-plugin/server/middlewares/index.js"

/**
 * The middleware function previously created
 * is imported from its file and
 * exported by the middlewares index.
 */
'use strict';
const yourMiddleware = require('./your-middleware');

module.exports = {
  yourMiddleware
};
```

```js title="./src/plugins/my-plugin/server/register.js"

/**
 * The middleware is called from 
 * the plugin's register lifecycle function.
 */
'use strict';
const middlewares = require('./middlewares');

module.exports = ({ strapi }) => {
  strapi.server.use(middlewares.yourMiddleware);
};
```

</TabItem>

<TabItem value="ts" label="TypeScript">

```js title="/src/plugins/my-plugin/server/middlewares/your-middleware.ts"

/** 
 * The your-middleware.js file 
 * declares a basic middleware function and exports it.
 */
const middleware = async (ctx, next) => {
  console.log("your custom logic")
  await next();
}

export default middleware;
```

```js title="./src/plugins/my-plugin/server/middlewares/index.ts"

/**
 * The middleware function previously created
 * is imported from its file and
 * exported by the middlewares index.
 */
import yourMiddleware from 'your-middleware';

export default {
  yourMiddleware
};
```

```js title="/src/plugins/my-plugin/server/register.ts"

/**
 * The middleware is called from 
 * the plugin's register lifecycle function.
 */
import type { Core } from '@strapi/strapi';
import middlewares from './middlewares';

export default ({ strapi }: { strapi: Core.Strapi }) => {
  strapi.server.use(middlewares.yourMiddleware);
};

```

</TabItem>

</Tabs>

## Usage

Once a plugin is exported and loaded into Strapi, its features are accessible in the code through getters. The Strapi instance (`strapi`) exposes both top-level getters and global getters:

- top-level getters imply chaining functions<br/>(e.g., `strapi.plugin('the-plugin-name').controller('the-controller-name'`),
- global getters are syntactic sugar that allows direct access using a feature's uid<br/>(e.g., `strapi.controller('plugin::plugin-name.controller-name')`).

```js
// Access an API or a plugin controller using a top-level getter 
strapi.api['api-name'].controller('controller-name')
strapi.plugin('plugin-name').controller('controller-name')

// Access an API or a plugin controller using a global getter
strapi.controller('api::api-name.controller-name')
strapi.controller('plugin::plugin-name.controller-name')
```

<details>
<summary> Top-level getter syntax examples</summary>

```js
strapi.plugin('plugin-name').config
strapi.plugin('plugin-name').routes
strapi.plugin('plugin-name').controller('controller-name')
strapi.plugin('plugin-name').service('service-name')
strapi.plugin('plugin-name').contentType('content-type-name')
strapi.plugin('plugin-name').policy('policy-name')
strapi.plugin('plugin-name').middleware('middleware-name')
```

</details>

<details>
<summary> Global getter syntax examples</summary>

```js
strapi.controller('plugin::plugin-name.controller-name');
strapi.service('plugin::plugin-name.service-name');
strapi.contentType('plugin::plugin-name.content-type-name');
strapi.policy('plugin::plugin-name.policy-name');
strapi.middleware('plugin::plugin-name.middleware-name');
```

</details>

:::strapi Document Service API
To interact with the content-types, use the [Document Service API](/cms/api/document-service).
:::


 This is the content for the doc docusaurus/docs/cms/plugins/documentation.md 

 ---
title: Documentation plugin
displayed_sidebar: cmsSidebar
description: By using Swagger UI, the API documentation plugin takes out most of your pain to generate your documentation.
toc_max_heading_level: 5
tags:
- admin panel 
- excludeFromGeneration function
- OpenAPI specification
- override service 
- pluginOrigin 
- plugins 
- register function
- Swagger UI
---

# Documentation plugin

The Documentation plugin automates your API documentation creation. It basically generates a swagger file. It follows the <ExternalLink to="https://swagger.io/specification/" text="Open API specification version"/>.

<IdentityCard isPlugin>
  <IdentityCardItem icon="navigation-arrow" title="Location">
    Usable via the admin panel.<br/>Configured through both admin panel and server code, with different sets of options.
  </IdentityCardItem>
  <IdentityCardItem icon="package" title="Package name">
    `@strapi/plugin-documentation`
  </IdentityCardItem>
    <IdentityCardItem icon="plus-square" title="Additional resources">
    <ExternalLink to="https://market.strapi.io/plugins/@strapi-plugin-documentation" text="Strapi Marketplace page" />
  </IdentityCardItem>
</IdentityCard>

:::caution Unmaintained plugin
The Documentation plugin is not actively maintained and may not work with Strapi 5.
:::

<Guideflow lightId="5pvjz4zswp" darkId="6kw4vdwizp"/>

If installed, the Documentation plugin will inspect content types and routes found on all APIs in your project and any plugin specified in the configuration. The plugin will then programmatically generate documentation to match the <ExternalLink to="https://swagger.io/specification/" text="OpenAPI specification"/>. The Documentation plugin generates the <ExternalLink to="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#paths-object" text="paths objects"/> and <ExternalLink to="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object" text="schema objects"/> and converts all Strapi types to <ExternalLink to="https://swagger.io/docs/specification/data-models/data-types/" text="OpenAPI data types"/>.

The generated documentation JSON file can be found in your application at the following path: `src/extensions/documentation/documentation/<version>/full_documentation.json`

## Installation

To install the documentation plugin, run following command in your terminal:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn add @strapi/plugin-documentation
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm install @strapi/plugin-documentation
```

</TabItem>

</Tabs>

Once the plugin is installed, starting Strapi generates the API documentation.

## Configuration

Most configuration options for the Documentation plugin are handled via your Strapi project's code. A few settings are available in the admin panel.

### Admin panel settings

The Documentation plugin affects multiple parts of the admin panel. The following table lists all the additional options and settings that are added to a Strapi application once the plugin has been installed:

| Section impacted    | Options and settings         |
|------------------|-------------------------------------------------------------|
| Documentation    | <ul>Addition of a new Documentation option in the main navigation <Icon name="info" /> which shows a panel with buttons to <Icon name="eye" /> open and <Icon name="arrow-clockwise" /> regenerate the documentation.</ul>        |
| Settings     | <ul><li>Addition of a "Documentation plugin" setting section, which controls whether the documentation endpoint is private or not (see [restricting access](#restrict-access)).<br/> üëâ Path reminder: <Icon name="gear-six" /> *Settings > Documentation plugin* </li><br/>  <li> Activation of role based access control for accessing, updating, deleting, and regenerating the documentation. Administrators can authorize different access levels to different types of users in the *Plugins* tab and the *Settings* tab (see [Users & Permissions documentation](/cms/features/users-permissions)).<br/>üëâ Path reminder: <Icon name="gear-six" /> *Settings > Administration Panel > Roles* </li></ul>| 

#### Restricting access to your API documentation {#restrict-access}

By default, your API documentation will be accessible by anyone.

To restrict API documentation access, enable the¬†**Restricted Access**¬†option from the admin panel:

1. Navigate to <Icon name="gear-six" /> *Settings* in the main navigation of the admin panel.
2. Choose **Documentation**.
3. Toggle **Restricted Access** to¬†`ON`.
4. Define a password in the¬†`password`¬†input.
5. Save the settings.

### Code-based configuration

To configure the Documentation plugin, create a `settings.json` file in the `src/extensions/documentation/config` folder. In this file, you can specify all your environment variables, licenses, external documentation links, and all the entries listed in the <ExternalLink to="https://swagger.io/specification/" text="specification"/>. 

The following is an example configuration:

```json title="src/extensions/documentation/config/settings.json"
{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "DOCUMENTATION",
    "description": "",
    "termsOfService": "YOUR_TERMS_OF_SERVICE_URL",
    "contact": {
      "name": "TEAM",
      "email": "contact-email@something.io",
      "url": "mywebsite.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "x-strapi-config": {
    "plugins": ["upload", "users-permissions"],
    "path": "/documentation"
  },
  "servers": [
    {
      "url": "http://localhost:1337/api",
      "description": "Development server"
    }
  ],
  "externalDocs": {
    "description": "Find out more",
    "url": "https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html"
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
```

:::tip
If you need to add a custom key, prefix it by `x-` (e.g., `x-strapi-something`).
:::

#### Creating a new version of the documentation {#create-a-new-version-of-the-documentation}

To create a new version, change the `info.version` key in the `settings.json` file:

```json title="src/extensions/documentation/config/settings.json"
{
  "info": {
    "version": "2.0.0"
  }
}
```

This will automatically create a new version.

#### Defining which plugins need documentation generated {#define-which-plugins}

If you want plugins to be included in documentation generation, they should be included in the `plugins` array in the `x-strapi-config` object. By default, the array is initialized with `["upload", "users-permissions"]`:

```json title="src/extensions/documentation/config/settings.json"
{
  "x-strapi-config": {
    "plugins": ["upload", "users-permissions"]
  }
}
```

To add more plugins, such as your custom plugins, add their name to the array.

If you do not want plugins to be included in documentation generation, provide an empty array (i.e., `plugins: []`).

#### Overriding the generated documentation

The Documentation plugins comes with 3 methods to override the generated documentation: [`excludeFromGeneration`](#excluding-from-generation), [`registerOverride`](#register-override), and [`mutateDocumentation`](#mutate-documentation).

##### excludeFromGeneration() {#excluding-from-generation}

To exclude certain APIs or plugins from being generated, use the `excludeFromGeneration` found on the documentation plugin‚Äôs `override` service in your application or plugin's [`register` lifecycle](/cms/plugins-development/admin-panel-api#register).

:::note
`excludeFromGeneration` gives more fine-grained control over what is generated.

For example, pluginA might create several new APIs while pluginB may only want to generate documentation for some of those APIs. In that case, pluginB could still benefit from the generated documentation it does need by excluding only what it does not need.
:::

*****

| Parameter | Type                       | Description                                              |
| --------- | -------------------------- | -------------------------------------------------------- |
| `api`       | String or Array of Strings | The name of the API/plugin, or list of names, to exclude |

```js title="Application or plugin register lifecycle"

module.exports = {
  register({ strapi }) {
    strapi
      .plugin("documentation")
      .service("override")
      .excludeFromGeneration("restaurant");
    // or several
    strapi
      .plugin("documentation")
      .service("override")
      .excludeFromGeneration(["address", "upload"]);
  }
}
```

##### registerOverride() {#register-override}

If the Documentation plugin fails to generate what you expect, it is possible to replace what has been generated.

The Documentation plugin exposes an API that allows you to replace what was generated for the following OpenAPI root level keys: `paths`, `tags`, `components` .

To provide an override, use the `registerOverride` function found on the Documentation plugin‚Äôs `override` service in your application or plugin's [`register` lifecycle](/cms/plugins-development/admin-panel-api#register).

| Parameter                     | Type                      | Description                                                                                                   |
| ----------------------------- | ------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `override`                     | Object                    | OpenAPI object including any of the following keys paths, tags, components. Accepts JavaScript, JSON, or yaml |
| `options`                      | Object                    | Accepts `pluginOrigin` and `excludeFromGeneration`                                                               |
| `options.pluginOrigin`          | String                    | The plugin that is registering the override                                                                   |
| `options.excludeFromGeneration` | String or Array of String | The name of the API/plugin, or list of names, to exclude                                                      |

:::caution
Plugin developers providing an override should always specify the `pluginOrigin` options key. Otherwise the override will run regardless of the user‚Äôs configuration.
:::

The Documentation plugin will use the registered overrides to replace the value of common keys on the generated documentation with what the override provides. If no common keys are found, the plugin will add new keys to the generated documentation.

If the override completely replaces what the documentation generates, you can specify that generation is no longer necessary by providing the names of the APIs or plugins to exclude in the options key array `excludeFromGeneration`.

If the override should only be applied to a specific version, the override must include a value for `info.version`. Otherwise, the override will run on all documentation versions.

```js title="Application or plugin register lifecycle"

module.exports = {
  register({ strapi }) {
    if (strapi.plugin('documentation')) {
      const override = {
        // Only run this override for version 1.0.0
        info: { version: '1.0.0' },
        paths: {
          '/answer-to-everything': {
            get: {
              responses: { 200: { description: "*" }}
            }
          }
        }
      }

      strapi
        .plugin('documentation')
        .service('override')
        .registerOverride(override, {
          // Specify the origin in case the user does not want this plugin documented
          pluginOrigin: 'upload',
          // The override provides everything don't generate anything
          excludeFromGeneration: ['upload'],
        });
    }
  },
}
```

The overrides system is provided to try and simplify amending the generated documentation. It is the only way a plugin can add or modify the generated documentation.

##### mutateDocumentation() {#mutate-documentation}

The Documentation plugin‚Äôs configuration also accepts a `mutateDocumentation` function on `info['x-strapi-config']`. This function receives a draft state of the generated documentation that be can be mutated. It should only be applied from an application and has the final say in the OpenAPI schema.

| Parameter                   | Type   | Description                                                            |
| --------------------------- | ------ | ---------------------------------------------------------------------- |
| `generatedDocumentationDraft` | Object | The generated documentation with applied overrides as a mutable object |

```js title="config/plugins.js"

module.exports = {
  documentation: {
    config: {
      "x-strapi-config": {
        mutateDocumentation: (generatedDocumentationDraft) => {
          generatedDocumentationDraft.paths[
            "/answer-to-everything" // must be an existing path
          ].get.responses["200"].description = "*";
        },
      },
    },
  },
};
```

## Usage

The Documentation plugin visualizes your API using <ExternalLink to="https://swagger.io/tools/swagger-ui/" text="Swagger UI"/>. To access the UI, select <Icon name="info" /> in the main navigation of the admin panel. Then click **Open documentation** to open the Swagger UI. Using the Swagger UI you can view all of the endpoints available on your API and trigger API calls.

:::tip
Once the plugin is installed, the plugin user interface can be accessed at the following URL:
`<server-url>:<server-port>/documentation/<documentation-version>`
(e.g., <ExternalLink to="http://localhost:1337/documentation/v1.0.0" text="`localhost:1337/documentation/v1.0.0`"/>).
:::

### Regenerating documentation {#regenerate-documentation}

There are 2 ways to update the documentation after making changes to your API:

- restart your application to regenerate the version of the documentation specified in the Documentation plugin's configuration,
- or go to the Documentation plugin page and click the¬†**regenerate**¬†button for the documentation version you want to regenerate.

### Authenticating requests

Strapi is secured by default, which means that most of your endpoints require the user to be authorized. If the CRUD action has not been set to Public in the [Users & Permissions feature](/cms/features/users-permissions#roles) then you must provide your JSON web token (JWT). To do this, while viewing the API Documentation, click the **Authorize** button and paste your JWT in the _bearerAuth_ _value_ field.


 This is the content for the doc docusaurus/docs/cms/plugins/graphql.md 

 ---
title: GraphQL plugin
displayed_sidebar: cmsSidebar
toc_max_heading_level: 6
description: Use a GraphQL endpoint in your Strapi project to fetch and mutate your content.
tags:
- admin panel 
- API token
- Apollo Server 
- getters
- GraphQL API
- GraphQL 
- policies
- plugins 
- middlewares
- Users, Roles & Permissions

---

# GraphQL plugin

By default Strapi create [REST endpoints](/cms/api/rest#endpoints) for each of your content-types. The GraphQL plugin adds a GraphQL endpoint to fetch and mutate your content. With the GraphQL plugin installed, you can use the Apollo Server-based GraphQL Sandbox to interactively build your queries and mutations and read documentation tailored to your content types.

<IdentityCard isPlugin>
  <IdentityCardItem icon="navigation-arrow" title="Location">Usable via the admin panel.<br/>Configured through both admin panel and server code, with different sets of options.</IdentityCardItem>
  <IdentityCardItem icon="package" title="Package name">`@strapi/plugin-graphql`  </IdentityCardItem>
  <IdentityCardItem icon="plus-square" title="Additional resources"><ExternalLink to="https://market.strapi.io/plugins/@strapi-plugin-graphql" text="Strapi Marketplace page"/> </IdentityCardItem>
</IdentityCard>

<ThemedImage
  alt="GraphQL playground use example"
  sources={{
    light:'/img/assets/apis/use-graphql-playground.gif',
    dark:'/img/assets/apis/use-graphql-playground_DARK.gif',
  }}
/>

## Installation

To install the GraphQL plugin, run the following command in your terminal:

<Tabs groupId="yarn-npm">
<TabItem value="yarn" label="Yarn">

```sh
yarn add @strapi/plugin-graphql
```

</TabItem>
<TabItem value="npm" label="NPM">

```sh
npm install @strapi/plugin-graphql
```

</TabItem>

</Tabs>

Once installed, the GraphQL sandbox is accessible at the `/graphql` URL and can be used to interactively build your queries and mutations and read documentation tailored to your content-types.

Once the plugin is installed, the **GraphQL Sandbox** is accessible at the `/graphql` route (e.g., <ExternalLink to="http://localhost:1337/graphql" text="localhost:1337/graphql"/>) when your Strapi application server is running.

## Configuration

Most configuration options for the Documentation plugin are handled via your Strapi project's code, though the GraphQL playground also offers some non-specific Strapi settings.

### Admin panel settings

The Strapi admin panel does not provide Strapi-specific settings for the GraphQL plugin. However, the GraphQL Playground accessible at the `/graphql` route is an embedded Apollo Server playground, so it includes all configuration and settings available with such an instance. Please refer to the official <ExternalLink to="https://www.apollographql.com/docs/apollo-server/v2/testing/graphql-playground" text="GraphQL playground documentation"/> for details.

### Code-based configuration

Plugins configuration are defined in [the `config/plugins.js` file](/cms/configurations/plugins). This configuration file can include a `graphql.config` object to define specific configurations for the GraphQL plugin.

#### Available options

<ExternalLink to="https://www.apollographql.com/docs/apollo-server/api/apollo-server/#apolloserver" text="Apollo Server"/> options can be passed directly to Apollo with the `graphql.config.apolloServer` configuration object. Apollo Server options can be used for instance to enable the <ExternalLink to="https://www.apollographql.com/docs/federation/metrics/" text="tracing feature"/>, which is supported by the GraphQL Sandbox to track the response time of each part of your query. The `Apollo Server` default cache option is `cache: 'bounded'`. You can change it in the `apolloServer` configuration. For more information visit <ExternalLink to="https://www.apollographql.com/docs/apollo-server/performance/cache-backends/" text="Apollo Server Docs"/>.

The GraphQL plugin has the following specific configuration options that should be declared in a `graphql.config` object within the `config/plugins` file. All parameters are optional:

| Option             | Type                | Description                                                                                                                                                      | Default Value | Notes                                               |
| ------------------ | ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | --------------------------------------------------- |
| `endpoint`         | String              | Sets the GraphQL endpoint path.                                                                                                                                  | `'/graphql'`  | Example: `/custom-graphql`                          |
| `shadowCRUD`       | Boolean             | Enables or disables automatic schema generation for content types.                                                                                               | `true`        |                                                     |
| `depthLimit`       | Number              | Limits the depth of GraphQL queries to prevent excessive nesting.                                                                                                | `10`          | Use this to mitigate potential DoS attacks.         |
| `amountLimit`      | Number              | Limits the maximum number of items returned in a single response.                                                                                                | `100`         | Use cautiously to avoid performance issues.         |
| `playgroundAlways` | Boolean             | [Deprecated] Enables GraphQL Playground in all environments (deprecated).                                                                                        | `false`       | Prefer using `landingPage` instead.                 |
| `landingPage`      | Boolean \| Function | Enables or disables the landing page for GraphQL. Accepts a boolean or a function returning a boolean or an ApolloServerPlugin implementing `renderLandingPage`. |               | `false` in production, `true` in other environments |
| `apolloServer`     | Object              | Passes configuration options directly to Apollo Server.                                                                                                          | `{}`          | Example: `{ tracing: true }`    

:::caution
The maximum number of items returned by the response is limited to 100 by default. This value can be changed using the `amountLimit` configuration option, but should only be changed after careful consideration: a large query can cause a DDoS (Distributed Denial of Service) and may cause abnormal load on your Strapi server, as well as your database server.
:::

:::note
The GraphQL Sandbox is enabled by default in all environments except production. Set the `landingPage` configuration option to `true` to also enable the GraphQL Sandbox in production environments.
:::

The following is an example custom configuration:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"
module.exports = {
  graphql: {
    config: {
      endpoint: '/graphql',
      shadowCRUD: true,
      landingPage: false, // disable Sandbox everywhere
      depthLimit: 7,
      amountLimit: 100,
      apolloServer: {
        tracing: false,
      },
    },
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/plugins.ts"
export default () => ({
  graphql: {
    config: {
      endpoint: '/graphql',
      shadowCRUD: true,
      landingPage: false, // disable Sandbox everywhere
      depthLimit: 7,
      amountLimit: 100,
      apolloServer: {
        tracing: false,
      },
    },
  },
})
```

</TabItem>

</Tabs>


#### Dynamically enable Apollo Sandbox

You can use a function to dynamically enable Apollo Sandbox depending on the environment:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```javascript title="./config/plugins.js" {6-12}
module.exports = ({ env }) => {
  graphql: {
    config: {
      endpoint: '/graphql',
      shadowCRUD: true,
      landingPage: (strapi) => {
        if (env("NODE_ENV") !== "production") {
          return true;
        } else {
          return false;
        }
      },
    },
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./config/plugins.ts" {6-12}
export default ({ env }) => {
  graphql: {
    config: {
      endpoint: '/graphql',
      shadowCRUD: true,
      landingPage: (strapi) => {
        if (env("NODE_ENV") !== "production") {
          return true;
        } else {
          return false;
        }
      },
    },
  },
};
```
</TabItem>

</Tabs>

#### CORS exceptions for Landing Page

If the landing page is enabled in production environments (which is not recommended), CORS headers for the Apollo Server landing page must be added manually.

To add them globally, you can merge the following into your middleware configuration:

```javascript title="/config/middlewares"
{
  name: "strapi::security",
  config: {
    contentSecurityPolicy: {
      useDefaults: true,
      directives: {
        "connect-src": ["'self'", "https:", "apollo-server-landing-page.cdn.apollographql.com"],
        "img-src": ["'self'", "data:", "blob:", "apollo-server-landing-page.cdn.apollographql.com"],
        "script-src": ["'self'", "'unsafe-inline'", "apollo-server-landing-page.cdn.apollographql.com"],
        "style-src": ["'self'", "'unsafe-inline'", "apollo-server-landing-page.cdn.apollographql.com"],
        "frame-src": ["sandbox.embed.apollographql.com"]
      }
    }
  }
}
```

To add these exceptions only for the `/graphql` path (recommended), you can create a new middleware to handle it. For example:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```javascript title="./middlewares/graphql-security.js"
module.exports = (config, { strapi }) => {
  return async (ctx, next) => {
    if (ctx.request.path === '/graphql') {
      ctx.set('Content-Security-Policy', "default-src 'self'; script-src 'self' 'unsafe-inline' cdn.jsdelivr.net apollo-server-landing-page.cdn.apollographql.com; connect-src 'self' https:; img-src 'self' data: blob: apollo-server-landing-page.cdn.apollographql.com; media-src 'self' data: blob: apollo-server-landing-page.cdn.apollographql.com; frame-src sandbox.embed.apollographql.com; manifest-src apollo-server-landing-page.cdn.apollographql.com;");
    }
    await next();
  };
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./middlewares/graphql-security.ts"
export default (config, { strapi }) => {
  return async (ctx, next) => {
    if (ctx.request.path === '/graphql') {
      ctx.set('Content-Security-Policy', "default-src 'self'; script-src 'self' 'unsafe-inline' cdn.jsdelivr.net apollo-server-landing-page.cdn.apollographql.com; connect-src 'self' https:; img-src 'self' data: blob: apollo-server-landing-page.cdn.apollographql.com; media-src 'self' data: blob: apollo-server-landing-page.cdn.apollographql.com; frame-src sandbox.embed.apollographql.com; manifest-src apollo-server-landing-page.cdn.apollographql.com;");
    }
    await next();
  };
};
```

</TabItem>

</Tabs>

#### Shadow CRUD

To simplify and automate the build of the GraphQL schema, we introduced the Shadow CRUD feature. It automatically generates the type definitions, queries, mutations and resolvers based on your models.

**Example:**

If you've generated an API called `Document` using [the interactive `strapi generate` CLI](/cms/cli#strapi-generate) or the administration panel, your model looks like this:

```json title="/src/api/[api-name]/content-types/document/schema.json"

{
  "kind": "collectionType",
  "collectionName": "documents",
  "info": {
    "singularName": "document",
    "pluralName": "documents",
    "displayName": "document",
    "name": "document"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "name": {
      "type": "string"
    },
    "description": {
      "type": "richtext"
    },
    "locked": {
      "type": "boolean"
    }
  }
}
```

<details> 
<summary>Generated GraphQL type and queries</summary>

```graphql
# Document's Type definition
input DocumentFiltersInput {
  name: StringFilterInput
  description: StringFilterInput
  locked: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DocumentFiltersInput]
  or: [DocumentFiltersInput]
  not: DocumentFiltersInput
}

input DocumentInput {
  name: String
  description: String
  locked: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type Document {
  name: String
  description: String
  locked: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DocumentEntity {
  id: ID
  attributes: Document
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

type DocumentRelationResponseCollection {
  data: [DocumentEntity!]!
}

# Queries to retrieve one or multiple restaurants.
type Query  {
  document(id: ID): DocumentEntityResponse
  documents(
    filters: DocumentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
):DocumentEntityResponseCollection
}

# Mutations to create, update or delete a restaurant.
type Mutation {
  createDocument(data: DocumentInput!): DocumentEntityResponse
  updateDocument(id: ID!, data: DocumentInput!): DocumentEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
}
```

</details>

#### Customization

Strapi provides a programmatic API to customize GraphQL, which allows:

* disabling some operations for the [Shadow CRUD](#shadow-crud)
* [using getters](#using-getters) to return information about allowed operations
* registering and using an `extension` object to [extend the existing schema](#extending-the-schema) (e.g. extend types or define custom resolvers, policies and middlewares)

<details> 
<summary>Example of GraphQL customizations</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/src/index.js"

module.exports = {
  /**
   * An asynchronous register function that runs before
   * your application is initialized.
   *
   * This gives you an opportunity to extend code.
   */
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');
    
    extensionService.shadowCRUD('api::restaurant.restaurant').disable();
    extensionService.shadowCRUD('api::category.category').disableQueries();
    extensionService.shadowCRUD('api::address.address').disableMutations();
    extensionService.shadowCRUD('api::document.document').field('locked').disable();
    extensionService.shadowCRUD('api::like.like').disableActions(['create', 'update', 'delete']);
    
    const extension = ({ nexus }) => ({
      // Nexus
      types: [
        nexus.objectType({
          name: 'Book',
          definition(t) {
            t.string('title');
          },
        }),
      ],
      plugins: [
        nexus.plugin({
          name: 'MyPlugin',
          onAfterBuild(schema) {
            console.log(schema);
          },
        }),
      ],
      // GraphQL SDL
      typeDefs: `
          type Article {
              name: String
          }
      `,
      resolvers: {
        Query: {
          address: {
            resolve() {
              return { value: { city: 'Montpellier' } };
            },
          },
        },
      },
      resolversConfig: {
        'Query.address': {
          auth: false,
        },
      },
    });
    extensionService.use(extension);
  },
};
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/src/index.ts"

export default {
  /**
   * An asynchronous register function that runs before
   * your application is initialized.
   *
   * This gives you an opportunity to extend code.
   */
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');
    
    extensionService.shadowCRUD('api::restaurant.restaurant').disable();
    extensionService.shadowCRUD('api::category.category').disableQueries();
    extensionService.shadowCRUD('api::address.address').disableMutations();
    extensionService.shadowCRUD('api::document.document').field('locked').disable();
    extensionService.shadowCRUD('api::like.like').disableActions(['create', 'update', 'delete']);
    
    const extension = ({ nexus }) => ({
      // Nexus
      types: [
        nexus.objectType({
          name: 'Book',
          definition(t) {
            t.string('title');
          },
        }),
      ],
      plugins: [
        nexus.plugin({
          name: 'MyPlugin',
          onAfterBuild(schema) {
            console.log(schema);
          },
        }),
      ],
      // GraphQL SDL
      typeDefs: `
          type Article {
              name: String
          }
      `,
      resolvers: {
        Query: {
          address: {
            resolve() {
              return { value: { city: 'Montpellier' } };
            },
          },
        },
      },
      resolversConfig: {
        'Query.address': {
          auth: false,
        },
      },
    });
    extensionService.use(extension);
  },
};
```

</TabItem>

</Tabs>

</details>

##### Disabling operations in the Shadow CRUD

The `extension` service provided with the GraphQL plugin exposes functions that can be used to disable operations on Content-Types:

| Content-type function | Description                                    | Argument type    | Possible argument values |
| --------------------  | ---------------------------------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------- |
| `disable()`           | Fully disable the Content-Type                 | -                | -                                                                                                          |
| `disableQueries()`    | Only disable queries for the Content-Type      | -                | -                                                                                                          |
| `disableMutations()`  | Only disable mutations for the Content-Type    | -                | -                                                                                                          |
| `disableAction()`     | Disable a specific action for the Content-Type | String           | One value from the list:<ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul>   |
| `disableActions()`    | Disable specific actions for the Content-Type  | Array of Strings | Multiple values from the list: <ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul>  |

Actions can also be disabled at the field level, with the following functions:

| Field function     | Description                      |
| ------------------ | -------------------------------- |
| `disable()`        | Fully disable the field          |
| `disableOutput()`  | Disable the output on a field    |
| `disableInput()`   | Disable the input on a field     |
| `disableFilters()` | Disable filters input on a field |

**Examples:**

```js
// Disable the 'find' operation on the 'restaurant' content-type in the 'restaurant' API
strapi
  .plugin('graphql')
  .service('extension')
  .shadowCRUD('api::restaurant.restaurant')
  .disableAction('find')

// Disable the 'name' field on the 'document' content-type in the 'document' API
strapi
  .plugin('graphql')
  .service('extension')
  .shadowCRUD('api::document.document')
  .field('name')
  .disable()
```

##### Using getters

The following getters can be used to retrieve information about operations allowed on content-types:

| Content-type getter        | Description                                                       | Argument type | Possible argument values                                                                                              |
| -------------------------- | ----------------------------------------------------------------- | ------------- | --------------------------------------------------------------------------------------------------------------------- |
| `isEnabled()`              | Returns whether a content-type is enabled                         | -             | -                                                                                                                     |
| `isDisabled()`             | Returns whether a content-type is disabled                        | -             | -                                                                                                                     |
| `areQueriesEnabled()`      | Returns whether queries are enabled on a content-type             | -             | -                                                                                                                     |
| `areQueriesDisabled()`     | Returns whether queries are disabled on a content-type            | -             | -                                                                                                                     |
| `areMutationsEnabled()`    | Returns whether mutations are enabled on a content-type           | -             | -                                                                                                                     |
| `areMutationsDisabled()`   | Returns whether mutations are disabled on a content-type          | -             | -                                                                                                                     |
| `isActionEnabled(action)`  | Returns whether the passed `action` is enabled on a content-type  | String        | One value from the list:<ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul> |
| `isActionDisabled(action)` | Returns whether the passed `action` is disabled on a content-type | String        | One value from the list:<ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul> |

The following getters can be used to retrieve information about operations allowed on fields:

| Field getter          | Description                                   |
| --------------------- | --------------------------------------------- |
| `isEnabled()`         | Returns whether a field is enabled            |
| `isDisabled()`        | Returns whether a field is disabled           |
| `hasInputEnabled()`   | Returns whether a field has input enabled     |
| `hasOutputEnabled()`  | Returns whether a field has output enabled    |
| `hasFiltersEnabled()` | Returns whether a field has filtering enabled |

###### Extending the schema

The schema generated by the Content API can be extended by registering an extension.

This extension, defined either as an object or a function returning an object, will be used by the `use()` function exposed by the `extension` [service](/cms/backend-customization/services) provided with the GraphQL plugin.

The object describing the extension accepts the following parameters:

| Parameter         | Type   | Description                                                                                  |
| ----------------- | ------ | -------------------------------------------------------------------------------------------- |
| `types`           | Array  | Allows extending the schema types using <ExternalLink to="https://nexusjs.org/" text="Nexus"/>-based type definitions |
| `typeDefs`        | String | Allows extending the schema types using <ExternalLink to="https://graphql.org/learn/schema/" text="GraphQL SDL"/>     |
| `plugins`         | Array  | Allows extending the schema using Nexus <ExternalLink to="https://nexusjs.org/docs/plugins" text="plugins"/>          |
| `resolvers`       | Object | Defines custom resolvers                                                                     |
| `resolversConfig` | Object | Defines [configuration options for the resolvers](#custom-configuration-for-resolvers), such as [authorization](#authorization-configuration), [policies](#policies) and [middlewares](#middlewares) |

:::tip
The `types` and `plugins` parameters are based on <ExternalLink to="https://nexusjs.org/" text="Nexus"/>. To use them, register the extension as a function that takes `nexus` as a parameter:

<details>
<summary> Example: </summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/src/index.js"

module.exports = {
  register({ strapi }) {
    const extension = ({ nexus }) => ({
      types: [
        nexus.objectType({
          ‚Ä¶
        }),
      ],
      plugins: [
        nexus.plugin({
          ‚Ä¶
        })
      ]
    })

    strapi.plugin('graphql').service('extension').use(extension)
  }
}
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="./src/index.ts"

export default {
  register({ strapi }) {
    const extension = ({ nexus }) => ({
      types: [
        nexus.objectType({
          ‚Ä¶
        }),
      ],
      plugins: [
        nexus.plugin({
          ‚Ä¶
        })
      ]
    })

    strapi.plugin('graphql').service('extension').use(extension)
  }
}
```

</TabItem>

</Tabs>

</details>
:::

###### Custom configuration for resolvers

A resolver is a GraphQL query or mutation handler (i.e. a function, or a collection of functions, that generate(s) a response for a GraphQL query or mutation). Each field has a default resolver.

When [extending the GraphQL schema](#extending-the-schema), the `resolversConfig` key can be used to define a custom configuration for a resolver, which can include:

* [authorization configuration](#authorization-configuration) with the `auth` key
* [policies with the `policies`](#policies) key
* and [middlewares with the `middlewares`](#middlewares) key

###### Authorization configuration

By default, the authorization of a GraphQL request is handled by the registered authorization strategy that can be either [API token](/cms/features/api-tokens) or through the [Users & Permissions plugin](#usage-with-the-users--permissions-plugin). The Users & Permissions plugin offers a more granular control.

<details>
<summary> Authorization with the Users & Permissions plugin</summary>

With the Users & Permissions plugin, a GraphQL request is allowed if the appropriate permissions are given.

For instance, if a 'Category' content-type exists and is queried through GraphQL with the `Query.categories` handler, the request is allowed if the appropriate `find` permission for the 'Categories' content-type is given.

To query a single category, which is done with the `Query.category` handler, the request is allowed if the the `findOne` permission is given.

Please refer to the user guide on how to [define permissions with the Users & Permissions plugin](/cms/features/rbac#editing-a-role).
</details>

To change how the authorization is configured, use the resolver configuration defined at `resolversConfig.[MyResolverName]`. The authorization can be configured:

* either with `auth: false` to fully bypass the authorization system and allow all requests,
* or with a `scope` attribute that accepts an array of strings to define the permissions required to authorize the request.

<details>
<summary> Examples of authorization configuration</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/src/index.js"

module.exports = {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use({
      resolversConfig: {
        'Query.categories': {
          /**
           * Querying the Categories content-type
           * bypasses the authorization system.
           */ 
          auth: false
        },
        'Query.restaurants': {
          /**
           * Querying the Restaurants content-type
           * requires the find permission
           * on the 'Address' content-type
           * of the 'Address' API
           */
          auth: {
            scope: ['api::address.address.find']
          }
        },
      }
    })
  }
}

```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/src/index.ts"

export default {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use({
      resolversConfig: {
        'Query.categories': {
          /**
           * Querying the Categories content-type
           * bypasses the authorization system.
           */ 
          auth: false
        },
        'Query.restaurants': {
          /**
           * Querying the Restaurants content-type
           * requires the find permission
           * on the 'Address' content-type
           * of the 'Address' API
           */
          auth: {
            scope: ['api::address.address.find']
          }
        },
      }
    })
  }
}

```

</TabItem>

</Tabs>
</details>

###### Policies

[Policies](/cms/backend-customization/policies) can be applied to a GraphQL resolver through the `resolversConfig.[MyResolverName].policies` key.

The `policies` key is an array accepting a list of policies, each item in this list being either a reference to an already registered policy or an implementation that is passed directly (see [policies configuration documentation](/cms/backend-customization/routes#policies)).

Policies directly implemented in `resolversConfig` are functions that take a `context` object and the `strapi` instance as arguments.
The `context` object gives access to:

* the `parent`, `args`, `context` and `info` arguments of the GraphQL resolver,
* Koa's <ExternalLink to="https://koajs.com/#context" text="context"/> with `context.http` and <ExternalLink to="https://koajs.com/#ctx-state" text="state"/> with `context.state`.

<details>
<summary> Example of GraphQL policies applied to resolvers</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/src/index.js"

module.exports = {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use({
      resolversConfig: {
        'Query.categories': {
          policies: [
            (context, { strapi }) => {
              console.log('hello', context.parent)
              /**
               * If 'categories' have a parent, the function returns true,
               * so the request won't be blocked by the policy.
               */ 
              return context.parent !== undefined;
            }
            /**
             * Uses a policy already created in Strapi.
             */
            "api::model.policy-name",

            /**
             * Uses a policy already created in Strapi with a custom configuration
             */
            {name:"api::model.policy-name", config: {/* all config values I want to pass to the strapi policy */} },
          ],
          auth: false,
        },
      }
    })
  }
}
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/src/index.ts"

export default {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use({
      resolversConfig: {
        'Query.categories': {
          policies: [
            (context, { strapi }) => {
              console.log('hello', context.parent)
              /**
               * If 'categories' have a parent, the function returns true,
               * so the request won't be blocked by the policy.
               */ 
              return context.parent !== undefined;
            }
            /**
             * Uses a policy already created in Strapi.
             */
            "api::model.policy-name",

            /**
             * Uses a policy already created in Strapi with a custom configuration
             */
            {name:"api::model.policy-name", config: {/* all the configuration values to pass to the strapi policy */} },
          ],
          auth: false,
        },
      }
    })
  }
}
```

</TabItem>

</Tabs>

</details>

###### Middlewares

[Middlewares](/cms/backend-customization/middlewares) can be applied to a GraphQL resolver through the `resolversConfig.[MyResolverName].middlewares` key. The only difference between the GraphQL and REST implementations is that the `config` key becomes `options`.  

The `middlewares` key is an array accepting a list of middlewares, each item in this list being either a reference to an already registered middleware or an implementation that is passed directly (see [middlewares configuration documentation](/cms/backend-customization/routes#middlewares)).

Middlewares directly implemented in `resolversConfig` can take the GraphQL resolver's <ExternalLink to="https://www.apollographql.com/docs/apollo-server/data/resolvers/#resolver-arguments" text="`parent`, `args`, `context` and `info` objects"/> as arguments.

:::tip
Middlewares with GraphQL can even act on nested resolvers, which offer a more granular control than with REST.
:::

<details>
<summary> Examples of GraphQL middlewares applied to a resolver</summary>

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title"/src/index.js"

module.exports = {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use({
      resolversConfig: {
        'Query.categories': {
          middlewares: [
            /**
             * Basic middleware example #1
             * Log resolving time in console
             */
            async (next, parent, args, context, info) => {
              console.time('Resolving categories');
              
              // call the next resolver
              const res = await next(parent, args, context, info);
              
              console.timeEnd('Resolving categories');

              return res;
            },
            /**
             * Basic middleware example #2
             * Enable server-side shared caching
             */
            async (next, parent, args, context, info) => {
              info.cacheControl.setCacheHint({ maxAge: 60, scope: "PUBLIC" });
              return next(parent, args, context, info);
            },
            /**
             * Basic middleware example #3
             * change the 'name' attribute of parent with id 1 to 'foobar'
             */
            (resolve, parent, ...rest) => {
              if (parent.id === 1) {
                return resolve({...parent, name: 'foobar' }, ...rest);
              }

              return resolve(parent, ...rest);
            }
            /**
             * Basic middleware example #4
             * Uses a middleware already created in Strapi.
             */
            "api::model.middleware-name",

            /**
             * Basic middleware example #5
             * Uses a middleware already created in Strapi with a custom configuration
             */
            { name: "api::model.middleware-name", options: { /* all config values I want to pass to the strapi middleware */ } },
          ],
          auth: false,
        },
      }
    })
  }
}
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title"/src/index.ts"

export default {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use({
      resolversConfig: {
        'Query.categories': {
          middlewares: [
            /**
             * Basic middleware example #1
             * Log resolving time in console
             */
            async (next, parent, args, context, info) => {
              console.time('Resolving categories');
              
              // call the next resolver
              const res = await next(parent, args, context, info);
              
              console.timeEnd('Resolving categories');

              return res;
            },
            /**
             * Basic middleware example #2
             * Enable server-side shared caching
             */
            async (next, parent, args, context, info) => {
              info.cacheControl.setCacheHint({ maxAge: 60, scope: "PUBLIC" });
              return next(parent, args, context, info);
            },
            /**
             * Basic middleware example #3
             * change the 'name' attribute of parent with id 1 to 'foobar'
             */
            (resolve, parent, ...rest) => {
              if (parent.id === 1) {
                return resolve({...parent, name: 'foobar' }, ...rest);
              }

              return resolve(parent, ...rest);
            }

            /**
             * Basic middleware example #4
             * Uses a middleware already created in Strapi.
             */
            "api::model.middleware-name",

            /**
             * Basic middleware example #5
             * Uses a middleware already created in Strapi with a custom configuration
             */
            {name:"api::model.middleware-name", options: {/* all the configuration values to pass to the middleware */} },
          ],
          auth: false,
        },
      }
    })
  }
}
```

</TabItem>

</Tabs>

</details>

##### Security

GraphQL is a query language allowing users to use a broader panel of inputs than traditional REST APIs. GraphQL APIs are inherently prone to security risks, such as credential leakage and denial of service attacks, that can be reduced by taking appropriate precautions.

### Disable introspection and Sandbox in production

In production environments, disabling the GraphQL Sandbox and the introspection query is strongly recommended.
If you haven't edited the [configuration file](#available-options), it is already disabled in production by default.

###### Limit max depth and complexity

A malicious user could send a query with a very high depth, which could overload your server. Use the `depthLimit` [configuration parameter](/cms/plugins/graphql#code-based-configuration) to limit the maximum number of nested fields that can be queried in a single request. By default, `depthLimit` is set to 10 but can be set to a higher value during testing and development.

:::tip
To increase GraphQL security even further, 3rd-party tools can be used. See the guide about <ExternalLink to="https://forum.strapi.io/t/use-graphql-armor-with-strapi/" text="using GraphQL Armor with Strapi on the forum"/>.
:::

## Usage

The GraphQL plugin adds a GraphQL endpoint accessible and provides access to a GraphQL playground, accessing at the `/graphql` route of the Strapi admin panel, to interactively build your queries and mutations and read documentation tailored to your content types. For detailed instructions on how to use the GraphQL Playground, please refer to the official <ExternalLink to="https://www.apollographql.com/docs/apollo-server/v2/testing/graphql-playground" text="Apollo Server documentation"/>.

### Usage with the Users & Permissions feature {#usage-with-the-users--permissions-plugin}

The [Users & Permissions feature](/cms/features/users-permissions) allows protecting the API with a full authentication process.

#### Registration

Usually you need to sign up or register before being recognized as a user then perform authorized requests.


<Request title="Mutation">

```graphql
mutation {
  register(input: { username: "username", email: "email", password: "password" }) {
    jwt
    user {
      username
      email
    }
  }
}
```

</Request>

You should see a new user is created in the `Users` collection type in your Strapi admin panel.

#### Authentication

To perform authorized requests, you must first get a JWT:

<Request title="Mutation">

```graphql
mutation {
  login(input: { identifier: "email", password: "password" }) {
    jwt
  }
}
```

</Request>

Then on each request, send along an `Authorization` header in the form of `{ "Authorization": "Bearer YOUR_JWT_GOES_HERE" }`. This can be set in the HTTP Headers section of your GraphQL Sandbox.

#### Usage with API tokens {#api-tokens}

To use API tokens for authentication, pass the token in the `Authorization` header using the format `Bearer your-api-token`.

:::note
Using API tokens in the the GraphQL Sandbox requires adding the authorization header with your token in the `HTTP HEADERS` tab:

```http
{
  "Authorization" : "Bearer <TOKEN>"
}
```

Replace `<TOKEN>` with your API token generated in the Strapi Admin panel.
:::

### GraphQL API

The GraphQL plugin adds a GraphQL endpoint that can accessed through Strapi's GraphQL API:

<CustomDocCardsWrapper>
<CustomDocCard icon="cube" title="GraphQL API" description="Learn how to use the Strapi's GraphQL API." link="/cms/api/graphql"/>
</CustomDocCardsWrapper>


 This is the content for the doc docusaurus/docs/cms/plugins/installing-plugins-via-marketplace.md 

 ---
title: Installing Plugins via the Marketplace
displayed_sidebar: cmsSidebar
sidebar_position: 2
tags:
- plugins
- provider
- marketplace
- upload plugin
---

# Using the Marketplace

Strapi comes with built-in plugins such as [Documentation](/cms/plugins/documentation), [GraphQL](/cms/plugins/graphql), and [Sentry](/cms/plugins/sentry). The Marketplace is where users can find additional plugins to customize Strapi applications, and additional providers to extend plugins. The Marketplace is located in the admin panel, indicated by <Icon name="shopping-cart" /> _Marketplace_. In the Marketplace, users can browse or search for plugins and providers, link to detailed descriptions for each, and submit new plugins and providers.

:::note strapi In-app Marketplace vs. Market website
The Marketplace in the admin panel displays all existing plugins, regardless of the version of Strapi they are for. All plugins can also be discoverable through the <ExternalLink to="https://market.strapi.io" text="Strapi Market"/> website.

Keep in mind however that v4 and v5 plugins are not cross-compatible, but that providers are compatible both with v4 and v5 plugins.
:::

<ThemedImage
  alt="The Marketplace interface"
  sources={{
    light: '/img/assets/plugins/marketplace-plugins.png',
    dark: '/img/assets/plugins/marketplace-plugins_DARK.png',
  }}
/>

The Plugins and Providers tabs display each plugin/provider on individual cards containing:

- their name, sometimes followed by either of the following badges:
  - <img alt="maintained by Strapi icon" src="/img/strapi-logo.png" width="14px" style={{position: "relative", bottom:"2px", marginRight:"2px"}} /> to indicate it is made by Strapi,
  - <Icon name="seal-check" color="rgb(58,115,66)" /> to indicate it was verified by Strapi.
- the number of times the plugin/provider was starred on GitHub and downloaded
- the description
- a **More** <Icon name="arrow-square-out" /> button to be redirected to the Market website for additional information, including about the version of Strapi the plugin is for, and implementation instructions

In the top right corner of the Marketplace, the **Submit plugin** button redirects to the Strapi Market where it is possible to submit your own plugin and provider.

:::tip Tips

- The search bar displays incremental search results based on the plugin/provider name and description.
- Use the "Sort by" button or set filters to find plugins more easily.

:::

## Installing Marketplace plugins and providers

To install a new plugin or provider via the Marketplace:

1. Go to the <Icon name="shopping-cart" /> *Marketplace*.
2. Choose the **Plugins** tab to browse available plugins or the **Providers** tab to browse available providers.
3. Choose an available plugin/provider and click on the **More** <Icon name="arrow-square-out" /> button.
4. Once redirected to the Strapi Market website, follow the plugin/provider-specific implementation instructions.

:::strapi Developing Strapi plugins
Can't find a plugin that suits your use case? Feel free to [create your own](/cms/plugins-development/developing-plugins)!
:::

 This is the content for the doc docusaurus/docs/cms/plugins/sentry.md 

 ---
title: Sentry plugin
displayed_sidebar: cmsSidebar
description: Track errors in your Strapi application.
tags:
- environment
- global Sentry service
- Sentry 
---

# Sentry plugin

This plugin enables you to track errors in your Strapi application using Sentry.

<IdentityCard isPlugin>
  <IdentityCardItem icon="navigation-arrow" title="Location">Only usable and configurable via server code</IdentityCardItem>
  <IdentityCardItem icon="package" title="Package name">`@strapi/plugin-sentry`</IdentityCardItem>
  <IdentityCardItem icon="plus-square" title="Additional resources"><ExternalLink to="https://market.strapi.io/plugins/@strapi-plugin-sentry" text="Strapi Marketplace page"/> <ExternalLink to="https://sentry.io/" text="Sentry page"/></IdentityCardItem>
</IdentityCard>

By using the Sentry plugin you can:

* Initialize a Sentry instance upon startup of a Strapi application
* Send Strapi application errors as events to Sentry
* Include additional metadata in Sentry events to assist in debugging
* Expose a global Sentry service usable by the Strapi server

## Installation

Install the Sentry plugin by adding the dependency to your Strapi application as follows:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn add @strapi/plugin-sentry
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm install @strapi/plugin-sentry
```

</TabItem>

</Tabs>

## Configuration

Create or edit your `/config/plugins` file to configure the Sentry plugin. The following properties are available:

| Property | Type | Default Value | Description |
| -------- | ---- | ------------- |------------ |
| `dsn` | string | `null` | Your Sentry <ExternalLink to="https://docs.sentry.io/product/sentry-basics/dsn-explainer/" text="data source name"/>. |
| `sendMetadata` | boolean | `true` | Whether the plugin should attach additional information (e.g., OS, browser, etc.) to the events sent to Sentry. |
| `init` | object | `{}` | A config object that is passed directly to Sentry during initialization (see official <ExternalLink to="https://docs.sentry.io/platforms/node/configuration/options/" text="Sentry documentation"/> for available options). |

The following is an example basic configuration:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"

module.exports = ({ env }) => ({
  // ...
  sentry: {
    enabled: true,
    config: {
      dsn: env('SENTRY_DSN'),
      sendMetadata: true,
    },
  },
  // ...
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/plugins.ts"

export default ({ env }) => ({
  // ...
  sentry: {
    enabled: true,
    config: {
      dsn: env('SENTRY_DSN'),
      sendMetadata: true,
    },
  },
  // ...
});
```

</TabItem>

</Tabs>

### Disabling for non-production environments

If the `dsn` property is set to a nil value (`null` or `undefined`) while `sentry.enabled` is true, the Sentry plugin will be available to use in the running Strapi instance, but the service will not actually send errors to Sentry. That allows you to write code that runs on every environment without additional checks, but only send errors to Sentry in production.

When you start Strapi with a nil `dsn` config property, the plugin will print the following warning:<br/>`info: @strapi/plugin-sentry is disabled because no Sentry DSN was provided`

You can make use of that by using the [`env` utility](/cms/configurations/guides/access-cast-environment-variables) to set the `dsn` configuration property depending on the environment.

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"
module.exports = ({ env }) => ({
  // ‚Ä¶
  sentry: {
    enabled: true,
    config: {
      // Only set `dsn` property in production
      dsn: env('NODE_ENV') === 'production' ? env('SENTRY_DSN') : null,
    },
  },
  // ‚Ä¶
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/plugins.ts"
export default ({ env }) => ({
  // ‚Ä¶
  sentry: {
    enabled: true,
    config: {
      // Only set `dsn` property in production
      dsn: env('NODE_ENV') === 'production' ? env('SENTRY_DSN') : null,
    },
  },
  // ‚Ä¶
});
```

</TabItem>

</Tabs>

### Disabling the plugin completely

Like every other Strapi plugin, you can also disable this plugin in the plugins configuration file. This will cause `strapi.plugins('sentry')` to return `undefined`:

<Tabs groupId="js-ts">

<TabItem value="javascript" label="JavaScript">

```js title="/config/plugins.js"
module.exports = ({ env }) => ({
  // ‚Ä¶
  sentry: {
    enabled: false,
  },
  // ‚Ä¶
});
```

</TabItem>

<TabItem value="typescript" label="TypeScript">

```ts title="/config/plugins.ts"
export default ({ env }) => ({
  // ‚Ä¶
  sentry: {
    enabled: false,
  },
  // ‚Ä¶
});
```

</TabItem>
</Tabs>

## Usage

After installing and configuring the plugin, you can access a Sentry service in your Strapi application as follows:

```js
const sentryService = strapi.plugin('sentry').service('sentry');
```

This service exposes the following methods:

| Method | Description | Parameters |
| ------ | ----------- | ---------- |
| `sendError()` | Manually send errors to Sentry. | <ul><li><code>error</code>: The error to be sent.</li><li><code>configureScope</code>: Optional. Enables you to customize the error event.</li></ul> See the official <ExternalLink to="https://docs.sentry.io/platforms/node/enriching-events/scopes/#configuring-the-scope" text="Sentry documentation"/> for more details. |
| `getInstance()` | Used for direct access to the Sentry instance. | - |

The `sendError()` method can be used as follows:

```js
try {
  // Your code here
} catch (error) {
  // Either send a simple error
  strapi
    .plugin('sentry')
    .service('sentry')
    .sendError(error);

  // Or send an error with a customized Sentry scope
  strapi
    .plugin('sentry')
    .service('sentry')
    .sendError(error, (scope, sentryInstance) => {
      // Customize the scope here
      scope.setTag('my_custom_tag', 'Tag value');
    });
  throw error;
}
```

The `getInstance()` method is accessible as follows:

```js
const sentryInstance = strapi
  .plugin('sentry')
  .service('sentry')
  .getInstance();
```


 This is the content for the doc docusaurus/docs/cms/project-structure.md 

 ---
title: Project structure
displayed_sidebar: cmsSidebar
description: Discover the project structure of any default Strapi application.
tags:
- project structure
- typescript
---

import InteractiveProjectStructure from '@site/src/components/ProjectStructure.js'

# Project structure

The structure of a Strapi project depends on whether the project was created with [TypeScript](/cms/typescript) (which is the default if you used the `--quickstart` option while creating the project) or with vanilla JavaScript, and looks like the following:

<InteractiveProjectStructure />


 This is the content for the doc docusaurus/docs/cms/quick-start.md 

 ---
sidebar_label: 'Quick Start Guide'
displayed_sidebar: cmsSidebar
sidebar_position: 2
title: Quick Start Guide - Strapi Developer Docs
description: Get ready to get Strapi, your favorite open-source headless cms up and running in less than 3 minutes.
tags:
 - guides
 - Content-type Builder
 - collection type
 - Content Manager
 - Strapi Cloud
---

import InstallPrerequisites from '/docs/snippets/installation-prerequisites.md'

# Quick Start Guide

Strapi offers a lot of flexibility. Whether you want to go fast and quickly see the final result, or would rather dive deeper into the product, we got you covered. For this tutorial, we'll go for the DIY approach and build a project and content structure from scratch, then deploy your project to Strapi Cloud to add data from there.

*Estimated completion time: 5-10 minutes*

:::prerequisites
<InstallPrerequisites components={props.components} />

You will also need to <ExternalLink to="https://github.com/git-guides/install-git" text="install `git`"/> and to have a <ExternalLink to="https://github.com" text="GitHub"/> account to deploy your project to Strapi Cloud.
:::

## <Icon name="rocket-launch"/> Part A: Create a new project with Strapi

We will first create a new Strapi project on your machine by running a command in the terminal, and then register our first local administrator user.

Follow the steps below by clicking on the togglable content to read more instructions.

<details open>
<summary>Step 1: Run the installation script and create a Strapi Cloud account</summary>

### Step 1: Run the installation script and create a Strapi Cloud account

1. Run the following command in a terminal:

    <TabItem value="npm" label="NPM">

    ```bash
    npx create-strapi@latest my-strapi-project
    ```

    </TabItem>

2. The terminal will invite you to create a Strapi Cloud account. Ensure `Login/Sign up` is selected in the terminal, or use arrow keys to select it, and press Enter.

3. In the new browser tab that opens, ensure the confirmation code is the same as in the terminal and click **Confirm**.

4. Still in the browser tab, click **Continue with GitHub**. If you are not already logged in into GitHub with your current browser session, you might be redirected to a GitHub login page.

5. Once logged in, the browser will display a "Congratulations, you're all set!" message and you can safely close the browser tab and get back to the terminal.

    <ThemedImage
      alt="Login GIF"
      sources={{
        light: '/img/assets/quick-start-guide/qsg-cloud-login.gif',
        dark: '/img/assets/quick-start-guide/qsg-cloud-login.gif',
      }}
    />

6. The terminal will now ask you a few questions. Press `Enter` to accept the default answer to all questions.

    ![Questions and answers from the terminal](/img/assets/quick-start-guide/qsg-questions-answers-terminal.png)

As you will see in the terminal, your project is now building locally.

:::info
* The folder of your project will include a `.strapi-cloud.json` file used to link the local Strapi project on your machine to the Strapi Cloud project.
* Many more installation options are available. Please refer to the [installation documentation](/cms/installation) for details.
:::

</details>

<details>
<summary>Step 2: Register the first local administrator user</summary>

### Step 2: Register the first local administrator user

Once the installation is complete, you need to start the server. In the terminal, type `cd my-strapi-project && yarn develop` and your browser automatically opens a new tab.

:::tip
As long as you stay in the `my-strapi-project` folder, you will just need to run `yarn develop` any time you want to start the Strapi server again.
:::

By completing the form, you create your own account. Once done, you become the first administrator user of this Strapi application. Welcome aboard, commander!

You now have access to the <ExternalLink to="http://localhost:1337/admin" text="admin panel"/>:

<ThemedImage
alt="Admin panel screenshot: dashboard"
sources={{
    light: '/img/assets/quick-start-guide/qsg-handson-part1-01-admin_panel-v5.png',
    dark: '/img/assets/quick-start-guide/qsg-handson-part1-01-admin_panel-v5_DARK.png',
}}
/> 

</details>

:::callout <Icon name="confetti" /> Congratulations!
You have just created a new Strapi project! You can start playing with Strapi and discover the [Content Manager](/cms/features/content-manager) by yourself, or proceed to part B below.
:::

## <Icon name="wrench" /> Part B: Build your content structure with the Content-type Builder

The installation script has just created an empty project. We will now guide you through creating a restaurants directory, inspired by our <ExternalLink to="https://github.com/strapi/foodadvisor" text="FoodAdvisor"/> example application.

The admin panel of a local Strapi project runs at <ExternalLink to="http://localhost:1337/admin" text="http://localhost:1337/admin"/>. This is where you will spend most of your time creating and updating content.

First we will build a content structure for your content. This can only be done while in development mode, which is the default mode for projects that are created locally.

:::tip
If the server is not already running, in your terminal, `cd` into the `my-strapi-project` folder and run `npm run develop` (or `yarn develop`) to launch it.
:::

The Content-Type Builder helps you create your content structure. When creating an empty project with Strapi, this is where to get the party started!

<details >

<summary>Step 1: Create a "Restaurant" collection type</summary>

### Step 1: Create a "Restaurant" collection type

Your restaurants directory will eventually include many restaurants, so we need to create a "Restaurant" collection type. Then we can describe the fields to display when adding a new restaurant entry:

1. Click on the **Create your first Content type** button.<br />If it's not showing up, go to <Icon name="layout" /> <ExternalLink to="http://localhost:1337/admin/plugins/content-type-builder" text="Content-Type Builder"/> in the main navigation.
2. Click on **Create new collection type**.
3. Type `Restaurant` for the _Display name_, and click **Continue**.  
4. Click the Text field.
5. Type `Name` in the _Name_ field.
6. Switch to the _Advanced Settings_ tab, and check the **Required field** and the **Unique field** settings.
7. Click on **Add another field**.
8. Choose the Rich text (Blocks) field in the list.
9. Type `Description` under the _Name_ field, then click **Finish**.
10. Finally, click **Save** and wait for Strapi to restart.

<ThemedImage
alt="GIF: Create Restaurant collection type in Content-type Builder"
sources={{
    light: '/img/assets/quick-start-guide/qsg-handson-restaurant-v5.gif',
    dark: '/img/assets/quick-start-guide/qsg-handson-restaurant-v5_DARK.gif',
}}
/>

Once Strapi has restarted, "Restaurant" is listed under <Icon name="feather" /> _Content Manager > Collection types_ in the navigation. Wow, you have just created your very first content-type! It was so cool ‚Äî let's create another one right now, just for pleasure.

</details>

<details>
<summary>Step 2: Create a "Category" collection type</summary>

### Step 2: Create a "Category" collection type

It would help getting a bit more organized if our restaurants directory had some categories. Let's create a "Category" collection type:

1. Go to <Icon name="layout" /> <ExternalLink to="http://localhost:1337/admin/plugins/content-type-builder" text="Content-type Builder"/> in the main navigation.
2. Click on **Create new collection type**.
3. Type `Category` for the _Display name_, and click **Continue**.
4. Click the Text field.
5. Type `Name` in the _Name_ field.
6. Switch to the _Advanced Settings_ tab, and check the **Required field** and the **Unique field** settings.
7. Click on **Add another field**.
8. Choose the Relation field.
9. In the center, select the icon that represents "many-to-many" ![icon many-to-many](/img/assets/icons/v5/ctb_relation_manytomany.svg). The text should read `Categories has and belongs to many Restaurants`.

<ThemedImage
alt="Admin Panel screenshot: relations"
sources={{
  light: '/img/assets/quick-start-guide/qsg-handson-part2-02-collection_ct-v5.png',
  dark: '/img/assets/quick-start-guide/qsg-handson-part2-02-collection_ct-v5_DARK.png',
}}
/>

11. Finally, click **Finish**, then the **Save** button, and wait for Strapi to restart.

</details>

:::callout <Icon name="confetti" /> Congratulations!
You have just created a basic content structure for your Strapi project! You can keep on playing with the [Content-Type Builder](/cms/features/content-type-builder), or proceed to parts C and D below to discover Strapi Cloud and add actual content to your project.
:::

## <Icon name="cloud" />Ô∏è Part C: Deploy to Strapi Cloud

Now that your beautiful first Strapi project is working locally, it's time for the world to see it live! The most straightforward way to host your project is to use Strapi Cloud: Deploying your project on Strapi Cloud is done with a single command! üöÄ

To deploy your project for free to Strapi Cloud, in your terminal:

1. If the server for your local Strapi project is running, which should be the case if you followed this tutorial so far, press `Ctrl-C` to stop the server.
2. Ensure you are in the folder of your Strapi project (if needed, run for instance `cd my-strapi-project` to reach this folder), and run the following command:

    <Tabs groupId="yarn-npm">

    <TabItem value="yarn" label="Yarn">

      ```sh
      yarn strapi deploy
      ```

    </TabItem>

    <TabItem value="npm" label="NPM">

      ```sh
      npm run strapi deploy
      ```

    </TabItem>

    </Tabs>

3. Answer questions in the terminal, giving your project a name (you can press Enter to keep the default name), choosing the recommended NodeJS version, and selecting the region closer to your current place:

    ![Strapi Cloud terminal questions and answers](/img/assets/quick-start-guide/qsg-strapi-cloud-terminal-questions.png)

Within a few moments, your local project will be hosted on Strapi Cloud. üöÄ 

Once it's done, the terminal will provide you a clickable link that starts with `https://cloud.strapi.io/projects`. Click on the link, or copy and paste it in your browser address bar, to visit the page.

You will see the Strapi Cloud project we've just created, `my-strapi-project`, visible in the Strapi Cloud dashboard. Click the **Visit app** button in the top right corner to access your deployed Strapi project.

<ThemedImage
alt="Visit Strapi Cloud App GIF"
sources={{
  light: '/img/assets/quick-start-guide/qsg-visit-cloud-app.gif',
  dark: '/img/assets/quick-start-guide/qsg-visit-cloud-app_DARK.gif',
}}
/>

:::callout <Icon name="confetti" /> Congratulations!
Now your project is hosted on Strapi Cloud and accessible online. You can learn more about Strapi Cloud by reading [its dedicated documentation](/cloud/intro) or proceed to part D to log in into your online Strapi project and add your first data from there.
:::

:::tip
Feel free to play with the Content-Type Builder even further and add more fields to your content-types or create new content-types. Anytime you make such changes, deploy them again on Strapi Cloud, by running the appropriate `deploy` command, and see your hosted project updated within a few minutes. Magical, isn't it? ü™Ñ
:::

## <Icon name="note-pencil" /> Part D: Add content to your Strapi Cloud project with the Content Manager

Now that we have created a basic content structure with 2 collection types, "Restaurant" and "Category", and deployed your project to Strapi Cloud, let's use the Cloud to actually add content by creating new entries.

<details>
<summary>Step 1: Log in to the admin panel of your new Strapi Cloud project</summary>

### Step 1: Log in to the admin panel of your new Strapi Cloud project

Now that your Strapi Cloud project is created, let's log in into the project:

1. From your <ExternalLink to="https://cloud.strapi.io/projects" text="Strapi Cloud dashboard"/>, click the `my-strapi-project` project.
3. Click the **Visit app** button.
4. In the new page that opens, complete the form to create the first administrator user of this Strapi Cloud project.

Logged in into our first Strapi Cloud project, we will now add data from there.

<ThemedImage
alt=""
sources={{
  light: '/img/assets/quick-start-guide/qsg-first-login-cloud.gif',
  dark: '/img/assets/quick-start-guide/qsg-first-login-cloud_DARK.gif'
}}
/>

<details>
<summary><Icon name="info" /> Additional information and tips about users and Strapi Cloud projects:</summary>

:::note Note: Local users and Strapi Cloud users are different
The databases for your Strapi Cloud project and your local project are different. This means that data is not automatically transferred from your local project to Strapi Cloud. This includes users that you previously created locally. That's why you are invited to create a new administrator account when logging in to your Strapi Cloud project for the first time.
:::

:::tip Tip: Directly accessing the admin panel of your Strapi Cloud project
Any project hosted on Strapi Cloud is accessible from its own URL, something like `https://my-strapi-project-name.strapiapp.com`. To access the admin panel of your online project, simply add `/admin` to the URL, for instance as in `https://my-strapi-project-name.strapiapp.com/admin`. URLs can be found in your Strapi Cloud dashboard and you can also directly access your Strapi Cloud projects from there by clicking on the name of your project then on the **Visit app** button.
:::

</details>

</details>

<details>
<summary>Step 2: Create an entry for the "Restaurant" collection type</summary>


### Step 2: Create an entry for the "Restaurant" collection type

1. Go to <Icon name="feather" /> _Content Manager > Collection types - Restaurant_ in the navigation.
2. Click on **Create new entry**.
3. Type the name of your favorite local restaurant in the _Name_ field. Let's say it's `Biscotte Restaurant`.
4. In the _Description_ field, write a few words about it. If you're lacking some inspiration, you can use `Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.`
5. Click **Save**.

<ThemedImage
alt="Screenshot: Biscotte Restaurant in Content Manager"
sources={{
  light: '/img/assets/quick-start-guide/qsg-handson-part2-03-restaurant-v5.png',
  dark: '/img/assets/quick-start-guide/qsg-handson-part2-03-restaurant-v5_DARK.png',
}}
/>

The restaurant is now listed in the _Collection types - Restaurant_ view of the <Icon name="feather" /> _Content Manager_.

</details>

<details>
<summary>Step 3: Add Categories</summary>

#### Step 3: Add Categories

Let's go to <Icon name="feather" /> _Content Manager > Collection types - Category_ and create 2 categories:

1. Click on **Create new entry**.
2. Type `French Food` in the _Name_ field.
3. Click **Save**.
4. Go back to _Collection types - Category_, then click again on **Create new entry**.  
5. Type `Brunch` in the _Name_ field, then click **Save**.

<ThemedImage
alt="GIF: Add Categories"
sources={{
  light: '/img/assets/quick-start-guide/qsg-handson-categories-v5.gif',
  dark: '/img/assets/quick-start-guide/qsg-handson-categories-v5_DARK.gif',
}}/>

The "French Food" and "Brunch" categories are now listed in the _Collection types - Category_ view of the <Icon name="feather" /> _Content Manager_.

Now, we will add a category to a restaurant:

1. Go to <Icon name="feather" /> _Content Manager > Collection types - Restaurant_ in the navigation, and click on "Biscotte Restaurant".
2. In the **Categories** drop-down list at the bottom of the page, select "French Food". Scroll back to the top of the page and click **Save**.

</details>

<details>
<summary>Step 4: Set Roles & Permissions</summary>

### Step 4: Set Roles & Permissions

We have just added a restaurant and 2 categories. We now have enough content to consume (pun intended). But first, we need to make sure that the content is publicly accessible through the API:

1. Click on _<Icon name="gear-six" /> Settings_ at the bottom of the main navigation.
2. Under _Users & Permissions Plugin_, choose _Roles_.
3. Click the **Public** role.
4. Scroll down under _Permissions_.
5. In the _Permissions_ tab, find _Restaurant_ and click on it.
6. Click the checkboxes next to **find** and **findOne**.
7. Repeat with _Category_: click the checkboxes next to **find** and **findOne**.
8. Finally, click **Save**.

<ThemedImage
alt="Screenshot: Public Role in Users & Permissions plugin"
sources={{
  light: '/img/assets/quick-start-guide/qsg-handson-part2-04-roles-v5.png',
  dark: '/img/assets/quick-start-guide/qsg-handson-part2-04-roles-v5_DARK.png'
}}/>

</details>

<details>
<summary>Step 5: Publish the content</summary>

### Step 5: Publish the content

By default, any content you create is saved as a draft. Let's publish our categories and restaurant.

First, navigate to <Icon name="feather" /> _Content Manager > Collection types - Category_. From there:

1. Click the "Brunch" entry.
2. On the next screen, click **Publish**.
3. In the _Confirmation_ window, click **Yes, publish**.  

Then, go back to the Categories list and repeat for the "French Food" category.

Finally, to publish your favorite restaurant, go to <Icon name="feather" /> _Content Manager > Collection types - Restaurant_, click the "Biscotte Restaurant" entry, and **Publish** it.

<ThemedImage
alt="GIF: Publish content"
sources={{
  light: '/img/assets/quick-start-guide/qsg-handson-publish-v5.gif',
  dark: '/img/assets/quick-start-guide/qsg-handson-publish-v5_DARK.gif'
}}
/>

</details>

<details>
<summary>Step 6: Use the API</summary>

### Step 6: Use the API

OK dear gourmet, we have just finished creating our content and making it accessible through the API. You can give yourself a pat on the back ‚Äî but you have yet to see the final result of your hard work.

There you are: the list of restaurants should be accessible by visting the `/api/restaurants` path of your Strapi Cloud project URL (e.g., `https://beautiful-first-strapi-project.strapiapp.com/api/restaurants`).

Try it now! The result should be similar to the example response below üëá.

<details>
<summary>Click me to view an example of API response:</summary>

```json
{
  "data": [
    {
      "id": 3,
      "documentId": "wf7m1n3g8g22yr5k50hsryhk",
      "Name": "Biscotte Restaurant",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers."
            }
          ]
        }
      ],
      "createdAt": "2024-09-10T12:49:32.350Z",
      "updatedAt": "2024-09-10T13:14:18.275Z",
      "publishedAt": "2024-09-10T13:14:18.280Z",
      "locale": null
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 1
    }
  }
}
```

</details>

</details>

:::callout <Icon name="confetti"/> Congratulations!
Now your content is created, published, and you have permissions to request it through the API.
Keep on creating amazing content!
:::

:::tip Tip: Transfer data between your local and Strapi Cloud projects
The databases for your Strapi Cloud project and your local project are different. This means that data is not automatically synchronized between your Strapi Cloud and local projects. You can use the [data management system](/cms/features/data-management) to transfer data between projects.
:::

## <Icon name="fast-forward"/> What to do next?

Now that you know the basics of creating and publishing content with Strapi, we encourage you to explore and dig deeper into some Strapi features:

<Icon name="arrow-fat-right"/> learn how to use Strapi's [REST](/cms/api/rest) API to query the content,<br/>
<Icon name="arrow-fat-right"/> learn more about Strapi features by browsing the <Icon name="backpack" /> **Features** category,<br/>
<Icon name="arrow-fat-right"/> learn more about Strapi Cloud projects by reading the [Cloud Documentation](/cloud/intro),<br/>
<Icon name="arrow-fat-right"/> and [customize your Strapi back end](/cms/backend-customization) and [admin panel](/cms/admin-panel-customization) for advanced use cases.<br/>


 This is the content for the doc docusaurus/docs/cms/setup-deployment.md 

 ---
title: Setup and Deployment
displayed_sidebar: cmsSidebar
description: Strapi is meant to be installed on your local machine, then configured, and finally deployed to a remote environment. 
pagination_prev: cms/intro
pagination_next: cms/api/content-api
tags:
- introduction
- concepts
- installation 
- configuration
- deployment

---

# Installation, Configuration, and Deployment

Strapi is meant to be installed on your local machine, then configured, and finally deployed to a remote environment. This documentation section describes these topics, and clicking on any of the following cards will lead you to the corresponding section:

<CustomDocCardsWrapper>

<CustomDocCard emoji="1Ô∏è‚É£" title="Installation" description="Install Strapi on your local machine with the command line interface (CLI) or create a Docker image." link="installation" />

<CustomDocCard emoji="2Ô∏è‚É£" title="Configuration" description="Configure the Strapi server, admin panel, and all the built-in features." link="configurations" />

<CustomDocCard emoji="3Ô∏è‚É£" title="Deployment" description="Deploy Strapi to Strapi Cloud or other remote environments." link="deployment" />

</CustomDocCardsWrapper>

:::tip
If you're just discovering Strapi, we encourage you to read the [Quick Start Guide](/cms/quick-start) as it not only presents how to install Strapi but also gives you a quick tour of the available features.
:::


 This is the content for the doc docusaurus/docs/cms/templates.md 

 ---
title: Templates
description: Use and create pre-made Strapi applications designed for a specific use case.
displayed_sidebar: cmsSidebar
tags:
- installation
- templates
- CLI
---

# Templates

Templates in Strapi 5 are standalone, pre-made Strapi applications designed for specific use cases.

Strapi 5 templates are folders that include all files and folders that you would find in a typical Strapi application (see [project structure](/cms/project-structure)).

## Using a template

To create a new Strapi project based on a template, run the following command:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="Yarn">

```sh
yarn create strapi-app my-project --template <template-name-or-url>
```

</TabItem>

<TabItem value="npm" label="NPM">

```sh
npx create-strapi-app@latest my-project --template <template-name-or-url>
```

</TabItem>

</Tabs>

In addition to the mandatory `--template` parameter, you can pass the optional `--template-path` and `--template-branch` options to more precisely define the template to use.

The following table lists all the possible ways to define which template to use:

| Syntax | Description |
|--------|-------------|
| `--template website` | Using one of the <ExternalLink to="https://github.com/strapi/strapi/tree/develop/templates" text="Strapi-maintained templates"/> calling it by its (folder) name. |
| `--template strapi/strapi` | Using the template's GitHub repository shorthand.<br/>This will use the default repository branch. |
| `--template strapi/strapi/some/sub/path` | Using the template's GitHub repository shorthand and specifying a subpath.<br/>This will use the default repository branch. |
| `--template strapi/strapi`<br/>`--template-branch=xxx`<br/>`--template-path=some/sub/path` | The most verbose way, explicitly defining a template branch and a subpath. |
| `--template https://github.com/owner/some-template-repo` | Using a full repository URL.<br/>This will use the default repository branch. |
| `--template https://github.com/owner/some-template-repo --template-branch=xxx --template-path=sub/path` | Using a full repository URL, and specifying both the branch and the subpath for the template. |
| `--template https://github.com/strapi/strapi/tree/branch/sub/path` | Using a repository, branch, and subpath directly.<br/><br/>‚ö†Ô∏è _Warning: This won't work with branch names that include a `/`. In such cases, it's best to explicitly define `--template-branch` and `--template-path`._ |

## Creating a template

Creating a Strapi 5 template is as simple as creating a Strapi application. Create the application (see [CLI installation](/cms/installation/cli)) and the generated folder containing your Strapi 5 application can serve as a template. You can then pass it to the `--template` flag when creating a new Strapi 5 application to use it as a template.

An example of what a template could look like is the <ExternalLink to="https://github.com/strapi/strapi/tree/develop/templates/website" text="Strapi-maintained `website` template"/>.


 This is the content for the doc docusaurus/docs/cms/testing.md 

 ---
title: Testing
displayed_sidebar: cmsSidebar
description: Learn how to test your Strapi application.
tags:
- auth endpoint controller
- environment
---

# Unit testing

:::strapi
The Strapi blog has a tutorial on how to implement <ExternalLink to="https://strapi.io/blog/automated-testing-for-strapi-api-with-jest-and-supertest" text="API testing with Jest and Supertest"/> and <ExternalLink to="https://strapi.io/blog/how-to-add-unit-tests-to-your-strapi-plugin" text="how to add unit tests to your Strapi plugin"/>.
:::

In this guide we will see how you can run basic unit tests for a Strapi application using a testing framework.

In this example we will use <ExternalLink to="https://jestjs.io/" text="Jest"/> Testing Framework with a focus on simplicity and
<ExternalLink to="https://github.com/visionmedia/supertest" text="Supertest"/> Super-agent driven library for testing node.js HTTP servers using a fluent API.

:::caution
Please note that this guide will not work if you are on Windows using the SQLite database due to how windows locks the SQLite file.
:::

## Install test tools

`Jest` contains a set of guidelines or rules used for creating and designing test cases - a combination of practices and tools that are designed to help testers test more efficiently.

`Supertest` allows you to test all the `api` routes as they were instances of <ExternalLink to="https://nodejs.org/api/http.md#http_class_http_server" text="http.Server"/>.

`sqlite3` is used to create an on-disk database that is created and deleted between tests.

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn add --dev jest supertest sqlite3
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm install jest supertest sqlite3 --save-dev
```

</TabItem>

</Tabs>

Once this is done add this to `package.json` file

add `test` command to `scripts` section

```json
  "scripts": {
    "develop": "strapi develop",
    "start": "strapi start",
    "build": "strapi build",
    "strapi": "strapi",
    "test": "jest --forceExit --detectOpenHandles"
  },
```

and add those lines at the bottom of file

```json
  "jest": {
    "testPathIgnorePatterns": [
      "/node_modules/",
      ".tmp",
      ".cache"
    ],
    "testEnvironment": "node"
  }
```

Those will inform `Jest` not to look for test inside the folder where it shouldn't.

## Set up a testing environment

Test framework must have a clean empty environment to perform valid test and also not to interfere with current database.

Once `jest` is running it uses the `test` [environment](/cms/configurations/environment) (switching `NODE_ENV` to `test`)
so we need to create a special environment setting for this purpose.
Create a new config for test env `./config/env/test/database.js` and add the following value `"filename": ".tmp/test.db"`‚Ää-‚Ääthe reason of that is that we want to have a separate sqlite database for tests, so our test will not touch real data.
This file will be temporary, each time test is finished, we will remove that file that every time tests are run on the clean database.
The whole file will look like this:

```js title="path: ./config/env/test/database.js"

module.exports = ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: env('DATABASE_FILENAME', '.tmp/test.db'),
    },
    useNullAsDefault: true,
    debug: false
  },
});
```

## Create a Strapi instance

In order to test anything we need to have a strapi instance that runs in the testing environment,
basically we want to get instance of strapi app as object, similar like creating an instance for <ExternalLink to="https://forum.strapi.io/t/how-to-use-pm2-process-manager-with-strapi/" text="process manager"/>.

These tasks require adding some files - let's create a folder `tests` where all the tests will be put and inside it, next to folder `helpers` where main Strapi helper will be in file strapi.js.

```js title="path: ./tests/helpers/strapi.js"
const Strapi = require("@strapi/strapi");
const fs = require("fs");

let instance;

async function setupStrapi() {
  if (!instance) {
    await Strapi().load();
    instance = strapi;
    
    await instance.server.mount();
  }
  return instance;
}

async function cleanupStrapi() {
  const dbSettings = strapi.config.get("database.connection");

  //close server to release the db-file
  await strapi.server.httpServer.close();

  // close the connection to the database before deletion
  await strapi.db.connection.destroy();

  //delete test database after all tests have completed
  if (dbSettings && dbSettings.connection && dbSettings.connection.filename) {
    const tmpDbFile = dbSettings.connection.filename;
    if (fs.existsSync(tmpDbFile)) {
      fs.unlinkSync(tmpDbFile);
    }
  }
}

module.exports = { setupStrapi, cleanupStrapi };
```

## Test a Strapi instance

We need a main entry file for our tests, one that will also test our helper file.

```js title="path: ./tests/app.test.js"
const fs = require('fs');
const { setupStrapi, cleanupStrapi } = require("./helpers/strapi");

beforeAll(async () => {
  await setupStrapi();
});

afterAll(async () => {
  await cleanupStrapi();
});

it("strapi is defined", () => {
  expect(strapi).toBeDefined();
});
```

Actually this is all we need for writing unit tests. Just run `yarn test` and see a result of your first test

```bash
yarn run v1.13.0
$ jest
 PASS  tests/app.test.js
  ‚úì strapi is defined (2 ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        4.187 s
Ran all test suites.
‚ú®  Done in 5.73s.
```

:::tip
If you receive a timeout error for Jest, please add the following line right before the `beforeAll` method in the `app.test.js` file: `jest.setTimeout(15000)` and adjust the milliseconds value as you need.
:::

## Test a basic endpoint controller

:::tip
In the example we'll use and example `Hello world` `/hello` endpoint from [controllers](/cms/backend-customization/controllers) section.
<!-- the link below is reported to have a missing hash by the check-links plugin, but everything is fine ü§∑ -->
:::

Some might say that API tests are not unit but limited integration tests, regardless of nomenclature, let's continue with testing first endpoint.

We'll test if our endpoint works properly and route `/hello` does return `Hello World`

Let's create a separate test file where `supertest` will be used to check if endpoint works as expected.

```js title="path: ./tests/hello/index.js"

const request = require('supertest');

it("should return hello world", async () => {
  await request(strapi.server.httpServer)
    .get("/api/hello")
    .expect(200) // Expect response http code 200
    .then((data) => {
      expect(data.text).toBe("Hello World!"); // expect the response text
    });
});

```

Then include this code to `./tests/app.test.js` at the bottom of that file

```js
require('./hello');
```

and run `yarn test` which should return

```bash
‚ûú  my-project yarn test
yarn run v1.13.0
$ jest --detectOpenHandles
 PASS  tests/app.test.js (5.742 s)
  ‚úì strapi is defined (4 ms)
  ‚úì should return hello world (208 ms)

[2020-05-22T14:37:38.018Z] debug GET /hello (58 ms) 200
Test Suites: 1 passed, 1 total
Tests:       2 passed, 2 total
Snapshots:   0 total
Time:        6.635 s, estimated 7 s
Ran all test suites.
‚ú®  Done in 9.09s.
```

:::tip
If you receive an error `Jest has detected the following 1 open handles potentially keeping Jest from exiting` check `jest` version as `26.6.3` works without an issue.
:::

## Test an `auth` endpoint controller

In this scenario we'll test authentication login endpoint with two tests

1. Test `/auth/local` that should login user and return `jwt` token
2. Test `/users/me` that should return users data based on `Authorization` header


```js title="path: ./tests/user/index.js"
const request = require('supertest');

// user mock data
const mockUserData = {
  username: "tester",
  email: "tester@strapi.com",
  provider: "local",
  password: "1234abc",
  confirmed: true,
  blocked: null,
};

it("should login user and return jwt token", async () => {
  /** Creates a new user and save it to the database */
  await strapi.plugins["users-permissions"].services.user.add({
    ...mockUserData,
  });

  await request(strapi.server.httpServer) // app server is an instance of Class: http.Server
    .post("/api/auth/local")
    .set("accept", "application/json")
    .set("Content-Type", "application/json")
    .send({
      identifier: mockUserData.email,
      password: mockUserData.password,
    })
    .expect("Content-Type", /json/)
    .expect(200)
    .then((data) => {
      expect(data.body.jwt).toBeDefined();
    });
});

it('should return users data for authenticated user', async () => {
  /** Gets the default user role */
  const defaultRole = await strapi.query('plugin::users-permissions.role').findOne({}, []);

  const role = defaultRole ? defaultRole.id : null;

  /** Creates a new user an push to database */
  const user = await strapi.plugins['users-permissions'].services.user.add({
    ...mockUserData,
    username: 'tester2',
    email: 'tester2@strapi.com',
    role,
  });

  const jwt = strapi.plugins['users-permissions'].services.jwt.issue({
    id: user.id,
  });

  await request(strapi.server.httpServer) // app server is an instance of Class: http.Server
    .get('/api/users/me')
    .set('accept', 'application/json')
    .set('Content-Type', 'application/json')
    .set('Authorization', 'Bearer ' + jwt)
    .expect('Content-Type', /json/)
    .expect(200)
    .then(data => {
      expect(data.body).toBeDefined();
      expect(data.body.id).toBe(user.id);
      expect(data.body.username).toBe(user.username);
      expect(data.body.email).toBe(user.email);
    });
});
```

Then include this code to `./tests/app.test.js` at the bottom of that file

```js
require('./user');
```

All the tests above should return an console output like

```bash
‚ûú  my-project git:(master) yarn test

yarn run v1.13.0
$ jest --forceExit --detectOpenHandles
[2020-05-27T08:30:30.811Z] debug GET /hello (10 ms) 200
[2020-05-27T08:30:31.864Z] debug POST /auth/local (891 ms) 200
 PASS  tests/app.test.js (6.811 s)
  ‚úì strapi is defined (3 ms)
  ‚úì should return hello world (54 ms)
  ‚úì should login user and return jwt token (1049 ms)
  ‚úì should return users data for authenticated user (163 ms)

Test Suites: 1 passed, 1 total
Tests:       4 passed, 4 total
Snapshots:   0 total
Time:        6.874 s, estimated 9 s
Ran all test suites.
‚ú®  Done in 8.40s.
```


 This is the content for the doc docusaurus/docs/cms/typescript.md 

 ---
title: TypeScript
description: Get started with TypeScript for your Strapi application
displayed_sidebar: cmsSidebar
tags:
- introduction
- typescript
---

# TypeScript 
<VersionBadge version="4.3.0" />

<ExternalLink to="https://www.typescriptlang.org/" text="TypeScript"/> adds an additional type system layer above JavaScript, which means that any valid JavaScript code is also valid TypeScript code. In the context of Strapi development, TypeScript allows for a more type-safe codebase for your application, and provides you with a set of tools for automatic type generation and autocompletion.

## Getting Started with TypeScript in Strapi

There are 2 ways of getting started with TypeScript in Strapi:

- Create a new TypeScript project in Strapi by running the following command in a terminal (additional details can be found in the  [CLI installation](/cms/installation/cli) documentation):

  <Tabs groupId="yarn-npm">

  <TabItem value="yarn" label="Yarn">

  ```bash
  yarn create strapi-app my-project --typescript
  ```
  
  </TabItem>

  <TabItem value="npm" label="NPM">

  ```bash
  npx create-strapi-app@latest my-project --typescript
  ```
  
  </TabItem>

  </Tabs>

- Add TypeScript support to an existing Strapi project using the provided [conversion](/cms/typescript/adding-support-to-existing-project) steps.

<br />

:::strapi What to do next?
- Understand the [structure](/cms/project-structure) of a TypeScript-based Strapi project
- Learn about the [configuration options](/cms/configurations/typescript) options related to TypeScript
- Deep dive into TypeScript-related development [options and features](/cms/typescript/development)
- Read the [guides](/cms/typescript/guides) for specific use cases
:::


 This is the content for the doc docusaurus/docs/cms/typescript/adding-support-to-existing-project.md 

 ---
title: Adding TypeScript support 
description: Learn how to add TypeScript support to an existing Strapi project.
displayed_sidebar: cmsSidebar
pagination_previous: cms/typescript/development
tags:
- allowJs flag
- typescript
- tsconfig.json file
- project structure
---

# Adding TypeScript support to existing Strapi projects

Adding [TypeScript](/cms/typescript) support to an existing project requires adding 2 `tsconfig.json` files and rebuilding the admin panel. Additionally, the `eslintrc` and `eslintignore` files can be optionally removed.

The TypeScript flag `allowJs` should be set to `true` in the root `tsconfig.json` file to incrementally add TypeScript files to existing JavaScript projects. The `allowJs` flag allows `.ts` and `.tsx` files to coexist with JavaScript files.

TypeScript support can be added to an existing Strapi project using the following procedure:

1. Add a `tsconfig.json` file at the project root and copy the following code, with the `allowJs` flag, to the file:

  ```json title="./tsconfig.json"

  {
      "extends": "@strapi/typescript-utils/tsconfigs/server",
      "compilerOptions": {
        "outDir": "dist",
        "rootDir": ".",
        "allowJs": true //enables the build without .ts files
      },
      "include": [
        "./",
        "src/**/*.json"
      ],
      "exclude": [
        "node_modules/",
        "build/",
        "dist/",
        ".cache/",
        ".tmp/",
        "src/admin/",
        "**/*.test.ts",
        "src/plugins/**"
      ]
    
    }
    
  ```

2. Add a `tsconfig.json` file in the `./src/admin/` directory and copy the following code to the file:

  ```json title="./src/admin/tsconfig.json"

  {
      "extends": "@strapi/typescript-utils/tsconfigs/admin",
      "include": [
        "../plugins/**/admin/src/**/*",
        "./"
      ],
      "exclude": [
        "node_modules/",
        "build/",
        "dist/",
        "**/*.test.ts"
      ]
    }
    
  ```

3. _(optional)_ Delete the `.eslintrc` and `.eslintignore` files from the project root.
4. Add an additional `'..'` to the `filename` property in the `database.ts` configuration file (only required for SQLite databases):

  ```js title="./config/database.ts"

  const path = require('path');

  module.exports = ({ env }) => ({
    connection: {
      client: 'sqlite',
      connection: {
        filename: path.join(
          __dirname,
          "..",
          "..",
          env("DATABASE_FILENAME", ".tmp/data.db")
        ),
      },
      useNullAsDefault: true,
    },
  });

  ```

5. Rebuild the admin panel and start the development server:

  <Tabs groupId="yarn-npm">

  <TabItem value='yarn' label="Yarn">

    ```sh
    yarn build
    yarn develop
    ```

  </TabItem>

  <TabItem value='npm' label="NPM">

  ```sh
  npm run build
  npm run develop
  ```

  </TabItem>

  </Tabs>

A `dist` directory will be added at the project root (see [project structure](/cms/project-structure)) and the project has access to the same TypeScript features as a new TypeScript-supported Strapi project.


 This is the content for the doc docusaurus/docs/cms/typescript/development.md 

 ---
title: TypeScript development
description: Learn more about TypeScript usage with Strapi 5
displayed_sidebar: cmsSidebar
tags:
- strapi() factory
- strapi.compile() function
- typescript
- plugins development
---

# TypeScript development with Strapi 

While developing a [TypeScript](/cms/typescript)-based application with Strapi, you can:

- access [typings for the `Strapi`](#use-strapi-typescript-typings) class with autocompletion,
- [generate typings](#generate-typings-for-content-types-schemas) for your project's content-types,
- [start Strapi programmatically](#start-strapi-programmatically),
- and follow some TypeScript-specific instructions for [plugins development](#develop-a-plugin-using-typescript).

:::strapi Documents and entries
More information and best practices on how to manipulate documents and entries with a TypeScript-based project can be found in the [dedicated guide](/cms/typescript/documents-and-entries).
:::

## Use `Strapi` TypeScript typings

Strapi provides typings on the `Strapi` class to enhance the TypeScript development experience. These typings come with an autocomplete feature that automatically offers suggestions while developing.

To experience TypeScript-based autocomplete while developing Strapi applications, you could try the following:

1. Open the `./src/index.ts` file from your code editor.
2. Declare the `strapi` argument as type `Strapi` within the global `register` method:

    ```typescript title="./src/index.ts"
    import { Strapi } from '@strapi/strapi';

    export default {
      register({ strapi }: { strapi: Strapi }) {
        // ...
      },
    };
    ```

3. Within the body of the `register` method, start typing `strapi.` and use keyboard arrows to browse the available properties.

4. Choose `runLifecyclesFunctions` from the list.

5. When the `strapi.runLifecyclesFunctions` method is added, a list of available lifecycle types (i.e. `register`, `bootstrap` and `destroy`) are returned by the code editor. Use keyboard arrows to choose one of the lifecycles and the code will autocomplete.

## Generate typings for content-types schemas

To generate typings for your project schemas use the [`ts:generate-types` CLI command](/cms/cli#strapi-ts). The `ts:generate-types` command creates the folder `types`, at the project root, which stores the typings for your project. The optional `--debug` flag returns a detailed table of the generated schemas.

To use `ts:generate-types`run the following code in a terminal at the project root:

<Tabs groupId="yarn-npm">
<TabItem value="npm">

```sh
npm run strapi ts:generate-types --debug #optional flag to display additional logging
```

</TabItem>

<TabItem value="yarn">

```sh
yarn strapi ts:generate-types --debug #optional flag to display additional logging
```

</TabItem>
</Tabs>

:::tip Tip: Automatically generate types
Types can be automatically generated on server restart by adding `autogenerate: true` to [the `config/typescript.js|ts` configuration file](/cms/configurations/typescript#strapi-specific-configuration-for-typescript).
:::

:::tip Tip: Using types in your front-end application
To use Strapi types in your front-end application, you can <ExternalLink to="https://github.com/strapi-community/strapi-typed-fronend" text="use a workaround"/> until Strapi implements an official solution.
:::

### Fix build issues with the generated types

The generated types can be excluded so that the Entity Service doesn't use them and falls back on looser types that don't check the actual properties available in the content types.

To do that, edit the `tsconfig.json` of the Strapi project and add `types/generated/**` to the `exclude` array:

```json title="./tsconfig.json"
  // ...
  "exclude": [
    "node_modules/",
    "build/",
    "dist/",
    ".cache/",
    ".tmp/",
    "src/admin/",
    "**/*.test.ts",
    "src/plugins/**",
    "types/generated/**"
  ]
  // ...
```

However, if you still want to use the generated types on your project, but don't want Strapi to use them, a workaround could be to copy those generated types and paste them outside of the `generated` directory (so that they aren't overwritten when the types are regenerated) and remove the `declare module '@strapi/types'` from the bottom of the file.

:::warning
Types should only be imported from `@strapi/strapi` to avoid breaking changes. The types in `@strapi/types` are for internal use only and may change without notice.
:::

## Start Strapi programmatically

To start Strapi programmatically in a TypeScript project the Strapi instance requires the compiled code location. This section describes how to set and indicate the compiled code directory.

### Use the `strapi()` factory {#use-the-createstrapi-factory}

Strapi can be run programmatically by using the `strapi()` factory. Since the code of TypeScript projects is compiled in a specific directory, the parameter `distDir` should be passed to the factory to indicate where the compiled code should be read:

```js title="./server.js"

const strapi = require('@strapi/strapi');
const app = strapi.createStrapi({ distDir: './dist' });
app.start(); 
```

### Use the `strapi.compile()` function

The `strapi.compile()` function should be mostly used for developing tools that need to start a Strapi instance and detect whether the project includes TypeScript code. `strapi.compile()` automatically detects the project language. If the project code contains any TypeScript code, `strapi.compile()` compiles the code and returns a context with specific values for the directories that Strapi requires:

```js
const strapi = require('@strapi/strapi');

strapi.compile().then(appContext => strapi(appContext).start());
```

## Develop a plugin using TypeScript

New plugins can be generated following the [plugins development documentation](/cms/plugins-development/developing-plugins), ensuring you select "TypeScript" when prompted by the CLI tool.

There are 2 important distinctions for TypeScript applications:

- After creating the plugin, run `yarn` or `npm install` in the plugin directory `src/admin/plugins/[my-plugin-name]` to install the dependencies for the plugin.
- Run `yarn build` or `npm run build` in the plugin directory `src/admin/plugins/[my-plugin-name]` to build the admin panel including the plugin.

:::note
It is not necessary to repeat the `yarn` or `npm install` command after the initial installation. The `yarn build` or `npm run build` command is necessary to implement any plugin development that affects the admin panel.
:::


 This is the content for the doc docusaurus/docs/cms/typescript/documents-and-entries.md 

 ---
title: TypeScript - Manipulating Documents and Entries
sidebar_label: Manipulating Documents and Entries
displayed_sidebar: cmsSidebar
description: TypeScript guide to get started with manipulating documents and entries
tags:
  - typescript
  - guides
  - data
  - document
  - component
  - uid
  - entries
---

# Manipulating documents and entries with a TypeScript-based project

This guide will explore [TypeScript](/cms/typescript) patterns for manipulating documents and entries in a Strapi v5 application, including how to leverage Strapi's `UID` and `Data` namespaces to interact with both generic and known entity types safely. If you're working on a TypeScript-based Strapi project, mastering these approaches will help you take full advantage of type safety and code completion, ensuring robust, error-free interactions with your application‚Äôs content and components.

:::prerequisites

- **Strapi Application:** A Strapi v5 application. If you don't have one, follow the [documentation](/cms/quick-start) to get started.
- **TypeScript:** Ensure TypeScript is set up in your Strapi project. You can follow Strapi's [official guide](/cms/typescript#getting-started-with-typescript-in-strapi) on configuring TypeScript.
- **Generated Types:** Application types [have been generated](/cms/typescript/development#generate-typings-for-content-types-schemas) and are accessible.
  :::

## Type Imports

The `UID` namespace contains literal unions representing the available resources in the application.

```typescript
import type { UID } from '@strapi/strapi';
```

- `UID.ContentType` represents a union of every content-type identifier in the application
- `UID.Component` represents a union of every component identifier in the application
- `UID.Schema` represents a union of every schema (content-type or component) identifier in the application
- And others...

---

Strapi provides a `Data` namespace containing several built-in types for entity representation.

```typescript
import type { Data } from '@strapi/strapi';
```

- `Data.ContentType` represents a Strapi document object
- `Data.Component` represents a Strapi component object
- `Data.Entity` represents either a document or a component

:::tip
Both the entities' type definitions and UIDs are based on the generated schema types for your application.

In case of a mismatch or error, you can always [regenerate the types](/cms/typescript/development#generate-typings-for-content-types-schemas).
:::

## Usage

<br />

### Generic entities

When dealing with generic data, it is recommended to use non-parametrized forms of the `Data` types.

#### Generic documents

```typescript
async function save(name: string, document: Data.ContentType) {
  await writeCSV(name, document);
  //                    ^ {
  //                        id: Data.ID;
  //                        documentId: string;
  //                        createdAt?: DateTimeValue;
  //                        updatedAt?: DateTimeValue;
  //                        publishedAt?: DateTimeValue;
  //                        ...
  //                      }
}
```

:::warning
In the preceding example, the resolved properties for `document` are those common to every content-type.

Other properties have to be checked manually using type guards.

```typescript
if ('my_prop' in document) {
  return document.my_prop;
}
```

:::

#### Generic components

```typescript
function renderComponent(parent: Node, component: Data.Component) {
  const elements: Element[] = [];
  const properties = Object.entries(component);

  for (const [name, value] of properties) {
    //        ^        ^
    //        string   any
    const paragraph = document.createElement('p');

    paragraph.textContent = `Key: ${name}, Value: ${value}`;

    elements.push(paragraph);
  }

  parent.append(...elements);
}
```

### Known entities

When manipulating known entities, it is possible to parametrize `Data` types for better type safety and code completion.

#### Known documents

```typescript
const ALL_CATEGORIES = ['food', 'tech', 'travel'];

function validateArticle(article: Data.ContentType<'api::article.article'>) {
  const { title, category } = article;
  //       ^?         ^?
  //       string     Data.ContentType<'api::category.category'>

  if (title.length < 5) {
    throw new Error('Title too short');
  }

  if (!ALL_CATEGORIES.includes(category.name)) {
    throw new Error(`Unknown category ${category.name}`);
  }
}
```

#### Known components

```typescript
function processUsageMetrics(
  id: string,
  metrics: Data.Component<'app.metrics'>
) {
  telemetry.send(id, { clicks: metrics.clicks, views: metrics.views });
}
```

### Advanced use cases

<br/>

#### Entities subsets

Using the types' second parameter (`TKeys`), it is possible to obtain a subset of an entity.

```typescript
type Credentials = Data.ContentType<'api::acount.acount', 'email' | 'password'>;
//   ^? { email: string; password: string }
```

```typescript
type UsageMetrics = Data.Component<'app.metrics', 'clicks' | 'views'>;
//   ^? { clicks: number; views: number }
```

#### Type argument inference

It is possible to bind and restrict an entity type based on other function parameters.

In the following example, the `uid` type is inferred upon usage as `T` and used as a type parameter for the `document`.

```typescript
import type { UID } from '@strapi/strapi';

function display<T extends UID.ContentType>(
  uid: T,
  document: Data.ContentType<T>
) {
  switch (uid) {
    case 'api::article.article': {
      return document.title;
      //              ^? string
      //     ^? Data.ContentType<'api::article.article'>
    }
    case 'api::category.category': {
      return document.name;
      //              ^? string
      //     ^? Data.ContentType<'api::category.category'>
    }
    case 'api::account.account': {
      return document.email;
      //              ^? string
      //     ^? Data.ContentType<'api::account.account'>
    }
    default: {
      throw new Error(`unknown content-type uid: "${uid}"`);
    }
  }
}
```

When calling the function, the `document` type needs to match the given `uid`.

```typescript
declare const article: Data.Document<'api::article.article'>;
declare const category: Data.Document<'api::category.category'>;
declare const account: Data.Document<'api::account.account'>;

display('api::article.article', article);
display('api::category.category', category);
display('api::account.account', account);
// ^ ‚úÖ

display('api::article.article', category);
// ^ Error: "category" is not assignable to parameter of type ContentType<'api::article.article'>
```


 This is the content for the doc docusaurus/docs/cms/typescript/guides.md 

 ---
title: TypeScript Guides
description: Learn how you can leverage TypeScript while developing your Strapi project.
displayed_sidebar: cmsSidebar
tags:
- typescript
- development
- guides
---

# TypeScript guides

The following guides will help you on specific aspects of a [Typescript-based](/cms/typescript) Strapi project.

<CustomDocCardsWrapper>
<CustomDocCard icon="blueprint" title="Manipulating documents and entries" description="Explore TypeScript patterns for manipulating documents and entries." link="/cms/typescript/documents-and-entries" />
<CustomDocCard icon="plus" title="Adding TypeScript support" description="Learn how to add TypeScript support to an existing Strapi project." link="/cms/typescript/adding-support-to-existing-project" />
</CustomDocCardsWrapper>

 This is the content for the doc docusaurus/docs/cms/upgrade-tool.md 

 ---
title: Upgrade tool
description: The Strapi upgrade tool is a CLI command that helps automatically upgrading to a new Strapi version.
displayed_sidebar: cmsSidebar
pagination_next: cms/migration/v4-to-v5/breaking-changes
sidebar_label: Upgrade tool reference
tags:
- major version
- minor version
- patch version
- semantic versioning
- upgrade tool
- version types
---

# Upgrade tool

The upgrade tool assists Strapi users in upgrading their Strapi application dependencies and code to a specific version.

Running the upgrade tool triggers the update of the application dependencies, their installation, and the execution of a series of **codemods** <Codemods/> that automatically edit the application codebase according to the breaking changes introduced up until the targeted version.

The upgrade tool is a Strapi package and can be run from the CLI.

## Scope

While the upgrade tool helps upgrade applications and plugins, it doesn't cover every aspect of it. 

:white_check_mark: The upgrade tool supports:
- Updating the project's dependencies
- Applying automatic code transformation to existing files
- Installing or re-installing the correct dependencies for the project

:x: The upgrade tool doesn't support:
- Modifying the file tree by adding, removing or moving files and directories
- Migrating the application's data. This is handled by Strapi database migrations

:::warning
After the upgrade tool completes its execution,
it is strongly recommended to review the modifications made before re-running the app or plugin.
:::

## Version types

Strapi version numbers respect the <ExternalLink to="https://semver.org/" text="semantic versioning"/> conventions:

<ThemedImage
  alt="Version numbers explained"
  sources={{
    light: '/img/assets/update-migration/version-numbers.png',
    dark: '/img/assets/update-migration/version-numbers_DARK.png',
  }}
/>

- The first number is the **major** version number.
- The second number is the **minor** version number.
- The third number is the **patch** version number.

The upgrade tool allows upgrading to a major, minor, or patch version.

What the upgrade tool does depends on the latest existing version and the command you run.

For instance, if the latest Strapi v4 version is v4.25.9:

| My Strapi application is currently on‚Ä¶ | If I run‚Ä¶                   | My Strapi application will be upgraded to ‚Ä¶                                                |
|----------------------------------------|-----------------------------|--------------------------------------------------------------------------------------------|
| v4.25.1                                | `npx @strapi/upgrade patch` | v4.25.9<br/><br/>(because v4.25.9 is the latest patch version for the v4.25 minor version) |
| v4.14.1                                | `npx @strapi/upgrade minor` | v4.25.9                                                                                    |
| v4.14.1                                | `npx @strapi/upgrade major` | Nothing.<br/><br/>I first need to run `npx @strapi/upgrade minor` to upgrade to v4.25.9.   |
| v4.25.9                                | `npx @strapi/upgrade major` | v5.0.0                                                                                     |
| v4.14.1                                | `npx @strapi/upgrade latest` | v5.1.2 <br/><br/>A confirmation prompt appears to make sure the major version bump is intended. |

## Upgrade to a new version

:::warning
Before running the upgrade process, make sure you've created a backup of your codebase and database.
:::

### Upgrade to a major version

Run the upgrade tool with the `major` parameter to upgrade the project to the next major version of Strapi:

```bash
npx @strapi/upgrade major
```

During the upgrade process, the application dependencies are updated and installed, and the related codemods are executed.

:::note
If your application is not already running the latest minor and patch version in the current major, the `major` upgrade is prevented, and you will first need to upgrade to the latest [minor.patch](#upgrade-to-a-minor-version) version in the current major version. This means that moving from v4.14.4 to v5.0.0 is a 2-step process because the latest v4 version is v4.16.2.
:::

### Upgrade to a minor version

Run the upgrade tool with the `minor` parameter to upgrade the project to the latest minor and patch version of Strapi:

```bash
npx @strapi/upgrade minor
```

During the upgrade process, the project dependencies are updated and installed, and the related codemods are executed (if any).

### Upgrade to a patch version

Run the upgrade tool with the `patch` parameter to upgrade the project to the latest patch version in the current minor and major version of Strapi:

```bash
npx @strapi/upgrade patch
```

During the upgrade process, the project dependencies are updated and installed, and the related codemods are executed (if any).

### Upgrade to the latest version

Run the upgrade tool with the `latest` parameter to upgrade the project to the latest available version regardless of the current Strapi version:

```bash
npx @strapi/upgrade latest
```

During the upgrade process, the project dependencies are updated and installed, and the related codemods are executed (if any).

:::note
If a `major` version upgrade is detected, the upgrade tool displays a confirmation prompt to make sure the change is
intended.

In the scenario where the major bump isn't the desired option, see [the minor upgrade](#upgrade-to-a-minor-version).
:::

## Run codemods only

Run the upgrade tool with the `codemods` parameter to execute a utility that allows selecting the codemods to be executed. With this command, only the codemods are run, the dependencies are not updated nor installed.

To view a list of the available codemods, use the `ls` command:

```bash
npx @strapi/upgrade codemods ls
```

To select from a list of available codemods and run them, use the `run` command:

```bash
npx @strapi/upgrade codemods run
```

To run only a specific codemod, use `run` followed by a UID found from the `ls` command:

```bash
npx @strapi/upgrade codemods run 5.0.0-strapi-codemod-uid
```

## Options

The `npx @strapi/upgrade [major|minor|patch]` commands can accept the following options:

| Option                                                                                  | Description                                                                     | Default  |
| --------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------|----------|
| [`-n, --dry`](#simulate-the-upgrade-without-updating-any-files-dry-run)                 | [Simulate](#simulate-the-upgrade-without-updating-any-files-dry-run) the upgrade without updating any files | false    |
| [`-d, --debug`](#get-detailed-debugging-information)                                    | Get [more logs](#get-detailed-debugging-information) in debug mode              | false    |
| [`-s, --silent`](#execute-the-upgrade-silently)                                         | [Don't log anything](#execute-the-upgrade-silently)                             | false    |
| [`-p, --project-path <project-path>`](#select-a-path-for-the-strapi-application-folder) | [Path](#select-a-path-for-the-strapi-application-folder) to the Strapi project  | -        |
| [`-y, --yes`](#answer-yes-to-every-prompt)                                              | Automatically [answer "yes"](#answer-yes-to-every-prompt) to every prompt       | false    |

The following options can be run either with the `npx @strapi/upgrade` command alone or with the `npx @strapi/upgrade [major|minor|patch]` commands:

| Option                                                                   | Description                                                      |
| ------------------------------------------------------------------------ | ---------------------------------------------------------------- |
| [`-V, --version`](#get-the-current-version)                              | Output the [version number](#get-the-current-version)            |
| [`-h, --help`](#get-help)                                                | [Print](#get-help) command line options                          |

### Simulate the upgrade without updating any files (dry run)

When passing the `-n` or `--dry` option, the codemods are executed without actually editing the files. The package.json will not be modified, and the dependencies will not be re-installed. Using this option allows simulating the upgrade of the codebase, checking the outcomes without applying any changes:

Examples:

```bash
npx @strapi/upgrade major --dry
npx @strapi/upgrade minor --dry
npx @strapi/upgrade patch --dry
```

### Select a path for the Strapi application folder

When passing the `-p` or `--project-path` option followed by a valid path you can specify in which folder the Strapi application is located.

Example:

```bash
npx @strapi/upgrade major -p /path/to/the/Strapi/application/folder
```

### Get the current version

When passing the `--version` option (or its `-V` shorthand), the current version of the upgrade tool is logged.

Example:

```sh
$ npx @strapi/upgrade -V
4.15.1
```

### Get detailed debugging information

When passing the `--debug` option (or its `-d` shorthand), the upgrade tool provides more detailed logs while running:

```bash
npx @strapi/upgrade --debug
```

### Execute the upgrade silently

When passing the `--silent` option (or its `-s` shorthand), the tool executes the upgrade without providing any log:

```bash
npx @strapi/upgrade --silent
```

### Answer yes to every prompt

When passing the `--yes` option (or its `-y` shorthand), the tool automatically answers "yes" to every prompt:

```bash
npx @strapi/upgrade --yes`
```

### Get help

When passing the `--help` option (or its `-h` shorthand), help information is displayed, listing the available options:

Examples:

<Tabs>
<TabItem value="upgrade" label="General help for the upgrade tool">

```sh
$ npx @strapi/upgrade -h
Usage: upgrade <command> [options]

Options:
 -V, --version    output the version number
 -h, --help       Print command line options

Commands:
 major [options]  Upgrade to the next available major version of Strapi
 minor [options]  Upgrade to ...
 patch [options]  Upgrade to ...
 help [command]   Print options for a specific command

```

</TabItem>

<TabItem value="major" label="Specific help for upgrade major">

```sh
$ npx @strapi/upgrade major -h
Usage: upgrade major [options]

Upgrade to the next available major version of Strapi

Options:
  -p, --project-path <project-path>  Path to the Strapi project
  -n, --dry                          Simulate the upgrade without updating any files (default: false)
  -d, --debug                        Get more logs in debug mode (default: false)
  -s, --silent                       Don't log anything (default: false)
  -h, --help                         Display help for command
  -y, --yes                          Automatically answer yes to every prompt
```

</TabItem>
</Tabs>


 This is the content for the doc docusaurus/docs/cms/upgrades.md 

 ---
title: Upgrades
description: Learn more about Strapi 5's upgrade process
displayed_sidebar: cmsSidebar
pagination_prev: cms/plugins-development/developing-plugins
pagination_next: cms/upgrade-tool
tags:
- migration
- upgrades
- upgrade tool
- Strapi version 
---

import InstallCommand from '/docs/snippets/install-npm-yarn.md'
import BuildCommand from '/docs/snippets/build-npm-yarn.md'
import DevelopCommand from '/docs/snippets/develop-npm-yarn.md'

# Upgrades

Strapi periodically releases code improvements through new versions. New Strapi versions are announced in both the terminal and in the administration panel, and <ExternalLink to="https://github.com/strapi/strapi/releases" text="GitHub release notes"/> list what is new with each new version.

The latest version number of Strapi that was released by the Strapi core team can be found on <ExternalLink to="https://www.npmjs.com/package/@strapi/strapi" text="npm"/> or on <ExternalLink to="https://github.com/strapi/strapi/releases" text="GitHub"/>.

When a new version of Strapi is released, you might want to upgrade, and the present page serves as an entry point for information about upgrading.

<details>
<summary>How can I find my current Strapi version number?</summary>

You can find the current version number of your Strapi application:

- either in the admin panel, by going to _Settings > Global Settings > Overview_ and looking at the Strapi version number printed in the Details section:

  <ThemedImage
    alt="Finding your Strapi version number in the admin panel"
    sources={{
      light: '/img/assets/migration/strapi-version-number.png',
      dark: '/img/assets/migration/strapi-version-number_DARK.png'
    }}
  />

- or by running `yarn strapi version` or `npm run strapi version` in the terminal, from the folder where your Strapi project is located.

</details>

Click on one of the 2 following cards depending on your use case:

<CustomDocCard emoji="4Ô∏è‚É£" title="I'm running Strapi v4 and want to upgrade to Strapi 5." description="All you need to know to upgrade to Strapi 5, the latest major version of Strapi." link="/cms/migration/v4-to-v5/introduction-and-faq" />
<CustomDocCard emoji="5Ô∏è‚É£" title="I'm already running Strapi 5 and want to upgrade to the latest version." description="All you need to know to use the automatic upgrade tool, which upgrades both from Strapi v4 to Strapi 5 or to an existing Strapi 5.x.x version to a more recent one." link="/cms/upgrade-tool" />


 This is the content for the doc docusaurus/docs/cms/usage-information.md 

 ---
title: Usage information
description: We are committed to providing a solution, with Strapi, that exceeds the expectations of the users and community. We are also committed to continuing to develop and make Strapi even better than it is today.
sidebarDepth: 0
tags:
- collected data
- telemetry
- GDPR
- UUID
---

# Collected Usage Information

We are committed to providing a solution, with Strapi, that exceeds the expectations of the users and community. We are also committed to continuing to develop and make Strapi even better than it is today. To that end, Strapi contains a feature in which non-sensitive data is collected. This data is collectively aggregated for all our users, which when taken together give us a better global understanding of how users are interacting and using Strapi. We will never share the data collected in any way that would identify our Customers or their users; if shared, this data will always be anonymous.

## Context

The number of developers using Strapi is growing significantly. As mentioned earlier, we are committed to providing the best experience to our users. We will always continue to do hands-on UI/UX testing, surveys, issue tracking, roadmap votes, etc... and otherwise talk with the Strapi Community while striving to understand and deliver what is being asked for and what is needed, by any means available.

However, these above actions alone are often insufficient to maintain an overall picture of some aspects of the global usage of Strapi and its features. Globally aggregated data helps us answer and make choices around questions like these:

- Are our users using a particular feature or not? For those who are using it, what do they use it for? Is it activated and used alongside another plugin? Which specific plugin? Or something else, like, only in development/production?
- How long does setting up a project take? If the global install time increases, does it mean that users are encountering issues or the process is simply too complicated?
- What type of errors our users are facing?
- What are the most used plugins?
- And more...

Without these metrics, we wouldn't be able to make the right choices as we continue to move forward with the roadmap and provide what you, the community and users, are asking for.

## Collected data

The following data is collected:

- Unique project ID (generated with UUID)
- Unique machine ID (generated with <ExternalLink to="https://www.npmjs.com/package/node-machine-id" text="node-machine-id"/>)
- Environment state (development, staging, production)
- System information (OS)
- Build configurations

:::caution GDPR
Any identifiable data collected and aggregated is of a non-sensitive nature. We are compliant with the European GDPR recommendations (see our <ExternalLink to="https://strapi.io/privacy" text="Privacy Policy"/>). We do not collect databases configurations, password or custom variables. Any data collected (as above) is secured, encrypted and then anonymized.
:::

:::note
If you check the box "Keep me updated about new features & upcoming improvements (by doing this, you accept the terms and the privacy policy)" on the first registration screen, your email address, first name, and role in the company will be sent to our marketing team.

These data are used for marketing-related purposes only (e.g., the Strapi newsletter) and are not sent to Strapi's telemetry system. This collected usage information is opt-out by default: the data aren't sent if you don't check the box.
:::

### Opt-out

:::caution
Strapi previously recommended disabling data collection by removing the `uuid` property in the `package.json` file located in the project root. While this method will still work it is discouraged since the `uuid` might be required for certain project functionality and adding a `uuid` at a later date would re-enable data collection without informing the user.
:::

The default data collection feature can be disabled using the following CLI command:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```sh
yarn strapi telemetry:disable
```

</TabItem>

<TabItem value="npm" label="NPM">

```sh
npm run strapi telemetry:disable
```

</TabItem>

</Tabs>

Alternatively, the `strapi.telemetryDisabled: true` flag in the project `package.json` file will also disable data collection.

Data collection can later be re-enabled by deleting the flag or setting it to false, or by using the `telemetry:enable` command.

:::note
If you have any questions or concerns regarding data collection, please contact us at the following email address [privacy@strapi.io](mailto:privacy@strapi.io).
:::


 This is the content for the doc docusaurus/docs/cms/users-roles-permissions/introduction-to-users-roles-permissions.md 

 ---
title: Introduction to users, roles & permissions
displayed_sidebar: cmsSidebar
sidebar_position: 1
---

# Introduction to users, roles & permissions

Some features of the admin panel, as well as the content managed with Strapi itself, are ruled by a system of permissions. These permissions can be assigned to roles, which are associated with the users who have access to the admin panel, the administrators. But it is also possible to grant permissions more publicly, to give access to content to the end users of your Strapi application.

Depending on what users and their roles and permissions you want to manage, you should either use the Role Based Access Control (RBAC) feature, or the Users & Permissions plugin. Both are managed from <Icon name="gear-six" /> _Settings_, accessible from the main navigation of the admin panel.

<ThemedImage
  alt="Users, permissions and roles settings"
  sources={{
    light: '/img/assets/users-permissions/users-roles-permissions-settings.png',
    dark: '/img/assets/users-permissions/users-roles-permissions-settings_DARK.png',
  }}
/>


 This is the content for the doc docusaurus/docs/release-notes.md 

 ---
title: Release notes
description: Learn what has changed with each version of the Strapi 5 documentation, with links to GitHub pull requests for more information.
toc_max_heading_level: 2
custom_edit_url: null
---

<div className="release-notes-page">

This page lists all the Strapi Docs version numbers and their corresponding updates.

<details>
<summary><Icon name="graduation-cap" /> Strapi Docs version numbers explained:</summary>

The **Strapi Documentation** (Strapi Docs) at [docs.strapi.io](https://docs.strapi.io) **always documents the latest version of Strapi (CMS and Cloud) products**.

Since Strapi Docs version 5.0.0, the **docs' version number is independent from the Strapi product version**. Thus, the version numbers of <ExternalLink to="https://github.com/strapi/documentation" text="strapi/documentation"/> and <ExternalLink to="https://github.com/strapi/strapi" text="strapi/strapi"/> may differ.

Strapi Docs now follow the **<ExternalLink to="https://semver.org/" text="semantic versioning"/>** philosophy, but adapted to docs:

- **Major version** (6.0.0, 7.0.0‚Ä¶): A **significant rewrite** of the docs (content or framework). This may impact the user experience, redesign the site, or break old links (redirections are handled, but broken links can be <ExternalLink to="https://github.com/strapi/documentation/issues/new/choose" text="reported"/>).
- **Minor version** (5.1.0, 5.2.0‚Ä¶): **New Strapi features** or improvements to the docs (e.g., new components or tools).
- **Patch version** (5.1.1, 5.1.2‚Ä¶): **Content updates**, including improvement or extension of existing pages, code examples fixes, and typos.

New versions (minor or patch) are generally released weekly, on Wednesdays.
<br/>

</details>

## 6.3.1

<br />
### <Icon name='pen-nib' /> Updated content

<br />

#### Cloud
- [Free Cloud plan](https://github.com/strapi/documentation/pull/2492)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 6.3.0

<br />
### <Icon name='sparkle' /> New content

<br />

#### CMS
- [Homepage API](https://github.com/strapi/documentation/pull/2474)

### <Icon name='broom' /> Chore, fixes, typos, and other improvements

<br />

#### CMS
- [Remove Node 18 support and misc. cleanup](https://github.com/strapi/documentation/pull/2486)
- [Remove obsolete version attribute from Docker guide](https://github.com/strapi/documentation/pull/2485)
- [Viewable API tokens in the admin panel](https://github.com/strapi/documentation/pull/2484)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/Bassel17" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/37274596?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Bassel17"/>
</a>
<a href="https://github.com/derrickmehaffy" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/8593673?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="derrickmehaffy"/>
</a>
<a href="https://github.com/dominicracine" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/23481112?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="dominicracine"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 6.2.2

<br />
### <Icon name='pen-nib' /> Updated content

<br />

#### CMS
- [Content-type Builder revamp (beta release)](https://github.com/strapi/documentation/pull/2479)

### <Icon name='broom' /> Chore, fixes, typos, and other improvements

<br />

#### CMS
- [Update theme extension (colors) in admin panel customization](https://github.com/strapi/documentation/pull/2478)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/meganelacheny" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/19183360?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="meganelacheny"/>
</a>
<a href="https://github.com/soheilnikroo" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/62501144?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="soheilnikroo"/>
</a>
</div>
<br/>
<br/>

## 6.2.1

<br />
### <Icon name='pen-nib' /> Updated content

<br />

#### CMS
- [Add Guideflows to feature pages](https://github.com/strapi/documentation/pull/2473)

### <Icon name='broom' /> Chore, fixes, typos, and other improvements

<br />

#### CMS
- [Display required version for audit logs, data export and import, and relations reordering](https://github.com/strapi/documentation/pull/2475)
- [Add link to external guide about deploying Strapi on Azure](https://github.com/strapi/documentation/pull/2472)
- [Fix screenshot description in Cloud projects overview](https://github.com/strapi/documentation/pull/2471)

#### Cloud
- [Fix various Cloud docs typos](https://github.com/strapi/documentation/pull/2476)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/Mike-pw" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/82603294?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Mike-pw"/>
</a>
<a href="https://github.com/campos20" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/10170850?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="campos20"/>
</a>
<a href="https://github.com/mariekirsch" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/63100752?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="mariekirsch"/>
</a>
<a href="https://github.com/meganelacheny" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/19183360?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="meganelacheny"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 6.2.0

<br />
### <Icon name='pen-nib' /> Updated content

<br />

#### CMS
- [Rewrite Custom fields documentation as a feature page](https://github.com/strapi/documentation/pull/2469)
- [Add `files` to Strapi Client docs](https://github.com/strapi/documentation/pull/2463)

#### Repository

- [Move contribution link to secondary table of contents on larger viewports](https://github.com/strapi/documentation/pull/2460)
- [New tabs design](https://github.com/strapi/documentation/pull/2459)

### <Icon name='broom' /> Chore, fixes, typos, and other improvements

<br />

#### CMS
- [Fix plugin init command](https://github.com/strapi/documentation/pull/2467)
- [Remove unused plugins files](https://github.com/strapi/documentation/pull/2462)
- [Update suggested npm production Dockerfile](https://github.com/strapi/documentation/pull/2458)

#### Cloud
- [Add caution about custom domains and Strapi Cloud assets URLs](https://github.com/strapi/documentation/pull/2470)

#### Repository
- [Fix identity cards design](https://github.com/strapi/documentation/pull/2461)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/ClaXXX" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/58471398?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="ClaXXX"/>
</a>
<a href="https://github.com/jozzhart" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/662502?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="jozzhart"/>
</a>
<a href="https://github.com/maccomaccomaccomacco" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/2686869?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="maccomaccomaccomacco"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 6.1.0

<br />
### <Icon name='broom' /> Chore, fixes, typos, and other improvements

<br />

#### CMS
- [New design for features & plugins identity cards](https://github.com/strapi/documentation/pull/2456)
- [Fix issue #2378](https://github.com/strapi/documentation/pull/2454)
- [Update SSO badge style](https://github.com/strapi/documentation/pull/2453)
- [Add missing factory method in TypeScript development example](https://github.com/strapi/documentation/pull/2452)

#### Repository
- [Fix `key` token color in code blocks](https://github.com/strapi/documentation/pull/2455)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/kasperjha" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/49387825?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="kasperjha"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 6.0.1

<br />

### <Icon name='broom' /> Chore, fixes, typos, and other improvements

<br />

#### CMS
- [Improve cors documentation](https://github.com/strapi/documentation/pull/2444)
- [fix broken link in preview.md](https://github.com/strapi/documentation/pull/2450)
- [Update step-by-step.md for Strapi 5 migration](https://github.com/strapi/documentation/pull/2449)
- [Add cross links for admin panel configuration and customization](https://github.com/strapi/documentation/pull/2447)
- [Unhide Testing page](https://github.com/strapi/documentation/pull/2446)

#### Cloud
- [Adding a small note about Cloud sidegrade and display new ui](https://github.com/strapi/documentation/pull/2451)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/HonzaTuron" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/20155254?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="HonzaTuron"/>
</a>
<a href="https://github.com/kibwashere" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/3426213?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="kibwashere"/>
</a>
<a href="https://github.com/oktapodia" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/2752200?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="oktapodia"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
<a href="https://github.com/ztxone" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/39146381?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="ztxone"/>
</a>
</div>
<br/>
<br/>

## 6.0.0

<br />
### <Icon name='sparkle' /> New content

<br />

#### CMS
- [Add Design System breaking changes summary](https://github.com/strapi/documentation/pull/2435)

### <Icon name='pen-nib' /> Updated content

<br />

#### CMS
- [Add custom logo doc in Admin Panel page + link in Admin Panel Customi‚Ä¶](https://github.com/strapi/documentation/pull/2439)
- [Preview: Side panel (stable, CMS) ](https://github.com/strapi/documentation/pull/2411)

#### Cloud
- [Various Cloud docs updates](https://github.com/strapi/documentation/pull/2440)

### <Icon name='broom' /> Chore, fixes, typos, and other improvements

<br />

#### Repository
- [Add support for dark mode to new homepage cards](https://github.com/strapi/documentation/pull/2442)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/meganelacheny" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/19183360?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="meganelacheny"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>


## 6.0.0-beta.5

<br />
### <Icon name='broom' /> Chore, fixes, typos, and other improvements

<br />

#### Repository
- [Fixes AI button blurry box shadow](https://github.com/strapi/documentation/pull/2426)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/HichamELBSI" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/7756284?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="HichamELBSI"/>
</a>
</div>
<br/>
<br/>


## 6.0.0-beta.4

<br/>

### <Icon name="pen-nib" /> Updated content

<br/>

#### CMS
- [Update Content Manager to mention editing relations on the fly](https://github.com/strapi/documentation/pull/2406)
- [Preview: Side panel](https://github.com/strapi/documentation/pull/2400)

### <Icon name="broom" /> Chore, fixes, typos, and other improvements

<br/>

#### Repository
- [Improve homepage "Ask AI" button effect](https://github.com/strapi/documentation/pull/2424)
- [Third draft of iteration #1 for new homepage](https://github.com/strapi/documentation/pull/2422)
- [Second draft of iteration #1 for new homepage](https://github.com/strapi/documentation/pull/2420)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 6.0.0-beta.3
<br />

### <Icon name="pen-nib" /> Updated content

<br />

#### Strapi Cloud
- [New Cloud plans (CMS docs)](https://github.com/strapi/documentation/pull/2396)

### <Icon name="broom" /> Chore, fixes, typos, and other improvements

<br />

#### Repository
- [First draft of Iteration #1 for new homepage](https://github.com/strapi/documentation/pull/2416)
- [Apply `<ExternalLink />` component where necessary](https://github.com/strapi/documentation/pull/2415)
- [Fix pagination_next values](https://github.com/strapi/documentation/pull/2414)
- [Mention lifecycle hooks blog article](https://github.com/strapi/documentation/pull/2413)
- [Mention blog article about lifecycle functions](https://github.com/strapi/documentation/pull/2412)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/kibwashere" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/3426213?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="kibwashere"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 6.0.0-beta.2

<br />
### <Icon name='pen-nib' /> Updated content

<br />

#### CMS

- [Add missing TypeScript pages](https://github.com/strapi/documentation/pull/2402)
- [Mention codemods on breaking changes pages](https://github.com/strapi/documentation/pull/2393)

### <Icon name='broom' /> Chore, fixes, typos, and other improvements

<br />

#### CMS

- [Remove integration guides](https://github.com/strapi/documentation/pull/2390)

#### Repository
- [Mermaid fallback](https://github.com/strapi/documentation/pull/2403)
- [Update release notes script](https://github.com/strapi/documentation/pull/2395)
- [Add ExternalLink custom component](https://github.com/strapi/documentation/pull/2389)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 6.0.0-beta.1

<br/>

Version 6.0.0 of Strapi Docs is the biggest rewrite of documentation to date!<br/><Icon name="sparkle"/> This release includes:

- _Merge of Dev Docs & User Guide_: You now have one documentation per Strapi product: CMS and Cloud.
- _New Features section & pages_: Everything feature-related is in the new ‚ÄúFeatures‚Äù section of the CMS doc's navigation and each feature is now fully documented in one page.
- _Simplified navigation_: Many users reported frustration because of the too many levels and inconsistent behaviours in the navigation‚Äîboth issues have been fixed and the navigation design has been improved for better readability.
- _More visuals throughout the docs_: We're slowly adding new interactive demos in pages to offer another way to learn about Strapi. Check out [Admin Panel](/cms/features/admin-panel), [Content Manager](/cms/features/content-manager), and [Content-type Builder](/cms/features/content-type-builder) pages to try the demos!

Feel free to [share your feedback](https://forms.gle/D1SXb8kYBVR7qijp6)!

### <Icon name="sparkle" /> New content

<br/>

#### CMS Docs
- [CMS folder reorganization](https://github.com/strapi/documentation/pull/2375)
- [New CMS documentation - More improvements & additions](https://github.com/strapi/documentation/pull/2359)
- [Proofread & improve CMS docs pages - pt. 2](https://github.com/strapi/documentation/pull/2369)
- [Proofread & improve CMS docs pages - pt. 1](https://github.com/strapi/documentation/pull/2350)
- [RBAC & SSO (Dev Docs) rework for CMS Docs](https://github.com/strapi/documentation/pull/2347)
- [New Features pages with User Guide content](https://github.com/strapi/documentation/pull/2288)
- [New Features pages with Dev Docs content](https://github.com/strapi/documentation/pull/2309)
- [CMS Docs (alpha)](https://github.com/strapi/documentation/pull/2340)

### <Icon name="pen-nib" /> Chore, fixes, typos, and other improvements

- [üé® More design fixes for CMS Docs](https://github.com/strapi/documentation/pull/2366)
- [üé® Design fixes for the new design](https://github.com/strapi/documentation/pull/2276)
- [üé® New design](https://github.com/strapi/documentation/pull/2245)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/meganelacheny" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/19183360?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="meganelacheny"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 5.8.0

<br />
### <Icon name='sparkle' /> New content

<br />

#### Repository
- [Add a guide on how to create components for plugins](https://github.com/strapi/documentation/pull/2433)

### <Icon name='pen-nib' /> Updated content

<br />

#### Cloud
- [Project settings: Variables page revamp (pt. 2)](https://github.com/strapi/documentation/pull/2425)

#### Repository
- [Add use case for handling database migrations with TypeScript](https://github.com/strapi/documentation/pull/2432)
- [Add Email plugin ratelimiting configuration options](https://github.com/strapi/documentation/pull/2377)

### <Icon name='broom' /> Chore, fixes, typos, and other improvements

<br />

#### Cloud
- [Add callout for downgrade/upgrade Cloud plans](https://github.com/strapi/documentation/pull/2428)

#### Repository
- [Fix broken link to Strapi client README](https://github.com/strapi/documentation/pull/2436)
- [Fix missing location for content-type generation command in Store and Access Data (plugins dev) guide](https://github.com/strapi/documentation/pull/2434)
- [Fix Node versions in installation snippet](https://github.com/strapi/documentation/pull/2431)
- [Convert example in Store and Access Data guide from ES to DS](https://github.com/strapi/documentation/pull/2430)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/derrickmehaffy" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/8593673?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="derrickmehaffy"/>
</a>
<a href="https://github.com/meganelacheny" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/19183360?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="meganelacheny"/>
</a>
<a href="https://github.com/pastelmind" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/29533079?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pastelmind"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>


## 5.7.0

<br/>

### <Icon name="pen-nib" /> Updated content

<br/>

#### Dev Docs & User Guide

- [Preview: Side panel](https://github.com/strapi/documentation/pull/2410)

#### User Guide

- [Update Content Manager to mention editing relations on the fly](https://github.com/strapi/documentation/pull/2407)

#### Strapi Cloud

- [Strapi Cloud settings: Environment Variables revamp](https://github.com/strapi/documentation/pull/2419)

### <Icon name="broom" /> Chore, fixes, typos, and other improvements

<br/>

#### Strapi Cloud

- [Use new Cloud plans screenshot](https://github.com/strapi/documentation/pull/2418)

#### Repository

- [Added disabled option for LiveEditor so that it does not steal focus - Closes issue #2409](https://github.com/strapi/documentation/pull/2423)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/ankit7201" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/5596406?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="ankit7201"/>
</a>
<a href="https://github.com/kibwashere" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/3426213?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="kibwashere"/>
</a>
<a href="https://github.com/meganelacheny" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/19183360?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="meganelacheny"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 5.6.3

<br/>

### <Icon name="pen-nib" /> Updated content

<br/>

#### Dev Docs
- [Enhanced webhooks docs](https://github.com/strapi/documentation/pull/2391)

#### Strapi Cloud
- [New Cloud plans](https://github.com/strapi/documentation/pull/2394)

### <Icon name="broom" /> Chore, fixes, typos, and other improvements

<br/>

#### Dev Docs
- [Fix descriptions for database parameters in CLI installation](https://github.com/strapi/documentation/pull/2404)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/Goldbee2" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/56094194?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Goldbee2"/>
</a>
<a href="https://github.com/kibwashere" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/3426213?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="kibwashere"/>
</a>
<a href="https://github.com/ssganesh035" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/117903686?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="ssganesh035"/>
</a>
</div>
<br/>
<br/>

## 5.6.2

### <Icon name="pen-nib" /> Updated content

#### Dev Docs

- [Setting up local plugin in Strapi without the Plugin SDK](https://github.com/strapi/documentation/pull/2392)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/Bassel17" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/37274596?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Bassel17"/>
</a>
</div>
<br/>
<br/>

## 5.6.1

### <Icon name="broom" /> Chore, fixes, typos, and other improvements

#### Dev Docs
- [Update admin-panel-api.md](https://github.com/strapi/documentation/pull/2383)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/Rosalko" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/49037355?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Rosalko"/>
</a>
</div>
<br/>
<br/>

## 5.6.0

### <Icon name="sparkle" /> New content

#### Dev Docs

- [Strapi Client library](https://github.com/strapi/documentation/pull/2373)

### <Icon name="pen-nib" /> Updated content

#### Dev Docs

- [Pregenerated API tokens](https://github.com/strapi/documentation/pull/2380)

### <Icon name="broom" /> Chore, fixes, typos, and other improvements

#### Dev Docs

- [Rename SDK to Client in files and diagrams](https://github.com/strapi/documentation/pull/2381)
- [Add missing TypeScript version to Admin Panel API code example](https://github.com/strapi/documentation/pull/2372)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/maccomaccomaccomacco" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/2686869?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="maccomaccomaccomacco"/>
</a>
<a href="https://github.com/oktapodia" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/2752200?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="oktapodia"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 5.5.4

### <Icon name="pen-nib" /> Chore, fixes, typos, and other improvements

#### Dev Docs
- [Update Doc Service API middleware example](https://github.com/strapi/documentation/pull/2368)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/Gkleinereva" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/23621633?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Gkleinereva"/>
</a>
</div>
<br/>
<br/>

## 5.5.3

### <Icon name="broom" /> Chore, fixes, typos, and other improvements

#### Dev Docs
- [Fix incorrect import of unstable_useContentManagerContext in Helper-plugin migration reference](https://github.com/strapi/documentation/pull/2367)
- [Fix typo in v4 ‚Üí v5 step-by-step for GraphQL plugin](https://github.com/strapi/documentation/pull/2360)
- [Fix bug in the middlewares example](https://github.com/strapi/documentation/pull/2358)
- [Fix populate examples for Document Service API](https://github.com/strapi/documentation/pull/2356)

#### Strapi Cloud
- [Add last successful deployment‚Äôs date of the Production environment](https://github.com/strapi/documentation/pull/2361)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/AhmedMuhsingez" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/76662243?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="AhmedMuhsingez"/>
</a>
<a href="https://github.com/Qbject" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/65710914?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Qbject"/>
</a>
<a href="https://github.com/ahulterstrom" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/55113250?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="ahulterstrom"/>
</a>
<a href="https://github.com/olegStrapier" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/148060535?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="olegStrapier"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 5.5.2

<br/>

### <Icon name="broom" /> Chore, fixes, typos, and other improvements

#### Dev Docs
- [Add graphQL landingPage configuration and update Apollo playground to sandbox](https://github.com/strapi/documentation/pull/2343)
- [Add the --verbose option to the data transfer command description](https://github.com/strapi/documentation/pull/2352)
- [Removing the note about unmodified fields on the update](https://github.com/strapi/documentation/pull/2351)
- [Fix typo in admonition](https://github.com/strapi/documentation/pull/2349)
- [Fix Document Service API example typo](https://github.com/strapi/documentation/pull/2348)

#### Strapi Cloud
- [Update Cloud backups (restoration timestamp)](https://github.com/strapi/documentation/pull/2346)
- [Add the SSO badge for the new, paid add-on](https://github.com/strapi/documentation/pull/2341)
- [Update text for add environment button](https://github.com/strapi/documentation/pull/2299)

#### Repository
- [Add Amplitude's browser SDK and web experiment for future A/B testing](https://github.com/strapi/documentation/pull/2345)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/AtallahFatma" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/26638076?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="AtallahFatma"/>
</a>
<a href="https://github.com/Mcastres" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/17828745?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Mcastres"/>
</a>
<a href="https://github.com/Qbject" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/65710914?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Qbject"/>
</a>
<a href="https://github.com/derrickmehaffy" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/8593673?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="derrickmehaffy"/>
</a>
<a href="https://github.com/giu1io" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/6680957?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="giu1io"/>
</a>
<a href="https://github.com/innerdvations" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/999278?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="innerdvations"/>
</a>
<a href="https://github.com/maccomaccomaccomacco" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/2686869?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="maccomaccomaccomacco"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 5.5.1

<br/>

### <Icon name="broom" /> Chore, fixes, typos, and other improvements

#### User Guide
- [Update User Guide intro. for stable new homepage](https://github.com/strapi/documentation/pull/2338)

#### Dev Docs
- [Fix typo in react-router-dom-6.md](https://github.com/strapi/documentation/pull/2337)
- [Use yarn/npm tabs in Strapi CLI examples](https://github.com/strapi/documentation/pull/2332)

#### Strapi Cloud
- [Remove account preferences section from cloud docs](https://github.com/strapi/documentation/pull/2333)


***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/giu1io" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/6680957?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="giu1io"/>
</a>
<a href="https://github.com/johannesscheiermann" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/19613511?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="johannesscheiermann"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 5.5.0

<Icon name="sparkle" /> The Strapi Docs website now has a brand new design! We hope you like it as much as we loved creating it.
Please feel free to [share your feedback](https://forms.gle/9NM8npMGoTkYetxGA).

### <Icon name="pen-nib" /> Updated content

#### User Guide
- [Mention new admin panel homepage and update screenshots](https://github.com/strapi/documentation/pull/2322)

### <Icon name="broom" />Chore, fixes, typos, and other improvements

#### Dev Docs
- [fix locale prerequisites](https://github.com/strapi/documentation/pull/2320)
- [fix wrong import](https://github.com/strapi/documentation/pull/2319)
- [Fix SDK plugin init command example in the SDK reference](https://github.com/strapi/documentation/pull/2318)
- [SDK beta callout](https://github.com/strapi/documentation/pull/2317)

#### Strapi Cloud
- [Add section about importing env vars](https://github.com/strapi/documentation/pull/2326)
- [Adding notes about GitLab groups](https://github.com/strapi/documentation/pull/2323)

#### Repository
- [Update docs content for Preview switching from beta to stable](https://github.com/strapi/documentation/pull/2325)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/Boegie19" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/34578426?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Boegie19"/>
</a>
<a href="https://github.com/Jimimimi" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/1778990?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Jimimimi"/>
</a>
<a href="https://github.com/kibwashere" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/3426213?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="kibwashere"/>
</a>
<a href="https://github.com/lucasboilly" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/45385696?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="lucasboilly"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 5.4.0

<br/>

### <Icon name="sparkle" /> New content

<br/>

#### Repository
- [First iteration of Growth plan](https://github.com/strapi/documentation/pull/2303)

### <Icon name="broom" />Chore, fixes, typos, and other improvements

#### Dev Docs
- [Add a cross-link to the "commonly asked questions" about Strapi 5 article from the blog](https://github.com/strapi/documentation/pull/2313)
- [Add watchIgnoreFiles demo](https://github.com/strapi/documentation/pull/2312)
- [Fix unit testing docs for Strapi 5](https://github.com/strapi/documentation/pull/2308)
- [Mention Preview is under a feature flag](https://github.com/strapi/documentation/pull/2307)

***

This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/declandragon" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/37643710?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="declandragon"/>
</a>
<a href="https://github.com/kibwashere" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/3426213?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="kibwashere"/>
</a>
<a href="https://github.com/kasonde" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/13610895?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="kasonde"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 5.3.0

<br/>

### <Icon name="sparkle" /> New content

<br/>

#### Dev Docs
- [Setting up the Preview feature](https://github.com/strapi/documentation/pull/2295)

#### User Guide
- [Previewing content in the Content Manager](https://github.com/strapi/documentation/pull/2295)

### <Icon name="pen-nib" /> Updated content

<br/>

#### Strapi Cloud
- [Rename a project](https://github.com/strapi/documentation/pull/2300)

### <Icon name="broom" />Chore, fixes, typos, and other improvements

<br/>

#### Dev Docs
- [Update cross-link to U&P plugin from dev docs routes documentation](https://github.com/strapi/documentation/pull/2305)

#### Strapi Cloud
- [Update Cloud plans screenshot](https://github.com/strapi/documentation/pull/2304)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/AtallahFatma" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/26638076?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="AtallahFatma"/>
</a>
<a href="https://github.com/meganelacheny" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/19183360?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="meganelacheny"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>

## 5.2.2

<br/>

### <Icon name="broom" />Chore, fixes, typos, and other improvements

#### Dev Docs

- [Collapse prerequisites and display step 1 in Quick Start Guide](https://github.com/strapi/documentation/pull/2296)

#### Strapi Cloud
- [Design system v2 and new header in cloud docs](https://github.com/strapi/documentation/pull/2298)
- [Deleted old cloud assets](https://github.com/strapi/documentation/pull/2297)
- [Add restoration timestamp to docs and ressources](https://github.com/strapi/documentation/pull/2292)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/giu1io" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/6680957?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="giu1io"/>
</a>
<a href="https://github.com/olegStrapier" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/148060535?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="olegStrapier"/>
</a>
<a href="https://github.com/pierreburgy" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/5550462?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pierreburgy"/>
</a>
</div>
<br/>
<br/>


## 5.2.1

<br/>

### <Icon name="pen-nib" /> Updated content

- [Add `strapi cloud environment link` to Cloud CLI](https://github.com/strapi/documentation/pull/2282)
- [Add new Cloud regions](https://github.com/strapi/documentation/pull/2290)

### <Icon name="broom" />Chore, fixes, typos, and other improvements

#### Dev Docs
- [Add useTypescriptMigrations](https://github.com/strapi/documentation/pull/2283)
- [Fix typo in retro-compatibility flag value](https://github.com/strapi/documentation/pull/2294)
- [Fix typo in example code for injectComponent in Admin Panel API docs ](https://github.com/strapi/documentation/pull/2287)
- [Fix outdated mention of Gold plan in SSO docs](https://github.com/strapi/documentation/pull/2286)
- [Fix locale param. example in Interactive Query Builder](https://github.com/strapi/documentation/pull/2285)
- [Fix discardDraft() Document Service API example](https://github.com/strapi/documentation/pull/2284)

#### Strapi Cloud
- [Update credit cards handling](https://github.com/strapi/documentation/pull/2262)

#### Repository
- [Add release notes script](https://github.com/strapi/documentation/pull/2289)

***
This release was made possible thanks to the following contributors. Thank you! ü´∂
<div>
<a href="https://github.com/DomDew" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/72755955?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="DomDew"/>
</a>
<a href="https://github.com/boiiiboi" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/87666954?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="boiiiboi"/>
</a>
<a href="https://github.com/Jimimimi" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/1778990?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Jimimimi"/>
</a>
<a href="https://github.com/gonbaum" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/14006828?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="gonbaum"/>
</a>
<a href="https://github.com/innerdvations" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/999278?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="innerdvations"/>
</a>
<a href="https://github.com/kibwashere" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/3426213?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="kibwashere"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
</div>
<br/>
<br/>


## 5.2.0

<br/>

### <Icon name="sparkle" /> New content

<br/>

#### Dev Docs

- [Add WIP API Reference and Guides for TypeScript](https://github.com/strapi/documentation/pull/2266)

### <Icon name="pen-nib" /> Updated content

<br/>

#### Dev Docs

- [Add Knex Config function support](https://github.com/strapi/documentation/pull/2252)

#### User Guide

- [Integration between the Releases and Review Workflows features](https://github.com/strapi/documentation/pull/2273)

### <Icon name="broom" />Chore, fixes, typos, and other improvements

<br/>

#### Cloud

- [Minor Cloud Docs changes](https://github.com/strapi/documentation/pull/2264)
- [Remove Strapi 5 warning for Cloud in FAQ](https://github.com/strapi/documentation/pull/2272)
- [Move custom cloud provider config warnings higher](https://github.com/strapi/documentation/pull/2278)

#### Dev Docs

- [Fix example request for update method in Document Service API](https://github.com/strapi/documentation/pull/2275)

#### Repo

- [Align navbar search box with 100% width](https://github.com/strapi/documentation/pull/2280)

***

This release was made possible thanks to the following contributors. Thank you! ü´∂

<div>
<a href="https://github.com/mukulpadwal" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/80583870?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="mukulpadwal"/>
</a>
<a href="https://github.com/dzakki" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/38948296?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="dzakki"/>
</a>
<a href="https://github.com/giu1io" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/6680957?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="giu1io"/>
</a>
<a href="https://github.com/innerdvations" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/999278?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="innerdvations"/>
</a>
<a href="https://github.com/derrickmehaffy" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/8593673?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="derrickmehaffy"/>
</a>
<a href="https://github.com/Convly" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/25851739?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Convly"/>
</a>
<a href="https://github.com/yanniskadiri" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/47896922?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="yanniskadiri"/>
</a>
</div>

<br/>
<br/>

## 5.1.3

<br/>

### <Icon name="broom" />Chore, fixes, typos, and other improvements

- [Improve instructions for upgrading to Apollo v4](https://github.com/strapi/documentation/pull/2271)
- [Fix code example in breaking change for new response format](https://github.com/strapi/documentation/pull/2270)
- [Update names of removed mutations in GraphQL breaking change](https://github.com/strapi/documentation/pull/2269)
- [Fix typo in a snippet used in Cloud docs](https://github.com/strapi/documentation/pull/2268)

***

This release was made possible thanks to the following contributors. Thank you! ü´∂

<div>
<a href="https://github.com/laurenskling" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/6753724?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="laurenskling"/>
</a>
<a href="https://github.com/xxtf1z" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/98784191?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="xxtf1z"/>
</a>
</div>

<br/>
<br/>

## 5.1.2

<br/>

### <Icon name="pen-nib" /> Updated content

<br/>

#### Dev Docs

- [Add support for 'latest' parameter in the upgrade tool](https://github.com/strapi/documentation/pull/2259)
- [Add example code and resulting screenshot for theme extension](https://github.com/strapi/documentation/pull/2261)

### <Icon name="broom" />Chore, fixes, typos, and other improvements

#### Strapi Cloud

- [Update cloud deployment logs screen](https://github.com/strapi/documentation/pull/2263)
- [Update confirmation modal text in Cloud Update Repository](https://github.com/strapi/documentation/pull/2258)

#### Repository

- [Restore bigger font-size for categories title in sidebar](https://github.com/strapi/documentation/pull/2260)

***

This release was made possible thanks to the following contributors. Thank you! ü´∂

<div>
<a href="https://github.com/Convly" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/25851739?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Convly"/>
</a>
<a href="https://github.com/giu1io" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/6680957?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="giu1io"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>

</div>

<br/>
<br/>

## 5.1.1

<br/>

### <Icon name="pen-nib" /> Updated content

<br/>

#### Strapi Cloud

* [List environments with Cloud CLI](https://github.com/strapi/documentation/pull/2239)

#### Dev Docs

* [`publicationAt` breaking change](https://github.com/strapi/documentation/pull/2249)

### <Icon name="broom" />Chore, fixes, typos, and other improvements

#### Strapi Cloud

* [Update wording on purchasable extra Seats](https://github.com/strapi/documentation/pull/2238)

#### Dev Docs

* [Clarify sorting for relational fields in the Content Manager list view](https://github.com/strapi/documentation/pull/2224)
* [Fix typo for `v4CompatibilityMode` flag](https://github.com/strapi/documentation/pull/2257)
* [Fix step-by-step v4 ‚Üí v5 migration (v4CompatibilityMode flag)](https://github.com/strapi/documentation/pull/2255)
* [Update environment declaration in Docker guide](https://github.com/strapi/documentation/pull/2253)
* [Fix createStrapi method in TypeScript development documentation](https://github.com/strapi/documentation/pull/2248)
* [Fix links in the REST API documentation](https://github.com/strapi/documentation/pull/2247)
* [Fix CheckPagePermissions code example in helper-plugin deprecation guide](https://github.com/strapi/documentation/pull/2244)
* [Fix typo for init command in Plugin SDK](https://github.com/strapi/documentation/pull/2243)
* [Add link to ms package for examples for JWT expiresIn](https://github.com/strapi/documentation/pull/2242)

#### Repository

* [Update LICENSE](https://github.com/strapi/documentation/pull/2251)


***

This release was made possible thanks to the following contributors. Thank you! ü´∂

<div>

<a href="https://github.com/viniciuspalma" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/3676032?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="viniciuspalma"/>
</a>
<a href="https://github.com/Patryk0494" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/74532122?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Patryk0494"/>
</a>
<a href="https://github.com/oyeamjad" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/2516337?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="oyeamjad"/>
</a>
<a href="https://github.com/paulislava" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/43218364?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="paulislava"/>
</a>
<a href="https://github.com/gurdiga" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/53922?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="gurdiga"/>
</a>
<a href="https://github.com/maccomaccomaccomacco" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/2686869?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="maccomaccomaccomacco"/>
</a>
<a href="https://github.com/derrickmehaffy" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/8593673?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="derrickmehaffy"/>
</a>
<a href="https://github.com/kibwashere" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/3426213?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="kibwashere"/>
</a>
<a href="https://github.com/gonbaum" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/14006828?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="gonbaum"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>

</div>

<br/>
<br/>

## 5.1.0

<br/>

### <Icon name="sparkle" /> New content

<br/>

#### Cloud Docs

* [Multi-Environments](https://github.com/strapi/documentation/pull/2229)

### <Icon name="pen-nib" /> Updated content

<br/>

#### User Guide

* [Mention Blocked status for Releases](https://github.com/strapi/documentation/pull/2235)

#### Dev Docs

* [Clarify helper-plugin migration guide](https://github.com/strapi/documentation/pull/2230)

### <Icon name="broom" />Chore, fixes, typos, and other improvements

<br/>

#### Dev Docs

* [Fix creating a custom provider example](https://github.com/strapi/documentation/pull/2237)
* [Fix pagination_next for first page of categories](https://github.com/strapi/documentation/pull/2234)
* [Fix SEO issues](https://github.com/strapi/documentation/pull/2233)
* [Fix links to strapi codebase](https://github.com/strapi/documentation/pull/2226)
* [Fix code example in general deployment guidelines](https://github.com/strapi/documentation/pull/2231)
* [Fix grammar in TypeScript development docs](https://github.com/strapi/documentation/pull/2232)

***

This release was made possible thanks to the following contributors. Thank you! ü´∂

<div>

<a href="https://github.com/ChristopheCVB" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/946345?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="ChristopheCVB"/>
</a>
<a href="https://github.com/imcarlosguerrero" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/173419460?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="imcarlosguerrero"/>
</a>
<a href="https://github.com/stefanhuber" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/5379359?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="stefanhuber"/>
</a>
<a href="https://github.com/butcherZ" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/8189028?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="butcherZ"/>
</a>
<a href="https://github.com/jhoward1994" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/48524071?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="jhoward1994"/>
</a>
<a href="https://github.com/meganelacheny" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/19183360?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="meganelacheny"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>

</div>

<br/>
<br/>

## 5.0.0

_The following is an extensive list of all the pull requests that were merged since we started working on Strapi 5 documentation. For a quicker tour, please refer to the [What's new page](/whats-new)._

### <Icon name="sparkle" /> New content

<br/>

#### Dev Docs

* [Breaking change for database columns](https://github.com/strapi/documentation/pull/2221)
* [Content Manager APIs](https://github.com/strapi/documentation/pull/2220)
* [Breaking change for removing the "shared population strategy" for components & dynamic zones](https://github.com/strapi/documentation/pull/2204)
* [Templates](https://github.com/strapi/documentation/pull/2192)
* [Upgrade section revamp](https://github.com/strapi/documentation/pull/2153)
* [Custom U&P providers](https://github.com/strapi/documentation/pull/2138)
* [Breaking change for server.proxy config](https://github.com/strapi/documentation/pull/2131)
* [New "Upgrades" section (replaces updates & migration) for Strapi 5](https://github.com/strapi/documentation/pull/2126)
* [New proxy configuration feature](https://github.com/strapi/documentation/pull/2124)
* [lockIcon ‚Üí licenseOnly breaking change](https://github.com/strapi/documentation/pull/2123)
* [Breaking change for default input validation](https://github.com/strapi/documentation/pull/2096)
* [Entity Service ‚Üí Document Service: Breaking change + migration reference](https://github.com/strapi/documentation/pull/2093)
* [Plugins migration summary](https://github.com/strapi/documentation/pull/2089)
* [Breaking change for better-sqlite3](https://github.com/strapi/documentation/pull/2083)
* [Breaking change for Admin RBAC updates](https://github.com/strapi/documentation/pull/2082)
* [Breaking change for model config path uses uid](https://github.com/strapi/documentation/pull/2055)
* [Breaking change for upgrade from apollo v3 to apollo v4](https://github.com/strapi/documentation/pull/2053)
* [Breaking change for removed `localizations` field](https://github.com/strapi/documentation/pull/2050)
* [Breaking change for server log level configuration](https://github.com/strapi/documentation/pull/2049)
* [Breaking change for the removed webpack aliases](https://github.com/strapi/documentation/pull/2047)
* [Breaking change for strict requirements on configuration filenames](https://github.com/strapi/documentation/pull/2009)
* [Breaking change about removed support for some env-only options](https://github.com/strapi/documentation/pull/2007)
* [Breaking change for no findPage() method in Document Service API](https://github.com/strapi/documentation/pull/2006)
* [Breaking change for sorting by id](https://github.com/strapi/documentation/pull/1999)
* [Breaking change for Vite as default bundler](https://github.com/strapi/documentation/pull/1998)
* [Breaking change for U&P register.allowedFields](https://github.com/strapi/documentation/pull/1997)
* [Breaking change for CM redux store](https://github.com/strapi/documentation/pull/1995)
* [Breaking change for `strapi.container`](https://github.com/strapi/documentation/pull/1994)
* [Breaking change for i18n CM locale parameter](https://github.com/strapi/documentation/pull/1991)
* [Breaking change for strapi exports](https://github.com/strapi/documentation/pull/1989)
* [Breaking change for removal of `isSupportedImage`](https://github.com/strapi/documentation/pull/1988)
* [Breaking change about react-router-dom 6](https://github.com/strapi/documentation/pull/1987)
* [Upgrade tool](https://github.com/strapi/documentation/pull/1945)
* [Document Service](https://github.com/strapi/documentation/pull/1935)
* [Breaking change for fetch](https://github.com/strapi/documentation/pull/1915)
* [Breaking change for MySQL v5 support drop](https://github.com/strapi/documentation/pull/1892)
* [Init. breaking changes pages for Strapi v4 ‚Üí v5 migration](https://github.com/strapi/documentation/pull/1896)
* [New v5 Dev Docs structure](https://github.com/strapi/documentation/pull/1811)

#### User Guide

* [Updated screenshots & last updates in User Guide](https://github.com/strapi/documentation/pull/2207)
* [Releases settings](https://github.com/strapi/documentation/pull/2120)

#### Cloud Docs

* [Port existing Cloud docs content from v4 website to website](https://github.com/strapi/documentation/pull/2154) 
* [Make main categories clickable in breadcrumbs](https://github.com/strapi/documentation/pull/2198)

#### Global

* [AI widget](https://github.com/strapi/documentation/pull/1898) 
* [Tagging system](https://github.com/strapi/documentation/pull/2076)
* [New homepage](https://github.com/strapi/documentation/pull/2087) 

### <Icon name="pen-nib" /> Updated content

<br/>

#### Dev Docs

* [Remove shared population strategy for dynamic zones](https://github.com/strapi/documentation/pull/2222)
* [Update breaking change for default server level log](https://github.com/strapi/documentation/pull/2216)
* [Update breaking change for reserved attributes and content-types names](https://github.com/strapi/documentation/pull/2215)
* [Update breaking change for `is-supported-image`](https://github.com/strapi/documentation/pull/2214)
* [Update codemods list](https://github.com/strapi/documentation/pull/2212)
* [Update some v5 migration and Plugin SDK docs](https://github.com/strapi/documentation/pull/2210)
* [Add more before examples for helper plugin migration](https://github.com/strapi/documentation/pull/2209)
* [Plugin migration updates](https://github.com/strapi/documentation/pull/2208)
* [Update the Quick Start Guide with Cloud CLI and new CLI prompts](https://github.com/strapi/documentation/pull/2203)
* [Update sdk-plugin init with new options](https://github.com/strapi/documentation/pull/2202)
* [Update helper plugin migration doc](https://github.com/strapi/documentation/pull/2200)
* [Update backend customization examples to Document Service API](https://github.com/strapi/documentation/pull/2196)
* [Add scope and warning details to the upgrade tool guide](https://github.com/strapi/documentation/pull/2195)
* [More examples for middlewares context to Document Service API](https://github.com/strapi/documentation/pull/2189)
* [Deprecate integration guides](https://github.com/strapi/documentation/pull/2173)
* [Transfer deployment guides to external resources](https://github.com/strapi/documentation/pull/2172)
* [Database lifecycles vs. Document Service middlewares](https://github.com/strapi/documentation/pull/2170)
* [Admin panel customization section rework](https://github.com/strapi/documentation/pull/2162)
* [Update REST API additional resources with new links and call to write](https://github.com/strapi/documentation/pull/2148)
* [Updates to the CLI installation guide](https://github.com/strapi/documentation/pull/2121)
* [FAQ section for 'Cannot find module @strapi/XXX' build error](https://github.com/strapi/documentation/pull/2116)
* [Update upgrade tool documentation with codemods updates](https://github.com/strapi/documentation/pull/2112)
* [Plugin CLI update for @strapi/sdk-plugin package](https://github.com/strapi/documentation/pull/2109)
* [Updates to relations in API docs](https://github.com/strapi/documentation/pull/2100)
* [Update doc service doc to match latest changes being prepared](https://github.com/strapi/documentation/pull/2074)
* [GraphQL updates](https://github.com/strapi/documentation/pull/2051)
* [REST API updates (incl. i18n and breaking changes)](https://github.com/strapi/documentation/pull/2038)
* [(no-)watch-admin and bundler updates](https://github.com/strapi/documentation/pull/2037)
* [Turn the TypeScript page into a section](https://github.com/strapi/documentation/pull/1913)
* [New Dev Docs introduction](https://github.com/strapi/documentation/pull/1911)
* [Update supported databases](https://github.com/strapi/documentation/pull/1887)

#### User Guide

* [Make main categories clickable in breadcrumbs](https://github.com/strapi/documentation/pull/2197)
* [Update whole content in User Guide](https://github.com/strapi/documentation/pull/2193)
* [Update Draft & Publish](https://github.com/strapi/documentation/pull/2027)

#### Cloud Docs

* [Make main categories clickable in breadcrumbs](https://github.com/strapi/documentation/pull/2198)

### <Icon name="broom" />Chore, fixes, typos, and other improvements

* [AI bot improvements](https://github.com/strapi/documentation/pull/2142)

***

This release was made possible thanks to the following contributors. Thank you! ü´∂

<div>
<a href="https://github.com/derrickmehaffy" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/8593673?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="derrickmehaffy"/>
</a>
<a href="https://github.com/pwizla" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/4233866?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="pwizla"/>
</a>
<a href="https://github.com/MbonuJennifer" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/94189270?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="MbonuJennifer"/>
</a>
<a href="https://github.com/innerdvations" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/999278?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="innerdvations"/>
</a>
<a href="https://github.com/alexandrebodin" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/6065744?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="alexandrebodin"/>
</a>
<a href="https://github.com/Convly" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/25851739?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="Convly"/>
</a>
<a href="https://github.com/meganelacheny" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/19183360?v=4" width="40" height="40" style={{borderRadius: '50%'}} alt="meganelacheny"/>
</a>
<a href="https://github.com/Bassel17" target="_blank">
    <img className="no-zoom" src="https://avatars.githubusercontent.com/u/70578187" width="40" height="40" style={{borderRadius: '50%'}} alt="Bassel17"/>
</a>
</div>

</div>


 This is the content for the doc docusaurus/docs/snippets/_do-not-migrate-to-v5-yet.md 

 :::danger Warning: Strapi 5 is not stable yet
It is strongly advised not to upgrade a critical or production-ready project from Strapi v4 to Strapi 5.

The content of migration resources might not be final yet. Migration resources are currently only provided to prepare you for the upgrade to Strapi 5 when it is released as a stable version.

Strapi 5 is currently only provided as a Release Candidate (RC) version and is not meant to be used in production yet.
:::


 This is the content for the doc docusaurus/docs/snippets/_not-updated-to-v5.md 

 :::callout üèó Work in progress
The content of this page might not be fully up-to-date with Strapi 5 yet.
:::


 This is the content for the doc docusaurus/docs/snippets/backend-custom-intro-crosslink.md 

 For a general overview and understanding of the Strapi backend elements, please refer to the backend customization [introduction](/cms/backend-customization) and [diagram](/cms/backend-customization#interactive-diagram).


 This is the content for the doc docusaurus/docs/snippets/backend-customization-feedback-cta.md 

 :::callout üí¨ Strapi team needs you to improve this documentation!
We are currently reworking the Backend Customization section of the Strapi documentation. If you would like to help, please feel free to fill in <ExternalLink to="https://forms.gle/YS8zGUrG6FQ72dmh8" text="this form"/> to share with us your opinions, needs and requests.
:::


 This is the content for the doc docusaurus/docs/snippets/breaking-change-page-intro.md 

 This page is part of the [breaking changes database](/cms/migration/v4-to-v5/breaking-changes) and provides information about the breaking change and additional instructions to migrate from Strapi v4 to Strapi 5.


 This is the content for the doc docusaurus/docs/snippets/breaking-change-page-migration-intro.md 

 This section regroups useful notes and procedures about the introduced breaking change.


 This is the content for the doc docusaurus/docs/snippets/build-npm-yarn.md 

 Run the following command in your project root directory to rebuild Strapi's admin panel:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn build
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run build
```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/snippets/codemods-modify-source-code.md 

 Codemods modify the plugin source code. Before running a command, make sure you have initialized a git repo, the working tree is clean, you've pushed your v3 plugin, and you are on a new branch.


 This is the content for the doc docusaurus/docs/snippets/consider-document-service.md 

 :::caution
In most cases you should not use the Query Engine API and rather use the [Document Service API](/cms/api/document-service).

Only use the Query Engine API if you exactly know what you are doing, for instance if you want to use a lower-level API that directly interacts with unique rows of the database.

Please keep in mind that the Query Engine API is not aware of the most advanced Strapi 5 features like Draft & Publish, Internationalization, Content History, and possibly more.
:::


 This is the content for the doc docusaurus/docs/snippets/consider-strapi-cloud.md 

 :::callout ‚òÅÔ∏è Strapi Cloud
Don't want to deploy Strapi by yourself? Use [Strapi Cloud](/cloud/intro) to deploy and host your project.
:::


 This is the content for the doc docusaurus/docs/snippets/content-source-map-requirements.md 

 :::prerequisites

The Content Source Map plugin requires:

- A Strapi <EnterpriseBadge /> licence
- A website deployed on <ExternalLink to="https://vercel.com/docs/workflow-collaboration/visual-editing" text="Vercel"/> with a Vercel Pro or Enterprise plan

:::


 This is the content for the doc docusaurus/docs/snippets/custom-field-requires-plugin.md 

 Registering a custom field through a plugin requires creating and enabling a plugin (see [Plugins development](/cms/plugins-development/create-a-plugin)).


 This is the content for the doc docusaurus/docs/snippets/database-require.md 

 | Database   | Recommended | Minimum |
| ---------- | ----------- | ------- |
| MySQL      | 8.0         | 8.0     |
| MariaDB    | 10.6        | 10.5    |
| PostgreSQL | 14.0        | 12.0    |
| SQLite     | 3           | 3       |


 This is the content for the doc docusaurus/docs/snippets/deep-filtering-blog.md 

 :::strapi Deep filtering with the various APIs
For examples of how to deep filter with the various APIs, please refer to <ExternalLink to="https://strapi.io/blog/deep-filtering-alpha-26" text="this blog article"/>.
:::

 This is the content for the doc docusaurus/docs/snippets/develop-npm-yarn.md 

 Run the following command in your project root directory to restart the application:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn develop
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm run develop
```

</TabItem>

</Tabs>


 This is the content for the doc docusaurus/docs/snippets/docker-env-table.md 

 The following environment variables are required in order to run Strapi in a Docker container:

| Variable name | Description |
|---------------|-------------|
| `NODE_ENV` | The environment in which the application is running. |
| `DATABASE_CLIENT` | The database client to use. |
| `DATABASE_HOST` | The database host. |
| `DATABASE_PORT` | The database port. |
| `DATABASE_NAME` | The database name. |
| `DATABASE_USERNAME` | The database username. |
| `DATABASE_PASSWORD` | The database password. |
| `JWT_SECRET` | The secret used to sign the JWT for the Users-Permissions plugin. |
| `ADMIN_JWT_SECRET` | The secret used to sign the JWT for the Admin panel. |
| `APP_KEYS` | The secret keys used to sign the session cookies. |

You can also set some [optional environment variables](/cms/configurations/environment#strapi).


 This is the content for the doc docusaurus/docs/snippets/entity-query-knex.md 

 Strapi v4 offers several layers to interact with the backend and build your queries:

* The Document Service API is the recommended API to interact with your application's database. The Document Service is the layer that handles Strapi's document model and the complex content structures like components and dynamic zones, which the lower-level layers are not aware of.
* The Query Engine API interacts with the database layer at a lower level and is used under the hood to execute database queries. It gives unrestricted internal access to the database layer, but should be used only if the Document Service API does not cover your use case.
* If you need direct access to `knex` functions, use `strapi.db.connection`.


 This is the content for the doc docusaurus/docs/snippets/entity-service-deprecated.md 

 :::caution
The Entity Service API is deprecated in Strapi v5. Please consider using the [Document Service API](/cms/api/document-service) instead.
:::


 This is the content for the doc docusaurus/docs/snippets/hardware-require.md 

 | Hardware | Recommended | Minimum |
|----------|-------------|---------|
| CPU      |  2+ cores   | 1 core  |
| Memory   | 4GB+        | 2GB     |
| Disk     |  32GB+      | 8GB     |

 This is the content for the doc docusaurus/docs/snippets/hot-reloading-admin-panel.md 

 :::tip Tip: Hot reloading while developing
In Strapi 5, the server runs in `watch-admin` mode by default, so the admin panel auto-reloads whenever you change its code. This simplifies admin panel and front-end plugins development. To disable this, run `yarn develop --no-watch-admin` (see [CLI reference](/cms/cli#strapi-develop)).
:::


 This is the content for the doc docusaurus/docs/snippets/id-in-responses.md 

 :::note
Though it's recommended to target entries by their `documentId` in Strapi 5, entries might still have an `id` field, and you will see it in the returned response. This should ease your transition from Strapi 4. Please refer to the [breaking change entry](/cms/migration/v4-to-v5/breaking-changes/use-document-id) for more details.
:::


 This is the content for the doc docusaurus/docs/snippets/install-npm-yarn.md 

 Install the upgraded version:

<Tabs groupId="yarn-npm">

<TabItem value="yarn" label="yarn">

```bash
yarn
```

</TabItem>

<TabItem value="npm" label="npm">

```bash
npm install
```

</TabItem>

</Tabs>

:::tip
If the operation doesn't work, try removing your `yarn.lock` or `package-lock.json`. If that doesn't help, remove the `node_modules` folder as well and try again.
:::


 This is the content for the doc docusaurus/docs/snippets/installation-prerequisites.md 

 Before installing Strapi, the following requirements must be installed on your computer:

- <ExternalLink to="https://nodejs.org" text="Node.js"/>: Only <ExternalLink to="https://nodejs.org/en/about/previous-releases" text="Active LTS or Maintenance LTS versions"/> are supported (currently `v20` and `v22`). Odd-number releases of Node, known as "current" versions of Node.js, are not supported (e.g. v21, v23).
- Your preferred Node.js package manager:
    - <ExternalLink to="https://docs.npmjs.com/cli/v6/commands/npm-install" text="npm"/> (`v6` and above)
    - <ExternalLink to="https://yarnpkg.com/getting-started/install" text="yarn"/>
    - <ExternalLink to="https://pnpm.io/" text="pnpm" />
- <ExternalLink to="https://www.python.org/downloads/" text="Python"/> (if using a SQLite database)


 This is the content for the doc docusaurus/docs/snippets/invoices-statuses.md 

 Invoices can have any of the following statuses:

- Paid: the payment has been done and the invoice is available, no additional action is required.
- Payment pending: the invoice is not complete or validated yet <!-- need more info: what can the user do if the invoice is in "payment pending"? -->
- Payment due: the payment didn't go through and needs to be fixed <!-- need more info: is the project automatically suspended? what can the user do? -->
- Not paid: the payment has failed and won't automatically be retried <!-- also need more info potentially -->
- Voided: the invoice has been cancelled.

<!-- ! There is no download icon like this in Phosphor Icons ü§∑  -->
:::tip
Click the ![download icon](/img/assets/icons/download.svg) icon to download an invoice.
:::


 This is the content for the doc docusaurus/docs/snippets/managing-relations.md 

 :::tip
In the `data` object, relations can be managed with the `connect`, `disconnect`, and `set` parameters using the syntax described for the REST API (see [managing relations](/cms/api/rest/relations)).
:::


 This is the content for the doc docusaurus/docs/snippets/media-library-providers-list.md 

 By default Strapi provides a provider that uploads files to a local `public/uploads/` directory in your Strapi project. Additional providers are available should you want to upload your files to another location.

The providers maintained by Strapi are the following. Clicking on a card will redirect you to their Strapi Marketplace or npm page:

<CustomDocCardsWrapper>
<CustomDocCard 
  icon="shopping-cart" 
  title="Amazon S3" 
  description="Official provider for file uploads to Amazon S3."
  link="https://market.strapi.io/providers/@strapi-provider-upload-aws-s3"
/>
<CustomDocCard 
  icon="shopping-cart" 
  title="Cloudinary" 
  description="Official provider for media management with Cloudinary."
  link="https://market.strapi.io/providers/@strapi-provider-upload-cloudinary"
/>
<CustomDocCard 
  icon="shopping-cart" 
  title="Local" 
  description="Default provider for storing files locally on the server."
  link="https://www.npmjs.com/package/@strapi/provider-upload-local"
/>
</CustomDocCardsWrapper>

 This is the content for the doc docusaurus/docs/snippets/middleware-types.md 

 :::strapi Different types of middlewares

In Strapi, 3 middleware concepts coexist:

- **Global middlewares** are [configured and enabled](/cms/configurations/middlewares) for the entire Strapi server application. These middlewares can be applied at the application level or at the API level. <br/>The present documentation describes how to implement them.<br/>Plugins can also add global middlewares (see [Server API documentation](/cms/plugins-development/server-api)).

- **Route middlewares** have a more limited scope and are configured and used as middlewares at the route level. They are described in the [routes documentation](/cms/backend-customization/routes#middlewares).

- **Document Service middlewares** apply to the Document Service API and have their own [implementation](/cms/api/document-service/middlewares) and related [lifecycle hooks](/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service#table).

:::


 This is the content for the doc docusaurus/docs/snippets/migrate-plugins-extension-caution.md 

 :::caution
 [Plugins extension](/cms/plugins-development/plugins-extension) that create custom code or modify existing code, will need to be updated and compared to the changes in the repository. Not updating the plugin extensions could break the application.
:::


 This is the content for the doc docusaurus/docs/snippets/operating-system-require.md 

 | Operating System |  Recommended |Minimum |
|------------------|-------------|---------|
| Ubuntu (LTS)     |  22.04      | 20.04   |
| Debian           |  11.x       | 10.x    |
| CentOS/RHEL      |  9.x        | 8.x     |
| macOS            |  11.0       | 10.15   |
| Windows Desktop  |  11         | 10      |
| Windows Server   |  2022       | 2019    |

 This is the content for the doc docusaurus/docs/snippets/qs-for-query-body.md 

 The query URL above was built using <ExternalLink to="https://github.com/ljharb/qs" text="the `qs` library"/>.
`qs` can be run locally on your machine, as shown in the following code example, or you can use our **[interactive query builder](/cms/api/rest/interactive-query-builder)** online tool.


 This is the content for the doc docusaurus/docs/snippets/qs-for-query-title.md 

 JavaScript query (built with the qs library):


 This is the content for the doc docusaurus/docs/snippets/qs-intro-full.md 

 Strapi takes advantage of the ability of <ExternalLink to="https://github.com/ljharb/qs" text="the `qs` library"/> to parse nested objects to create more complex queries.

Use `qs` directly to generate complex queries instead of creating them manually. Examples in this documentation showcase how you can use `qs`.

You can also use the [interactive query builder](/cms/api/rest/interactive-query-builder) if you prefer playing with our online tool instead of generating queries with `qs` on your machine.


 This is the content for the doc docusaurus/docs/snippets/qs-intro-short.md 

 Strapi takes advantage of the ability of <ExternalLink to="https://github.com/ljharb/qs" text="the `qs` library"/> to parse nested objects to create more complex queries.
Use `qs` directly to generate complex queries instead of creating them manually.


 This is the content for the doc docusaurus/docs/snippets/recommend-entity-service.md 

 :::strapi Have you considered the Document Service API?
 The [Document Service API](/cms/api/document-service) is the recommended API to interact with your application's database. Only use the Query Engine API if the Document Service API does not cover your use case.
:::


 This is the content for the doc docusaurus/docs/snippets/supported-databases.md 

 | Database   | Recommended | Minimum |
|------------|-------------|---------|
| MySQL      | 8.4         | 8.0     |
| MariaDB    | 11.4        | 10.3    |
| PostgreSQL | 17.0        | 14.0    |
| SQLite     | 3           | 3       |

Strapi does not support MongoDB (or any NoSQL databases), nor does it support any "Cloud Native" databases (e.g., Amazon Aurora, Google Cloud SQL, etc.).

 This is the content for the doc docusaurus/docs/snippets/temp-upgrade-rc.md 

 :::tip
Since Strapi 5 is still released as a release candidate (RC), ensure you use the `@rc` tag with the package, as in: `npx @strapi/upgrade@rc minor` or `npx @strapi/upgrade@rc major` . Once Strapi 5 is out as a stable version, the command will actually be as described above.
:::


 This is the content for the doc docusaurus/docs/snippets/u-and-p-provider-config-done.md 

 Your configuration is done.
Launch the backend and the <ExternalLink to="https://github.com/strapi/strapi-examples/tree/master/examples/login-react" text="react login example application"/>, go to `http://localhost:3000` and try to connect to the provider you configured.


 This is the content for the doc docusaurus/docs/whats-new.md 

 ---
custom_edit_url: null
---

<br/>

# What's new in Strapi docs?

Strapi 5 brings many new features and improvements, and this page quickly highlights the most important documentation changes.

<Icon name="newspaper" /> The **[Draft & Publish](/cms/features/draft-and-publish)** feature has been fully reworked. When Draft & Publish is enabled, the Content Manager edit view shows 2 different tabs, one for the draft version and one for the published version, and both can handle different content.

<Icon name="magic-wand"/> The new **[Content History](/cms/features/content-history)** feature allows you to view and restore previous versions of your content from the Content Manager.

<Icon name="eye" /> The new **[Preview](/cms/features/preview)** feature allows you to preview your content in your front end application directly from Strapi's admin panel.

<Icon name="file"/> Strapi 5 now use **[documents](/cms/api/document)** and introduces a new **[Document Service API](/cms/api/document-service)** to replace the Entity Service API from v4, leveraging the new Draft & Publish system and paving the way for more upcoming features.

<Icon name="detective"/> The **[REST API](/cms/api/rest)** and **[GraphQL API](/cms/api/graphql)** have been updated, with a simplified response data format for both and partial support for Relay-style queries for GraphQL.

<Icon name="plugs" /> The **[Strapi Client](/cms/api/client)** library simplifies interactions with your Strapi back end, providing a way to fetch, create, update, and delete content.

<Icon name="puzzle-piece" /> The **[Plugin SDK](/cms/plugins-development/plugin-sdk)** is a new CLI tool that helps you develop and publish Strapi plugins.

<Icon name="escalator-up" /> Another whole new CLI **[upgrade tool](/cms/upgrade-tool)** will help you migrate to any patch, minor, and major version of Strapi, automating most of the common tasks through codemods.

<Icon name="hard-hat" /> Also, we have some resources ready to help you **[upgrade to Strapi 5](/cms/migration/v4-to-v5/introduction-and-faq)**, including a [step-by-step guide](/cms/migration/v4-to-v5/step-by-step), a list of [breaking changes](/cms/migration/v4-to-v5/breaking-changes) and [specific resources](/cms/migration/v4-to-v5/additional-resources/introduction) to read for when you will consider upgrading to Strapi 5.

<Icon name="tag" /> We introduced a new **tagging system** to provide another layer of information architecture. Tags can be found at the bottom of each page. Clicking on a tag will point you to an index page listing all pages with the same tag. The list of all available tags is visible by visiting the [/tags](/tags) page.

<Icon name="plus" /> You will also soon find more **official guides** and more references to **external resources** (contributor documentation, design system documentation, and blog articles) throughout the docs pages.

<Icon name="call-bell" /> Also, last but not least, you might have noticed that the search bar now sits in the left sidebar and combines 2 buttons: the left button, **<Icon name="magnifying-glass" classes="ph-light" /> Search**, triggers a regular search, while the right part is our new AI-based chatbot! Click **<Icon name="sparkle"/> Ask AI** to ask your questions. The chatbot keeps the context of previous answers, so you can ask follow-up questions as long as you don't close the chatbot window.


 This is the content for the doc docusaurus/scripts/all-urls-extractor/README.md 

 # Docusaurus URL Extraction Script

A Node.js script to extract all URLs from your Docusaurus documentation, including anchors to headings (H2-H6) on each page.

## Prerequisites

- Node.js installed
- A Docusaurus project with a generated build

## Installation

1. Create a `scripts` folder at the root of your Docusaurus project if it doesn't exist yet:
```bash
mkdir scripts
```

2. Copy the `extract-urls.js` file into this folder.

## Usage

1. First, generate a build of your documentation:
```bash
npm run build
# or
yarn build
```

2. Run the script:
```bash
node scripts/extract-urls.js
```

The script will generate an `all-urls.txt` file in the `scripts/` folder containing:
- One URL per line
- Main page URLs
- URLs with anchors to each heading (H2-H6)

Example output:
```
/docs/intro
/docs/intro#getting-started
/docs/intro#installation
/docs/advanced
/docs/advanced#configuration
```

## How it Works

The script:
1. Walks through all HTML files generated in the `build/` folder
2. Extracts each page URL based on the file structure
3. Parses the HTML content to find all headings with IDs
4. Generates corresponding anchor URLs

## Troubleshooting

If you get a "no such file or directory" error, check that:
1. You are at the root of your Docusaurus project
2. You have run `npm run build` before executing the script
3. The `build/` folder exists and contains HTML files

 This is the content for the doc docusaurus/scripts/redirects-utilities/check-redirections-existence/README.md 

 # Docusaurus Redirect Checker Script

A Node.js script that helps you identify URLs in your Docusaurus documentation that don't have corresponding redirects configured. The script checks both `docusaurus.config.js` and `vercel.json` for existing redirects.

## Features

- Checks URLs against both Docusaurus and Vercel redirects
- Smart anchor handling (if a base URL has a redirect, all its anchors are considered covered)
- Configurable exclusions for folders and patterns
- Grouped reporting by base URLs
- Generates ready-to-use redirect configurations

## Prerequisites

- Node.js installed
- A Docusaurus project
- The `all-urls.txt` file generated by the URL extraction script
- Either `docusaurus.config.js` or `vercel.json` (or both) with redirect configurations

## Installation

1. Copy the `check-redirects.js` file into your `scripts` folder, alongside the URL extraction script (found in the `/all-urls-extractor` folder).

## Configuration

Create a `redirect-config.json` file in your `scripts` folder to customize the script's behavior:

```json
{
    "excludeFolders": [
        "cloud",
        "legacy",
        "internal"
    ],
    "exclude": [
        "/test-",
        "/draft/"
    ]
}
```

### Configuration Options

- `excludeFolders`: Array of folder names to exclude from the analysis
  - URLs starting with these folder names will be ignored
  - Example: `["cloud"]` will exclude "/cloud/doc1", "/cloud/doc2", etc.

- `exclude`: Array of patterns to exclude from the analysis
  - URLs containing these patterns will be ignored
  - Example: `["/test-"]` will exclude "/docs/test-page", "/test-feature", etc.

## Usage

1. Make sure you've run the URL extraction script first:
```bash
node scripts/extract-urls.js
```

2. (Optional) Create and configure `redirect-config.json`

3. Run the redirect checker:
```bash
node scripts/check-redirects.js
```

The script will generate a `redirect-analysis.md` file in your `scripts` folder.

## Understanding the Report

The generated report includes several sections:

### 1. Configuration Overview
Shows which folders and patterns are being excluded from the analysis.

### 2. Summary Statistics
```markdown
## Summary

- Total URLs found: 150
- URLs ignored (based on redirect-config.json): 25
- URLs to process: 125
- Existing redirects in docusaurus.config.js: 45
- Existing redirects in vercel.json: 30
- Base URLs without redirects: 20
- Total URLs without redirects: 75
```

### 3. Missing URLs (Grouped by Base URL)
```markdown
### /docs/api/service
Anchors:
- /docs/api/service#parameters
- /docs/api/service#responses
```

### 4. Configuration Templates
Provides ready-to-use configurations for both Docusaurus and Vercel, including only base URLs (anchors are handled automatically).

## Anchor Handling

The script implements smart anchor handling:
- If a base URL has a redirect (e.g., `/docs/api`), all its anchors (e.g., `/docs/api#usage`, `/docs/api#examples`) are automatically considered covered
- Only base URLs without redirects are reported as missing
- Anchors are grouped under their base URLs in the report for better visibility

## Supported Redirect Formats

### Docusaurus Format
```js
// Object format
{
  from: '/old-path',
  to: '/new-path',
}

// Array format
['/old-path', '/new-path']

// Multiple 'from' paths
{
  from: ['/old-path', '/another-old-path'],
  to: '/new-path',
}
```

### Vercel Format
```json
{
  "redirects": [
    {
      "source": "/old-path",
      "destination": "/new-path",
      "permanent": true
    }
  ]
}
```

## Troubleshooting

If you get any errors, check that:
1. You've run the URL extraction script first
2. Both scripts are in the `scripts/` folder
3. Your configuration files exist and are valid:
   - `docusaurus.config.js` (optional)
   - `vercel.json` (optional)
   - `redirect-config.json` (optional)
4. You're running the script from the root of your Docusaurus project

## Report Output

The generated `redirect-analysis.md` file is:
- Compatible with GitHub/GitLab Markdown viewers
- Easy to convert to other formats (PDF, HTML)
- Structured for easy reading and analysis
- Includes statistics about ignored URLs
- Groups missing URLs by their base URL
- Provides ready-to-use configuration templates


 This is the content for the doc docusaurus/scripts/redirects-utilities/docusaurus-vercel-converter/README.md 

 # Redirects Format Converter

A Node.js script that converts redirect rules between different formats:
- source/destination (Vercel format)
- from/to (JavaScript module format)

## Features

- Converts between different redirect formats
- Configurable input and output files
- Supports both JSON and JavaScript module formats
- Preserves redirect rules structure
- Provides conversion statistics

## Prerequisites

- Node.js installed on your system

## Usage

### Basic Usage

From this folder, run:

```bash
node docusaurus-vercel-converter.js
```

This will use default settings:
- Input: `vercel.json`
- Output: `redirects.js`
- Mode: `to-from` (converts from source/destination to from/to)

### Custom Configuration

You can customize the behavior using command line arguments:

```bash
node docusaurus-vercel-converter.js --input=my-redirects.json --output=converted.js --mode=to-source
```

### Available Options

- `--input`: Input file name (default: 'vercel.json')
- `--output`: Output file name (default: 'redirects.js')
- `--mode`: Conversion mode (default: 'to-from')
  - `to-from`: Converts from source/destination to from/to
  - `to-source`: Converts from from/to to source/destination
- `--format`: Output format (default: based on file extension)
  - `js`: JavaScript module format
  - `json`: JSON format

## Input/Output Formats

### Input Format (source/destination)
```json
{
  "redirects": [
    {
      "source": "/old-path",
      "destination": "/new-path"
    }
  ]
}
```

### Output Format (from/to)
```javascript
module.exports = [
  {
    "from": "/old-path",
    "to": "/new-path"
  }
];
```

## Error Handling

The script includes error handling for:
- File reading/writing issues
- Invalid JSON/JavaScript syntax
- Missing required properties
- Invalid configuration

If an error occurs, the script will display an error message and exit with code 1.

## Examples

1. Convert from Vercel format to module format:
```bash
node docusaurus-vercel-converter.js --input=vercel.json --output=redirects.js --mode=to-from
```

2. Convert from module format to Vercel format:
```bash
node docusaurus-vercel-converter.js --input=redirects.js --output=vercel.json --mode=to-source
```

## Contributing

Feel free to submit issues and enhancement requests!


 This is the content for the doc docusaurus/scripts/redirects-utilities/redirection-analysis/README.md 

 # Redirect Analysis and Generator

The `redirect-analyzer.js` script analyzes the content of two different branches to automatically generate Vercel redirections.

## Prerequisites

- Node.js installed on your machine
- Both branches already cloned locally

## Installation

1. Clone both branches in separate folders:
```bash
# For the old structure
git clone [your-repo] old-structure
cd old-structure
git checkout [branch-name-with-the-old-structure]
cd ..

# For the new structure
git clone [your-repo] new-structure
cd new-structure
git checkout [branch-name-with-the-new-structure]
cd ..
```

2. Install dependencies:
```bash
yarn
```

## Usage

1. Run the script:
```bash
node redirect-analyzer.js
```

2. The script will:
   - Archive previous analysis reports
   - Scan files in both structures
   - Analyze content similarities
   - Generate redirections

3. Generated files will be in the `results/` folder:
   - `vercel.json`: redirections to use with Vercel
   - `redirect-analysis-report.md`: detailed redirections report
   - `redirect-analysis-detailed.log`: complete technical log

Previous reports are automatically archived in `results/archives/` with a timestamp.

## Configuration

If needed, you can adjust in the script:
- `IGNORED_DIRECTORIES`: directories to ignore
- `IGNORED_FILES`: files to ignore
- `SIMILARITY_THRESHOLD`: similarity threshold (0 to 1)
- `MANUAL_REDIRECTS`: manual redirections to force

## Understanding the Report

The generated report contains:
- Redirections identified by directory
- Files without matches
- Redirection statistics
- Required actions if any

## Output Example

The script provides real-time progress in the terminal:
```
Starting redirections analysis...
[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 100% | Scanning files
[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë] 80%  | Analyzing matches
[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë] 70%  | Generating redirections

Process completed successfully!
- Detailed log: results/redirect-analysis-detailed.log
- Final report: results/redirect-analysis-report.md
- Redirections: results/vercel.json
```


 This is the content for the doc docusaurus/scripts/redirects-utilities/redirects-organizer/README.md 

 # Redirects Organizer

This script automatically organizes redirections in a JavaScript file by analyzing URL patterns and grouping similar redirections together. It helps maintain large redirection files by categorizing them in a logical way.

## Features

- Automatically detects URL patterns to create meaningful categories
- Preserves original header comments
- Sorts categories by number of redirections
- Creates a clean, organized output file
- Provides statistics about detected categories

## Prerequisites

- Node.js installed on your system
- A redirects.js file in the same directory as the script

## Installation

1. Place the `organize-redirects.js` script in the same directory as your `redirects.js` file
2. Make sure your `redirects.js` file follows this format:
```javascript
module.exports = [
  {
    "from": "/old-url",
    "to": "/new-url"
  },
  // ... more redirections
];
```

## Usage

Run the script using Node.js:

```bash
node redirects-organizer.js
```

The script will:
1. Read your `redirects.js` file
2. Analyze all URLs to detect patterns
3. Group redirections into categories
4. Create a new file called `redirects.organized.js`
5. Display statistics about the detected categories in the console

## Output

The script creates a new file `redirects.organized.js` with the following structure:

```javascript
/**
 * [Original header comment preserved]
 */
module.exports = [

  // Developer Documentation - API
  {
    "from": "/developer-docs/api/old-path",
    "to": "/dev-docs/api/new-path"
  },

  // Backend Customization
  {
    "from": "/developer-docs/backend/old-path",
    "to": "/dev-docs/backend/new-path"
  },
  // ... more organized redirections
];
```

## Categories

Categories are automatically created based on URL patterns. Common categories include:
- Developer Documentation (with sub-categories like API, Backend, etc.)
- User Documentation
- Backend Customization
- Core Redirections
- And more, depending on your URLs

## Error Handling

The script includes error handling for:
- File reading issues
- Invalid JavaScript syntax
- Parsing errors

If an error occurs, the script will display an error message and exit with code 1.

## Contributing

Feel free to submit issues and enhancement requests!


 This is the content for the doc docusaurus/scripts/redirects-utilities/remove-redirects-vercel-duplicates/README.md 

 # Redirect Deduplication Script

A Node.js script that removes duplicate redirects between `redirects.js` and `vercel.json` files. The script identifies and removes redirects from `vercel.json` that already exist in `redirects.js`.

## Features

- Normalizes paths by removing trailing slashes for consistent comparison
- Handles both Docusaurus (`from/to`) and Vercel (`source/destination`) redirect formats
- Preserves other configurations in `vercel.json`
- Generates statistics about the deduplication process
- Creates a new file instead of overwriting the original

## Prerequisites

- Node.js installed
- Source files:
  - `redirects.js`: A JavaScript file with Docusaurus-style redirects
  - `vercel.json`: A JSON file with Vercel redirect configurations

## Usage

1. Place your source files in the same directory as the script:

`redirects.js` example:
```js
module.exports = [
  {
    from: '/old-path',
    to: '/new-path'
  }
]
```

`vercel.json` example:
```json
{
  "redirects": [
    {
      "source": "/old-path",
      "destination": "/new-path",
      "permanent": true
    }
  ]
}
```

2. Run the script:
```bash
node compare-redirects-and-vercel.js
```

## Output

The script will:
1. Create a new file `vercel.unique.json` containing only unique redirects
2. Print statistics about the deduplication process:
```
Statistics:
Redirections in redirects.js: 10
Initial redirections in vercel.json: 15
Redirections kept in vercel.unique.json: 8
Redirections removed: 7
```

## How it Works

1. Reads and parses both input files
2. Normalizes all paths by removing trailing slashes
3. Compares redirects using both `from/to` and `source/destination` formats
4. Creates a new Vercel config file with only unique redirects
5. Preserves all other Vercel configurations
6. Reports statistics about the process

## Supported Redirect Formats

### Docusaurus Format (`redirects.js`)
```js
{
  from: '/old-path',
  to: '/new-path'
}
```

### Vercel Format (`vercel.json`)
```json
{
  "source": "/old-path",
  "destination": "/new-path",
  "permanent": true
}
```

## Error Handling

The script includes error handling for common issues:
- File reading errors
- JSON parsing errors
- JavaScript evaluation errors

If an error occurs, it will be displayed with a descriptive message.

## Best Practices

1. Always backup your files before running the script
2. Verify the contents of `vercel.unique.json` before using it
3. Keep your redirect formats consistent within each file
4. Use absolute paths in your redirects

## Troubleshooting

If you encounter errors:
1. Ensure both source files exist in the same directory as the script
2. Verify that `redirects.js` exports a valid array of redirects
3. Check that `vercel.json` is valid JSON
4. Confirm that all paths use the correct format (starting with `/`)
